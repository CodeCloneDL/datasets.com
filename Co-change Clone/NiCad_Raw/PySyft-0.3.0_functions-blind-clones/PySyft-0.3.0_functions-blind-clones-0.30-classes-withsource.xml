<clones>
<systeminfo processor="nicad6" system="PySyft-0.3.0" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="910" npairs="83"/>
<runinfo ncompares="11249" cputime="47849"/>
<classinfo nclasses="37"/>

<class classid="1" nclones="3" nlines="10" similarity="90">
<source file="systems/PySyft-0.3.0/src/syft/lib/torch/parameter.py" startline="61" endline="72" pcid="6">
    def construct_new_object(
        id: UID,
        data: StorableObject,
        description: Optional[str],
        tags: Optional[List[str]],
    ) -> StorableObject:
        data.id = id
        data.tags = tags
        data.description = description
        return data


</source>
<source file="systems/PySyft-0.3.0/src/syft/lib/torch/uppercase_tensor.py" startline="62" endline="73" pcid="12">
    def construct_new_object(
        id: UID,
        data: StorableObject,
        description: Optional[str],
        tags: Optional[List[str]],
    ) -> StorableObject:
        data.id = id
        data.tags = tags
        data.description = description
        return data


</source>
<source file="systems/PySyft-0.3.0/src/syft/lib/python/complex.py" startline="195" endline="206" pcid="54">
    def construct_new_object(
        id: UID,
        data: StorableObject,
        description: Optional[str],
        tags: Optional[List[str]],
    ) -> StorableObject:
        setattr(data, "_id", id)
        data.tags = tags
        data.description = description
        return data


</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.3.0/src/syft/lib/python/util.py" startline="26" endline="43" pcid="56">
def downcast_args_and_kwargs(
    args: Union[List[Any], Tuple[Any, ...]], kwargs: Dict[Any, Any]
) -> Tuple[List[Any], Dict[Any, Any]]:
    # when we try to handle primitives they often need to be converted to PyPrimitive
    # first so they can be serialized and sent around
    downcasted_args = []
    downcasted_kwargs = {}
    for arg in args:
        # check if its primitive
        downcasted_args.append(downcast(value=arg))

    for k, arg in kwargs.items():
        # check if its primitive
        downcasted_kwargs[k] = downcast(value=arg)

    return (downcasted_args, downcasted_kwargs)


</source>
<source file="systems/PySyft-0.3.0/src/syft/lib/python/util.py" startline="51" endline="66" pcid="58">
def upcast_args_and_kwargs(
    args: Union[List[Any], Tuple[Any, ...]], kwargs: Dict[Any, Any]
) -> Tuple[List[Any], Dict[Any, Any]]:
    # When we invoke remote methods that use C code and cannot utilise our wrapped
    # types through duck typing, we must convert them to the their original form.
    upcasted_args = []
    upcasted_kwargs = {}
    for arg in args:
        # try to upcast if possible
        upcasted_args.append(upcast(value=arg))

    for k, arg in kwargs.items():
        # try to upcast if possible
        upcasted_kwargs[k] = upcast(value=arg)

    return (upcasted_args, upcasted_kwargs)
</source>
</class>

<class classid="3" nclones="2" nlines="13" similarity="76">
<source file="systems/PySyft-0.3.0/src/syft/lib/python/__init__.py" startline="55" endline="70" pcid="75">
def add_modules(ast: Globals, modules: TypeList[str]) -> None:
    for module in modules:
        parent = get_parent(module, ast)
        attr_name = module.rsplit(".", 1)[-1]

        parent.add_attr(
            attr_name=attr_name,
            attr=Module(
                attr_name,
                module,
                None,
                return_type_name="",
            ),
        )


</source>
<source file="systems/PySyft-0.3.0/src/syft/lib/python/__init__.py" startline="71" endline="86" pcid="76">
def add_classes(ast: Globals, paths: TypeList[TypeTuple[str, str, Any]]) -> None:
    for path, return_type, ref in paths:
        parent = get_parent(path, ast)
        attr_name = path.rsplit(".", 1)[-1]

        parent.add_attr(
            attr_name=attr_name,
            attr=Class(
                attr_name,
                path,
                ref,  # type: ignore
                return_type_name=return_type,
            ),
        )


</source>
</class>

<class classid="4" nclones="6" nlines="10" similarity="81">
<source file="systems/PySyft-0.3.0/src/syft/core/node/domain/service/accept_or_deny_request_service.py" startline="34" endline="46" pcid="214">
    def __init__(
        self,
        accept: bool,
        request_id: UID,
        address: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)

        # if false, deny the request
        self.accept = accept
        self.request_id = request_id

</source>
<source file="systems/PySyft-0.3.0/src/syft/core/node/common/action/exception_action.py" startline="28" endline="40" pcid="229">
    def __init__(
        self,
        address: Address,
        msg_id_causing_exception: UID,
        exception_type: Type,
        exception_msg: str,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.msg_id_causing_exception = msg_id_causing_exception
        self.exception_type = exception_type
        self.exception_msg = exception_msg

</source>
<source file="systems/PySyft-0.3.0/src/syft/core/node/common/service/obj_search_permission_service.py" startline="33" endline="46" pcid="255">
    def __init__(
        self,
        add_instead_of_remove: bool,
        target_verify_key: VerifyKey,
        target_object_id: UID,
        address: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)

        self.add_instead_of_remove = add_instead_of_remove
        self.target_verify_key = target_verify_key
        self.target_object_id = target_object_id

</source>
<source file="systems/PySyft-0.3.0/src/syft/core/node/common/action/save_object_action.py" startline="25" endline="37" pcid="224">
    def __init__(
        self,
        id_at_location: UID,
        obj: object,
        address: Address,
        anyone_can_search_for_this: bool = False,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.id_at_location = id_at_location
        self.obj = obj
        self.anyone_can_search_for_this = anyone_can_search_for_this

</source>
<source file="systems/PySyft-0.3.0/src/syft/core/node/common/service/child_node_lifecycle_service.py" startline="28" endline="38" pcid="299">
    def __init__(
        self,
        lookup_id: UID,
        child_node_client_address: Address,
        address: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.lookup_id = lookup_id
        self.child_node_client_address = child_node_client_address

</source>
<source file="systems/PySyft-0.3.0/src/syft/core/node/common/action/get_object_action.py" startline="144" endline="157" pcid="237">
    def __init__(
        self,
        id_at_location: UID,
        address: Address,
        reply_to: Address,
        msg_id: Optional[UID] = None,
        delete_obj: bool = True,
    ):
        self.id_at_location = id_at_location
        self.delete_obj = delete_obj

        # the logger needs self.id_at_location to be set already - so we call this later
        super().__init__(address=address, msg_id=msg_id, reply_to=reply_to)

</source>
</class>

<class classid="5" nclones="2" nlines="33" similarity="96">
<source file="systems/PySyft-0.3.0/src/syft/core/node/common/service/msg_forwarding_service.py" startline="23" endline="62" pcid="277">
    def process(
        node: AbstractNode, msg: SignedImmediateSyftMessageWithoutReply
    ) -> Optional[SignedMessageT]:
        addr = msg.address
        logger.debug(f"> Forwarding WithoutReply {msg.pprint} to {addr.target_emoji()}")
        # order is important, vm, device, domain, network
        for scope_id in [addr.vm_id, addr.device_id, addr.domain_id, addr.network_id]:
            if scope_id is not None and scope_id in node.store:
                obj = node.store[scope_id]
                try:
                    return obj.send_immediate_msg_without_reply(msg=msg)
                except Exception as e:
                    # TODO: Need to not catch blanket exceptions
                    print(
                        f"{addr} in store doesnt have method send_immediate_msg_without_reply"
                    )
                    print(e)
                    pass

        try:
            for scope_id in [
                addr.vm_id,
                addr.device_id,
                addr.domain_id,
                addr.network_id,
            ]:
                if scope_id is not None:
                    logger.debug(f"> Lookup: {scope_id.emoji()}")
                    if scope_id in node.in_memory_client_registry:
                        in_memory_client = node.in_memory_client_registry[scope_id]
                        return in_memory_client.send_immediate_msg_without_reply(
                            msg=msg
                        )
        except Exception as e:
            # TODO: Need to not catch blanket exceptions
            print(f"{addr} not on nodes in_memory_client. {e}")
            pass
        logger.debug(f"> ‚ùå {node.pprint} ü§∑üèæ‚Äç‚ôÄÔ∏è {addr.target_emoji()}")
        raise Exception("Address unknown - cannot forward message. Throwing it away.")

</source>
<source file="systems/PySyft-0.3.0/src/syft/core/node/common/service/msg_forwarding_service.py" startline="72" endline="116" pcid="279">
    def process(
        node: AbstractNode, msg: SignedImmediateSyftMessageWithReply
    ) -> SignedImmediateSyftMessageWithoutReply:
        # def process(
        #     node: AbstractNode, msg: SignedMessageT, verify_key: VerifyKey
        # ) -> SignedMessageT:
        # TODO: Add verify_key?
        addr = msg.address
        logger.debug(f"> Forwarding WithReply {msg.pprint} to {addr.target_emoji()}")

        # order is important, vm, device, domain, network
        for scope_id in [addr.vm_id, addr.device_id, addr.domain_id, addr.network_id]:
            if scope_id is not None and scope_id in node.store:
                obj = node.store[scope_id]
                try:
                    return obj.send_immediate_msg_with_reply(msg=msg)
                except Exception as e:
                    # TODO: Need to not catch blanket exceptions
                    print(
                        f"{addr} in store doesnt have method send_immediate_msg_with_reply"
                    )
                    print(e)
                    pass

        try:
            for scope_id in [
                addr.vm_id,
                addr.device_id,
                addr.domain_id,
                addr.network_id,
            ]:
                if scope_id is not None:
                    logger.debug(f"> Lookup: {scope_id.emoji()}")
                    if scope_id in node.in_memory_client_registry:
                        in_memory_client = node.in_memory_client_registry[scope_id]
                        return in_memory_client.send_immediate_msg_without_reply(
                            msg=msg
                        )
        except Exception as e:
            # TODO: Need to not catch blanket exceptions
            print(f"{addr} not on nodes in_memory_client. {e}")
            pass
        logger.debug(f"> ‚ùå {node.pprint} ü§∑üèæ‚Äç‚ôÄÔ∏è {addr.target_emoji()}")
        raise Exception("Address unknown - cannot forward message. Throwing it away.")

</source>
</class>

<class classid="6" nclones="2" nlines="12" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/lib/torch/parameter_test.py" startline="11" endline="34" pcid="332">
def test_parameter_vm_remote_operation() -> None:

    alice = sy.VirtualMachine(name="alice")
    alice_client = alice.get_client()

    x = th.nn.Parameter(th.randn(3, 3))

    xp = x.send(alice_client)

    y = xp + xp

    assert len(alice.store._objects) == 2

    y.get()

    assert len(alice.store._objects) == 1

    del xp

    gc.collect()

    assert len(alice.store._objects) == 0


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/torch/parameter_test.py" startline="35" endline="58" pcid="333">
def test_get_copy() -> None:

    alice = sy.VirtualMachine(name="alice")
    alice_client = alice.get_client()

    x = th.nn.Parameter(th.randn(3, 3))

    xp = x.send(alice_client)

    y = xp + xp

    assert len(alice.store._objects) == 2

    y.get_copy()

    # no deletion of the object
    assert len(alice.store._objects) == 2

    del xp
    gc.collect()

    assert len(alice.store._objects) == 1


</source>
</class>

<class classid="7" nclones="2" nlines="12" similarity="75">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/dict/dict_serde_test.py" startline="34" endline="52" pcid="346">
def test_dict_serde() -> None:
    t1 = th.tensor([1, 2])
    t2 = th.tensor([1, 3])

    syft_list = Dict({Int(1): t1, Int(2): t2})
    assert type(getattr(syft_list, "id", None)) is UID

    serialized = syft_list._object2proto()

    assert isinstance(serialized, Dict_PB)

    deserialized = Dict._proto2object(proto=serialized)

    assert isinstance(deserialized, Dict)
    assert deserialized.id == syft_list.id
    for deserialized_el, original_el in zip(deserialized, syft_list):
        assert deserialized_el == original_el


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/list/list_serde_test.py" startline="10" endline="27" pcid="610">
def test_list_serde() -> None:
    t1 = th.tensor([1, 2])
    t2 = th.tensor([1, 3])

    syft_list = List([t1, t2])

    serialized = syft_list._object2proto()

    assert isinstance(serialized, List_PB)

    deserialized = List._proto2object(proto=serialized)

    assert isinstance(deserialized, List)
    assert deserialized.id == syft_list.id
    for deserialized_el, original_el in zip(deserialized, syft_list):
        assert (deserialized_el == original_el).all()


</source>
</class>

<class classid="8" nclones="2" nlines="22" similarity="90">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/float/cross_type_test.py" startline="56" endline="83" pcid="443">
def test_api_float(op, py_obj):
    sy_float = Float(42.5)
    py_float = 42.5

    try:
        func_py = getattr(py_float, op)
    except Exception:
        return

    func_sy = getattr(sy_float, op)

    pypy_err, sypy_err = None, None
    pypy, sypy = None, None

    try:
        pypy = func_py(py_obj)
    except Exception as e_pypy:
        pypy_err = str(e_pypy)

    try:
        sypy = func_sy(py_obj)
    except Exception as e_sysy:
        sypy_err = str(e_sysy)

    if any([pypy_err, sypy_err]):
        assert pypy_err == sypy_err
    else:
        assert pypy == sypy
</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/int/cross_type_test.py" startline="46" endline="73" pcid="519">
def test_api_int(op, py_obj):
    sy_int = Int(42)
    py_int = 42

    try:
        func_py = getattr(py_int, op)
    except Exception:
        return

    func_sy = getattr(sy_int, op)

    pypy_err, sypy_err = None, None
    pypy, sypy = None, None

    try:
        pypy = func_py(py_obj)
    except Exception as e_pypy:
        pypy_err = str(e_pypy)

    try:
        sypy = func_sy(py_obj)
    except Exception as e_sysy:
        sypy_err = str(e_sysy)

    if any([pypy_err, sypy_err]):
        assert pypy_err == sypy_err
    else:
        assert pypy == sypy
</source>
</class>

<class classid="9" nclones="5" nlines="28" similarity="82">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/float/pointer_test.py" startline="71" endline="107" pcid="445">
def test_pointer_objectives(test_objects, func):
    py_obj, sy_obj, remote_sy_obj = test_objects

    if not hasattr(py_obj, func):
        return

    py_method = getattr(py_obj, func)
    sy_method = getattr(sy_obj, func)
    remote_sy_method = getattr(remote_sy_obj, func)

    possible_inputs = inputs[func]

    for possible_input in possible_inputs:
        try:
            py_res = py_method(*possible_input)
        except Exception as py_e:
            py_res = str(py_e)

        try:
            sy_res = sy_method(*possible_input)
        except Exception as sy_e:
            sy_res = str(sy_e)

        try:
            remote_sy_res = remote_sy_method(*possible_input)
            get_permission(remote_sy_res)
            remote_sy_res = remote_sy_res.get()
        except Exception as remote_sy_e:
            remote_sy_res = str(remote_sy_e)

        if isinstance(py_res, float):
            py_res = int(py_res * 1000) / 1000
            sy_res = int(sy_res * 1000) / 1000
            remote_sy_res = int(remote_sy_res * 1000) / 1000

        assert py_res == sy_res
        assert sy_res == remote_sy_res
</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/pointer_test.py" startline="91" endline="122" pcid="584">
def test_pointer_objectives(test_objects, func):
    py_obj, sy_obj, remote_sy_obj = test_objects

    if not hasattr(py_obj, func):
        return

    py_method = getattr(py_obj, func)
    sy_method = getattr(sy_obj, func)
    remote_sy_method = getattr(remote_sy_obj, func)

    possible_inputs = inputs[func]

    for possible_input in possible_inputs:
        try:
            py_res = py_method(*possible_input)
        except Exception as py_e:
            py_res = str(py_e)

        try:
            sy_res = sy_method(*possible_input)
        except Exception as sy_e:
            sy_res = str(sy_e)

        try:
            remote_sy_res = remote_sy_method(*possible_input)
            get_permission(remote_sy_res)
            remote_sy_res = remote_sy_res.get()
        except Exception as remote_sy_e:
            remote_sy_res = str(remote_sy_e)

        assert py_res == sy_res
        assert sy_res == remote_sy_res
</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/bool/pointer_test.py" startline="79" endline="117" pcid="664">
def test_pointer_objectives(test_objects, func):
    py_obj, sy_obj, remote_sy_obj = test_objects

    if not hasattr(py_obj, func):
        return

    py_method = getattr(py_obj, func)
    sy_method = getattr(sy_obj, func)
    remote_sy_method = getattr(remote_sy_obj, func)

    possible_inputs = inputs[func]

    for possible_input in possible_inputs:
        try:
            py_res = py_method(*possible_input)
        except Exception as py_e:
            py_res = str(py_e)

        try:
            sy_res = sy_method(*possible_input)
        except Exception as sy_e:
            sy_res = str(sy_e)

        try:
            remote_sy_res = remote_sy_method(*possible_input)
            get_permission(remote_sy_res)
            remote_sy_res = remote_sy_res.get()
        except Exception as remote_sy_e:
            remote_sy_res = str(remote_sy_e)

        if isinstance(py_res, float):
            py_res = int(py_res * 1000) / 1000
            sy_res = int(sy_res * 1000) / 1000
            remote_sy_res = int(remote_sy_res * 1000) / 1000

        assert py_res == sy_res
        assert sy_res == remote_sy_res


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/list/pointer_test.py" startline="74" endline="117" pcid="615">
def test_pointer_objectives(test_objects, func):
    py_obj, sy_obj, remote_sy_obj = mapping[test_objects]()

    if not hasattr(py_obj, func):
        return

    py_method = getattr(py_obj, func)
    sy_method = getattr(sy_obj, func)
    remote_sy_method = getattr(remote_sy_obj, func)

    possible_inputs = inputs[func]

    for possible_input in possible_inputs:
        try:
            py_res = py_method(*possible_input)
        except Exception as py_e:
            py_res = str(py_e)

        try:
            sy_res = sy_method(*possible_input)
        except Exception as sy_e:
            sy_res = str(sy_e)

        try:
            remote_sy_res = remote_sy_method(*possible_input)
            get_permission(remote_sy_res)
            remote_sy_res = remote_sy_res.get()
        except Exception as remote_sy_e:
            remote_sy_res = str(remote_sy_e)
        #
        # if isinstance(py_res, float):
        #     py_res = int(py_res * 1000) / 1000
        #     sy_res = int(sy_res * 1000) / 1000
        #     remote_sy_res = int(remote_sy_res * 1000) / 1000

        assert py_res == sy_res
        assert sy_res == remote_sy_res

        assert py_obj == sy_obj
        # TODO add this as well when the store logic will work
        # get_permission(remote_sy_obj)
        # assert sy_obj == remote_sy_obj.get()


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/int/pointer_test.py" startline="79" endline="117" pcid="521">
def test_pointer_objectives(test_objects, func):
    py_obj, sy_obj, remote_sy_obj = test_objects

    if not hasattr(py_obj, func):
        return

    py_method = getattr(py_obj, func)
    sy_method = getattr(sy_obj, func)
    remote_sy_method = getattr(remote_sy_obj, func)

    possible_inputs = inputs[func]

    for possible_input in possible_inputs:
        try:
            py_res = py_method(*possible_input)
        except Exception as py_e:
            py_res = str(py_e)

        try:
            sy_res = sy_method(*possible_input)
        except Exception as sy_e:
            sy_res = str(sy_e)

        try:
            remote_sy_res = remote_sy_method(*possible_input)
            get_permission(remote_sy_res)
            remote_sy_res = remote_sy_res.get()
        except Exception as remote_sy_e:
            remote_sy_res = str(remote_sy_e)

        if isinstance(py_res, float):
            py_res = int(py_res * 1000) / 1000
            sy_res = int(sy_res * 1000) / 1000
            remote_sy_res = int(remote_sy_res * 1000) / 1000

        assert py_res == sy_res
        assert sy_res == remote_sy_res


</source>
</class>

<class classid="10" nclones="2" nlines="22" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/int/pointer_test.py" startline="120" endline="148" pcid="522">
def test_pointer_properties(test_objects, property):
    py_obj, sy_obj, remote_sy_obj = test_objects

    # TODO add support for proper properties

    try:
        py_res = getattr(py_obj, property)
    except Exception as py_e:
        py_res = str(py_e)

    try:
        sy_res = getattr(sy_obj, property)()
    except Exception as sy_e:
        sy_res = str(sy_e)

    try:
        remote_sy_res = getattr(remote_sy_obj, property)()
        get_permission(remote_sy_res)
        remote_sy_res = remote_sy_res.get()
    except Exception as remote_sy_e:
        remote_sy_res = str(remote_sy_e)

    if isinstance(py_res, float):
        py_res = int(py_res * 1000) / 1000
        sy_res = int(sy_res * 1000) / 1000
        remote_sy_res = int(remote_sy_res * 1000) / 1000

    assert py_res == sy_res
    assert sy_res == remote_sy_res
</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/bool/pointer_test.py" startline="122" endline="150" pcid="665">
def test_pointer_properties(test_objects, property):
    py_obj, sy_obj, remote_sy_obj = test_objects

    # TODO add support for proper properties

    try:
        py_res = getattr(py_obj, property)
    except Exception as py_e:
        py_res = str(py_e)

    try:
        sy_res = getattr(sy_obj, property)()
    except Exception as sy_e:
        sy_res = str(sy_e)

    try:
        remote_sy_res = getattr(remote_sy_obj, property)()
        get_permission(remote_sy_res)
        remote_sy_res = remote_sy_res.get()
    except Exception as remote_sy_e:
        remote_sy_res = str(remote_sy_e)

    if isinstance(py_res, float):
        py_res = int(py_res * 1000) / 1000
        sy_res = int(sy_res * 1000) / 1000
        remote_sy_res = int(remote_sy_res * 1000) / 1000

    assert py_res == sy_res
    assert sy_res == remote_sy_res
</source>
</class>

<class classid="11" nclones="2" nlines="42" similarity="72">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="83" endline="142" pcid="535">
def test_find():
    checkequal(0, python.String("abcdefghiabc"), "find", python.String("abc"))
    checkequal(9, python.String("abcdefghiabc"), "find", python.String("abc"), 1)
    checkequal(-1, python.String("abcdefghiabc"), "find", python.String("def"), 4)

    checkequal(0, python.String("abc"), "find", python.String(""), 0)
    checkequal(3, python.String("abc"), "find", python.String(""), 3)
    checkequal(-1, python.String("abc"), "find", python.String(""), 4)

    # to check the ability to pass None as defaults
    checkequal(2, python.String("rrarrrrrrrrra"), "find", python.String("a"))
    checkequal(12, python.String("rrarrrrrrrrra"), "find", python.String("a"), 4)
    checkequal(-1, python.String("rrarrrrrrrrra"), "find", python.String("a"), 4, 6)
    checkequal(12, python.String("rrarrrrrrrrra"), "find", python.String("a"), 4, None)
    checkequal(2, python.String("rrarrrrrrrrra"), "find", python.String("a"), None, 6)

    checkraises(TypeError, python.String("hello"), "find")

    if contains_bytes:
        checkequal(-1, python.String("hello"), "find", 42)
    else:
        checkraises(TypeError, python.String("hello"), "find", 42)

    checkequal(0, python.String(""), "find", python.String(""))
    checkequal(-1, python.String(""), "find", python.String(""), 1, 1)
    checkequal(-1, python.String(""), "find", python.String(""), sys.maxsize, 0)

    checkequal(-1, python.String(""), "find", python.String("xx"))
    checkequal(-1, python.String(""), "find", python.String("xx"), 1, 1)
    checkequal(-1, python.String(""), "find", python.String("xx"), sys.maxsize, 0)

    # issue 7458
    checkequal(
        -1, python.String("ab"), "find", python.String("xxx"), sys.maxsize + 1, 0
    )

    # For a variety of combinations,
    #    verify that str.find() matches __contains__
    #    and that the found substring is really at that location
    charset = [python.String(""), python.String("a"), python.String("b")]
    digits = 4
    base = len(charset)
    teststrings = set()
    for i in range(base ** digits):
        entry = []
        for j in range(digits):
            i, m = divmod(i, base)
            entry.append(charset[m])
        teststrings.add(python.String("").join(entry))
    for i in teststrings:
        for j in teststrings:
            loc = i.find(j)
            r1 = loc != -1
            r2 = j in i
            assert r1 == r2
            if loc != -1:
                idx = loc + len(j)
                assert i[loc:idx] == j


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="144" endline="198" pcid="536">
def test_rfind():
    checkequal(9, python.String("abcdefghiabc"), "rfind", python.String("abc"))
    checkequal(12, python.String("abcdefghiabc"), "rfind", "")
    checkequal(0, python.String("abcdefghiabc"), "rfind", python.String("abcd"))
    checkequal(-1, python.String("abcdefghiabc"), "rfind", python.String("abcz"))

    checkequal(3, python.String("abc"), "rfind", python.String(""), 0)
    checkequal(3, python.String("abc"), "rfind", python.String(""), 3)
    checkequal(-1, python.String("abc"), "rfind", python.String(""), 4)

    # to check the ability to pass None as defaults
    checkequal(12, python.String("rrarrrrrrrrra"), "rfind", python.String("a"))
    checkequal(12, python.String("rrarrrrrrrrra"), "rfind", python.String("a"), 4)
    checkequal(-1, python.String("rrarrrrrrrrra"), "rfind", python.String("a"), 4, 6)
    checkequal(12, python.String("rrarrrrrrrrra"), "rfind", python.String("a"), 4, None)
    checkequal(2, python.String("rrarrrrrrrrra"), "rfind", python.String("a"), None, 6)

    checkraises(TypeError, python.String("hello"), "rfind")

    if contains_bytes:
        checkequal(-1, python.String("hello"), "rfind", 42)
    else:
        checkraises(TypeError, python.String("hello"), "rfind", 42)

    # For a variety of combinations,
    #    verify that str.rfind() matches __contains__
    #    and that the found substring is really at that location
    charset = [python.String(""), python.String("a"), python.String("b")]
    digits = 3
    base = len(charset)
    teststrings = set()
    for i in range(base ** digits):
        entry = []
        for j in range(digits):
            i, m = divmod(i, base)
            entry.append(charset[m])
        teststrings.add(python.String("").join(entry))
    for i in teststrings:
        for j in teststrings:
            loc = i.rfind(j)
            r1 = loc != -1
            r2 = j in i
            assert r1 == r2
            if loc != -1:
                assert i[loc : loc + len(j)] == j  # noqa: E203

    # issue 7458
    checkequal(
        -1, python.String("ab"), "rfind", python.String("xxx"), sys.maxsize + 1, 0
    )

    # issue #15534
    checkequal(0, python.String("<......\u043c..."), "rfind", "<")


</source>
</class>

<class classid="12" nclones="2" nlines="142" similarity="95">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="1916" endline="2063" pcid="546">
def test_additional_split():
    checkequal(
        [
            python.String("this"),
            python.String("is"),
            python.String("the"),
            "split",
            python.String("function"),
        ],
        python.String("this is the split function"),
        "split",
    )

    # by whitespace
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d "),
        "split",
    )
    checkequal(
        [python.String("a"), python.String("b c d")],
        python.String("a b c d"),
        "split",
        None,
        1,
    )
    checkequal(
        [python.String("a"), python.String("b"), python.String("c d")],
        python.String("a b c d"),
        "split",
        None,
        2,
    )
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d"),
        "split",
        None,
        3,
    )
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d"),
        "split",
        None,
        4,
    )
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d"),
        "split",
        None,
        sys.maxsize - 1,
    )
    checkequal([python.String("a b c d")], python.String("a b c d"), "split", None, 0)
    checkequal([python.String("a b c d")], python.String("  a b c d"), "split", None, 0)
    checkequal(
        [python.String("a"), python.String("b"), python.String("c  d")],
        python.String("a  b  c  d"),
        "split",
        None,
        2,
    )

    checkequal([], python.String("         "), "split")
    checkequal([python.String("a")], python.String("  a    "), "split")
    checkequal(
        [python.String("a"), python.String("b")], python.String("  a    b   "), "split"
    )
    checkequal(
        [python.String("a"), python.String("b   ")],
        python.String("  a    b   "),
        "split",
        None,
        1,
    )
    checkequal(
        [python.String("a    b   c   ")],
        python.String("  a    b   c   "),
        "split",
        None,
        0,
    )
    checkequal(
        [python.String("a"), python.String("b   c   ")],
        python.String("  a    b   c   "),
        "split",
        None,
        1,
    )
    checkequal(
        [python.String("a"), python.String("b"), python.String("c   ")],
        python.String("  a    b   c   "),
        "split",
        None,
        2,
    )
    checkequal(
        [python.String("a"), python.String("b"), python.String("c")],
        python.String("  a    b   c   "),
        "split",
        None,
        3,
    )
    checkequal(
        [python.String("a"), python.String("b")],
        python.String("\n\ta \t\r b \v "),
        "split",
    )
    aaa = python.String(" a ") * 20
    checkequal([python.String("a")] * 20, aaa, "split")
    checkequal([python.String("a")] + [aaa[4:]], aaa, "split", None, 1)
    checkequal(
        [python.String("a")] * 19 + [python.String("a ")], aaa, "split", None, 19
    )

    for b in (
        python.String("arf\tbarf"),
        python.String("arf\nbarf"),
        python.String("arf\rbarf"),
        python.String("arf\fbarf"),
        python.String("arf\vbarf"),
    ):
        checkequal([python.String("arf"), python.String("barf")], b, "split")
        checkequal([python.String("arf"), python.String("barf")], b, "split", None)
        checkequal([python.String("arf"), python.String("barf")], b, "split", None, 2)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2064" endline="2215" pcid="547">
def test_additional_rsplit():
    checkequal(
        [
            python.String("this"),
            python.String("is"),
            python.String("the"),
            "rsplit",
            python.String("function"),
        ],
        python.String("this is the rsplit function"),
        "rsplit",
    )

    # by whitespace
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d "),
        "rsplit",
    )
    checkequal(
        [python.String("a b c"), python.String("d")],
        python.String("a b c d"),
        "rsplit",
        None,
        1,
    )
    checkequal(
        [python.String("a b"), python.String("c"), python.String("d")],
        python.String("a b c d"),
        "rsplit",
        None,
        2,
    )
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d"),
        "rsplit",
        None,
        3,
    )
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d"),
        "rsplit",
        None,
        4,
    )
    checkequal(
        [
            python.String("a"),
            python.String("b"),
            python.String("c"),
            python.String("d"),
        ],
        python.String("a b c d"),
        "rsplit",
        None,
        sys.maxsize - 20,
    )
    checkequal([python.String("a b c d")], python.String("a b c d"), "rsplit", None, 0)
    checkequal(
        [python.String("a b c d")], python.String("a b c d  "), "rsplit", None, 0
    )
    checkequal(
        [python.String("a  b"), python.String("c"), python.String("d")],
        python.String("a  b  c  d"),
        "rsplit",
        None,
        2,
    )

    checkequal([], python.String("         "), "rsplit")
    checkequal([python.String("a")], python.String("  a    "), "rsplit")
    checkequal(
        [python.String("a"), python.String("b")], python.String("  a    b   "), "rsplit"
    )
    checkequal(
        [python.String("  a"), python.String("b")],
        python.String("  a    b   "),
        "rsplit",
        None,
        1,
    )
    checkequal(
        [python.String("  a    b   c")],
        python.String("  a    b   c   "),
        "rsplit",
        None,
        0,
    )
    checkequal(
        [python.String("  a    b"), python.String("c")],
        python.String("  a    b   c   "),
        "rsplit",
        None,
        1,
    )
    checkequal(
        [python.String("  a"), python.String("b"), python.String("c")],
        python.String("  a    b   c   "),
        "rsplit",
        None,
        2,
    )
    checkequal(
        [python.String("a"), python.String("b"), python.String("c")],
        python.String("  a    b   c   "),
        "rsplit",
        None,
        3,
    )
    checkequal(
        [python.String("a"), python.String("b")],
        python.String("\n\ta \t\r b \v "),
        "rsplit",
        None,
        88,
    )
    aaa = python.String(" a ") * 20
    checkequal([python.String("a")] * 20, aaa, "rsplit")
    checkequal([aaa[:-4]] + [python.String("a")], aaa, "rsplit", None, 1)
    checkequal(
        [python.String(" a  a")] + [python.String("a")] * 18, aaa, "rsplit", None, 18
    )

    for b in (
        python.String("arf\tbarf"),
        python.String("arf\nbarf"),
        python.String("arf\rbarf"),
        python.String("arf\fbarf"),
        python.String("arf\vbarf"),
    ):
        checkequal([python.String("arf"), python.String("barf")], b, "rsplit")
        checkequal([python.String("arf"), python.String("barf")], b, "rsplit", None)
        checkequal([python.String("arf"), python.String("barf")], b, "rsplit", None, 2)


</source>
</class>

<class classid="13" nclones="2" nlines="37" similarity="73">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2234" endline="2276" pcid="549">
def test_strip():
    # strip/lstrip/rstrip with str arg
    checkequal(
        python.String("hello"),
        python.String("xyzzyhelloxyzzy"),
        "strip",
        python.String("xyz"),
    )
    checkequal(
        python.String("helloxyzzy"),
        python.String("xyzzyhelloxyzzy"),
        "lstrip",
        python.String("xyz"),
    )
    checkequal(
        python.String("xyzzyhello"),
        python.String("xyzzyhelloxyzzy"),
        "rstrip",
        python.String("xyz"),
    )
    checkequal(
        python.String("hello"), python.String("hello"), "strip", python.String("xyz")
    )
    checkequal(
        python.String(""),
        python.String("mississippi"),
        "strip",
        python.String("mississippi"),
    )

    # only trim the start and end; does not strip internal characters
    checkequal(
        python.String("mississipp"),
        python.String("mississippi"),
        "strip",
        python.String("i"),
    )

    checkraises(TypeError, python.String("hello"), "strip", 42, 42)
    checkraises(TypeError, python.String("hello"), "lstrip", 42, 42)
    checkraises(TypeError, python.String("hello"), "rstrip", 42, 42)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2580" endline="2628" pcid="565">
def test_capitalize_nonascii():
    # check that titlecased chars are lowered correctly
    # \u1ffc is the titlecased char
    # \u03a9\u0399
    if sys.version_info >= (3, 8):
        # a, b, capitalize
        # ·øº·ø≥·ø≥·ø≥, ·ø≥·ø≥·øº·øº, capitalize
        checkequal(
            python.String("\u1ffc\u1ff3\u1ff3\u1ff3"),
            python.String("\u1ff3\u1ff3\u1ffc\u1ffc"),
            "capitalize",
        )
    else:
        # a, b, capitalize
        # Œ©Œô·ø≥·ø≥·ø≥, ·ø≥·ø≥·øº·øº, capitalize
        checkequal(
            python.String("\u03a9\u0399\u1ff3\u1ff3\u1ff3"),
            python.String("\u1ff3\u1ff3\u1ffc\u1ffc"),
            "capitalize",
        )
    # check with cased non-letter chars
    checkequal(
        python.String("\u24c5\u24e8\u24e3\u24d7\u24de\u24dd"),
        python.String("\u24c5\u24ce\u24c9\u24bd\u24c4\u24c3"),
        "capitalize",
    )
    checkequal(
        python.String("\u24c5\u24e8\u24e3\u24d7\u24de\u24dd"),
        python.String("\u24df\u24e8\u24e3\u24d7\u24de\u24dd"),
        "capitalize",
    )
    checkequal(
        python.String("\u2160\u2171\u2172"),
        python.String("\u2160\u2161\u2162"),
        "capitalize",
    )
    checkequal(
        python.String("\u2160\u2171\u2172"),
        python.String("\u2170\u2171\u2172"),
        "capitalize",
    )
    # check with Ll chars with no upper - nothing changes here
    checkequal(
        python.String("\u019b\u1d00\u1d86\u0221\u1fb7"),
        python.String("\u019b\u1d00\u1d86\u0221\u1fb7"),
        "capitalize",
    )


</source>
</class>

<class classid="14" nclones="3" nlines="13" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2277" endline="2291" pcid="550">
def test_ljust():
    checkequal(python.String("abc       "), python.String("abc"), "ljust", 10)
    checkequal(python.String("abc   "), python.String("abc"), "ljust", 6)
    checkequal(python.String("abc"), python.String("abc"), "ljust", 3)
    checkequal(python.String("abc"), python.String("abc"), "ljust", 2)
    checkequal(
        python.String("abc*******"),
        python.String("abc"),
        "ljust",
        10,
        python.String("*"),
    )
    checkraises(TypeError, python.String("abc"), "ljust")


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2292" endline="2306" pcid="551">
def test_rjust():
    checkequal(python.String("       abc"), python.String("abc"), "rjust", 10)
    checkequal(python.String("   abc"), python.String("abc"), "rjust", 6)
    checkequal(python.String("abc"), python.String("abc"), "rjust", 3)
    checkequal(python.String("abc"), python.String("abc"), "rjust", 2)
    checkequal(
        python.String("*******abc"),
        python.String("abc"),
        "rjust",
        10,
        python.String("*"),
    )
    checkraises(TypeError, python.String("abc"), "rjust")


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2307" endline="2321" pcid="552">
def test_center():
    checkequal(python.String("   abc    "), python.String("abc"), "center", 10)
    checkequal(python.String(" abc  "), python.String("abc"), "center", 6)
    checkequal(python.String("abc"), python.String("abc"), "center", 3)
    checkequal(python.String("abc"), python.String("abc"), "center", 2)
    checkequal(
        python.String("***abc****"),
        python.String("abc"),
        "center",
        10,
        python.String("*"),
    )
    checkraises(TypeError, python.String("abc"), "center")


</source>
</class>

<class classid="15" nclones="3" nlines="12" similarity="76">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2368" endline="2382" pcid="557">
def test_istitle():
    checkequal(False, python.String(""), "istitle")
    checkequal(False, python.String("a"), "istitle")
    checkequal(True, python.String("A"), "istitle")
    checkequal(False, python.String("\n"), "istitle")
    checkequal(True, python.String("A Titlecased Line"), "istitle")
    checkequal(True, python.String("A\nTitlecased Line"), "istitle")
    checkequal(True, python.String("A Titlecased, Line"), "istitle")
    checkequal(False, python.String("Not a capitalized String"), "istitle")
    checkequal(False, python.String("Not\ta Titlecase String"), "istitle")
    checkequal(False, python.String("Not--a Titlecase String"), "istitle")
    checkequal(False, python.String("NOT"), "istitle")
    checkraises(TypeError, python.String("abc"), "istitle", 42)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2406" endline="2417" pcid="560">
def test_isalnum():
    checkequal(False, python.String(""), "isalnum")
    checkequal(True, python.String("a"), "isalnum")
    checkequal(True, python.String("A"), "isalnum")
    checkequal(False, python.String("\n"), "isalnum")
    checkequal(True, python.String("123abc456"), "isalnum")
    checkequal(True, python.String("a1b3c"), "isalnum")
    checkequal(False, python.String("aBc000 "), "isalnum")
    checkequal(False, python.String("abc\n"), "isalnum")
    checkraises(TypeError, python.String("abc"), "isalnum", 42)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2383" endline="2394" pcid="558">
def test_isspace():
    checkequal(False, python.String(""), "isspace")
    checkequal(False, python.String("a"), "isspace")
    checkequal(True, python.String(" "), "isspace")
    checkequal(True, python.String("\t"), "isspace")
    checkequal(True, python.String("\r"), "isspace")
    checkequal(True, python.String("\n"), "isspace")
    checkequal(True, python.String(" \t\r\n"), "isspace")
    checkequal(False, python.String(" \t\r\na"), "isspace")
    checkraises(TypeError, python.String("abc"), "isspace", 42)


</source>
</class>

<class classid="16" nclones="2" nlines="104" similarity="70">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2629" endline="2740" pcid="566">
def test_startswith():
    checkequal(True, python.String("hello"), "startswith", python.String("he"))
    checkequal(True, python.String("hello"), "startswith", python.String("hello"))
    checkequal(
        False, python.String("hello"), "startswith", python.String("hello world")
    )
    checkequal(True, python.String("hello"), "startswith", python.String(""))
    checkequal(False, python.String("hello"), "startswith", python.String("ello"))
    checkequal(True, python.String("hello"), "startswith", python.String("ello"), 1)
    checkequal(True, python.String("hello"), "startswith", python.String("o"), 4)
    checkequal(False, python.String("hello"), "startswith", python.String("o"), 5)
    checkequal(True, python.String("hello"), "startswith", python.String(""), 5)
    checkequal(False, python.String("hello"), "startswith", python.String("lo"), 6)
    checkequal(
        True, python.String("helloworld"), "startswith", python.String("lowo"), 3
    )
    checkequal(
        True, python.String("helloworld"), "startswith", python.String("lowo"), 3, 7
    )
    checkequal(
        False, python.String("helloworld"), "startswith", python.String("lowo"), 3, 6
    )
    checkequal(True, python.String(""), "startswith", python.String(""), 0, 1)
    checkequal(True, python.String(""), "startswith", python.String(""), 0, 0)
    checkequal(False, python.String(""), "startswith", python.String(""), 1, 0)

    # test negative indices
    checkequal(True, python.String("hello"), "startswith", python.String("he"), 0, -1)
    checkequal(True, python.String("hello"), "startswith", python.String("he"), -53, -1)
    checkequal(
        False, python.String("hello"), "startswith", python.String("hello"), 0, -1
    )
    checkequal(
        False,
        python.String("hello"),
        "startswith",
        python.String("hello world"),
        -1,
        -10,
    )
    checkequal(False, python.String("hello"), "startswith", python.String("ello"), -5)
    checkequal(True, python.String("hello"), "startswith", python.String("ello"), -4)
    checkequal(False, python.String("hello"), "startswith", python.String("o"), -2)
    checkequal(True, python.String("hello"), "startswith", python.String("o"), -1)
    checkequal(True, python.String("hello"), "startswith", python.String(""), -3, -3)
    checkequal(False, python.String("hello"), "startswith", python.String("lo"), -9)

    checkraises(TypeError, python.String("hello"), "startswith")
    checkraises(TypeError, python.String("hello"), "startswith", 42)

    # test tuple arguments
    checkequal(
        True,
        python.String("hello"),
        "startswith",
        (python.String("he"), python.String("ha")),
    )
    checkequal(
        False,
        python.String("hello"),
        "startswith",
        (python.String("lo"), python.String("llo")),
    )
    checkequal(
        True,
        python.String("hello"),
        "startswith",
        (python.String("hellox"), python.String("hello")),
    )
    checkequal(False, python.String("hello"), "startswith", ())
    checkequal(
        True,
        python.String("helloworld"),
        "startswith",
        (python.String("hellowo"), python.String("rld"), python.String("lowo")),
        3,
    )
    checkequal(
        False,
        python.String("helloworld"),
        "startswith",
        (python.String("hellowo"), python.String("ello"), python.String("rld")),
        3,
    )
    checkequal(
        True,
        python.String("hello"),
        "startswith",
        (python.String("lo"), python.String("he")),
        0,
        -1,
    )
    checkequal(
        False,
        python.String("hello"),
        "startswith",
        (python.String("he"), python.String("hel")),
        0,
        1,
    )
    checkequal(
        True,
        python.String("hello"),
        "startswith",
        (python.String("he"), python.String("hel")),
        0,
        2,
    )

    checkraises(TypeError, python.String("hello"), "startswith", (42,))


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="2741" endline="2874" pcid="567">
def test_endswith():
    checkequal(True, python.String("hello"), "endswith", python.String("lo"))
    checkequal(False, python.String("hello"), "endswith", python.String("he"))
    checkequal(True, python.String("hello"), "endswith", python.String(""))
    checkequal(False, python.String("hello"), "endswith", python.String("hello world"))
    checkequal(False, python.String("helloworld"), "endswith", python.String("worl"))
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("worl"), 3, 9
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("world"), 3, 12
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("lowo"), 1, 7
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("lowo"), 2, 7
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("lowo"), 3, 7
    )
    checkequal(
        False, python.String("helloworld"), "endswith", python.String("lowo"), 4, 7
    )
    checkequal(
        False, python.String("helloworld"), "endswith", python.String("lowo"), 3, 8
    )
    checkequal(False, python.String("ab"), "endswith", python.String("ab"), 0, 1)
    checkequal(False, python.String("ab"), "endswith", python.String("ab"), 0, 0)
    checkequal(True, python.String(""), "endswith", python.String(""), 0, 1)
    checkequal(True, python.String(""), "endswith", python.String(""), 0, 0)
    checkequal(False, python.String(""), "endswith", python.String(""), 1, 0)

    # test negative indices
    checkequal(True, python.String("hello"), "endswith", python.String("lo"), -2)
    checkequal(False, python.String("hello"), "endswith", python.String("he"), -2)
    checkequal(True, python.String("hello"), "endswith", python.String(""), -3, -3)
    checkequal(
        False, python.String("hello"), "endswith", python.String("hello world"), -10, -2
    )
    checkequal(
        False, python.String("helloworld"), "endswith", python.String("worl"), -6
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("worl"), -5, -1
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("worl"), -5, 9
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("world"), -7, 12
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("lowo"), -99, -3
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("lowo"), -8, -3
    )
    checkequal(
        True, python.String("helloworld"), "endswith", python.String("lowo"), -7, -3
    )
    checkequal(
        False, python.String("helloworld"), "endswith", python.String("lowo"), 3, -4
    )
    checkequal(
        False, python.String("helloworld"), "endswith", python.String("lowo"), -8, -2
    )

    checkraises(TypeError, python.String("hello"), "endswith")
    checkraises(TypeError, python.String("hello"), "endswith", 42)

    # test tuple arguments
    checkequal(
        False,
        python.String("hello"),
        "endswith",
        (python.String("he"), python.String("ha")),
    )
    checkequal(
        True,
        python.String("hello"),
        "endswith",
        (python.String("lo"), python.String("llo")),
    )
    checkequal(
        True,
        python.String("hello"),
        "endswith",
        (python.String("hellox"), python.String("hello")),
    )
    checkequal(False, python.String("hello"), "endswith", ())
    checkequal(
        True,
        python.String("helloworld"),
        "endswith",
        (python.String("hellowo"), python.String("rld"), python.String("lowo")),
        3,
    )
    checkequal(
        False,
        python.String("helloworld"),
        "endswith",
        (python.String("hellowo"), python.String("ello"), python.String("rld")),
        3,
        -1,
    )
    checkequal(
        True,
        python.String("hello"),
        "endswith",
        (python.String("hell"), python.String("ell")),
        0,
        -1,
    )
    checkequal(
        False,
        python.String("hello"),
        "endswith",
        (python.String("he"), python.String("hel")),
        0,
        1,
    )
    checkequal(
        True,
        python.String("hello"),
        "endswith",
        (python.String("he"), python.String("hell")),
        0,
        4,
    )

    checkraises(TypeError, python.String("hello"), "endswith", (42,))


</source>
</class>

<class classid="17" nclones="2" nlines="38" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="3187" endline="3229" pcid="578">
def test_partition():
    checkequal(
        (
            python.String("this is the par"),
            python.String("ti"),
            python.String("tion method"),
        ),
        python.String("this is the partition method"),
        "partition",
        python.String("ti"),
    )

    # from raymond's original specification
    S = python.String("http://www.python.org")
    checkequal(
        (python.String("http"), python.String("://"), python.String("www.python.org")),
        S,
        "partition",
        python.String("://"),
    )
    checkequal(
        (python.String("http://www.python.org"), python.String(""), python.String("")),
        S,
        "partition",
        python.String("?"),
    )
    checkequal(
        (python.String(""), python.String("http://"), python.String("www.python.org")),
        S,
        "partition",
        python.String("http://"),
    )
    checkequal(
        (python.String("http://www.python."), python.String("org"), python.String("")),
        S,
        "partition",
        python.String("org"),
    )

    checkraises(ValueError, S, "partition", python.String(""))
    checkraises(TypeError, S, "partition", None)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_utils_test.py" startline="3230" endline="3272" pcid="579">
def test_rpartition():
    checkequal(
        (
            python.String("this is the rparti"),
            python.String("ti"),
            python.String("on method"),
        ),
        python.String("this is the rpartition method"),
        "rpartition",
        python.String("ti"),
    )

    # from raymond's original specification
    S = python.String("http://www.python.org")
    checkequal(
        (python.String("http"), python.String("://"), python.String("www.python.org")),
        S,
        "rpartition",
        python.String("://"),
    )
    checkequal(
        (python.String(""), python.String(""), python.String("http://www.python.org")),
        S,
        "rpartition",
        python.String("?"),
    )
    checkequal(
        (python.String(""), python.String("http://"), python.String("www.python.org")),
        S,
        "rpartition",
        python.String("http://"),
    )
    checkequal(
        (python.String("http://www.python."), python.String("org"), python.String("")),
        S,
        "rpartition",
        python.String("org"),
    )

    checkraises(ValueError, S, "rpartition", python.String(""))
    checkraises(TypeError, S, "rpartition", None)


</source>
</class>

<class classid="18" nclones="2" nlines="11" similarity="75">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_id_test.py" startline="8" endline="23" pcid="581">
def test_id_concat_python_type() -> None:
    val = " 2020"

    result = STRING_SYFT + val

    assert result.id
    assert result.id != STRING_SYFT.id
    assert result == STRING_PYTHON + val

    result = val + STRING_SYFT

    assert result.id
    assert result.id != STRING_SYFT.id
    assert val + STRING_PYTHON == result


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/string/string_id_test.py" startline="24" endline="39" pcid="582">
def test_id_concat_syft_type() -> None:
    val = String(" 2020")

    result = STRING_SYFT + val

    assert result.id
    assert result.id != STRING_SYFT.id
    assert val.id != result.id
    assert result == STRING_PYTHON + val

    result = val + STRING_SYFT

    assert result.id
    assert result.id != STRING_SYFT.id
    assert val.id != result.id
    assert val + STRING_PYTHON == result
</source>
</class>

<class classid="19" nclones="2" nlines="11" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/list/pointer_test.py" startline="120" endline="135" pcid="616">
def test_iterator(test_objects):
    py_obj, sy_obj, remote_sy_obj = mapping[test_objects]()

    py_iter = iter(py_obj)
    sy_iter = iter(sy_obj)
    rsy_iter = iter(remote_sy_obj)

    for i in range(len(py_obj)):
        py_elem = next(py_iter)
        sy_elem = next(sy_iter)
        rsy_elem = next(rsy_iter)

        assert py_elem == sy_elem
        assert sy_elem == rsy_elem.get()


</source>
<source file="systems/PySyft-0.3.0/tests/syft/lib/python/list/pointer_test.py" startline="138" endline="151" pcid="617">
def test_reversed_iterator(test_objects):
    py_obj, sy_obj, remote_sy_obj = mapping[test_objects]()

    py_iter = reversed(py_obj)
    sy_iter = reversed(sy_obj)
    rsy_iter = reversed(remote_sy_obj)

    for i in range(len(py_obj)):
        py_elem = next(py_iter)
        sy_elem = next(sy_iter)
        rsy_elem = next(rsy_iter)

        assert py_elem == sy_elem
        assert sy_elem == rsy_elem.get()
</source>
</class>

<class classid="20" nclones="2" nlines="26" similarity="96">
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="33" endline="66" pcid="673">
def test_signaling_offer_message_serde() -> None:
    bob_vm = sy.VirtualMachine(name="Bob")
    target = Address(name="Alice")

    target_id = secrets.token_hex(nbytes=16)
    host_id = secrets.token_hex(nbytes=16)

    msg = SignalingOfferMessage(
        address=target,
        payload="SDP",
        host_metadata=bob_vm.get_metadata_for_client(),
        target_peer=target_id,
        host_peer=host_id,
    )

    blob = msg.serialize()
    msg2 = sy.deserialize(blob=blob)

    msg_metadata = bob_vm.get_metadata_for_client()
    msg2_metadata = msg2.host_metadata

    assert msg.id == msg2.id
    assert msg.address == target
    assert msg.payload == msg2.payload
    assert msg2.payload == "SDP"
    assert msg2.host_peer == host_id
    assert msg2.target_peer == target_id
    assert msg == msg2

    assert msg_metadata.name == msg2_metadata.name
    assert msg_metadata.node == msg2_metadata.node
    assert msg_metadata.id == msg2_metadata.id


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="67" endline="98" pcid="674">
def test_signaling_answer_message_serde() -> None:
    bob_vm = sy.VirtualMachine(name="Bob")
    target = Address(name="Alice")
    target_id = secrets.token_hex(nbytes=16)
    host_id = secrets.token_hex(nbytes=16)

    msg = SignalingAnswerMessage(
        address=target,
        payload="SDP",
        host_metadata=bob_vm.get_metadata_for_client(),
        target_peer=target_id,
        host_peer=host_id,
    )
    msg_metadata = bob_vm.get_metadata_for_client()

    blob = msg.serialize()
    msg2 = sy.deserialize(blob=blob)
    msg2_metadata = msg2.host_metadata

    assert msg.id == msg2.id
    assert msg.address == target
    assert msg.payload == msg2.payload
    assert msg2.payload == "SDP"
    assert msg2.host_peer == host_id
    assert msg2.target_peer == target_id
    assert msg == msg2

    assert msg_metadata.name == msg2_metadata.name
    assert msg_metadata.node == msg2_metadata.node
    assert msg_metadata.id == msg2_metadata.id


</source>
</class>

<class classid="21" nclones="2" nlines="18" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="99" endline="122" pcid="675">
def test_signaling_answer_pull_request_message_serde() -> None:
    bob_vm = sy.VirtualMachine(name="Bob")
    target = Address(name="Alice")

    target_id = secrets.token_hex(nbytes=16)
    host_id = secrets.token_hex(nbytes=16)

    msg = AnswerPullRequestMessage(
        address=target,
        target_peer=target_id,
        host_peer=host_id,
        reply_to=bob_vm.address,
    )

    blob = msg.serialize()
    msg2 = sy.deserialize(blob=blob)

    assert msg.id == msg2.id
    assert msg.address == target
    assert msg == msg2
    assert msg2.host_peer == host_id
    assert msg2.target_peer == target_id


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="123" endline="146" pcid="676">
def test_signaling_offer_pull_request_message_serde() -> None:
    bob_vm = sy.VirtualMachine(name="Bob")
    target = Address(name="Alice")

    target_id = secrets.token_hex(nbytes=16)
    host_id = secrets.token_hex(nbytes=16)

    msg = OfferPullRequestMessage(
        address=target,
        target_peer=target_id,
        host_peer=host_id,
        reply_to=bob_vm.address,
    )

    blob = msg.serialize()
    msg2 = sy.deserialize(blob=blob)

    assert msg.id == msg2.id
    assert msg.address == target
    assert msg == msg2
    assert msg2.host_peer == host_id
    assert msg2.target_peer == target_id


</source>
</class>

<class classid="22" nclones="4" nlines="16" similarity="70">
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="147" endline="171" pcid="677">
def test_push_offer_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    target_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id
    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    offer_msg = SignalingOfferMessage(
        address=om_network.address,
        payload="SDP",
        host_metadata=alice_vm.get_metadata_for_client(),
        target_peer=target_id,
        host_peer=host_id,
    )
    om_network_client.send_immediate_msg_without_reply(msg=offer_msg)

    assert (
        om_network.signaling_msgs[target_id][SyftMessage].pop(offer_msg.id) == offer_msg
    )


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="172" endline="196" pcid="678">
def test_push_answer_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    target_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id
    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    offer_msg = SignalingAnswerMessage(
        address=om_network.address,
        payload="SDP",
        host_metadata=alice_vm.get_metadata_for_client(),
        target_peer=target_id,
        host_peer=host_id,
    )
    om_network_client.send_immediate_msg_without_reply(msg=offer_msg)

    assert (
        om_network.signaling_msgs[target_id][SyftMessage].pop(offer_msg.id) == offer_msg
    )


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="342" endline="364" pcid="683">
def test_not_found_pull_offer_requests_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id
    target_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    offer_pull_req = OfferPullRequestMessage(
        address=om_network.address,
        target_peer=target_id,
        host_peer=host_id,
        reply_to=om_network_client.address,
    )

    response = om_network_client.send_immediate_msg_with_reply(msg=offer_pull_req)

    assert isinstance(response, SignalingRequestsNotFound)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="365" endline="385" pcid="684">
def test_not_found_pull_ans_requests_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id
    target_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    ans_pull_req = AnswerPullRequestMessage(
        address=om_network.address,
        target_peer=target_id,
        host_peer=host_id,
        reply_to=om_network_client.address,
    )

    response = om_network_client.send_immediate_msg_with_reply(msg=ans_pull_req)

    assert isinstance(response, SignalingRequestsNotFound)
</source>
</class>

<class classid="23" nclones="4" nlines="25" similarity="80">
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="197" endline="232" pcid="679">
def test_pull_offer_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    target_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id
    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    offer_msg = SignalingOfferMessage(
        address=om_network.address,
        payload="SDP",
        host_metadata=alice_vm.get_metadata_for_client(),
        target_peer=target_id,
        host_peer=host_id,
    )
    om_network_client.send_immediate_msg_without_reply(msg=offer_msg)

    assert (
        om_network.signaling_msgs[target_id][SyftMessage].get(offer_msg.id) == offer_msg
    )

    offer_pull_req = OfferPullRequestMessage(
        address=om_network.address,
        target_peer=host_id,
        host_peer=target_id,
        reply_to=om_network_client.address,
    )

    response = om_network_client.send_immediate_msg_with_reply(msg=offer_pull_req)

    assert response == offer_msg


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="306" endline="341" pcid="682">
def test_loopback_answer_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    metadata = alice_vm.get_metadata_for_client()
    answer_msg = SignalingAnswerMessage(
        address=om_network.address,
        payload="SDP",
        host_metadata=metadata,
        target_peer=host_id,
        host_peer=host_id,
    )
    om_network_client.send_immediate_msg_without_reply(msg=answer_msg)

    # Do not enqueue loopback requests
    assert len(om_network.signaling_msgs[host_id][SyftMessage]) == 0

    ans_pull_req = AnswerPullRequestMessage(
        address=om_network.address,
        target_peer=host_id,
        host_peer=host_id,
        reply_to=om_network_client.address,
    )

    response = om_network_client.send_immediate_msg_with_reply(msg=ans_pull_req)

    # Return InvalidLoopBackMessage
    assert isinstance(response, InvalidLoopBackRequest)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="270" endline="305" pcid="681">
def test_loopback_offer_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    offer_msg = SignalingOfferMessage(
        address=om_network.address,
        payload="SDP",
        host_metadata=alice_vm.get_metadata_for_client(),
        target_peer=host_id,
        host_peer=host_id,
    )

    om_network_client.send_immediate_msg_without_reply(msg=offer_msg)

    # Do not enqueue loopback requests
    assert len(om_network.signaling_msgs[host_id][SyftMessage]) == 0

    offer_pull_req = OfferPullRequestMessage(
        address=om_network.address,
        target_peer=host_id,
        host_peer=host_id,
        reply_to=om_network_client.address,
    )

    response = om_network_client.send_immediate_msg_with_reply(msg=offer_pull_req)

    # Return InvalidLoopBack Message
    assert isinstance(response, InvalidLoopBackRequest)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/grid/services/signaling_service_test.py" startline="233" endline="269" pcid="680">
def test_pull_answer_signaling_service() -> None:
    om_network, bob_vm, alice_vm = get_preset_nodes()
    om_network_client = om_network.get_root_client()

    msg = RegisterNewPeerMessage(
        address=om_network.address, reply_to=om_network_client.address
    )

    target_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id
    host_id = om_network_client.send_immediate_msg_with_reply(msg=msg).peer_id

    answer_msg = SignalingAnswerMessage(
        address=om_network.address,
        payload="SDP",
        host_metadata=alice_vm.get_metadata_for_client(),
        target_peer=target_id,
        host_peer=host_id,
    )
    om_network_client.send_immediate_msg_without_reply(msg=answer_msg)

    assert (
        om_network.signaling_msgs[target_id][SyftMessage].get(answer_msg.id)
        == answer_msg
    )

    ans_pull_req = AnswerPullRequestMessage(
        address=om_network.address,
        target_peer=host_id,
        host_peer=target_id,
        reply_to=om_network_client.address,
    )

    response = om_network_client.send_immediate_msg_with_reply(msg=ans_pull_req)

    assert response == answer_msg


</source>
</class>

<class classid="24" nclones="2" nlines="12" similarity="75">
<source file="systems/PySyft-0.3.0/tests/syft/core/io/address_test.py" startline="140" endline="161" pcid="701">
def test_to_string() -> None:
    """Tests that SpecificLocation generates an intuitive string."""

    an_id = UID(value=uuid.UUID(int=333779996850170035686993356951732753684))

    obj = Address(
        network=SpecificLocation(id=an_id),
        domain=SpecificLocation(id=an_id),
        device=SpecificLocation(id=an_id),
        vm=SpecificLocation(id=an_id),
    )

    str_out = (
        "<Address - Network:<SpecificLocation:..a1514>, Domain:<Specific"
        "Location:..a1514>  Device:<SpecificLocation:..a1514>, VM:<Specific"
        "Location:..a1514>"
    )

    assert str(obj) == str_out
    assert obj.__repr__() == str_out


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/io/address_test.py" startline="165" endline="182" pcid="702">
def test_default_serialization_and_deserialization() -> None:
    """Tests that default Address serde works as expected - to Protobuf"""

    an_id = UID(value=uuid.UUID(int=333779996850170035686993356951732753684))

    obj = Address(
        network=SpecificLocation(id=an_id),
        domain=SpecificLocation(id=an_id),
        device=SpecificLocation(id=an_id),
        vm=SpecificLocation(id=an_id),
    )

    blob = obj.to_proto()

    assert obj.serialize() == blob
    assert obj == sy.deserialize(blob=blob)


</source>
</class>

<class classid="25" nclones="2" nlines="23" similarity="79">
<source file="systems/PySyft-0.3.0/tests/syft/core/io/address_test.py" startline="227" endline="256" pcid="704">
def test_proto_serialization() -> None:
    """Tests that default Address serialization works as expected - to Protobuf"""

    uid = UID(value=uuid.UUID(int=333779996850170035686993356951732753684))
    loc = SpecificLocation(id=uid, name="Test Location")
    obj = Address(
        name="Test Address",
        network=loc,
        domain=loc,
        device=loc,
        vm=loc,
    )

    blob = Address.get_protobuf_schema()(
        name="Test Address",
        has_network=True,
        has_domain=True,
        has_device=True,
        has_vm=True,
        network=loc.serialize(),
        domain=loc.serialize(),
        device=loc.serialize(),
        vm=loc.serialize(),
    )

    assert obj.proto() == blob
    assert obj.to_proto() == blob
    assert obj.serialize(to_proto=True) == blob


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/io/address_test.py" startline="257" endline="282" pcid="705">
def test_proto_deserialization() -> None:
    """Tests that default Address deserialization works as expected - from Protobuf"""

    uid = UID(value=uuid.UUID(int=333779996850170035686993356951732753684))
    loc = SpecificLocation(id=uid, name="Test Location")

    obj = Address(
        network=loc,
        domain=loc,
        device=loc,
        vm=loc,
    )

    blob = Address.get_protobuf_schema()(
        has_network=True,
        has_domain=True,
        has_device=True,
        has_vm=True,
        network=loc.serialize(),
        domain=loc.serialize(),
        device=loc.serialize(),
        vm=loc.serialize(),
    )

    obj2 = sy.deserialize(blob=blob, from_proto=True)
    assert obj == obj2
</source>
</class>

<class classid="26" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/core/store/memory_storage_test.py" startline="49" endline="63" pcid="754">
def test_set_item() -> None:
    """Tests that __setitem__ and __getitem__ work intuitively."""

    store = MemoryStore()
    id1, obj1 = generate_id_obj(
        data=th.Tensor([1, 2, 3, 4]),
        description="Dummy tensor",
        tags=["dummy", "tensor"],
    )

    store[id1] = obj1
    assert id1 in store
    assert len(store) == 1


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/store/memory_storage_test.py" startline="64" endline="78" pcid="755">
def test_store_item() -> None:
    """Tests that store() works as an alternative to __setitem__."""

    store = MemoryStore()
    id1, obj1 = generate_id_obj(
        data=th.Tensor([1, 2, 3, 4]),
        description="Dummy tensor",
        tags=["dummy", "tensor"],
    )

    store[id1] = obj1
    assert id1 in store
    assert len(store) == 1


</source>
</class>

<class classid="27" nclones="2" nlines="17" similarity="82">
<source file="systems/PySyft-0.3.0/tests/syft/core/store/memory_storage_test.py" startline="107" endline="128" pcid="757">
def test_keys_values() -> None:
    """Tests that keys() and values() work intuitively and offer MemoryStore
    a dict-like usage."""

    store = MemoryStore()
    id1, obj1 = generate_id_obj(
        data=th.Tensor([1, 2, 3, 4]),
        description="Dummy tensor",
        tags=["dummy", "tensor"],
    )
    id2, obj2 = generate_id_obj(
        data=th.Tensor([1, 2, 3]),
        description="Another dummy tensor",
        tags=["another", "dummy", "tensor"],
    )

    store[id1] = obj1
    store[id2] = obj2
    assert list(store.keys()) == [id1, id2]
    assert list(store.values()) == [obj1, obj2]


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/store/memory_storage_test.py" startline="129" endline="152" pcid="758">
def test_clear_len() -> None:
    """Tests that clear() empties the MemoryStore and len() returns the
    number of stored objects."""

    store = MemoryStore()
    id1, obj1 = generate_id_obj(
        data=th.Tensor([1, 2, 3, 4]),
        description="Dummy tensor",
        tags=["dummy", "tensor"],
    )
    id2, obj2 = generate_id_obj(
        data=th.Tensor([1, 2, 3]),
        description="Another dummy tensor",
        tags=["another", "dummy", "tensor"],
    )

    store[id1] = obj1
    store[id2] = obj2

    assert len(store) == 2
    store.clear()
    assert len(store) == 0


</source>
</class>

<class classid="28" nclones="3" nlines="16" similarity="75">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/domain_test.py" startline="27" endline="55" pcid="762">
def test_domain_request_pending() -> None:
    domain_1 = Domain(name="remote domain")
    tensor = th.tensor([1, 2, 3])

    domain_1_client = domain_1.get_root_client()
    data_ptr_domain_1 = tensor.send(domain_1_client)

    domain_2 = Domain(name="my domain")

    data_ptr_domain_1.request(
        name="My Request",
        reason="I'd lke to see this pointer",
    )

    requested_object = data_ptr_domain_1.id_at_location

    # make request
    message_request_id = domain_1_client.requests.get_request_id_from_object_id(
        object_id=requested_object
    )

    # check status
    response = data_ptr_domain_1.check_access(
        node=domain_2, request_id=message_request_id
    )

    assert RequestStatus.Pending == response


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/domain_test.py" startline="57" endline="86" pcid="763">
def test_domain_request_denied() -> None:
    domain_1 = Domain(name="remote domain")
    tensor = th.tensor([1, 2, 3])

    domain_1_client = domain_1.get_root_client()
    data_ptr_domain_1 = tensor.send(domain_1_client)

    domain_2 = Domain(name="my domain")

    data_ptr_domain_1.request(name="My Request", reason="I'd lke to see this pointer")

    requested_object = data_ptr_domain_1.id_at_location

    # make request
    message_request_id = domain_1_client.requests.get_request_id_from_object_id(
        object_id=requested_object
    )

    # domain 1 client rejects request
    domain_1.requests[0].owner_client_if_available = domain_1_client
    domain_1.requests[0].deny()

    # check status
    response = data_ptr_domain_1.check_access(
        node=domain_2, request_id=message_request_id
    )

    assert RequestStatus.Rejected == response


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/domain_test.py" startline="88" endline="114" pcid="764">
def test_domain_request_accepted() -> None:
    domain_1 = Domain(name="remote domain")
    tensor = th.tensor([1, 2, 3])

    domain_1_client = domain_1.get_root_client()
    data_ptr_domain_1 = tensor.send(domain_1_client)

    domain_2 = Domain(name="my domain")

    data_ptr_domain_1.request(name="My Request", reason="I'd lke to see this pointer")

    requested_object = data_ptr_domain_1.id_at_location

    message_request_id = domain_1_client.requests.get_request_id_from_object_id(
        object_id=requested_object
    )

    domain_1.requests[0].owner_client_if_available = domain_1_client
    domain_1.requests[0].accept()

    response = data_ptr_domain_1.check_access(
        node=domain_2, request_id=message_request_id
    )

    assert RequestStatus.Accepted == response


</source>
</class>

<class classid="29" nclones="2" nlines="17" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/service/request_message_test.py" startline="54" endline="75" pcid="769">
def test_accept(method_name: str) -> None:
    node = Domain(name="remote domain")
    node_client = node.get_root_client()

    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
        owner_client_if_available=node_client,
    )

    with patch.object(
        request.owner_client_if_available, "send_immediate_msg_without_reply"
    ) as mock_send_msg:
        getattr(request, method_name)()
        assert mock_send_msg.call_args[1]["msg"].address == node_client.address
        assert mock_send_msg.call_args[1]["msg"].accept is True
        assert mock_send_msg.call_args[1]["msg"].request_id == request.id


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/service/request_message_test.py" startline="78" endline="99" pcid="770">
def test_deny(method_name: str) -> None:
    node = Domain(name="remote domain")
    node_client = node.get_root_client()

    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
        owner_client_if_available=node_client,
    )

    with patch.object(
        request.owner_client_if_available, "send_immediate_msg_without_reply"
    ) as mock_send_msg:
        getattr(request, method_name)()
        assert mock_send_msg.call_args[1]["msg"].address == node_client.address
        assert mock_send_msg.call_args[1]["msg"].accept is False
        assert mock_send_msg.call_args[1]["msg"].request_id == request.id


</source>
</class>

<class classid="30" nclones="3" nlines="10" similarity="100">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/service/request_message_test.py" startline="100" endline="112" pcid="771">
def test_fail_accept_request_message() -> None:
    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
    )

    with raises(Exception, match="No way to dispatch Accept Message."):
        request.accept()


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/service/request_message_test.py" startline="126" endline="136" pcid="773">
def test_fail_process_request_service() -> None:
    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
    )

    with raises(Exception, match="No way to dispatch Deny Message."):
        request.deny()
</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/domain/service/request_message_test.py" startline="113" endline="125" pcid="772">
def test_fail_deny_request_message() -> None:
    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
    )

    with raises(Exception, match="No way to dispatch Deny Message."):
        request.deny()


</source>
</class>

<class classid="31" nclones="2" nlines="12" similarity="76">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/node_test.py" startline="68" endline="84" pcid="782">
def test_register_vm_on_device_succeeds() -> None:
    # Register a üç∞ with a üì±

    bob_vm = sy.VirtualMachine(name="Bob")
    bob_vm_client = bob_vm.get_client()
    bob_vm.root_verify_key = bob_vm_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()
    bob_phone.root_verify_key = bob_phone_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone_client.register(client=bob_vm_client)

    assert bob_vm.device is not None
    assert bob_vm_client.device is not None


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/node_test.py" startline="109" endline="133" pcid="784">
def test_send_message_from_device_client_to_vm() -> None:
    # Register a üç∞ with a üì±
    # Send ‚úâÔ∏è from üì± ‚û°Ô∏è üç∞

    bob_vm = sy.VirtualMachine(name="Bob")
    bob_vm_client = bob_vm.get_client()
    bob_vm.root_verify_key = bob_vm_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()
    bob_phone.root_verify_key = bob_phone_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone_client.register(client=bob_vm_client)

    assert bob_vm.device is not None
    assert bob_vm_client.device is not None

    # switch keys
    bob_vm.root_verify_key = bob_phone_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone_client.send_immediate_msg_without_reply(
        msg=sy.ReprMessage(address=bob_vm_client.address)
    )


</source>
</class>

<class classid="32" nclones="2" nlines="22" similarity="76">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/node_test.py" startline="135" endline="168" pcid="785">
def test_send_message_from_domain_client_to_vm() -> None:
    # Register a üç∞ with a üì±
    # Register a üì± with a üè∞
    # Send ‚úâÔ∏è from üè∞ ‚û°Ô∏è üç∞

    bob_vm = sy.VirtualMachine(name="Bob")
    bob_vm_client = bob_vm.get_client()
    bob_vm.root_verify_key = bob_vm_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()
    bob_phone.root_verify_key = bob_phone_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone_client.register(client=bob_vm_client)

    assert bob_vm.device is not None
    assert bob_vm_client.device is not None

    bob_domain = sy.Domain(name="Bob's Domain")
    bob_domain_client = bob_domain.get_client()
    bob_domain.root_verify_key = bob_domain_client.verify_key  # inject üì°üîë as üìçüóù

    # switch keys
    bob_vm.root_verify_key = bob_domain_client.verify_key  # inject üì°üîë as üìçüóù
    bob_domain_client.register(client=bob_phone_client)

    assert bob_phone.domain is not None
    assert bob_phone_client.domain is not None

    bob_domain_client.send_immediate_msg_without_reply(
        msg=sy.ReprMessage(address=bob_vm.address)
    )


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/node_test.py" startline="170" endline="211" pcid="786">
def test_send_message_from_network_client_to_vm() -> None:
    # Register a üç∞ with a üì±
    # Register a üì± with a üè∞
    # Register a üè∞ with a üîó
    # Send ‚úâÔ∏è from üîó ‚û°Ô∏è üç∞

    bob_vm = sy.VirtualMachine(name="Bob")
    bob_vm_client = bob_vm.get_client()
    bob_vm.root_verify_key = bob_vm_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()
    bob_phone.root_verify_key = bob_phone_client.verify_key  # inject üì°üîë as üìçüóù

    bob_phone_client.register(client=bob_vm_client)

    assert bob_vm.device is not None
    assert bob_vm_client.device is not None

    bob_domain = sy.Domain(name="Bob's Domain")
    bob_domain_client = bob_domain.get_client()
    bob_domain.root_verify_key = bob_domain_client.verify_key  # inject üì°üîë as üìçüóù

    bob_domain_client.register(client=bob_phone_client)

    assert bob_phone.domain is not None
    assert bob_phone_client.domain is not None

    bob_network = sy.Network(name="Bob's Network")
    bob_network_client = bob_network.get_client()
    bob_network.root_verify_key = bob_network_client.verify_key  # inject üì°üîë as üìçüóù

    # switch keys
    bob_vm.root_verify_key = bob_network_client.verify_key  # inject üì°üîë as üìçüóù
    bob_network_client.register(client=bob_domain_client)

    assert bob_domain.network is not None
    assert bob_domain_client.network is not None

    bob_network_client.send_immediate_msg_without_reply(
        msg=sy.ReprMessage(address=bob_vm.address)
    )
</source>
</class>

<class classid="33" nclones="2" nlines="17" similarity="76">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/child_node_lifecycle_service_test.py" startline="8" endline="29" pcid="791">
def test_child_node_lifecycle_message_serde() -> None:
    bob_vm = sy.VirtualMachine(name="Bob")
    bob_vm_client = bob_vm.get_client()

    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()

    # bob_phone_client.register(client=bob_vm_client)
    # generates this message
    msg = RegisterChildNodeMessage(
        lookup_id=bob_vm_client.id,  # TODO: not sure if this is needed anymore
        child_node_client_address=bob_vm_client.address,
        address=bob_phone_client.address,
    )

    blob = msg.serialize()
    msg2 = sy.deserialize(blob=blob)

    assert msg.id == msg2.id
    assert msg.address == msg2.address
    assert msg.child_node_client_address == msg2.child_node_client_address
    assert msg == msg2
</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/obj_search_permission_service_test.py" startline="14" endline="36" pcid="800">
def test_object_search_permissons_update_message_serde() -> None:
    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()

    ptr = th.tensor([1, 2, 3]).send(bob_phone_client)

    msg = ObjectSearchPermissionUpdateMessage(
        add_instead_of_remove=True,
        target_verify_key=bob_phone_client.verify_key,
        target_object_id=ptr.id_at_location,
        address=bob_phone_client.address,
    )

    blob = msg.serialize()
    msg2 = sy.deserialize(blob=blob)

    assert msg.id == msg2.id
    assert msg.address == msg2.address
    assert msg.add_instead_of_remove == msg2.add_instead_of_remove
    assert msg.target_verify_key == msg2.target_verify_key
    assert msg.target_object_id == msg2.target_object_id


</source>
</class>

<class classid="34" nclones="4" nlines="11" similarity="75">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/auth_test.py" startline="12" endline="31" pcid="792">
def test_service_auth_root_fails() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)

    random_signing_key = SigningKey.generate()
    random_verify_key = random_signing_key.verify_key

    # root_only
    @service_auth(root_only=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    process(node=node, msg=msg, verify_key=node.root_verify_key)

    with pytest.raises(
        AuthorizationException, match="You are not Authorized to access this service"
    ):
        process(node=node, msg=msg, verify_key=random_verify_key)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/auth_test.py" startline="51" endline="66" pcid="796">
def test_service_auth_guests_fails() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)
    new_signing_key = SigningKey.generate()
    new_verify_key = new_signing_key.verify_key

    # guests_welcome
    @service_auth(guests_welcome=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    process(node=node, msg=msg, verify_key=new_verify_key)

    assert new_verify_key not in node.guest_verify_key_registry


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/auth_test.py" startline="32" endline="50" pcid="794">
def test_service_auth_existing_user() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)
    random_signing_key = SigningKey.generate()
    random_verify_key = random_signing_key.verify_key

    # existing_users_only
    @service_auth(existing_users_only=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    with pytest.raises(AuthorizationException, match="User not known."):
        process(node=node, msg=msg, verify_key=random_verify_key)

    # NOTE didn't find a method to add a key to guest_verify_key_registry
    node.guest_verify_key_registry.add(random_verify_key)
    process(node=node, msg=msg, verify_key=random_verify_key)


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/auth_test.py" startline="67" endline="80" pcid="798">
def test_service_auth_guests_succeeds() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)
    new_signing_key = SigningKey.generate()
    new_verify_key = new_signing_key.verify_key

    # register_new_guests
    @service_auth(guests_welcome=True, register_new_guests=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    process(node=node, msg=msg, verify_key=new_verify_key)

    assert new_verify_key in node.guest_verify_key_registry
</source>
</class>

<class classid="35" nclones="2" nlines="16" similarity="81">
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/obj_search_permission_service_test.py" startline="37" endline="59" pcid="801">
def test_object_search_permissons_update_execute_add() -> None:
    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()

    ptr = th.tensor([1, 2, 3]).send(bob_phone_client)

    msg = ObjectSearchPermissionUpdateMessage(
        add_instead_of_remove=True,
        target_verify_key=bob_phone_client.verify_key,
        target_object_id=ptr.id_at_location,
        address=bob_phone_client.address,
    )

    ImmediateObjectSearchPermissionUpdateService.process(
        node=bob_phone, msg=msg, verify_key=bob_phone.verify_key
    )

    assert (
        bob_phone.store[ptr.id_at_location].search_permissions[bob_phone.verify_key]
        == msg.id
    )


</source>
<source file="systems/PySyft-0.3.0/tests/syft/core/node/common/service/obj_search_permission_service_test.py" startline="60" endline="82" pcid="802">
def test_object_search_permissons_update_execute_remove() -> None:
    bob_phone = sy.Device(name="Bob's iPhone")
    bob_phone_client = bob_phone.get_client()

    ptr = th.tensor([1, 2, 3]).send(bob_phone_client)

    msg = ObjectSearchPermissionUpdateMessage(
        add_instead_of_remove=False,
        target_verify_key=bob_phone_client.verify_key,
        target_object_id=ptr.id_at_location,
        address=bob_phone_client.address,
    )

    bob_phone.store[ptr.id_at_location].search_permissions[bob_phone.verify_key] = None

    ImmediateObjectSearchPermissionUpdateService.process(
        node=bob_phone, msg=msg, verify_key=bob_phone.verify_key
    )

    assert (
        bob_phone.verify_key
        not in bob_phone.store[ptr.id_at_location].search_permissions
    )
</source>
</class>

<class classid="36" nclones="2" nlines="19" similarity="71">
<source file="systems/PySyft-0.3.0/examples/duet/reinforcement_learning/original/reinforce.py" startline="73" endline="91" pcid="877">
def finish_episode():
    R = 0
    policy_loss = []
    returns = []
    for r in policy.rewards[::-1]:
        R = r + args.gamma * R
        returns.insert(0, R)
    returns = torch.tensor(returns)
    returns = (returns - returns.mean()) / (returns.std() + eps)
    for log_prob, R in zip(policy.saved_log_probs, returns):
        policy_loss.append(-log_prob * R)
    optimizer.zero_grad()
    policy_loss = torch.cat(policy_loss).sum()
    policy_loss.backward()
    optimizer.step()
    del policy.rewards[:]
    del policy.saved_log_probs[:]


</source>
<source file="systems/PySyft-0.3.0/examples/duet/reinforcement_learning/original/actor_critic.py" startline="107" endline="149" pcid="882">
def finish_episode():
    """
    Training code. Calculates actor and critic loss and performs backprop.
    """
    R = 0
    saved_actions = model.saved_actions
    policy_losses = []  # list to save actor (policy) loss
    value_losses = []  # list to save critic (value) loss
    returns = []  # list to save the true values

    # calculate the true value using rewards returned from the environment
    for r in model.rewards[::-1]:
        # calculate the discounted value
        R = r + args.gamma * R
        returns.insert(0, R)

    returns = torch.tensor(returns)
    returns = (returns - returns.mean()) / (returns.std() + eps)

    for (log_prob, value), R in zip(saved_actions, returns):
        advantage = R - value.item()

        # calculate actor (policy) loss
        policy_losses.append(-log_prob * advantage)

        # calculate critic (value) loss using L1 smooth loss
        value_losses.append(F.smooth_l1_loss(value, torch.tensor([R])))

    # reset gradients
    optimizer.zero_grad()

    # sum up all the values of policy_losses and value_losses
    loss = torch.stack(policy_losses).sum() + torch.stack(value_losses).sum()

    # perform backprop
    loss.backward()
    optimizer.step()

    # reset rewards and action buffer
    del model.rewards[:]
    del model.saved_actions[:]


</source>
</class>

<class classid="37" nclones="2" nlines="24" similarity="91">
<source file="systems/PySyft-0.3.0/examples/duet/reinforcement_learning/original/reinforce.py" startline="92" endline="121" pcid="878">
def main():
    running_reward = 10
    for i_episode in count(1):
        state, ep_reward = env.reset(), 0
        for t in range(1, 10000):  # Don't infinite loop while learning
            action = select_action(state)
            state, reward, done, _ = env.step(action)
            if args.render:
                env.render()
            policy.rewards.append(reward)
            ep_reward += reward
            if done:
                break

        running_reward = 0.05 * ep_reward + (1 - 0.05) * running_reward
        finish_episode()
        if i_episode % args.log_interval == 0:
            print(
                "Episode {}\tLast reward: {:.2f}\tAverage reward: {:.2f}".format(
                    i_episode, ep_reward, running_reward
                )
            )
        if running_reward > env.spec.reward_threshold:
            print(
                "Solved! Running reward is now {} and "
                "the last episode runs to {} time steps!".format(running_reward, t)
            )
            break


</source>
<source file="systems/PySyft-0.3.0/examples/duet/reinforcement_learning/original/actor_critic.py" startline="150" endline="200" pcid="883">
def main():
    running_reward = 10

    # run inifinitely many episodes
    for i_episode in count(1):

        # reset environment and episode reward
        state = env.reset()
        ep_reward = 0

        # for each episode, only run 9999 steps so that we don't
        # infinite loop while learning
        for t in range(1, 10000):

            # select action from policy
            action = select_action(state)

            # take the action
            state, reward, done, _ = env.step(action)

            if args.render:
                env.render()

            model.rewards.append(reward)
            ep_reward += reward
            if done:
                break

        # update cumulative reward
        running_reward = 0.05 * ep_reward + (1 - 0.05) * running_reward

        # perform backprop
        finish_episode()

        # log results
        if i_episode % args.log_interval == 0:
            print(
                "Episode {}\tLast reward: {:.2f}\tAverage reward: {:.2f}".format(
                    i_episode, ep_reward, running_reward
                )
            )

        # check if we have "solved" the cart pole problem
        if running_reward > env.spec.reward_threshold:
            print(
                "Solved! Running reward is now {} and "
                "the last episode runs to {} time steps!".format(running_reward, t)
            )
            break


</source>
</class>

</clones>
