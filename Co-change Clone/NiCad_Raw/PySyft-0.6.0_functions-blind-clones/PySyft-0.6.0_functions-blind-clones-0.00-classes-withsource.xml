<clones>
<systeminfo processor="nicad6" system="PySyft-0.6.0" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1747" npairs="109"/>
<runinfo ncompares="8682" cputime="42784"/>
<classinfo nclasses="24"/>

<class classid="1" nclones="2" nlines="13" similarity="100">
<source file="systems/PySyft-0.6.0/tests/integration/network/make_associations_test.py" startline="13" endline="33" pcid="17">
def test_domain1_association_network1() -> None:
    network_guest = sy.login(port=NETWORK_PORT)

    domain = sy.login(
        email="info@openmined.org", password="changethis", port=DOMAIN1_PORT
    )

    domain.apply_to_network(client=network_guest)

    network = sy.login(
        email="info@openmined.org", password="changethis", port=NETWORK_PORT
    )
    associations = network.association.all()
    for association in associations:
        if association["node_address"] == domain.target_id.id.no_dash:
            request_id = int(association["association_id"])

    network.association[request_id].accept()
    assert domain.association.all()[0]["status"] == "ACCEPTED"


</source>
<source file="systems/PySyft-0.6.0/tests/integration/network/make_associations_test.py" startline="35" endline="53" pcid="18">
def test_domain2_association_network1() -> None:
    network_guest = sy.login(port=NETWORK_PORT)

    domain = sy.login(
        email="info@openmined.org", password="changethis", port=DOMAIN2_PORT
    )

    domain.apply_to_network(client=network_guest)

    network = sy.login(
        email="info@openmined.org", password="changethis", port=NETWORK_PORT
    )
    associations = network.association.all()
    for association in associations:
        if association["node_address"] == domain.target_id.id.no_dash:
            request_id = int(association["association_id"])

    network.association[request_id].accept()
    assert domain.association.all()[0]["status"] == "ACCEPTED"
</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="48" endline="64" pcid="32">
def test_diagonal(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(np.array([[0, 1], [2, 3]], dtype=np.int32))

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(2, 2))

    res = mpc_tensor.diagonal()
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.diagonal()

    assert (res == exp_res.child).all()


</source>
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="214" endline="230" pcid="41">
def test_pos(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(np.array([[5, 2], [3, 7]], dtype=np.int32))

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(2, 2))

    res = mpc_tensor.__pos__()
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.__pos__()

    assert (res == exp_res.child).all()


</source>
</class>

<class classid="3" nclones="2" nlines="11" similarity="100">
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="66" endline="84" pcid="33">
def test_flatten(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(
        np.array([[89, 12, 54], [412, 89, 42], [87, 32, 58]], dtype=np.int32)
    )

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(3, 3))

    res = mpc_tensor.flatten()
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.flatten()

    assert (res == exp_res.child).all()


</source>
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="86" endline="104" pcid="34">
def test_transpose(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(
        np.array([[89, 12, 54], [412, 89, 42], [87, 32, 58]], dtype=np.int32)
    )

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(3, 3))

    res = mpc_tensor.transpose()
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.transpose()

    assert (res == exp_res.child).all()


</source>
</class>

<class classid="4" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="106" endline="122" pcid="35">
def test_resize(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(np.array([[89, 12], [412, 89], [87, 32]], dtype=np.int32))

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(3, 2))

    res = mpc_tensor.resize((2, 3))
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.resize((2, 3))

    assert (res == exp_res.child).all()


</source>
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="160" endline="176" pcid="38">
def test_reshape(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(np.array([[1, 2], [3, 4], [5, 6]], dtype=np.int32))

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(3, 2))

    res = mpc_tensor.reshape((2, 3))
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.reshape((2, 3))

    assert (res == exp_res.child).all()


</source>
</class>

<class classid="5" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="124" endline="140" pcid="36">
def test_ravel(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(np.array([[8, 1, 5], [4, 8, 4], [7, 2, 27]], dtype=np.int32))

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(3, 3))

    res = mpc_tensor.ravel()
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.ravel()

    assert (res == exp_res.child).all()


</source>
<source file="systems/PySyft-0.6.0/tests/integration/smpc/numpy/smpc_numpy_ops_test.py" startline="360" endline="374" pcid="49">
def test_trace(get_clients) -> None:
    clients = get_clients(2)
    value = Tensor(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.int32))

    remote_value = value.send(clients[0])

    mpc_tensor = MPCTensor(parties=clients, secret=remote_value, shape=(3, 3))

    res = mpc_tensor.trace()
    res.block_with_timeout(secs=20)
    res = res.reconstruct()

    exp_res = value.trace()

    assert (res == exp_res.child).all()
</source>
</class>

<class classid="6" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/lib/python/util.py" startline="21" endline="38" pcid="178">
def downcast_args_and_kwargs(
    args: Union[List[Any], Tuple[Any, ...]], kwargs: Dict[Any, Any]
) -> Tuple[List[Any], Dict[Any, Any]]:
    # when we try to handle primitives they often need to be converted to PyPrimitive
    # first so they can be serialized and sent around
    downcasted_args = []
    downcasted_kwargs = {}
    for arg in args:
        # check if its primitive
        downcasted_args.append(downcast(value=arg))

    for k, arg in kwargs.items():
        # check if its primitive
        downcasted_kwargs[k] = downcast(value=arg)

    return (downcasted_args, downcasted_kwargs)


</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/lib/python/util.py" startline="46" endline="61" pcid="180">
def upcast_args_and_kwargs(
    args: Union[List[Any], Tuple[Any, ...]], kwargs: Dict[Any, Any]
) -> Tuple[List[Any], Dict[Any, Any]]:
    # When we invoke remote methods that use C code and cannot utilise our wrapped
    # types through duck typing, we must convert them to the their original form.
    upcasted_args = []
    upcasted_kwargs = {}
    for arg in args:
        # try to upcast if possible
        upcasted_args.append(upcast(value=arg))

    for k, arg in kwargs.items():
        # try to upcast if possible
        upcasted_kwargs[k] = upcast(value=arg)

    return (upcasted_args, upcasted_kwargs)
</source>
</class>

<class classid="7" nclones="13" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/object_request/object_request_messages.py" startline="135" endline="145" pcid="572">
    def __init__(
        self,
        address: Address,
        budget: float,
        reason: str,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.budget = budget
        self.reason = reason

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/object_request/object_request_messages.py" startline="924" endline="934" pcid="616">
    def __init__(
        self,
        address: Address,
        status_code: int,
        request_id: str,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.request_id = request_id

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/tensor_manager/tensor_manager_messages.py" startline="410" endline="420" pcid="664">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/object_request/object_request_messages.py" startline="207" endline="217" pcid="576">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/tensor_manager/tensor_manager_messages.py" startline="267" endline="277" pcid="656">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/object_transfer/object_transfer_messages.py" startline="246" endline="256" pcid="847">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/tensor_manager/tensor_manager_messages.py" startline="553" endline="563" pcid="672">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/tensor_manager/tensor_manager_messages.py" startline="124" endline="134" pcid="648">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/accept_or_deny_request/accept_or_deny_request_messages.py" startline="29" endline="41" pcid="783">
    def __init__(
        self,
        accept: bool,
        request_id: UID,
        address: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)

        # if false, deny the request
        self.accept = accept
        self.request_id = request_id

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/child_node_lifecycle/child_node_lifecycle_messages.py" startline="23" endline="33" pcid="637">
    def __init__(
        self,
        lookup_id: UID,
        child_node_client_address: Address,
        address: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.lookup_id = lookup_id
        self.child_node_client_address = child_node_client_address

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/network_search/network_search_messages.py" startline="100" endline="110" pcid="737">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/object_transfer/object_transfer_messages.py" startline="106" endline="116" pcid="839">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/tensor_manager/tensor_manager_messages.py" startline="696" endline="706" pcid="680">
    def __init__(
        self,
        address: Address,
        status_code: int,
        content: Dict,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.content = content

</source>
</class>

<class classid="8" nclones="3" nlines="11" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/object_request/object_request_messages.py" startline="702" endline="713" pcid="604">
    def __init__(
        self,
        address: Address,
        request_id: str,
        status: str,
        reply_to: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id, reply_to=reply_to)
        self.request_id = request_id
        self.status = status

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/user_manager/user_messages.py" startline="230" endline="241" pcid="795">
    def __init__(
        self,
        address: Address,
        candidate_id: int,
        status: str,
        reply_to: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id, reply_to=reply_to)
        self.candidate_id = candidate_id
        self.status = status

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/dataset_manager/dataset_manager_messages.py" startline="415" endline="426" pcid="877">
    def __init__(
        self,
        address: Address,
        dataset_id: str,
        metadata: Dict,
        reply_to: Address,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id, reply_to=reply_to)
        self.metadata = metadata
        self.dataset_id = dataset_id

</source>
</class>

<class classid="9" nclones="3" nlines="12" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/object_request/object_request_messages.py" startline="777" endline="789" pcid="608">
    def __init__(
        self,
        address: Address,
        status_code: int,
        status: str,
        request_id: str,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.status_code = status_code
        self.status = status
        self.request_id = request_id

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/action/exception_action.py" startline="32" endline="44" pcid="995">
    def __init__(
        self,
        address: Address,
        msg_id_causing_exception: UID,
        exception_type: Type,
        exception_msg: str,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.msg_id_causing_exception = msg_id_causing_exception
        self.exception_type = exception_type
        self.exception_msg = exception_msg

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/association_request/association_request_messages.py" startline="360" endline="372" pcid="946">
    def __init__(
        self,
        address: Address,
        content: Dict,
        source: str,
        target: str,
        msg_id: Optional[UID] = None,
    ):
        super().__init__(address=address, msg_id=msg_id)
        self.content = content
        self.source = source
        self.target = target

</source>
</class>

<class classid="10" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/vpn/vpn_service.py" startline="31" endline="43" pcid="719">
    def process(
        node: NodeServiceInterface,
        msg: VPNConnectMessage,
        verify_key: Optional[VerifyKey] = None,
    ) -> VPNConnectReplyMessage:
        if verify_key is None:
            traceback_and_raise(
                "Can't process VPNConnectService with no verification key."
            )

        result = msg.payload.run(node=node, verify_key=verify_key)
        return VPNConnectMessageWithReply(kwargs=result).back_to(address=msg.reply_to)

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/vpn/vpn_service.py" startline="52" endline="64" pcid="721">
    def process(
        node: NodeServiceInterface,
        msg: VPNJoinMessage,
        verify_key: Optional[VerifyKey] = None,
    ) -> VPNJoinReplyMessage:
        if verify_key is None:
            traceback_and_raise(
                "Can't process VPNJoinService with no verification key."
            )

        result = msg.payload.run(node=node, verify_key=verify_key)
        return VPNJoinMessageWithReply(kwargs=result).back_to(address=msg.reply_to)

</source>
</class>

<class classid="11" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/user_manager/user_messages.py" startline="263" endline="283" pcid="797">
    def _proto2object(
        proto: ProcessUserCandidateMessage_PB,
    ) -> "ProcessUserCandidateMessage":
        """Creates a GetUserMessage from a protobuf
        As a requirement of all objects which inherit from Serializable,
        this method transforms a protobuf object into an instance of this class.
        :return: returns an instance of SignalingOfferMessage
        :rtype: GetUserMessage
        .. note::
            This method is purely an internal method. Please use syft.deserialize()
            if you wish to deserialize an object.
        """

        return ProcessUserCandidateMessage(
            msg_id=_deserialize(blob=proto.msg_id),
            address=_deserialize(blob=proto.address),
            candidate_id=proto.candidate_id,
            status=proto.status,
            reply_to=_deserialize(blob=proto.reply_to),
        )

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/dataset_manager/dataset_manager_messages.py" startline="523" endline="543" pcid="883">
    def _proto2object(
        proto: DeleteDatasetMessage_PB,
    ) -> "DeleteDatasetMessage":
        """Creates a DeleteDatasetMessage from a protobuf
        As a requirement of all objects which inherit from Serializable,
        this method transforms a protobuf object into an instance of this class.
        :return: returns an instance of SignalingOfferMessage
        :rtype: DeleteDatasetMessage
        .. note::
            This method is purely an internal method. Please use syft.deserialize()
            if you wish to deserialize an object.
        """

        return DeleteDatasetMessage(
            msg_id=_deserialize(blob=proto.msg_id),
            address=_deserialize(blob=proto.address),
            dataset_id=proto.dataset_id,
            bin_object_id=proto.bin_object_id,
            reply_to=_deserialize(blob=proto.reply_to),
        )

</source>
</class>

<class classid="12" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/dataset_manager/dataset_manager_messages.py" startline="372" endline="393" pcid="875">
    def _proto2object(
        proto: GetDatasetsResponse_PB,
    ) -> "GetDatasetsResponse":
        """Creates a SignalingOfferMessage from a protobuf
        As a requirement of all objects which inherit from Serializable,
        this method transforms a protobuf object into an instance of this class.
        :return: returns an instance of SignalingOfferMessage
        :rtype: SignalingOfferMessage
        .. note::
            This method is purely an internal method. Please use syft.deserialize()
            if you wish to deserialize an object.
        """

        return GetDatasetsResponse(
            msg_id=_deserialize(blob=proto.msg_id),
            address=_deserialize(blob=proto.address),
            metadatas=[
                dict(metadata_container.metadata)
                for metadata_container in proto.metadatas
            ],
        )

</source>
<source file="systems/PySyft-0.6.0/packages/syft/src/syft/core/node/common/node_service/association_request/association_request_messages.py" startline="537" endline="557" pcid="956">
    def _proto2object(
        proto: GetAssociationRequestsResponse_PB,
    ) -> "GetAssociationRequestsResponse":
        """Creates a SignalingOfferMessage from a protobuf
        As a requirement of all objects which inherit from Serializable,
        this method transforms a protobuf object into an instance of this class.
        :return: returns an instance of SignalingOfferMessage
        :rtype: SignalingOfferMessage
        .. note::
            This method is purely an internal method. Please use syft.deserialize()
            if you wish to deserialize an object.
        """
        return GetAssociationRequestsResponse(
            msg_id=_deserialize(blob=proto.msg_id),
            address=_deserialize(blob=proto.address),
            content=[
                dict(metadata_container.metadata)
                for metadata_container in proto.content
            ],
        )

</source>
</class>

<class classid="13" nclones="2" nlines="13" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/torch/parameter_test.py" startline="15" endline="37" pcid="1118">
def test_parameter_vm_remote_operation(
    apache_arrow_backend: bool, node: sy.VirtualMachine, client: sy.VirtualMachineClient
) -> None:
    sy.flags.APACHE_ARROW_SERDE = apache_arrow_backend
    x = th.nn.Parameter(th.randn(3, 3))

    xp = x.send(client, pointable=False)

    y = xp + xp

    assert len(node.store.values()) == 2

    y.get()

    assert len(node.store.values()) == 1

    del xp

    gc.collect()

    assert len(node.store.values()) == 0


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/torch/parameter_test.py" startline="41" endline="63" pcid="1119">
def test_get_copy(
    apache_arrow_backend: bool, node: sy.VirtualMachine, client: sy.VirtualMachineClient
) -> None:
    sy.flags.APACHE_ARROW_SERDE = apache_arrow_backend
    x = th.nn.Parameter(th.randn(3, 3))

    xp = x.send(client, pointable=False)

    y = xp + xp

    assert len(node.store.values()) == 2

    y.get_copy()

    # no deletion of the object
    assert len(node.store.values()) == 2

    del xp
    gc.collect()

    assert len(node.store.values()) == 1


</source>
</class>

<class classid="14" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/dict/dict_serde_test.py" startline="81" endline="92" pcid="1138">
def test_iterator_methods(
    method_name: str, root_client: sy.VirtualMachineClient
) -> None:
    d = Dict({"#1": 1, "#2": 2})
    dptr = d.send(root_client)

    itemsptr = getattr(dptr, method_name)()
    assert type(itemsptr).__name__ == "IteratorPointer"

    for itemptr, local_item in zip(itemsptr, getattr(d, method_name)()):
        get_item = itemptr.get()
        assert get_item == local_item
</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/collections/ordered_dict/ordered_dict_serde_test.py" startline="99" endline="110" pcid="1149">
def test_iterator_methods(
    method_name: str, root_client: sy.VirtualMachineClient
) -> None:
    d = OrderedDict({"#1": 1, "#2": 2})
    dptr = d.send(root_client)

    itemsptr = getattr(dptr, method_name)()
    assert type(itemsptr).__name__ == "IteratorPointer"

    for itemptr, local_item in zip(itemsptr, getattr(d, method_name)()):
        get_item = itemptr.get()
        assert get_item == local_item
</source>
</class>

<class classid="15" nclones="2" nlines="15" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="1859" endline="1876" pcid="1360">
    def test_removeprefix():
        checkequal("am", String("spam"), "removeprefix", String("sp"))
        checkequal("spamspam", String("spamspamspam"), "removeprefix", String("spam"))
        checkequal("spam", String("spam"), "removeprefix", String("python"))
        checkequal("spam", String("spam"), "removeprefix", String("spider"))
        checkequal("spam", String("spam"), "removeprefix", String("spam and eggs"))

        checkequal("", String(""), "removeprefix", String(""))
        checkequal("", String(""), "removeprefix", String("abcde"))
        checkequal("abcde", String("abcde"), "removeprefix", String(""))
        checkequal("", String("abcde"), "removeprefix", String("abcde"))

        checkraises(TypeError, String("hello"), "removeprefix")
        checkraises(TypeError, String("hello"), "removeprefix", 42)
        checkraises(TypeError, String("hello"), "removeprefix", 42, "h")
        checkraises(TypeError, String("hello"), "removeprefix", "h", 42)
        checkraises(TypeError, String("hello"), "removeprefix", ("he", "l"))

</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="1877" endline="1895" pcid="1361">
    def test_removesuffix():
        checkequal("sp", String("spam"), "removesuffix", String("am"))
        checkequal("spamspam", String("spamspamspam"), "removesuffix", String("spam"))
        checkequal("spam", String("spam"), "removesuffix", String("python"))
        checkequal("spam", String("spam"), "removesuffix", String("blam"))
        checkequal("spam", String("spam"), "removesuffix", String("eggs and spam"))

        checkequal("", String(""), "removesuffix", String(""))
        checkequal("", String(""), "removesuffix", String("abcde"))
        checkequal("abcde", String("abcde"), "removesuffix", String(""))
        checkequal("", String("abcde"), "removesuffix", String("abcde"))

        checkraises(TypeError, String("hello"), "removesuffix")
        checkraises(TypeError, String("hello"), "removesuffix", 42)
        checkraises(TypeError, String("hello"), "removesuffix", 42, "h")
        checkraises(TypeError, String("hello"), "removesuffix", "h", 42)
        checkraises(TypeError, String("hello"), "removesuffix", ("lo", "l"))


</source>
</class>

<class classid="16" nclones="3" nlines="13" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="2261" endline="2275" pcid="1368">
def test_ljust():
    checkequal(String("abc       "), String("abc"), "ljust", 10)
    checkequal(String("abc   "), String("abc"), "ljust", 6)
    checkequal(String("abc"), String("abc"), "ljust", 3)
    checkequal(String("abc"), String("abc"), "ljust", 2)
    checkequal(
        String("abc*******"),
        String("abc"),
        "ljust",
        10,
        String("*"),
    )
    checkraises(TypeError, String("abc"), "ljust")


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="2291" endline="2305" pcid="1370">
def test_center():
    checkequal(String("   abc    "), String("abc"), "center", 10)
    checkequal(String(" abc  "), String("abc"), "center", 6)
    checkequal(String("abc"), String("abc"), "center", 3)
    checkequal(String("abc"), String("abc"), "center", 2)
    checkequal(
        String("***abc****"),
        String("abc"),
        "center",
        10,
        String("*"),
    )
    checkraises(TypeError, String("abc"), "center")


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="2276" endline="2290" pcid="1369">
def test_rjust():
    checkequal(String("       abc"), String("abc"), "rjust", 10)
    checkequal(String("   abc"), String("abc"), "rjust", 6)
    checkequal(String("abc"), String("abc"), "rjust", 3)
    checkequal(String("abc"), String("abc"), "rjust", 2)
    checkequal(
        String("*******abc"),
        String("abc"),
        "rjust",
        10,
        String("*"),
    )
    checkraises(TypeError, String("abc"), "rjust")


</source>
</class>

<class classid="17" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="2365" endline="2376" pcid="1376">
def test_isspace():
    checkequal(False, String(""), "isspace")
    checkequal(False, String("a"), "isspace")
    checkequal(True, String(" "), "isspace")
    checkequal(True, String("\t"), "isspace")
    checkequal(True, String("\r"), "isspace")
    checkequal(True, String("\n"), "isspace")
    checkequal(True, String(" \t\r\n"), "isspace")
    checkequal(False, String(" \t\r\na"), "isspace")
    checkraises(TypeError, String("abc"), "isspace", 42)


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="2388" endline="2399" pcid="1378">
def test_isalnum():
    checkequal(False, String(""), "isalnum")
    checkequal(True, String("a"), "isalnum")
    checkequal(True, String("A"), "isalnum")
    checkequal(False, String("\n"), "isalnum")
    checkequal(True, String("123abc456"), "isalnum")
    checkequal(True, String("a1b3c"), "isalnum")
    checkequal(False, String("aBc000 "), "isalnum")
    checkequal(False, String("abc\n"), "isalnum")
    checkraises(TypeError, String("abc"), "isalnum", 42)


</source>
</class>

<class classid="18" nclones="2" nlines="38" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="3106" endline="3148" pcid="1396">
def test_partition():
    checkequal(
        (
            String("this is the par"),
            String("ti"),
            String("tion method"),
        ),
        String("this is the partition method"),
        "partition",
        String("ti"),
    )

    # from raymond's original specification
    S = String("http://www.python.org")
    checkequal(
        (String("http"), String("://"), String("www.python.org")),
        S,
        "partition",
        String("://"),
    )
    checkequal(
        (String("http://www.python.org"), String(""), String("")),
        S,
        "partition",
        String("?"),
    )
    checkequal(
        (String(""), String("http://"), String("www.python.org")),
        S,
        "partition",
        String("http://"),
    )
    checkequal(
        (String("http://www.python."), String("org"), String("")),
        S,
        "partition",
        String("org"),
    )

    checkraises(ValueError, S, "partition", String(""))
    checkraises(TypeError, S, "partition", None)


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/lib/python/string/string_utils_test.py" startline="3149" endline="3191" pcid="1397">
def test_rpartition():
    checkequal(
        (
            String("this is the rparti"),
            String("ti"),
            String("on method"),
        ),
        String("this is the rpartition method"),
        "rpartition",
        String("ti"),
    )

    # from raymond's original specification
    S = String("http://www.python.org")
    checkequal(
        (String("http"), String("://"), String("www.python.org")),
        S,
        "rpartition",
        String("://"),
    )
    checkequal(
        (String(""), String(""), String("http://www.python.org")),
        S,
        "rpartition",
        String("?"),
    )
    checkequal(
        (String(""), String("http://"), String("www.python.org")),
        S,
        "rpartition",
        String("http://"),
    )
    checkequal(
        (String("http://www.python."), String("org"), String("")),
        S,
        "rpartition",
        String("org"),
    )

    checkraises(ValueError, S, "rpartition", String(""))
    checkraises(TypeError, S, "rpartition", None)


</source>
</class>

<class classid="19" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/store/memory_storage_test.py" startline="49" endline="63" pcid="1626">
def test_set_item() -> None:
    """Tests that __setitem__ and __getitem__ work intuitively."""

    store = MemoryStore()
    id1, obj1 = generate_id_obj(
        data=th.Tensor([1, 2, 3, 4]),
        description="Dummy tensor",
        tags=["dummy", "tensor"],
    )

    store[id1] = obj1
    assert id1 in store
    assert len(store) == 1


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/store/memory_storage_test.py" startline="64" endline="78" pcid="1627">
def test_store_item() -> None:
    """Tests that store() works as an alternative to __setitem__."""

    store = MemoryStore()
    id1, obj1 = generate_id_obj(
        data=th.Tensor([1, 2, 3, 4]),
        description="Dummy tensor",
        tags=["dummy", "tensor"],
    )

    store[id1] = obj1
    assert id1 in store
    assert len(store) == 1


</source>
</class>

<class classid="20" nclones="2" nlines="15" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/domain/domain_test.py" startline="65" endline="94" pcid="1635">
def test_domain_request_denied() -> None:
    domain_1 = Domain(name="remote domain")
    tensor = th.tensor([1, 2, 3])

    domain_1_client = domain_1.get_root_client()
    data_ptr_domain_1 = tensor.send(domain_1_client)

    domain_2 = Domain(name="my domain")

    data_ptr_domain_1.request(reason="I'd lke to see this pointer")

    requested_object = data_ptr_domain_1.id_at_location

    # make request
    message_request_id = domain_1_client.requests.get_request_id_from_object_id(
        object_id=requested_object
    )

    # domain 1 client rejects request
    domain_1.requests[0].owner_client_if_available = domain_1_client
    domain_1.requests[0].deny()

    # check status
    response = data_ptr_domain_1.check_access(
        node=domain_2, request_id=message_request_id
    )

    assert RequestStatus.Rejected == response


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/domain/domain_test.py" startline="98" endline="124" pcid="1636">
def test_domain_request_accepted() -> None:
    domain_1 = Domain(name="remote domain")
    tensor = th.tensor([1, 2, 3])

    domain_1_client = domain_1.get_root_client()
    data_ptr_domain_1 = tensor.send(domain_1_client)

    domain_2 = Domain(name="my domain")

    data_ptr_domain_1.request(reason="I'd lke to see this pointer")

    requested_object = data_ptr_domain_1.id_at_location

    message_request_id = domain_1_client.requests.get_request_id_from_object_id(
        object_id=requested_object
    )

    domain_1.requests[0].owner_client_if_available = domain_1_client
    domain_1.requests[0].accept()

    response = data_ptr_domain_1.check_access(
        node=domain_2, request_id=message_request_id
    )

    assert RequestStatus.Accepted == response


</source>
</class>

<class classid="21" nclones="2" nlines="17" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/domain/service/request_message_test.py" startline="54" endline="75" pcid="1642">
def test_accept(method_name: str) -> None:
    node = Domain(name="remote domain")
    node_client = node.get_root_client()

    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
        owner_client_if_available=node_client,
    )

    with patch.object(
        request.owner_client_if_available, "send_immediate_msg_without_reply"
    ) as mock_send_msg:
        getattr(request, method_name)()
        assert mock_send_msg.call_args[1]["msg"].address == node_client.address
        assert mock_send_msg.call_args[1]["msg"].accept is True
        assert mock_send_msg.call_args[1]["msg"].request_id == request.id


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/domain/service/request_message_test.py" startline="78" endline="99" pcid="1643">
def test_deny(method_name: str) -> None:
    node = Domain(name="remote domain")
    node_client = node.get_root_client()

    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
        owner_client_if_available=node_client,
    )

    with patch.object(
        request.owner_client_if_available, "send_immediate_msg_without_reply"
    ) as mock_send_msg:
        getattr(request, method_name)()
        assert mock_send_msg.call_args[1]["msg"].address == node_client.address
        assert mock_send_msg.call_args[1]["msg"].accept is False
        assert mock_send_msg.call_args[1]["msg"].request_id == request.id


</source>
</class>

<class classid="22" nclones="3" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/domain/service/request_message_test.py" startline="100" endline="112" pcid="1644">
def test_fail_accept_request_message() -> None:
    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
    )

    with raises(Exception, match="No way to dispatch Accept Message."):
        request.accept()


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/domain/service/request_message_test.py" startline="126" endline="136" pcid="1646">
def test_fail_process_request_service() -> None:
    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
    )

    with raises(Exception, match="No way to dispatch Deny Message."):
        request.deny()
</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/domain/service/request_message_test.py" startline="113" endline="125" pcid="1645">
def test_fail_deny_request_message() -> None:
    addr = Address()
    request = RequestMessage(
        object_id=UID(),
        address=addr,
        requester_verify_key=get_verify_key(),
        owner_address=addr,
    )

    with raises(Exception, match="No way to dispatch Deny Message."):
        request.deny()


</source>
</class>

<class classid="23" nclones="2" nlines="11" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/common/service/auth_test.py" startline="83" endline="100" pcid="1668">
def test_service_auth_admin_fails() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)

    random_signing_key = SigningKey.generate()
    random_verify_key = random_signing_key.verify_key

    # Administrator only
    @service_auth(admin_only=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    with pytest.raises(
        AuthorizationException, match="User lacks Administrator credentials."
    ):
        process(node=node, msg=msg, verify_key=random_verify_key)


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/common/service/auth_test.py" startline="118" endline="135" pcid="1672">
def test_service_auth_cpl_ofcr_fails() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)

    random_signing_key = SigningKey.generate()
    random_verify_key = random_signing_key.verify_key

    # Compliance Officer only
    @service_auth(cpl_ofcr_only=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    with pytest.raises(
        AuthorizationException, match="User lacks Compliance Officer credentials."
    ):
        process(node=node, msg=msg, verify_key=random_verify_key)


</source>
</class>

<class classid="24" nclones="2" nlines="10" similarity="100">
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/common/service/auth_test.py" startline="101" endline="117" pcid="1670">
def test_service_auth_admin_success() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)

    random_signing_key = SigningKey.generate()
    random_verify_key = random_signing_key.verify_key

    # Administrator only
    @service_auth(admin_only=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    # NOTE didn't find a method to add a key to admin_verify_key_registry
    node.admin_verify_key_registry.add(random_verify_key)
    process(node=node, msg=msg, verify_key=random_verify_key)


</source>
<source file="systems/PySyft-0.6.0/packages/syft/tests/syft/core/node/common/service/auth_test.py" startline="136" endline="152" pcid="1674">
def test_service_auth_cpl_ofcr_success() -> None:
    node = sy.Device()
    msg = sy.ReprMessage(address=node.address)

    random_signing_key = SigningKey.generate()
    random_verify_key = random_signing_key.verify_key

    # Compliance Officer only
    @service_auth(cpl_ofcr_only=True)
    def process(node: sy.Device, msg: sy.ReprMessage, verify_key: VerifyKey) -> None:
        pass

    # NOTE didn't find a method to add a key to cpl_ofcr_verify_key_registry
    node.cpl_ofcr_verify_key_registry.add(random_verify_key)
    process(node=node, msg=msg, verify_key=random_verify_key)


</source>
</class>

</clones>
