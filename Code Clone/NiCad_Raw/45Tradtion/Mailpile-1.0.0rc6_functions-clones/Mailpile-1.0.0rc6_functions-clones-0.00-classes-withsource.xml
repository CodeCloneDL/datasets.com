<clones>
<systeminfo processor="nicad6" system="Mailpile-1.0.0rc6" granularity="functions" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="2699" npairs="1"/>
<runinfo ncompares="14850" cputime="74688"/>
<classinfo nclasses="1"/>

<class classid="1" nclones="2" nlines="15" similarity="100">
<source file="systems/Mailpile-1.0.0rc6/mailpile/plugins/vcard_libravatar.py" startline="44" endline="66" pcid="1061">
    def _want_update(self):
        def _jittery_time():
            # This introduces 5 hours of jitter into the time check
            # below, biased towards extending the delay by an average
            # of 1.5 hours each time. This is mostly done to spread
            # out the load on the Libravatar server over time, as to
            # begin with all contacts will be checked at roughly the
            # same time.
            return time.time() + random.randrange(-14400, 3600)

        want = []
        vcards = self.session.config.vcards
        for vcard in vcards.find_vcards([], kinds=vcards.KINDS_PEOPLE):
            try:
                ts = int(vcard.get(self.VCARD_TS).value)
            except IndexError:
                ts = 0
            if ts < _jittery_time() - (self.config.interval * 24 * 3600):
                want.append(vcard)
            if len(want) >= self.config.batch:
                break
        return want

</source>
<source file="systems/Mailpile-1.0.0rc6/mailpile/plugins/vcard_gravatar.py" startline="46" endline="67" pcid="1275">
    def _want_update(self):
        def _jittery_time():
            # This introduces 5 hours of jitter into the time check below,
            # biased towards extending the delay by an average of 1.5 hours
            # each time. This is mostly done to spread out the load on the
            # Gravatar server over time, as to begin with all contacts will
            # be checked at roughly the same time.
            return time.time() + random.randrange(-14400, 3600)

        want = []
        vcards = self.session.config.vcards
        for vcard in vcards.find_vcards([], kinds=vcards.KINDS_PEOPLE):
            try:
                ts = int(vcard.get(self.VCARD_TS).value)
            except IndexError:
                ts = 0
            if ts < _jittery_time() - (self.config.interval * 24 * 3600):
                want.append(vcard)
            if len(want) >= self.config.batch:
                break
        return want

</source>
</class>

</clones>
