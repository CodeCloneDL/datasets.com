<clones>
<systeminfo processor="nicad6" system="thefuck-3.32" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1353" npairs="3"/>
<runinfo ncompares="2769" cputime="42346"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="12" similarity="75">
<source file="systems/thefuck-3.32/thefuck/rules/grunt_task_not_found.py" startline="15" endline="31" pcid="248">
def _get_all_tasks():
    proc = Popen(['grunt', '--help'], stdout=PIPE)
    should_yield = False
    for line in proc.stdout.readlines():
        line = line.decode().strip()

        if 'Available tasks' in line:
            should_yield = True
            continue

        if should_yield and not line:
            return

        if '  ' in line:
            yield line.split(' ')[0]


</source>
<source file="systems/thefuck-3.32/thefuck/rules/react_native_command_unrecognized.py" startline="13" endline="29" pcid="435">
def _get_commands():
    proc = Popen(['react-native', '--help'], stdout=PIPE)
    should_yield = False
    for line in proc.stdout.readlines():
        line = line.decode().strip()

        if not line:
            continue

        if 'Commands:' in line:
            should_yield = True
            continue

        if should_yield:
            yield line.split(' ')[0]


</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="70">
<source file="systems/thefuck-3.32/thefuck/rules/yarn_command_not_found.py" startline="18" endline="31" pcid="331">
def _get_all_tasks():
    proc = Popen(['yarn', '--help'], stdout=PIPE)
    should_yield = False
    for line in proc.stdout.readlines():
        line = line.decode().strip()

        if 'Commands:' in line:
            should_yield = True
            continue

        if should_yield and '- ' in line:
            yield line.split(' ')[-1]


</source>
<source file="systems/thefuck-3.32/thefuck/specific/npm.py" startline="10" endline="21" pcid="479">
def get_scripts():
    """Get custom npm scripts."""
    proc = Popen(['npm', 'run-script'], stdout=PIPE)
    should_yeild = False
    for line in proc.stdout.readlines():
        line = line.decode()
        if 'available via `npm run-script`:' in line:
            should_yeild = True
            continue

        if should_yeild and re.match(r'^  [^ ]+', line):
            yield line.strip().split(' ')[0]
</source>
</class>

<class classid="3" nclones="2" nlines="11" similarity="100">
<source file="systems/thefuck-3.32/tests/functional/test_zsh.py" startline="33" endline="45" pcid="670">
                        (python_3, True),
                        (python_2, False)])
def proc(request, spawnu, TIMEOUT):
    container, instant_mode = request.param
    proc = spawnu(*container)
    proc.sendline(u'pip install /src')
    assert proc.expect([TIMEOUT, u'Successfully installed'])
    proc.sendline(init_zshrc.format(
        u'--enable-experimental-instant-mode' if instant_mode else ''))
    proc.sendline(u"zsh")
    if instant_mode:
        assert proc.expect([TIMEOUT, u'instant mode ready: True'])
    return proc
</source>
<source file="systems/thefuck-3.32/tests/functional/test_bash.py" startline="26" endline="38" pcid="676">
                        (python_3, True),
                        (python_2, False)])
def proc(request, spawnu, TIMEOUT):
    container, instant_mode = request.param
    proc = spawnu(*container)
    proc.sendline(u"pip install /src")
    assert proc.expect([TIMEOUT, u'Successfully installed'])
    proc.sendline(init_bashrc.format(
        u'--enable-experimental-instant-mode' if instant_mode else ''))
    proc.sendline(u"bash")
    if instant_mode:
        assert proc.expect([TIMEOUT, u'instant mode ready: True'])
    return proc
</source>
</class>

</clones>
