<clones>
<systeminfo processor="nicad6" system="powerline-2.8.2" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1580" npairs="4"/>
<runinfo ncompares="5475" cputime="48919"/>
<classinfo nclasses="4"/>

<class classid="1" nclones="2" nlines="23" similarity="100">
<source file="systems/powerline-2.8.2/powerline/bindings/ipython/since_7.py" startline="23" endline="56" pcid="598">
    def do_setup(self, ip, prompts, shutdown_hook):
        prompts.powerline = self

        msfn_missing = ()
        saved_msfn = getattr(ip, '_make_style_from_name', msfn_missing)

        if hasattr(saved_msfn, 'powerline_original'):
            saved_msfn = saved_msfn.powerline_original

        def _make_style_from_name(ip, name):
            prev_style = saved_msfn(name)
            new_style = PowerlinePromptStyle(lambda: prev_style)
            return new_style

        _make_style_from_name.powerline_original = saved_msfn

        if not isinstance(ip._style, PowerlinePromptStyle):
            prev_style = ip._style
            ip._style = PowerlinePromptStyle(lambda: prev_style)

        if not isinstance(saved_msfn, type(self.init)):
            _saved_msfn = saved_msfn
            saved_msfn = lambda: _saved_msfn(ip)

        if saved_msfn is not msfn_missing:
            ip._make_style_from_name = _make_style_from_name

        magics = PowerlineMagics(ip, self)
        ip.register_magics(magics)

        if shutdown_hook:
            shutdown_hook.powerline = ref(self)


</source>
<source file="systems/powerline-2.8.2/powerline/bindings/ipython/since_5.py" startline="23" endline="56" pcid="602">
	def do_setup(self, ip, prompts, shutdown_hook):
		prompts.powerline = self

		msfn_missing = ()
		saved_msfn = getattr(ip, '_make_style_from_name', msfn_missing)

		if hasattr(saved_msfn, 'powerline_original'):
			saved_msfn = saved_msfn.powerline_original

		def _make_style_from_name(ip, name):
			prev_style = saved_msfn(name)
			new_style = PowerlinePromptStyle(lambda: prev_style)
			return new_style

		_make_style_from_name.powerline_original = saved_msfn

		if not isinstance(ip._style, PowerlinePromptStyle):
			prev_style = ip._style
			ip._style = PowerlinePromptStyle(lambda: prev_style)

		if not isinstance(saved_msfn, type(self.init)):
			_saved_msfn = saved_msfn
			saved_msfn = lambda: _saved_msfn(ip)

		if saved_msfn is not msfn_missing:
			ip._make_style_from_name = _make_style_from_name

		magics = PowerlineMagics(ip, self)
		ip.register_magics(magics)

		if shutdown_hook:
			shutdown_hook.powerline = ref(self)


</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/powerline-2.8.2/powerline/lib/encoding.py" startline="39" endline="58" pcid="859">
def get_preferred_output_encoding():
	'''Get encoding that should be used for printing strings

	.. warning::
		Falls back to ASCII, so that output is most likely to be displayed 
		correctly.
	'''
	if hasattr(locale, 'LC_MESSAGES'):
		return (
			locale.getlocale(locale.LC_MESSAGES)[1]
			or locale.getdefaultlocale()[1]
			or 'ascii'
		)

	return (
		locale.getdefaultlocale()[1]
		or 'ascii'
	)


</source>
<source file="systems/powerline-2.8.2/powerline/lib/encoding.py" startline="59" endline="78" pcid="860">
def get_preferred_input_encoding():
	'''Get encoding that should be used for reading shell command output

	.. warning::
		Falls back to latin1 so that function is less likely to throw as decoded 
		output is primary searched for ASCII values.
	'''
	if hasattr(locale, 'LC_MESSAGES'):
		return (
			locale.getlocale(locale.LC_MESSAGES)[1]
			or locale.getdefaultlocale()[1]
			or 'latin1'
		)

	return (
		locale.getdefaultlocale()[1]
		or 'latin1'
	)


</source>
</class>

<class classid="3" nclones="2" nlines="11" similarity="100">
<source file="systems/powerline-2.8.2/tests/test_python/test_configuration.py" startline="431" endline="443" pcid="1140">
	def test_include_modes(self, p, config):
		config['themes/test/default']['segments'] = {
			'left': [
				highlighted_string('s1', 'g1', include_modes=['m1']),
				highlighted_string('s2', 'g1', include_modes=['m1', 'm2']),
				highlighted_string('s3', 'g1', include_modes=['m3']),
			]
		}
		self.assertRenderEqual(p, '{--}')
		self.assertRenderEqual(p, '{56} s1{56}>{56}s2{6-}>>{--}', mode='m1')
		self.assertRenderEqual(p, '{56} s2{6-}>>{--}', mode='m2')
		self.assertRenderEqual(p, '{56} s3{6-}>>{--}', mode='m3')

</source>
<source file="systems/powerline-2.8.2/tests/test_python/test_configuration.py" startline="445" endline="457" pcid="1141">
	def test_exclude_modes(self, p, config):
		config['themes/test/default']['segments'] = {
			'left': [
				highlighted_string('s1', 'g1', exclude_modes=['m1']),
				highlighted_string('s2', 'g1', exclude_modes=['m1', 'm2']),
				highlighted_string('s3', 'g1', exclude_modes=['m3']),
			]
		}
		self.assertRenderEqual(p, '{56} s1{56}>{56}s2{56}>{56}s3{6-}>>{--}')
		self.assertRenderEqual(p, '{56} s3{6-}>>{--}', mode='m1')
		self.assertRenderEqual(p, '{56} s1{56}>{56}s3{6-}>>{--}', mode='m2')
		self.assertRenderEqual(p, '{56} s1{56}>{56}s2{6-}>>{--}', mode='m3')

</source>
</class>

<class classid="4" nclones="2" nlines="11" similarity="100">
<source file="systems/powerline-2.8.2/tests/test_python/test_segments.py" startline="1213" endline="1226" pcid="1267">
	def test_battery_with_ac_online(self):
		pl = Pl()

		def _get_battery_status(pl):
			return 86, True

		with replace_attr(self.module, '_get_battery_status', _get_battery_status):
			self.assertEqual(self.module.battery(pl=pl, online='C', offline=' '), [
				{
					'contents': 'C 86%',
					'highlight_groups': ['battery_gradient', 'battery'],
					'gradient_level': 14,
				}])

</source>
<source file="systems/powerline-2.8.2/tests/test_python/test_segments.py" startline="1227" endline="1241" pcid="1269">
	def test_battery_with_ac_offline(self):
		pl = Pl()

		def _get_battery_status(pl):
			return 86, False

		with replace_attr(self.module, '_get_battery_status', _get_battery_status):
			self.assertEqual(self.module.battery(pl=pl, online='C', offline=' '), [
				{
					'contents': '  86%',
					'highlight_groups': ['battery_gradient', 'battery'],
					'gradient_level': 14,
				}])


</source>
</class>

</clones>
