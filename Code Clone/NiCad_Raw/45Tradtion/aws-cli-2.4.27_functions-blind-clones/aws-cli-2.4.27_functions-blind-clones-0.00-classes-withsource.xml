<clones>
<systeminfo processor="nicad6" system="aws-cli-2.4.27" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="14307" npairs="467"/>
<runinfo ncompares="712902" cputime="119429"/>
<classinfo nclasses="235"/>

<class classid="1" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/utils/botocore/__init__.py" startline="469" endline="497" pcid="152">
    def wait(self, check, *args, **kwargs):
        """
        Wait until the check succeeds the configured number of times

        :type check: callable
        :param check: A callable that returns True or False to indicate
        if the check succeeded or failed.

        :type args: list
        :param args: Any ordered arguments to be passed to the check.

        :type kwargs: dict
        :param kwargs: Any keyword arguments to be passed to the check.
        """
        attempts = 0
        successes = 0
        if self.delay_initial_poll:
            time.sleep(self.delay)
        while attempts < self.max_attempts:
            attempts += 1
            if check(*args, **kwargs):
                successes += 1
                if successes >= self.min_successes:
                    return
            else:
                time.sleep(self.delay)
        fail_msg = self._fail_message(attempts, successes)
        raise ConsistencyWaiterException(fail_msg)

</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="976" endline="1004" pcid="9991">
    def wait(self, check, *args, **kwargs):
        """
        Wait until the check succeeds the configured number of times

        :type check: callable
        :param check: A callable that returns True or False to indicate
        if the check succeeded or failed.

        :type args: list
        :param args: Any ordered arguments to be passed to the check.

        :type kwargs: dict
        :param kwargs: Any keyword arguments to be passed to the check.
        """
        attempts = 0
        successes = 0
        if self.delay_initial_poll:
            time.sleep(self.delay)
        while attempts < self.max_attempts:
            attempts += 1
            if check(*args, **kwargs):
                successes += 1
                if successes >= self.min_successes:
                    return
            else:
                time.sleep(self.delay)
        fail_msg = self._fail_message(attempts, successes)
        raise ConsistencyWaiterException(fail_msg)

</source>
</class>

<class classid="2" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="60" endline="74" pcid="299">
    def create_role(self, policy_document, policy_arn=None):
        name = self.random_name()
        response = self.iam.create_role(
            RoleName=name,
            AssumeRolePolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(self.iam.delete_role, RoleName=name)
        if policy_arn:
            self.iam.attach_role_policy(RoleName=name, PolicyArn=policy_arn)
            self.addCleanup(
                self.iam.detach_role_policy, RoleName=name,
                PolicyArn=policy_arn
            )
        return response['Role']

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="174" endline="188" pcid="379">
    def create_role(self, policy_document, policy_arn=None):
        name = self.random_name()
        response = self.iam.create_role(
            RoleName=name,
            AssumeRolePolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(self.iam.delete_role, RoleName=name)
        if policy_arn:
            self.iam.attach_role_policy(RoleName=name, PolicyArn=policy_arn)
            self.addCleanup(
                self.iam.detach_role_policy, RoleName=name,
                PolicyArn=policy_arn
            )
        return response['Role']

</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="75" endline="91" pcid="300">
    def create_user(self, policy_arns):
        name = self.random_name()
        user = self.iam.create_user(UserName=name)['User']
        self.addCleanup(self.iam.delete_user, UserName=name)

        for arn in policy_arns:
            self.iam.attach_user_policy(
                UserName=name,
                PolicyArn=arn
            )
            self.addCleanup(
                self.iam.detach_user_policy,
                UserName=name, PolicyArn=arn
            )

        return user

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="189" endline="205" pcid="380">
    def create_user(self, policy_arns):
        name = self.random_name()
        user = self.iam.create_user(UserName=name)['User']
        self.addCleanup(self.iam.delete_user, UserName=name)

        for arn in policy_arns:
            self.iam.attach_user_policy(
                UserName=name,
                PolicyArn=arn
            )
            self.addCleanup(
                self.iam.detach_user_policy,
                UserName=name, PolicyArn=arn
            )

        return user

</source>
</class>

<class classid="4" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="129" endline="149" pcid="303">
    def create_assume_policy(self, role_arn):
        policy_document = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": role_arn,
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        name = self.random_name()
        response = self.iam.create_policy(
            PolicyName=name,
            PolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(
            self.iam.delete_policy, PolicyArn=response['Policy']['Arn']
        )
        return response['Policy']['Arn']

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="250" endline="270" pcid="384">
    def create_assume_policy(self, role_arn):
        policy_document = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": role_arn,
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        name = self.random_name()
        response = self.iam.create_policy(
            PolicyName=name,
            PolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(
            self.iam.delete_policy, PolicyArn=response['Policy']['Arn']
        )
        return response['Policy']['Arn']

</source>
</class>

<class classid="5" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="480" endline="494" pcid="435">
    def test_unicode_system_character(self):
        # Verify we can use a unicode system character which would normally
        # break the xml parser
        key_name = 'foo\x08'
        self.create_object(key_name)
        self.addCleanup(self.delete_object, key_name, self.bucket_name)
        parsed = self.client.list_objects(Bucket=self.bucket_name)
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], key_name)

        parsed = self.client.list_objects(Bucket=self.bucket_name,
                                          EncodingType='url')
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], 'foo%08')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="510" endline="524" pcid="437">
    def test_unicode_system_character_with_list_object_versions(self):
        # Verify we can use a unicode system character which would normally
        # break the xml parser
        key_name = 'foo\x03'
        self.create_object(key_name)
        self.addCleanup(self.delete_object, key_name, self.bucket_name)
        parsed = self.client.list_object_versions(Bucket=self.bucket_name)
        self.assertEqual(len(parsed['Versions']), 1)
        self.assertEqual(parsed['Versions'][0]['Key'], key_name)

        parsed = self.client.list_object_versions(Bucket=self.bucket_name,
                                          EncodingType='url')
        self.assertEqual(len(parsed['Versions']), 1)
        self.assertEqual(parsed['Versions'][0]['Key'], 'foo%03')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="495" endline="509" pcid="436">
    def test_unicode_system_character_with_list_v2(self):
        # Verify we can use a unicode system character which would normally
        # break the xml parser
        key_name = 'foo\x08'
        self.create_object(key_name)
        self.addCleanup(self.delete_object, key_name, self.bucket_name)
        parsed = self.client.list_objects_v2(Bucket=self.bucket_name)
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], key_name)

        parsed = self.client.list_objects_v2(Bucket=self.bucket_name,
                                          EncodingType='url')
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], 'foo%08')

</source>
</class>

<class classid="6" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="588" endline="601" pcid="442">
    def test_copy_with_quoted_char(self):
        key_name = 'a+b/foo'
        self.create_object(key_name=key_name)

        key_name2 = key_name + 'bar'
        self.client.copy_object(
            Bucket=self.bucket_name, Key=key_name2,
            CopySource='%s/%s' % (self.bucket_name, key_name))

        # Now verify we can retrieve the copied object.
        data = self.client.get_object(
            Bucket=self.bucket_name, Key=key_name2)
        self.assertEqual(data['Body'].read().decode('utf-8'), 'foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="602" endline="615" pcid="443">
    def test_copy_with_query_string(self):
        key_name = 'a+b/foo?notVersionid=bar'
        self.create_object(key_name=key_name)

        key_name2 = key_name + 'bar'
        self.client.copy_object(
            Bucket=self.bucket_name, Key=key_name2,
            CopySource='%s/%s' % (self.bucket_name, key_name))

        # Now verify we can retrieve the copied object.
        data = self.client.get_object(
            Bucket=self.bucket_name, Key=key_name2)
        self.assertEqual(data['Body'].read().decode('utf-8'), 'foo')

</source>
</class>

<class classid="7" nclones="2" nlines="19" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="845" endline="866" pcid="459">
    def test_paginate_list_objects_unicode(self):
        key_names = [
            u'non-ascii-key-\xe4\xf6\xfc-01.txt',
            u'non-ascii-key-\xe4\xf6\xfc-02.txt',
            u'non-ascii-key-\xe4\xf6\xfc-03.txt',
            u'non-ascii-key-\xe4\xf6\xfc-04.txt',
        ]
        for key in key_names:
            response = self.client.put_object(Bucket=self.bucket_name,
                                              Key=key, Body='')
            self.assert_status_code(response, 200)

        list_objs_paginator = self.client.get_paginator('list_objects')
        key_refs = []
        for response in list_objs_paginator.paginate(Bucket=self.bucket_name,
                                                     PaginationConfig={
                                                         'PageSize': 2}):
            for content in response['Contents']:
                key_refs.append(content['Key'])

        self.assertEqual(key_names, key_refs)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="868" endline="889" pcid="460">
    def test_paginate_list_objects_safe_chars(self):
        key_names = [
            u'-._~safe-chars-key-01.txt',
            u'-._~safe-chars-key-02.txt',
            u'-._~safe-chars-key-03.txt',
            u'-._~safe-chars-key-04.txt',
        ]
        for key in key_names:
            response = self.client.put_object(Bucket=self.bucket_name,
                                              Key=key, Body='')
            self.assert_status_code(response, 200)

        list_objs_paginator = self.client.get_paginator('list_objects')
        key_refs = []
        for response in list_objs_paginator.paginate(Bucket=self.bucket_name,
                                                     PaginationConfig={
                                                         'PageSize': 2}):
            for content in response['Contents']:
                key_refs.append(content['Key'])

        self.assertEqual(key_names, key_refs)

</source>
</class>

<class classid="8" nclones="3" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/test_codecommit.py" startline="61" endline="73" pcid="547">
    def test_integration_using_cli_driver(self, dt_mock, stdout_mock):
        dt_mock.utcnow.return_value = datetime(2010, 10, 8)
        driver = create_clidriver()
        entry_point = AWSCLIEntryPoint(driver)
        rc = entry_point.main('codecommit credential-helper get'.split())
        output = stdout_mock.getvalue().strip()
        self.assertEquals(
            ('username=foo\n'
             'password=20101008T000000Z'
             '7dc259e2d505af354a1219b9bcd784bd384dc706efa0d9aefc571f214be4c89c'),
             output)
        self.assertEquals(0, rc)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/test_codecommit.py" startline="93" endline="106" pcid="549">
    def test_integration_vpc_using_cli_driver(self, dt_mock, stdout_mock):
        dt_mock.utcnow.return_value = datetime(2010, 10, 8)
        driver = create_clidriver()
        entry_point = AWSCLIEntryPoint(driver)
        rc = entry_point.main('codecommit credential-helper get'.split())
        output = stdout_mock.getvalue().strip()
        self.assertEquals(
            ('username=foo\n'
             'password=20101008T000000Z'
             '9ed987cc6336c3de2d9f06b9236c7a9fd76b660b080db15983290e636dbfbd6b'),
             output)
        self.assertEquals(0, rc)


</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/test_codecommit.py" startline="77" endline="89" pcid="548">
    def test_integration_fips_using_cli_driver(self, dt_mock, stdout_mock):
        dt_mock.utcnow.return_value = datetime(2010, 10, 8)
        driver = create_clidriver()
        entry_point = AWSCLIEntryPoint(driver)
        rc = entry_point.main('codecommit credential-helper get'.split())
        output = stdout_mock.getvalue().strip()
        self.assertEquals(
            ('username=foo\n'
             'password=20101008T000000Z'
             '500037cb3514b3fe01ebcda7c80973f5b4c0d8199a7a6563b85fd6edf272d460'),
             output)
        self.assertEquals(0, rc)

</source>
</class>

<class classid="9" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1002" endline="1018" pcid="611">
    def test_follow_symlinks(self, files, s3_utils, symlink_files,
                             shared_bucket):
        # Get rid of the bad symlink first.
        os.remove(os.path.join(files.rootdir, 'b-badsymlink'))
        p = aws('s3 sync %s s3://%s/ --follow-symlinks' %
                (files.rootdir, shared_bucket))
        self.assert_no_errors(p)
        contents = s3_utils.get_key_contents(shared_bucket, 'a-goodsymlink')
        assert contents == 'foo.txt contents'
        assert s3_utils.key_not_exists(shared_bucket, 'b-badsymlink')
        contents = s3_utils.get_key_contents(
            shared_bucket, 'c-goodsymlink/foo.txt')
        assert contents == 'foo.txt contents'
        contents = s3_utils.get_key_contents(
            shared_bucket, 'realfiles/foo.txt')
        assert contents == 'foo.txt contents'

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1019" endline="1035" pcid="612">
    def test_follow_symlinks_default(self, files, s3_utils, symlink_files,
                                     shared_bucket):
        # Get rid of the bad symlink first.
        os.remove(os.path.join(files.rootdir, 'b-badsymlink'))
        p = aws('s3 sync %s s3://%s/' %
                (files.rootdir, shared_bucket))
        self.assert_no_errors(p)
        contents = s3_utils.get_key_contents(shared_bucket, 'a-goodsymlink')
        assert contents == 'foo.txt contents'
        assert s3_utils.key_not_exists(shared_bucket, 'b-badsymlink')
        contents = s3_utils.get_key_contents(
            shared_bucket, 'c-goodsymlink/foo.txt')
        assert contents == 'foo.txt contents'
        contents = s3_utils.get_key_contents(
            shared_bucket, 'realfiles/foo.txt')
        assert contents == 'foo.txt contents'

</source>
</class>

<class classid="10" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1122" endline="1132" pcid="620">
    def test_ls_with_prefix(self, s3_utils, shared_bucket):
        s3_utils.put_object(shared_bucket, 'foo.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'foo', 'contents')
        s3_utils.put_object(shared_bucket, 'bar.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'subdir/foo.txt', 'contents')
        p = aws('s3 ls s3://%s' % shared_bucket)
        assert 'PRE subdir/' in p.stdout
        assert '8 foo.txt' in p.stdout
        assert '8 foo' in p.stdout
        assert '8 bar.txt' in p.stdout

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1133" endline="1143" pcid="621">
    def test_ls_recursive(self, s3_utils, shared_bucket):
        s3_utils.put_object(shared_bucket, 'foo.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'foo', 'contents')
        s3_utils.put_object(shared_bucket, 'bar.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'subdir/foo.txt', 'contents')
        p = aws('s3 ls s3://%s --recursive' % shared_bucket)
        assert '8 foo.txt' in p.stdout
        assert '8 foo' in p.stdout
        assert '8 bar.txt' in p.stdout
        assert '8 subdir/foo.txt' in p.stdout

</source>
</class>

<class classid="11" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/elasticache/test_create_cache_cluster.py" startline="22" endline="43" pcid="799">
    def test_create_cache_cluster(self):
        args = ('--cache-cluster-id cachecluster-us-east-1c '
                '--num-cache-nodes 1 '
                '--cache-node-type cache.m1.small '
                '--engine memcached '
                '--engine-version 1.4.5 '
                '--cache-security-group-names group1 group2 '
                '--preferred-availability-zone us-east-1c '
                '--auto-minor-version-upgrade '
                '--preferred-maintenance-window fri:08:00-fri:09:00')
        cmdline = self.prefix + args
        result = {'AutoMinorVersionUpgrade': True,
                  'CacheClusterId': 'cachecluster-us-east-1c',
                  'CacheNodeType': 'cache.m1.small',
                  'CacheSecurityGroupNames': ['group1', 'group2'],
                  'Engine': 'memcached',
                  'EngineVersion': '1.4.5',
                  'NumCacheNodes': 1,
                  'PreferredAvailabilityZone': 'us-east-1c',
                  'PreferredMaintenanceWindow': 'fri:08:00-fri:09:00'}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elasticache/test_create_cache_cluster.py" startline="44" endline="65" pcid="800">
    def test_create_cache_cluster_no_auto_minor_upgrade(self):
        args = ('--cache-cluster-id cachecluster-us-east-1c '
                '--num-cache-nodes 1 '
                '--cache-node-type cache.m1.small '
                '--engine memcached '
                '--engine-version 1.4.5 '
                '--cache-security-group-names group1 group2 '
                '--preferred-availability-zone us-east-1c '
                '--no-auto-minor-version-upgrade '
                '--preferred-maintenance-window fri:08:00-fri:09:00')
        cmdline = self.prefix + args
        result = {'AutoMinorVersionUpgrade': False,
                  'CacheClusterId': 'cachecluster-us-east-1c',
                  'CacheNodeType': 'cache.m1.small',
                  'CacheSecurityGroupNames': ['group1', 'group2'],
                  'Engine': 'memcached',
                  'EngineVersion': '1.4.5',
                  'NumCacheNodes': 1,
                  'PreferredAvailabilityZone': 'us-east-1c',
                  'PreferredMaintenanceWindow': 'fri:08:00-fri:09:00'}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="12" nclones="10" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="21" endline="38" pcid="914">
    def test_tcp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol tcp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '6',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="75" endline="92" pcid="917">
    def test_all(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol all'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '-1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="93" endline="110" pcid="918">
    def test_number(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol 99'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '99',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="75" endline="92" pcid="969">
    def test_all(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol all'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '-1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="57" endline="74" pcid="968">
    def test_icmp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol icmp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="21" endline="38" pcid="966">
    def test_tcp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol tcp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '6',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="39" endline="56" pcid="967">
    def test_udp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol udp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '17',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="57" endline="74" pcid="916">
    def test_icmp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol icmp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="93" endline="110" pcid="970">
    def test_number(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol 99'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '99',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="39" endline="56" pcid="915">
    def test_udp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol udp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '17',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="13" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_describe_instances.py" startline="45" endline="55" pcid="996">
    def test_filter_json(self):
        args = """ --filters {"Name":"group-name","Values":["foobar"]}"""
        cmdline = self.prefix + args
        result = {
            'Filters': [
                {'Name': 'group-name',
                 'Values': ['foobar']},
            ],
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_describe_instances.py" startline="56" endline="66" pcid="997">
    def test_filter_simple(self):
        args = """ --filters Name=group-name,Values=foobar"""
        cmdline = self.prefix + args
        result = {
            'Filters': [
                {'Name': 'group-name',
                 'Values': ['foobar']},
            ],
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="14" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="365" endline="382" pcid="1092">
    def test_download(self):
        self.extra_args['RequestPayer'] = 'requester'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'RequestPayer': 'requester',
        }
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(expected_params)
        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="383" endline="400" pcid="1093">
    def test_download_with_checksum_enabled(self):
        self.extra_args['ChecksumMode'] = 'ENABLED'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'ChecksumMode': 'ENABLED',
        }
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(expected_params)
        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())

</source>
</class>

<class classid="15" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="495" endline="516" pcid="1100">
    def test_download(self):
        self.extra_args['RequestPayer'] = 'requester'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'RequestPayer': 'requester',
        }
        expected_ranges = ['bytes=0-3', 'bytes=4-7', 'bytes=8-']
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(
            expected_params, expected_ranges
        )

        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="517" endline="537" pcid="1101">
    def test_download_with_checksum_enabled(self):
        self.extra_args['ChecksumMode'] = 'ENABLED'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'ChecksumMode': 'ENABLED',
        }
        expected_ranges = ['bytes=0-3', 'bytes=4-7', 'bytes=8-']
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(
            expected_params, expected_ranges
        )

        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())
</source>
</class>

<class classid="16" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="433" endline="444" pcid="1169">
    def test_upload_for_seekable_filelike_obj(self):
        self.add_create_multipart_response_with_default_expected_params()
        self.add_upload_part_responses_with_default_expected_params()
        self.add_complete_multipart_response_with_default_expected_params()
        bytes_io = BytesIO(self.content)
        future = self.manager.upload(
            bytes_io, self.bucket, self.key, self.extra_args
        )
        future.result()
        self.assert_expected_client_calls_were_correct()
        self.assert_upload_part_bodies_were_correct()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="459" endline="470" pcid="1171">
    def test_upload_for_non_seekable_filelike_obj(self):
        self.add_create_multipart_response_with_default_expected_params()
        self.add_upload_part_responses_with_default_expected_params()
        self.add_complete_multipart_response_with_default_expected_params()
        stream = NonSeekableReader(self.content)
        future = self.manager.upload(
            stream, self.bucket, self.key, self.extra_args
        )
        future.result()
        self.assert_expected_client_calls_were_correct()
        self.assert_upload_part_bodies_were_correct()

</source>
</class>

<class classid="17" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/test_document_types.py" startline="291" endline="304" pcid="1238">
    def test_shorthand_not_supported_for_nested_doc_type_in_list(self):
        cmdline = [
            'doctype', 'describe-resource',
            '--modeled-mixed-with-doc-type-param',
            'ListOfDocTypes=[{foo=bar}]',
        ]
        self.assert_raises_shorthand_syntax_error(
            cmdline,
            stderr_contains=self.nested_doctype_shorthand_error(
                '--modeled-mixed-with-doc-type-param',
                member_name='ListOfDocTypes'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_document_types.py" startline="319" endline="332" pcid="1240">
    def test_shorthand_not_supported_for_nested_doc_type_in_nested_list(self):
        cmdline = [
            'doctype', 'describe-resource',
            '--modeled-mixed-with-doc-type-param',
            'NestedListsOfDocTypes=[[{foo=bar}]]',
        ]
        self.assert_raises_shorthand_syntax_error(
            cmdline,
            stderr_contains=self.nested_doctype_shorthand_error(
                '--modeled-mixed-with-doc-type-param',
                member_name='NestedListsOfDocTypes'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_document_types.py" startline="305" endline="318" pcid="1239">
    def test_shorthand_not_supported_for_nested_doc_type_in_map(self):
        cmdline = [
            'doctype', 'describe-resource',
            '--modeled-mixed-with-doc-type-param',
            'MapOfDocTypes={key={foo=bar}}',
        ]
        self.assert_raises_shorthand_syntax_error(
            cmdline,
            stderr_contains=self.nested_doctype_shorthand_error(
                '--modeled-mixed-with-doc-type-param',
                member_name='MapOfDocTypes'
            )
        )

</source>
</class>

<class classid="18" nclones="2" nlines="25" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="301" endline="332" pcid="1279">
        for command in commands:
            self.assertIn(' '.join(command), stdout)

    def _assert_pypi_rc_has_expected_content(
        self, pypi_rc_str, server, repo_url=None, username=None, password=None
    ):
        pypi_rc = RawConfigParser()
        pypi_rc.read_string(pypi_rc_str)

        self.assertIn('distutils', pypi_rc.sections())
        self.assertIn('index-servers', pypi_rc.options('distutils'))
        index_servers = pypi_rc.get('distutils', 'index-servers')
        index_servers = [
            index_server.strip()
            for index_server
            in index_servers.split('\n')
            if index_server.strip() != ''
        ]
        self.assertIn(server, index_servers)

        if repo_url or username or password:
            self.assertIn(server, pypi_rc.sections())

        if repo_url:
            self.assertIn('repository', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'repository'), repo_url)

        if username:
            self.assertIn('username', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'username'), username)

        if password:
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="558" endline="589" pcid="7414">
        self.auth_token = 'auth-token'
        self.expiration = (datetime.now(tzlocal()) + relativedelta(years=1)
                           + relativedelta(months=9)).replace(microsecond=0)
        self.endpoint = 'https://{domain}-{domainOwner}.codeartifact.aws.' \
            'a2z.com/{format}/{repository}/'.format(
                domain=self.domain,
                domainOwner=self.domain_owner,
                format=self.package_format,
                repository=self.repository
            )
        self.default_pypi_rc = self.DEFAULT_PYPI_RC_FMT.format(
            repository_endpoint=self.endpoint,
            auth_token=self.auth_token
        )
        self.subprocess_utils = mock.Mock()
        self.test_pypi_rc_path = self.file_creator.full_path('pypirc')
        if not os.path.isdir(os.path.dirname(self.test_pypi_rc_path)):
            os.makedirs(os.path.dirname(self.test_pypi_rc_path))

        self.test_subject = TwineLogin(
            self.auth_token,
            self.expiration,
            self.endpoint,
            self.domain,
            self.repository,
            self.subprocess_utils,
            self.test_pypi_rc_path
        )

    def tearDown(self):
        self.file_creator.remove_all()

</source>
</class>

<class classid="19" nclones="4" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="343" endline="356" pcid="1281">
            self._get_nuget_commands()
        )

    def test_nuget_login_with_domain_owner_without_duration_seconds(self):
        cmdline = self._setup_cmd(tool='nuget', include_domain_owner=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="357" endline="370" pcid="1282">
            self._get_nuget_commands()
        )

    def test_nuget_login_without_domain_owner_with_duration_seconds(self):
        cmdline = self._setup_cmd(tool='nuget', include_duration_seconds=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="477" endline="490" pcid="1290">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_without_domain_owner_with_duration_seconds(self):
        cmdline = self._setup_cmd(tool='dotnet', include_duration_seconds=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="462" endline="475" pcid="1289">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_without_duration_seconds(self):
        cmdline = self._setup_cmd(tool='dotnet', include_domain_owner=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
</class>

<class classid="20" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="371" endline="389" pcid="1283">
            self._get_nuget_commands()
        )

    def test_nuget_login_with_domain_owner_duration_sections(self):
        cmdline = self._setup_cmd(
            tool='nuget',
            include_domain_owner=True,
            include_duration_seconds=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="492" endline="510" pcid="1291">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_duration_sections(self):
        cmdline = self._setup_cmd(
            tool='dotnet',
            include_domain_owner=True,
            include_duration_seconds=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
</class>

<class classid="21" nclones="4" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="400" endline="415" pcid="1285">
            result.stdout
        )

    def test_nuget_login_with_domain_owner_dry_run(self):
        cmdline = self._setup_cmd(
            tool='nuget', include_domain_owner=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_nuget_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="416" endline="431" pcid="1286">
            result.stdout
        )

    def test_nuget_login_with_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='nuget', include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_nuget_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="540" endline="555" pcid="1294">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='dotnet', include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_dotnet_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="523" endline="538" pcid="1293">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_dry_run(self):
        cmdline = self._setup_cmd(
            tool='dotnet', include_domain_owner=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_dotnet_commands(),
</source>
</class>

<class classid="22" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="432" endline="449" pcid="1287">
            result.stdout
        )

    def test_nuget_login_with_domain_owner_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='nuget', include_domain_owner=True,
            include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_nuget_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="557" endline="574" pcid="1295">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='dotnet', include_domain_owner=True,
            include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_dotnet_commands(),
</source>
</class>

<class classid="23" nclones="2" nlines="20" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/cloudfront/test_create_distribution.py" startline="22" endline="43" pcid="1337">
    def test_origin_domain_name_with_custom_domain(self):
        cmdline = self.prefix + '--origin-domain-name foo.com'
        result = {
            'DistributionConfig': {
                'Origins': {
                    'Quantity': 1,
                    'Items': [{
                        'CustomOriginConfig': mock.ANY,
                        'DomainName': 'foo.com',
                        'Id': mock.ANY,
                        'OriginPath': '',
                    }]
                },
                'CallerReference': mock.ANY,
                'Comment': '',
                'Enabled': True,
                'DefaultCacheBehavior': mock.ANY,
                },
            }
        self.run_cmd(cmdline)
        self.assertEqual(self.last_kwargs, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudfront/test_create_distribution.py" startline="44" endline="65" pcid="1338">
    def test_origin_domain_name_with_s3_domain(self):
        cmdline = self.prefix + '--origin-domain-name foo.s3.amazonaws.com'
        result = {
            'DistributionConfig': {
                'Origins': {
                    'Quantity': 1,
                    'Items': [{
                        'S3OriginConfig': mock.ANY,
                        'DomainName': 'foo.s3.amazonaws.com',
                        'Id': mock.ANY,
                        'OriginPath': '',
                    }]
                },
                'CallerReference': mock.ANY,
                'Comment': '',
                'Enabled': True,
                'DefaultCacheBehavior': mock.ANY,
                },
            }
        self.run_cmd(cmdline)
        self.assertEqual(self.last_kwargs, result)

</source>
</class>

<class classid="24" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/logs/test_tail.py" startline="153" endline="167" pcid="1384">
    def test_tail_defaults_to_10m(self):
        datetime_mock = mock.Mock(wraps=datetime)
        datetime_mock.utcnow = mock.Mock(
            return_value=datetime(1970, 1, 1, 0, 10, 1, tzinfo=tz.tzutc()))
        with mock.patch('awscli.customizations.logs.tail.datetime',
                        new=datetime_mock):
            self.assert_params_for_cmd(
                'logs tail %s' % self.group_name,
                params={
                    'logGroupName': self.group_name,
                    'interleaved': True,
                    'startTime': 1000,
                }
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/logs/test_tail.py" startline="178" endline="192" pcid="1386">
    def test_tail_with_relative_since(self):
        datetime_mock = mock.Mock(wraps=datetime)
        datetime_mock.utcnow = mock.Mock(
            return_value=datetime(1970, 1, 1, 0, 0, 2, tzinfo=tz.tzutc()))
        with mock.patch('awscli.customizations.logs.tail.datetime',
                        new=datetime_mock):
            self.assert_params_for_cmd(
                'logs tail %s --since 1s' % self.group_name,
                params={
                    'logGroupName': self.group_name,
                    'interleaved': True,
                    'startTime': 1000,
                }
            )

</source>
</class>

<class classid="25" nclones="2" nlines="20" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ecs/test_deploy.py" startline="129" endline="154" pcid="1399">

    def test_deploy_with_defaults(self):
        cmdline = self.PREFIX
        cmdline += '--service ' + self.service_name
        cmdline += ' --task-definition ' + self.task_def_file
        cmdline += ' --codedeploy-appspec ' + self.appspec_file

        expected_create_deployment_params = \
            self.mock_deployer._get_create_deploy_request(
                self.application_name, self.deployment_group_name)

        self.parsed_responses = self._get_parsed_responses(
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name)

        expected_params = self._get_expected_params(
                                    self.service_name,
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name,
                                    expected_create_deployment_params)

        stdout, _, _ = self.assert_params_list_for_cmd(
            cmdline, expected_params, 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ecs/test_deploy.py" startline="182" endline="207" pcid="1401">

        self.assertEqual(stdout, self.expected_stdout)

    def test_deploy_with_json_appspec(self):
        cmdline = self.PREFIX
        cmdline += '--service ' + self.service_name
        cmdline += ' --task-definition ' + self.task_def_file
        cmdline += ' --codedeploy-appspec ' + self.appspec_file_json

        expected_create_deployment_params = \
            self.mock_deployer._get_create_deploy_request(
                self.application_name, self.deployment_group_name)

        self.parsed_responses = self._get_parsed_responses(
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name)

        expected_params = self._get_expected_params(
                                    self.service_name,
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name,
                                    expected_create_deployment_params)

        stdout, _, _ = self.assert_params_list_for_cmd(
</source>
</class>

<class classid="26" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="94" endline="117" pcid="1417">
    def test_subcommand_alias_then_global_params(self):
        self.add_alias('my-alias', 'ec2 describe-regions')
        self.parsed_responses = [
            {
                'Regions': [
                    {
                        'Endpoint': 'ec2.us-east-1.amazonaws.com',
                        'RegionName': 'us-east-1'
                    }
                ]
            }
        ]
        cmdline = 'my-alias '
        cmdline += '--query=Regions[].RegionName '
        cmdline += '--output=text'
        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')
        self.assertEqual(stdout.strip(), 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="118" endline="141" pcid="1418">
    def test_global_params_then_subcommand_alias(self):
        self.add_alias('my-alias', 'ec2 describe-regions')
        self.parsed_responses = [
            {
                'Regions': [
                    {
                        'Endpoint': 'ec2.us-east-1.amazonaws.com',
                        'RegionName': 'us-east-1'
                    }
                ]
            }
        ]
        cmdline = '--query=Regions[].RegionName '
        cmdline += '--output=text '
        cmdline += 'my-alias'
        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')
        self.assertEqual(stdout.strip(), 'us-east-1')

</source>
</class>

<class classid="27" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_list.py" startline="21" endline="40" pcid="1433">
    def test_show_nothing_when_no_history_and_call_made(self):
        self.environ['AWS_CONFIG_FILE'] = ''
        self.driver = create_clidriver()
        self.entry_point = AWSCLIEntryPoint(self.driver)
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd('history show', expected_rc=0)
        # The history show should not display anything as no history should
        # have been collected
        self.assertEqual('', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_show.py" startline="42" endline="61" pcid="1438">
    def test_show_nothing_when_no_history(self):
        self.environ['AWS_CONFIG_FILE'] = ''
        self.driver = create_clidriver()
        self.entry_point = AWSCLIEntryPoint(self.driver)
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd('history show', expected_rc=0)
        # The history show should not display anything as no history should
        # have been collected
        self.assertEqual('', stdout)

</source>
</class>

<class classid="28" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_show.py" startline="62" endline="83" pcid="1439">
    def test_show_with_include(self):
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd(
            'history show --include CLI_ARGUMENTS', expected_rc=0)
        # Make sure the CLI version was not included because of the filter.
        #
        # The show command writes the history out as binary to the attached
        # stream so we want to determine if the values are in the binary
        # stdout stream
        self.assertIn('describe-regions', stdout)
        self.assertNotIn('version', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_show.py" startline="84" endline="105" pcid="1440">
    def test_show_with_exclude(self):
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd(
            'history show --exclude CLI_ARGUMENTS', expected_rc=0)
        # Make sure the API call was not included because of the filter,
        # but all other events such as the version are included.
        #
        # The show command writes the history out as binary to the attached
        # stream so we want to determine if the values are in the binary
        # stdout stream
        self.assertNotIn("['ec2', 'describe-regions']", stdout)
        self.assertIn('version', stdout)
</source>
</class>

<class classid="29" nclones="2" nlines="20" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_util.py" startline="37" endline="64" pcid="1557">
def describe_cluster_response():
    """Get an example describe_cluster call (For mocking)"""
    return {
        "cluster": {
            "status": "ACTIVE",
            "endpoint": "https://endpoint.amazonaws.com",
            "name": EXAMPLE_NAME,
            "certificateAuthority": {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpWR1Z6ZEdsdVp5QkVZWFJoRFFwVVpYTjBhVzVuSUVSaGRHRU5DbFJsYzNScGJtY2dSR0YwWVEwS2EzVmlaWEp1WlhSbGN6QWVGdzBLVkdWemRHbHVaeUJFWVhSaERRcFVaWE4wYVc1bklFUmhkR0ZWQkFNVERRcHJkV0psY201bGRHVnpNQUVpTUEwS1ZHVnpkR2x1WnlCRVlYUmhEUXBVWlhOMGFXNW5JRVJoZEdFTkNsUmxjM1JwYm1jZ1JHRjBZY3UvR1FnbmFTcDNZaHBDTWhGVVpYTjBhVzVuSUVSaGRHRXl3clZqeEpWNjNwNFVHRmpZdHdGR1drUldJVkV1VkdWemRHbHVaeUJFWVhSaGJzT0MxSVJiTDhPd0lpMVhiWGg2VkdWemRHbHVaeUJFWVhSaFpXVndTTk9VVUZKNmN5QWJaaFpnWVNkTUV3MEtGMVJsYzNScGJtY2dSR0YwWVFZRFZSMFBBUUVFQkFNQ0FsUmxjM1JwYm1jZ1JHRjBZUUV3RFFvR0NTcElEUXBVWlhOMGFXNW5JRVJoZEdGcEgxc1pPRTNMa3lrMU9DWUNHUloyTEZjM3paOCtHell3WEZSbGMzUnBibWNnUkdGMFlYMUR5NjFNMVlGV1AxWVRIMVJsYzNScGJtY2dSR0YwWVd0aE5oMVphM2dWUDBGaGNSWjdKaW9oZVc4N1JsUmxjM1JwYm1jZ1JHRjBZUVpIVHd4NE9IdzZmZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
            },
            "roleArn": "arn:aws:iam::111222333444/eksRole",
            "resourcesVpcConfig": {
                "subnetIds": [
                    "subnet-00000000000000000",
                    "subnet-00000000000000001",
                    "subnet-00000000000000002"
                ],
                "vpcId": "vpc-00000000000000000",
                "securityGroupIds": [
                    "sg-00000000000000000"
                ]
            },
            "version": "1.10",
            "arn": "arn:aws:eks:region:111222333444:cluster/" + EXAMPLE_NAME,
            "createdAt": 1500000000.000
        }
    }

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_util.py" startline="118" endline="144" pcid="1560">
def describe_cluster_deleting_response():
    """Get an example describe_cluster call during deletion"""
    return {
        "cluster": {
            "status": "DELETING",
            "endpoint": "https://endpoint.amazonaws.com",
            "name": EXAMPLE_NAME,
            "certificateAuthority": {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpWR1Z6ZEdsdVp5QkVZWFJoRFFwVVpYTjBhVzVuSUVSaGRHRU5DbFJsYzNScGJtY2dSR0YwWVEwS2EzVmlaWEp1WlhSbGN6QWVGdzBLVkdWemRHbHVaeUJFWVhSaERRcFVaWE4wYVc1bklFUmhkR0ZWQkFNVERRcHJkV0psY201bGRHVnpNQUVpTUEwS1ZHVnpkR2x1WnlCRVlYUmhEUXBVWlhOMGFXNW5JRVJoZEdFTkNsUmxjM1JwYm1jZ1JHRjBZY3UvR1FnbmFTcDNZaHBDTWhGVVpYTjBhVzVuSUVSaGRHRXl3clZqeEpWNjNwNFVHRmpZdHdGR1drUldJVkV1VkdWemRHbHVaeUJFWVhSaGJzT0MxSVJiTDhPd0lpMVhiWGg2VkdWemRHbHVaeUJFWVhSaFpXVndTTk9VVUZKNmN5QWJaaFpnWVNkTUV3MEtGMVJsYzNScGJtY2dSR0YwWVFZRFZSMFBBUUVFQkFNQ0FsUmxjM1JwYm1jZ1JHRjBZUUV3RFFvR0NTcElEUXBVWlhOMGFXNW5JRVJoZEdGcEgxc1pPRTNMa3lrMU9DWUNHUloyTEZjM3paOCtHell3WEZSbGMzUnBibWNnUkdGMFlYMUR5NjFNMVlGV1AxWVRIMVJsYzNScGJtY2dSR0YwWVd0aE5oMVphM2dWUDBGaGNSWjdKaW9oZVc4N1JsUmxjM1JwYm1jZ1JHRjBZUVpIVHd4NE9IdzZmZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
            },
            "roleArn": "arn:aws:iam::111222333444/eksRole",
            "resourcesVpcConfig": {
                "subnetIds": [
                    "subnet-00000000000000000",
                    "subnet-00000000000000001",
                    "subnet-00000000000000002"
                ],
                "vpcId": "vpc-00000000000000000",
                "securityGroupIds": [
                    "sg-00000000000000000"
                ]
            },
            "version": "1.10",
            "arn": "arn:aws:eks:region:111222333444:cluster/" + EXAMPLE_NAME,
            "createdAt": 1500000000.000
        }
    }
</source>
</class>

<class classid="30" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/test_generatecliskeleton.py" startline="21" endline="31" pcid="1612">
    def test_generate_cli_skeleton_s3api(self):
        cmdline = 's3api delete-object --generate-cli-skeleton'
        stdout, _, rc = self.run_cmd(cmdline)
        self.assertEqual(rc, 0)
        loaded_skeleton = json.loads(stdout)
        self.assertEqual(loaded_skeleton['Bucket'], '')
        self.assertEqual(loaded_skeleton['BypassGovernanceRetention'], True)
        self.assertEqual(loaded_skeleton['Key'], '')
        self.assertEqual(loaded_skeleton['MFA'], '')
        self.assertEqual(loaded_skeleton['RequestPayer'], 'requester')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_generatecliskeleton.py" startline="51" endline="61" pcid="1615">
    def test_generate_cli_skeleton_s3api(self):
        cmdline = 's3api delete-object --generate-cli-skeleton yaml-input'
        stdout, _, rc = self.run_cmd(cmdline)
        self.assertEqual(rc, 0)
        loaded_skeleton = yaml.safe_load(stdout)
        self.assertEqual(loaded_skeleton['Bucket'], '')
        self.assertEqual(loaded_skeleton['BypassGovernanceRetention'], True)
        self.assertEqual(loaded_skeleton['Key'], '')
        self.assertEqual(loaded_skeleton['MFA'], '')
        self.assertEqual(loaded_skeleton['RequestPayer'], 'requester')

</source>
</class>

<class classid="31" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="130" endline="149" pcid="1661">
    def test_filter_with_function(self):
        command = [
            'ddb', 'select', 'mytable', '--filter', 'contains(foo, "bar")'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': 'contains(#n0, :n1)',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                ':n1': {'S': 'bar'},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="170" endline="190" pcid="1663">
    def test_filter_with_bytes(self):
        command = [
            'ddb', 'select', 'mytable', '--filter', 'foo <> b"4pyT"'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': '#n0 <> :n1',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                # This will be base64 encoded during serialization
                ':n1': {'B': b'\xe2\x9c\x93'},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
</class>

<class classid="32" nclones="4" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="284" endline="297" pcid="1669">
    def test_select_consistent_read(self):
        command = [
            'ddb', 'select', 'mytable', '--consistent-read',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="298" endline="311" pcid="1670">
    def test_select_no_consistent_read(self):
        command = [
            'ddb', 'select', 'mytable', '--no-consistent-read',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': False,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="326" endline="339" pcid="1672">
    def test_select_return_consumed_capacity(self):
        command = [
            'ddb', 'select', 'mytable', '--return-consumed-capacity',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'TOTAL',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="312" endline="325" pcid="1671">
    def test_select_no_return_consumed_capacity(self):
        command = [
            'ddb', 'select', 'mytable', '--no-return-consumed-capacity',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
</class>

<class classid="33" nclones="3" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="39" endline="66" pcid="1814">
    def test_create_memory_clients_in_loop(self):
        # We need to first create clients and free then before
        # recording our memory samples.  This is because of two reasons:
        # 1. Caching.  Some of the botocore internals will cache data, so
        #    the first client created will consume more memory than subsequent
        #    clients.  We're interested in growing memory, not total
        #    memory usage (for now), so we we care about the memory in the
        #    steady state case.
        # 2. Python memory allocation.  Due to how python allocates memory
        #    via it's small object allocator, arena's aren't freed until the
        #    entire 256kb isn't in use.  If a single allocation in a single
        #    pool in a single arena is still in use, the arena is not
        #    freed.  This case is easy to hit, and pretty much any
        #    fragmentation guarantees this case is hit.  The best we can
        #    do is verify that memory that's released back to python's
        #    allocator (but not to the OS) is at least reused in subsequent
        #    requests to create botocore clients.
        self.cmd('create_multiple_clients', '200', 's3')
        self.cmd('free_clients')
        self.record_memory()
        # 500 clients in batches of 50.
        for _ in range(10):
            self.cmd('create_multiple_clients', '50', 's3')
            self.cmd('free_clients')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="67" endline="77" pcid="1815">
    def test_create_single_waiter_memory_constant(self):
        self.cmd('create_waiter', 's3', 'bucket_exists')
        self.cmd('free_waiters')
        self.record_memory()
        for _ in range(100):
            self.cmd('create_waiter', 's3', 'bucket_exists')
            self.cmd('free_waiters')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="93" endline="103" pcid="1817">
    def test_create_single_paginator_memory_constant(self):
        self.cmd('create_paginator', 's3', 'list_objects')
        self.cmd('free_paginators')
        self.record_memory()
        for _ in range(100):
            self.cmd('create_paginator', 's3', 'list_objects')
            self.cmd('free_paginators')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
</class>

<class classid="34" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="78" endline="92" pcid="1816">
    def test_create_memory_waiters_in_loop(self):
        # See ``test_create_memory_clients_in_loop`` to understand why
        # waiters are first initialized and then freed. Same reason applies.
        self.cmd('create_multiple_waiters', '200', 's3', 'bucket_exists')
        self.cmd('free_waiters')
        self.record_memory()
        # 500 waiters in batches of 50.
        for _ in range(10):
            self.cmd(
                'create_multiple_waiters', '50', 's3', 'bucket_exists')
            self.cmd('free_waiters')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="104" endline="117" pcid="1818">
    def test_create_memory_paginators_in_loop(self):
        # See ``test_create_memory_clients_in_loop`` to understand why
        # paginators are first initialized and then freed. Same reason applies.
        self.cmd('create_multiple_paginators', '200', 's3', 'list_objects')
        self.cmd('free_paginators')
        self.record_memory()
        # 500 waiters in batches of 50.
        for _ in range(10):
            self.cmd(
                'create_multiple_paginators', '50', 's3', 'list_objects')
            self.cmd('free_paginators')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))
</source>
</class>

<class classid="35" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="150" endline="163" pcid="1916">
    def test_endpoint_discovery_required_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint", endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_required(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryRequired"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="198" endline="211" pcid="1919">
    def test_endpoint_discovery_optional_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint", endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_optional(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryOptional"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
</class>

<class classid="36" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="164" endline="180" pcid="1917">
    def test_endpoint_discovery_disabled_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        config = Config(endpoint_discovery_enabled=False)
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint",
            config=config,
            endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_required(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryRequired"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="181" endline="197" pcid="1918">
    def test_endpoint_discovery_enabled_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        config = Config(endpoint_discovery_enabled=True)
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint",
            config=config,
            endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_required(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryRequired"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
</class>

<class classid="37" nclones="3" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="310" endline="321" pcid="1929">
    def test_endpoint_discovery_with_config_file_enabled(self):
        with temporary_file('w') as f:
            self.set_endpoint_discovery_config_file(f, "True")
            discovered_endpoint = 'https://discovered.domain'
            client, http_stubber = self.create_client(
                service_name="test-discovery-endpoint"
            )
            with http_stubber as stubber:
                self.add_describe_endpoints_response(stubber, discovered_endpoint)
                client.test_discovery_required(Foo="bar")
                self.assert_endpoint_discovery_used(stubber, discovered_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="322" endline="333" pcid="1930">
    def test_endpoint_discovery_with_config_file_enabled_lowercase(self):
        with temporary_file('w') as f:
            self.set_endpoint_discovery_config_file(f, "true")
            discovered_endpoint = 'https://discovered.domain'
            client, http_stubber = self.create_client(
                service_name="test-discovery-endpoint"
            )
            with http_stubber as stubber:
                self.add_describe_endpoints_response(stubber, discovered_endpoint)
                client.test_discovery_required(Foo="bar")
                self.assert_endpoint_discovery_used(stubber, discovered_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="345" endline="355" pcid="1932">
    def test_endpoint_discovery_with_config_file_auto(self):
        with temporary_file('w') as f:
            self.set_endpoint_discovery_config_file(f, "AUTO")
            discovered_endpoint = 'https://discovered.domain'
            client, http_stubber = self.create_client(
                service_name="test-discovery-endpoint"
            )
            with http_stubber as stubber:
                self.add_describe_endpoints_response(stubber, discovered_endpoint)
                client.test_discovery_required(Foo="bar")
                self.assert_endpoint_discovery_used(stubber, discovered_endpoint)
</source>
</class>

<class classid="38" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="285" endline="304" pcid="1968">
    def test_assume_role(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = B\n\n'
            '[profile B]\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
        )
        self.write_config(config)

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)
        stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="632" endline="650" pcid="1982">
    def test_self_referential_profile(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = A\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
        )
        self.write_config(config)

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)
        stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="424" endline="448" pcid="1975">
    def test_recursive_assume_role_stops_at_static_creds(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = B\n\n'
            '[profile B]\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
            'role_arn = arn:aws:iam::123456789:role/RoleB\n'
            'source_profile = C\n\n'
            '[profile C]\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
        )
        self.write_config(config)

        profile_a_creds = self.create_random_credentials()
        profile_a_response = self.create_assume_role_response(profile_a_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', profile_a_response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, profile_a_creds)
        stubber.assert_no_pending_responses()

</source>
</class>

<class classid="39" nclones="3" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="305" endline="326" pcid="1969">
    def test_environment_credential_source(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'credential_source = Environment\n'
        )
        self.write_config(config)

        environment_creds = self.create_random_credentials()
        self.env_provider.load.return_value = environment_creds

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)

        stubber.assert_no_pending_responses()
        self.assertEqual(self.env_provider.load.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="327" endline="348" pcid="1970">
    def test_instance_metadata_credential_source(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'credential_source = Ec2InstanceMetadata\n'
        )
        self.write_config(config)

        metadata_creds = self.create_random_credentials()
        self.metadata_provider.load.return_value = metadata_creds

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)

        stubber.assert_no_pending_responses()
        self.assertEqual(self.metadata_provider.load.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="349" endline="370" pcid="1971">
    def test_container_credential_source(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'credential_source = EcsContainer\n'
        )
        self.write_config(config)

        container_creds = self.create_random_credentials()
        self.container_provider.load.return_value = container_creds

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)

        stubber.assert_no_pending_responses()
        self.assertEqual(self.container_provider.load.call_count, 1)

</source>
</class>

<class classid="40" nclones="5" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_neptune.py" startline="33" endline="50" pcid="2002">
    def test_create_db_cluster(self):
        params = {
            'DBClusterIdentifier': 'my-cluster',
            'Engine': 'neptune',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CreateDBClusterResponse>'
            b'<CreateDBClusterResult>'
            b'</CreateDBClusterResult>'
            b'</CreateDBClusterResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.create_db_cluster(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_rds.py" startline="27" endline="43" pcid="2275">
    def test_copy_snapshot(self):
        params = {
            'SourceDBSnapshotIdentifier': 'source-db',
            'TargetDBSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
                    b'<CopyDBSnapshotResponse>'
                    b'<CopyDBSnapshotResult></CopyDBSnapshotResult>'
                    b'</CopyDBSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_neptune.py" startline="51" endline="67" pcid="2003">
    def test_copy_db_cluster_snapshot(self):
        params = {
            'SourceDBClusterSnapshotIdentifier': 'source-db',
            'TargetDBClusterSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CopyDBClusterSnapshotResponse>'
            b'<CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_cluster_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_rds.py" startline="44" endline="61" pcid="2276">
    def test_create_db_instance_read_replica(self):
        params = {
            'SourceDBInstanceIdentifier': 'source-db',
            'DBInstanceIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CreateDBInstanceReadReplicaResponse>'
            b'<CreateDBInstanceReadReplicaResult>'
            b'</CreateDBInstanceReadReplicaResult>'
            b'</CreateDBInstanceReadReplicaResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.create_db_instance_read_replica(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_docdb.py" startline="53" endline="69" pcid="2283">
    def test_copy_db_cluster_snapshot(self):
        params = {
            'SourceDBClusterSnapshotIdentifier': 'source-db',
            'TargetDBClusterSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CopyDBClusterSnapshotResponse>'
            b'<CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_cluster_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)
</source>
</class>

<class classid="41" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="223" endline="237" pcid="2035">
    def test_use_arn_region_config_var(self):
        with temporary_file('w') as f:
            self.set_config_file(
                f,
                '[default]\n'
                's3_use_arn_region = true'
            )
            client = self.create_s3_client()
            self.assertEqual(
                client.meta.config.s3,
                {
                    'use_arn_region': True,
                }
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="238" endline="253" pcid="2036">
    def test_use_arn_region_nested_config_var(self):
        with temporary_file('w') as f:
            self.set_config_file(
                f,
                '[default]\n'
                's3 = \n'
                '    use_arn_region = true'
            )
            client = self.create_s3_client()
            self.assertEqual(
                client.meta.config.s3,
                {
                    'use_arn_region': True,
                }
            )

</source>
</class>

<class classid="42" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="559" endline="576" pcid="2068">
    def test_copy_source_str_with_accesspoint_arn(self):
        copy_source = (
            'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint/'
            'object/myprefix/myobject'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client()
        self.add_copy_object_response(self.http_stubber)
        self.client.copy_object(
            Bucket='mybucket', Key='mykey', CopySource=copy_source
        )
        self.assert_expected_copy_source_header(
            self.http_stubber,
            expected_copy_source=(
                b'arn%3Aaws%3As3%3Aus-west-2%3A123456789012%3Aaccesspoint%3A'
                b'myendpoint/object/myprefix/myobject'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="577" endline="594" pcid="2069">
    def test_copy_source_str_with_accesspoint_arn_and_version_id(self):
        copy_source = (
            'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint/'
            'object/myprefix/myobject?versionId=myversionid'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client()
        self.add_copy_object_response(self.http_stubber)
        self.client.copy_object(
            Bucket='mybucket', Key='mykey', CopySource=copy_source
        )
        self.assert_expected_copy_source_header(
            self.http_stubber,
            expected_copy_source=(
                b'arn%3Aaws%3As3%3Aus-west-2%3A123456789012%3Aaccesspoint%3A'
                b'myendpoint/object/myprefix/myobject?versionId=myversionid'
            )
        )

</source>
</class>

<class classid="43" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="634" endline="651" pcid="2072">
    def test_basic_outpost_arn(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-west-2:123456789012:outpost:'
            'op-01234567890123456:accesspoint:myaccesspoint'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client(
            region_name='us-east-1')
        self.http_stubber.add_response()
        self.client.list_objects(Bucket=outpost_arn)
        request = self.http_stubber.requests[0]
        self.assert_signing_name(request, 's3-outposts')
        self.assert_signing_region(request, 'us-west-2')
        expected_endpoint = (
            'myaccesspoint-123456789012.op-01234567890123456.'
            's3-outposts.us-west-2.amazonaws.com'
        )
        self.assert_endpoint(request, expected_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="863" endline="879" pcid="2088">
    def test_basic_s3_object_lambda_arn(self):
        s3_object_lambda_arn = (
            'arn:aws:s3-object-lambda:us-west-2:123456789012:'
            'accesspoint/myBanner'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client(
            region_name='us-east-1')
        self.http_stubber.add_response()
        self.client.list_objects(Bucket=s3_object_lambda_arn)
        request = self.http_stubber.requests[0]
        self.assert_signing_name(request, 's3-object-lambda')
        self.assert_signing_region(request, 'us-west-2')
        expected_endpoint = (
            'myBanner-123456789012.s3-object-lambda.us-west-2.amazonaws.com'
        )
        self.assert_endpoint(request, expected_endpoint)

</source>
</class>

<class classid="44" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="692" endline="718" pcid="2075">
    def test_outpost_arn_presigned_url_with_use_arn_region(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-west-2:123456789012:outpost/'
            'op-01234567890123456/accesspoint/myaccesspoint'
        )
        expected_url = (
            'myaccesspoint-123456789012.op-01234567890123456.'
            's3-outposts.us-west-2.amazonaws.com'
        )
        expected_credentials = '20210827%2Fus-west-2%2Fs3-outposts%2Faws4_request'
        expected_signature = (
            'a944fbe2bfbae429f922746546d1c6f890649c88ba7826bd1d258ac13f327e09'
        )
        config = Config(
            signature_version='s3v4',
            s3={
                'use_arn_region': True,
            }
        )
        presigned_url = self._get_presigned_url(
            outpost_arn, 'us-west-2', config=config
        )
        self._assert_presigned_url(
            presigned_url, expected_url,
            expected_signature, expected_credentials
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="719" endline="745" pcid="2076">
    def test_outpost_arn_presigned_url_cross_region_arn(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-east-1:123456789012:outpost/'
            'op-01234567890123456/accesspoint/myaccesspoint'
        )
        expected_url = (
            'myaccesspoint-123456789012.op-01234567890123456.'
            's3-outposts.us-east-1.amazonaws.com'
        )
        expected_credentials = '20210827%2Fus-east-1%2Fs3-outposts%2Faws4_request'
        expected_signature = (
            '7f93df0b81f80e590d95442d579bd6cf749a35ff4bbdc6373fa669b89c7fce4e'
        )
        config = Config(
            signature_version='s3v4',
            s3={
                'use_arn_region': True,
            }
        )
        presigned_url = self._get_presigned_url(
            outpost_arn, 'us-west-2', config=config
        )
        self._assert_presigned_url(
            presigned_url, expected_url,
            expected_signature, expected_credentials
        )

</source>
</class>

<class classid="45" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="814" endline="827" pcid="2085">
    def test_s3_object_lambda_fips_raise_for_cross_region(self):
        s3_object_lambda_arn = (
            'arn:aws-us-gov:s3-object-lambda:us-gov-east-1:123456789012:'
            'accesspoint/mybanner'
        )
        self.client, _ = self.create_stubbed_s3_client(
            region_name='fips-us-gov-west-1',
            config=Config(s3={'use_arn_region': False})
        )
        expected_exception = UnsupportedS3AccesspointConfigurationError
        with self.assertRaisesRegex(expected_exception,
                                     'ARNs in another region are not allowed'):
            self.client.list_objects(Bucket=s3_object_lambda_arn)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="891" endline="904" pcid="2090">
    def test_accesspoint_fips_raise_for_cross_region(self):
        s3_accesspoint_arn = (
            'arn:aws-us-gov:s3:us-gov-east-1:123456789012:'
            'accesspoint:myendpoint'
        )
        self.client, _ = self.create_stubbed_s3_client(
            region_name='fips-us-gov-west-1',
            config=Config(s3={'use_arn_region': False})
        )
        expected_exception = UnsupportedS3AccesspointConfigurationError
        with self.assertRaisesRegex(expected_exception,
                                    'ARNs in another region are not allowed'):
            self.client.list_objects(Bucket=s3_accesspoint_arn)

</source>
</class>

<class classid="46" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1316" endline="1329" pcid="2124">
    def test_content_sha256_set_if_config_value_is_true(self):
        config = Config(signature_version='s3v4', s3={
            'payload_signing_enabled': True
        })
        self.client = self.session.create_client(
            's3', self.region, config=config)
        self.http_stubber = ClientHTTPStubber(self.client)
        self.http_stubber.add_response()
        with self.http_stubber:
            self.client.put_object(Bucket='foo', Key='bar', Body='baz')
        sent_headers = self.get_sent_headers()
        sha_header = sent_headers.get('x-amz-content-sha256')
        self.assertNotEqual(sha_header, b'UNSIGNED-PAYLOAD')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1330" endline="1343" pcid="2125">
    def test_content_sha256_not_set_if_config_value_is_false(self):
        config = Config(signature_version='s3v4', s3={
            'payload_signing_enabled': False
        })
        self.client = self.session.create_client(
            's3', self.region, config=config)
        self.http_stubber = ClientHTTPStubber(self.client)
        self.http_stubber.add_response()
        with self.http_stubber:
            self.client.put_object(Bucket='foo', Key='bar', Body='baz')
        sent_headers = self.get_sent_headers()
        sha_header = sent_headers.get('x-amz-content-sha256')
        self.assertEqual(sha_header, b'UNSIGNED-PAYLOAD')

</source>
</class>

<class classid="47" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="39" endline="57" pcid="2314">
    def test_dryrun_move(self):
        self.parsed_responses = [self.head_object_response()]
        cmdline = (
            f'{self.prefix} s3://bucket/key.txt s3://bucket/key2.txt --dryrun'
        )
        stdout, _, _ = self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                ('HeadObject', {
                    'Bucket': 'bucket',
                    'Key': 'key.txt',
                })
            ]
        )
        self.assertIn(
            '(dryrun) move: s3://bucket/key.txt to s3://bucket/key2.txt',
            stdout
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="260" endline="278" pcid="2390">
        self.run_cmd(cmdline, expected_rc=0)
        # Make sure that the specified web address is used as opposed to the
        # contents of the web address.
        self.assertEqual(
            self.operations_called[0][1]['WebsiteRedirectLocation'],
            'http://someserver'
        )

    def test_dryrun_copy(self):
        self.parsed_responses = [self.head_object_response()]
        cmdline = (
            f'{self.prefix} s3://bucket/key.txt s3://bucket/key2.txt --dryrun'
        )
        stdout, _, _ = self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                ('HeadObject', {
                    'Bucket': 'bucket',
                    'Key': 'key.txt',
</source>
</class>

<class classid="48" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="206" endline="229" pcid="2335">
    #
    # This test covers the case where a ValueError is emitted.
    def test_sync_skips_over_files_deleted_between_listing_and_transfer_valueerror(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = '%s %s s3://bucket/' % (
            self.prefix, self.files.rootdir)

        # FileGenerator.list_files should skip over files that cause an
        # IOError to be raised because they are missing when we try to
        # get their stats. This IOError is translated to a ValueError in
        # awscli.customizations.s3.utils.get_file_stat.
        def side_effect(_):
            os.remove(full_path)
            raise ValueError()
        with mock.patch(
                'awscli.customizations.s3.filegenerator.get_file_stat',
                side_effect=side_effect
                ):
            self.run_cmd(cmdline, expected_rc=2)

        # We should not call PutObject because the file was deleted
        # before we could transfer it
        self.assertEqual(len(self.operations_called), 1, self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="230" endline="251" pcid="2337">

    # This test covers the case where an OSError is emitted.
    def test_sync_skips_over_files_deleted_between_listing_and_transfer_oserror(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = '%s %s s3://bucket/' % (
            self.prefix, self.files.rootdir)

        # FileGenerator.list_files should skip over files that cause an
        # OSError to be raised because they are missing when we try to
        # get their stats.
        def side_effect(_):
            os.remove(full_path)
            raise OSError()
        with mock.patch(
                'awscli.customizations.s3.filegenerator.get_file_stat',
                side_effect=side_effect
                ):
            self.run_cmd(cmdline, expected_rc=2)

        # We should not call PutObject because the file was deleted
        # before we could transfer it
        self.assertEqual(len(self.operations_called), 1, self.operations_called)
</source>
</class>

<class classid="49" nclones="3" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="85" endline="107" pcid="2354">
    def test_generates_a_url(self):
        stdout = self.get_presigned_url_for_cmd(
            self.prefix + 's3://bucket/key')

        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 'bucket.s3.us-east-1.amazonaws.com',
                'path': '/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '3600',
                    'X-Amz-Signature': (
                        '1297528058f2c8b89cfa52c6a47d6c54890700a1da2470'
                        '2b06d53e774c0acc95'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="180" endline="203" pcid="2358">
    def test_s3_prefix_not_needed(self):
        # Consistent with the 'ls' command.
        stdout = self.get_presigned_url_for_cmd(
            self.prefix + 'bucket/key')

        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 'bucket.s3.us-east-1.amazonaws.com',
                'path': '/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '3600',
                    'X-Amz-Signature': (
                        '1297528058f2c8b89cfa52c6a47d6c54890700a1da2470'
                        '2b06d53e774c0acc95'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="108" endline="130" pcid="2355">
    def test_handles_non_dns_compatible_buckets(self):
        stdout = self.get_presigned_url_for_cmd(
            self.prefix + 's3://bucket.dots/key')

        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 's3.us-east-1.amazonaws.com',
                'path': '/bucket.dots/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '3600',
                    'X-Amz-Signature': (
                        '5a032639cabfe3db0b4b87ba3b12c29f5e42fe74cbba8'
                        'a0eb69bfb30c6e2d277'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )

</source>
</class>

<class classid="50" nclones="5" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="134" endline="147" pcid="2381">
        self.assertEqual(self.operations_called[0][1]['Expires'], '90')

    def test_upload_standard_ia(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class STANDARD_IA' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        args = self.operations_called[0][1]
        self.assertEqual(args['Key'], 'key.txt')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="190" endline="203" pcid="2385">
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        args = self.operations_called[0][1]
        self.assertEqual(args['Key'], 'key.txt')
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'GLACIER')

    def test_upload_deep_archive(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class DEEP_ARCHIVE' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="176" endline="189" pcid="2384">
        args = self.operations_called[0][1]
        self.assertEqual(args['Key'], 'key.txt')
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'INTELLIGENT_TIERING')

    def test_upload_glacier(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class GLACIER' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="148" endline="161" pcid="2382">
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'STANDARD_IA')

    def test_upload_onezone_ia(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class ONEZONE_IA' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        args = self.operations_called[0][1]
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="162" endline="175" pcid="2383">
        self.assertEqual(args['Key'], 'key.txt')
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'ONEZONE_IA')

    def test_upload_intelligent_tiering(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class INTELLIGENT_TIERING' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
</source>
</class>

<class classid="51" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="415" endline="427" pcid="2400">
                ],
                'CommonPrefixes': []
            }
        ]
        cmdline = '%s s3://bucket/foo %s --recursive' % (
            self.prefix, self.files.rootdir)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        self.assertEqual(len(self.operations_called), 1, self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_glacier_incompatible_operation(self):
        self.parsed_responses = [
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="428" endline="441" pcid="2401">
            {'ContentLength': '100', 'LastModified': '00:00:00Z',
             'StorageClass': 'GLACIER'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_deep_arhive_incompatible_operation(self):
        self.parsed_responses = [
            {'ContentLength': '100', 'LastModified': '00:00:00Z',
</source>
</class>

<class classid="52" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="442" endline="455" pcid="2402">
             'StorageClass': 'DEEP_ARCHIVE'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier
        # deep archive incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_glacier_incompatible_operation_for_multipart_file(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="456" endline="470" pcid="2403">
             'LastModified': '00:00:00Z',
             'StorageClass': 'GLACIER'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_deep_archive_incompatible_op_for_multipart_file(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
             'LastModified': '00:00:00Z',
</source>
</class>

<class classid="53" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="471" endline="485" pcid="2404">
             'StorageClass': 'DEEP_ARCHIVE'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier
        # deep archive incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_turn_off_glacier_warnings(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
             'LastModified': '00:00:00Z',
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="486" endline="500" pcid="2405">
             'StorageClass': 'GLACIER'},
        ]
        cmdline = (
            '%s s3://bucket/key.txt . --ignore-glacier-warnings' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=0)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertEqual('', stderr)

    def test_turn_off_glacier_warnings_for_deep_archive(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
             'LastModified': '00:00:00Z',
</source>
</class>

<class classid="54" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="516" endline="530" pcid="2407">
                self.prefix, full_path))
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        self.assertDictEqual(
            self.operations_called[0][1],
            {'Key': 'key.txt', 'Bucket': 'bucket',
             'ContentType': 'text/plain', 'Body': mock.ANY,
             'ServerSideEncryption': 'AES256'}
        )

    def test_cp_with_sse_c_flag(self):
        full_path = self.files.create_file('foo.txt', 'contents')
        cmdline = (
            '%s %s s3://bucket/key.txt --sse-c --sse-c-key foo' % (
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="614" endline="628" pcid="2410">
                'Key': 'key.txt'
            },
            'CopySourceSSECustomerAlgorithm': 'AES256',
            'CopySourceSSECustomerKey': key_contents,
        }
        self.assertDictEqual(self.operations_called[1][1], expected_args)


    # Note ideally the kms sse with a key id would be integration tests
    # However, you cannot delete kms keys so there would be no way to clean
    # up the tests
    def test_cp_upload_with_sse_kms_and_key_id(self):
        full_path = self.files.create_file('foo.txt', 'contents')
        cmdline = (
            '%s %s s3://bucket/key.txt --sse aws:kms --sse-kms-key-id foo' % (
</source>
</class>

<class classid="55" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="756" endline="776" pcid="2417">
        # TODO: find another method to test this behavior without patching.
        with mock.patch(
                'awscli.customizations.s3.filegenerator.get_file_stat',
                return_value=(None, None)
        ):
            _, stderr, rc = self.run_cmd(command % full_path, expected_rc=1)
        self.assertIn('upload failed', stderr)
        self.assertIn('warning: File has an invalid timestamp.', stderr)


class TestStreamingCPCommand(BaseAWSCommandParamsTest):
    def test_streaming_upload(self):
        command = "s3 cp - s3://bucket/streaming.txt"
        self.parsed_responses = [{
            'ETag': '"c8afdb36c52cf4727836669019e69222"'
        }]

        binary_stdin = BufferedBytesIO(b'foo\n')
        with mock.patch('sys.stdin', binary_stdin):
            self.run_cmd(command)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="777" endline="797" pcid="2418">
        self.assertEqual(len(self.operations_called), 1)
        model, args = self.operations_called[0]
        expected_args = {
            'Bucket': 'bucket',
            'Key': 'streaming.txt',
            'Body': mock.ANY
        }

        self.assertEqual(model.name, 'PutObject')
        self.assertEqual(args, expected_args)

    def test_streaming_upload_with_expected_size(self):
        command = "s3 cp - s3://bucket/streaming.txt --expected-size 4"
        self.parsed_responses = [{
            'ETag': '"c8afdb36c52cf4727836669019e69222"'
        }]

        binary_stdin = BufferedBytesIO(b'foo\n')
        with mock.patch('sys.stdin', binary_stdin):
            self.run_cmd(command)

</source>
</class>

<class classid="56" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1263" endline="1277" pcid="2442">
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.list_objects_request(self.accesspoint_arn),
                self.copy_object_request(
                    self.accesspoint_arn, 'mykey', accesspoint_arn_dest,
                    'mykey'),
            ]
        )

    def test_accepts_mrap_arns(self):
        mrap_arn = (
            'arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap'
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1278" endline="1293" pcid="2443">
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = self.prefix
        cmdline += ' %s' % filename
        cmdline += ' s3://%s/mykey' % mrap_arn
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.put_object_request(mrap_arn, 'mykey')
            ]
        )

    def test_accepts_mrap_arns_with_slash(self):
        mrap_arn = (
            'arn:aws:s3::123456789012:accesspoint/mfzwi23gnjvgw.mrap'
        )
        filename = self.files.create_file('myfile', 'mycontent')
</source>
</class>

<class classid="57" nclones="3" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1410" endline="1422" pcid="2454">

    def test_mp_copy_object(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='none')
        self.parsed_responses = [
            self.head_object_response(ContentLength=self.multipart_threshold)
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        # The CreateMultipartRequest is where additional parameters are
        # typically added. It should have no additional parameters.
        self.assert_in_operations_called(self.create_mpu_request())

    def test_metadata_directive_disables_copy_props(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='none')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1887" endline="1899" pcid="2483">
        )
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=1)
        self.assertIn('AccessDenied', stderr)
        self.assert_in_operations_called(
            self.delete_object_request(
                self.target_bucket,
                self.target_key,
                RequestPayer='requester'
            )
        )

    def test_metadata_directive_disables_copy_props(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1610" endline="1622" pcid="2466">
        self.parsed_responses = [
            self.list_objects_response(
                keys=[self.source_key],
                Size=self.multipart_threshold
            ),
            self.no_such_key_error_response()
        ]
        self.set_http_status_codes([200, 404])
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=1)
        self.assertIn('NoSuchKey', stderr)

    def test_metadata_directive_disables_copy_props(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='metadata-directive')
</source>
</class>

<class classid="58" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="2071" endline="2091" pcid="2494">
        self.assert_crt_client_region('us-west-1')
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket', 'us-west-1'),
            expected_path='/key',
            expected_send_filepath=filename,
        )

    def test_respects_endpoint_url_parameter(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'cp', filename, 's3://bucket/key',
            '--endpoint-url', 'https://my.endpoint.com'
        ]
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="2092" endline="2112" pcid="2495">
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host='my.endpoint.com',
            expected_path='/bucket/key',
            expected_send_filepath=filename,
        )
        self.assertEqual(
            self.mock_crt_client.call_args[1]['tls_mode'],
            S3RequestTlsMode.ENABLED
        )

    def test_can_disable_ssl_using_endpoint_url_parameter(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'cp', filename, 's3://bucket/key',
            '--endpoint-url', 'http://my.endpoint.com'
        ]
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
</source>
</class>

<class classid="59" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_s3_object_lambda.py" startline="31" endline="43" pcid="2499">
    def test_object_lambda_arn_with_colon_raises_exception(self):
        object_lambda_arn = ('arn:aws:s3-object-lambda:us-west-2:123456789012:'
                             'accesspoint:my-accesspoint')
        object_lambda_arn_with_key = '%s/my-key' % object_lambda_arn
        for prefix in self.prefixes:
            cmdline = prefix.format(object_lambda_arn=object_lambda_arn)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)
            cmdline = prefix.format(
                object_lambda_arn=object_lambda_arn_with_key)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_s3_object_lambda.py" startline="44" endline="55" pcid="2500">
    def test_object_lambda_arn_with_slash_raises_exception(self):
        object_lambda_arn = ('arn:aws:s3-object-lambda:us-west-2:123456789012:'
                             'accesspoint/my-accesspoint')
        object_lambda_arn_with_key = '%s/my-key' % object_lambda_arn
        for prefix in self.prefixes:
            cmdline = prefix.format(object_lambda_arn=object_lambda_arn)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)
            cmdline = prefix.format(
                object_lambda_arn=object_lambda_arn_with_key)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)
</source>
</class>

<class classid="60" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="142" endline="159" pcid="2573">
    def test_summarize(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
            {"Key": "onekilobyte.txt", "Size": 1024, "LastModified": time_utc},
            {"Key": "onemegabyte.txt", "Size": 1024 ** 2, "LastModified": time_utc},
            {"Key": "onegigabyte.txt", "Size": 1024 ** 3, "LastModified": time_utc},
            {"Key": "oneterabyte.txt", "Size": 1024 ** 4, "LastModified": time_utc},
            {"Key": "onepetabyte.txt", "Size": 1024 ** 5, "LastModified": time_utc} ]}]
        stdout, _, _ = self.run_cmd('s3 ls s3://bucket/ --summarize', expected_rc=0)
        call_args = self.operations_called[0][1]
        # Time is stored in UTC timezone, but the actual time displayed
        # is specific to your tzinfo, so shift the timezone to your local's.
        time_local = parser.parse(time_utc).astimezone(tz.tzlocal())
        time_fmt = time_local.strftime('%Y-%m-%d %H:%M:%S')
        self.assertIn('Total Objects: 6\n', stdout)
        self.assertIn('Total Size: 1127000493261825\n', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="160" endline="177" pcid="2574">
    def test_summarize_with_human_readable(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
            {"Key": "onekilobyte.txt", "Size": 1024, "LastModified": time_utc},
            {"Key": "onemegabyte.txt", "Size": 1024 ** 2, "LastModified": time_utc},
            {"Key": "onegigabyte.txt", "Size": 1024 ** 3, "LastModified": time_utc},
            {"Key": "oneterabyte.txt", "Size": 1024 ** 4, "LastModified": time_utc},
            {"Key": "onepetabyte.txt", "Size": 1024 ** 5, "LastModified": time_utc} ]}]
        stdout, _, _ = self.run_cmd('s3 ls s3://bucket/ --human-readable --summarize', expected_rc=0)
        call_args = self.operations_called[0][1]
        # Time is stored in UTC timezone, but the actual time displayed
        # is specific to your tzinfo, so shift the timezone to your local's.
        time_local = parser.parse(time_utc).astimezone(tz.tzlocal())
        time_fmt = time_local.strftime('%Y-%m-%d %H:%M:%S')
        self.assertIn('Total Objects: 6\n', stdout)
        self.assertIn('Total Size: 1.0 PiB\n', stdout)

</source>
</class>

<class classid="61" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="178" endline="189" pcid="2575">
    def test_requester_pays(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
        ]}]
        command = 's3 ls s3://mybucket/foo/ --request-payer requester'
        self.assert_params_for_cmd(command, {
            'Bucket': 'mybucket', 'Delimiter': '/',
            'RequestPayer': 'requester', 'EncodingType': 'url',
            'Prefix': 'foo/'
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="190" endline="201" pcid="2576">
    def test_requester_pays_with_no_args(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
        ]}]
        command = 's3 ls s3://mybucket/foo/ --request-payer'
        self.assert_params_for_cmd(command, {
            'Bucket': 'mybucket', 'Delimiter': '/',
            'RequestPayer': 'requester', 'EncodingType': 'url',
            'Prefix': 'foo/'
        })

</source>
</class>

<class classid="62" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/translate/test_import_terminology.py" startline="33" endline="47" pcid="2661">
    def test_import_terminology_with_file_and_csv(self):
        cmdline = self.prefix
        cmdline += ' --name myterminology --merge-strategy OVERWRITE'
        cmdline += ' --terminology-data Format=CSV'
        cmdline += ' --data-file fileb://%s' % self.temp_file
        result = {
            'Name': 'myterminology',
            'MergeStrategy': 'OVERWRITE',
            'TerminologyData': {
                'File': self.temp_file_contents,
                'Format': 'CSV',
            },
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/translate/test_import_terminology.py" startline="48" endline="62" pcid="2662">
    def test_import_terminology_with_file_and_tmx(self):
        cmdline = self.prefix
        cmdline += ' --name myterminology --merge-strategy OVERWRITE'
        cmdline += ' --terminology-data Format=TMX'
        cmdline += ' --data-file fileb://%s' % self.temp_file
        result = {
            'Name': 'myterminology',
            'MergeStrategy': 'OVERWRITE',
            'TerminologyData': {
                'File': self.temp_file_contents,
                'Format': 'TMX',
            },
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="63" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/dependencies/test_colorama.py" startline="23" endline="43" pcid="2666">
    def test_fore_attributes(self):
        self.assertEqual(Fore.BLACK, '\033[30m')
        self.assertEqual(Fore.RED, '\033[31m')
        self.assertEqual(Fore.GREEN, '\033[32m')
        self.assertEqual(Fore.YELLOW, '\033[33m')
        self.assertEqual(Fore.BLUE, '\033[34m')
        self.assertEqual(Fore.MAGENTA, '\033[35m')
        self.assertEqual(Fore.CYAN, '\033[36m')
        self.assertEqual(Fore.WHITE, '\033[37m')
        self.assertEqual(Fore.RESET, '\033[39m')

        # Check the light, extended versions.
        self.assertEqual(Fore.LIGHTBLACK_EX, '\033[90m')
        self.assertEqual(Fore.LIGHTRED_EX, '\033[91m')
        self.assertEqual(Fore.LIGHTGREEN_EX, '\033[92m')
        self.assertEqual(Fore.LIGHTYELLOW_EX, '\033[93m')
        self.assertEqual(Fore.LIGHTBLUE_EX, '\033[94m')
        self.assertEqual(Fore.LIGHTMAGENTA_EX, '\033[95m')
        self.assertEqual(Fore.LIGHTCYAN_EX, '\033[96m')
        self.assertEqual(Fore.LIGHTWHITE_EX, '\033[97m')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/dependencies/test_colorama.py" startline="44" endline="64" pcid="2667">
    def test_back_attributes(self):
        self.assertEqual(Back.BLACK, '\033[40m')
        self.assertEqual(Back.RED, '\033[41m')
        self.assertEqual(Back.GREEN, '\033[42m')
        self.assertEqual(Back.YELLOW, '\033[43m')
        self.assertEqual(Back.BLUE, '\033[44m')
        self.assertEqual(Back.MAGENTA, '\033[45m')
        self.assertEqual(Back.CYAN, '\033[46m')
        self.assertEqual(Back.WHITE, '\033[47m')
        self.assertEqual(Back.RESET, '\033[49m')

        # Check the light, extended versions.
        self.assertEqual(Back.LIGHTBLACK_EX, '\033[100m')
        self.assertEqual(Back.LIGHTRED_EX, '\033[101m')
        self.assertEqual(Back.LIGHTGREEN_EX, '\033[102m')
        self.assertEqual(Back.LIGHTYELLOW_EX, '\033[103m')
        self.assertEqual(Back.LIGHTBLUE_EX, '\033[104m')
        self.assertEqual(Back.LIGHTMAGENTA_EX, '\033[105m')
        self.assertEqual(Back.LIGHTCYAN_EX, '\033[106m')
        self.assertEqual(Back.LIGHTWHITE_EX, '\033[107m')

</source>
</class>

<class classid="64" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_configure_health_check.py" startline="21" endline="36" pcid="2726">
    def test_shorthand_basic(self):
        cmdline = self.prefix
        cmdline += ' --load-balancer-name my-lb'
        cmdline += (' --health-check Target=HTTP:80/weather/us/wa/seattle,'
                    'Interval=300,Timeout=60,UnhealthyThreshold=5,'
                    'HealthyThreshold=9')
        result = {
            'HealthCheck': {
                'HealthyThreshold': 9,
                'Interval': 300,
                'Target': 'HTTP:80/weather/us/wa/seattle',
                'Timeout': 60,
                'UnhealthyThreshold': 5},
            'LoadBalancerName': 'my-lb'}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_configure_health_check.py" startline="37" endline="52" pcid="2727">
    def test_json(self):
        cmdline = self.prefix
        cmdline += ' --load-balancer-name my-lb '
        cmdline += ('--health-check {"Target":"HTTP:80/weather/us/wa/seattle'
                    '?a=b","Interval":300,"Timeout":60,'
                    '"UnhealthyThreshold":5,"HealthyThreshold":9}')
        result = {
            'HealthCheck': {
                'HealthyThreshold': 9,
                'Interval': 300,
                'Target': 'HTTP:80/weather/us/wa/seattle?a=b',
                'Timeout': 60,
                'UnhealthyThreshold': 5},
            'LoadBalancerName': 'my-lb'}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="65" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_deregister_instances_from_load_balancer.py" startline="20" endline="31" pcid="2737">
    def test_shorthand(self):
        command = self.prefix + ' --load-balancer-name foo'
        command += ' --instances id1 id2 id3'
        expected_params = {
            'LoadBalancerName': 'foo',
            'Instances': [
                {'InstanceId': 'id1'},
                {'InstanceId': 'id2'},
                {'InstanceId': 'id3'}
            ]
        }
        self.assert_params_for_cmd(command, expected_params)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_describe_instance_health.py" startline="20" endline="31" pcid="2738">
    def test_shorthand(self):
        command = self.prefix + ' --load-balancer-name foo'
        command += ' --instances id1 id2 id3'
        expected_params = {
            'LoadBalancerName': 'foo',
            'Instances': [
                {'InstanceId': 'id1'},
                {'InstanceId': 'id2'},
                {'InstanceId': 'id3'}
            ]
        }
        self.assert_params_for_cmd(command, expected_params)
</source>
</class>

<class classid="66" nclones="3" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="122" endline="143" pcid="2808">
                                           region='us-west-2')
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_url_success(
            self, mock_subprocess_run):

        extra_param = (
            '--endpoint-url https://test.amazon.com '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="290" endline="312" pcid="2815">
                                           connectTimeout=80)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_cabundle_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--ca-bundle testPEM'
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
        self.assert_expected_payload(actual_input['payload'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="218" endline="239" pcid="2812">
                                           paginate=False)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_output_json_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--output json'
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
</class>

<class classid="67" nclones="3" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="146" endline="167" pcid="2809">
                                           endpoint='https://test.amazon.com')
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_no_verify_ssl_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--no-verify-ssl '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="194" endline="215" pcid="2811">
                                           doNotSignRequest=True)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_no_paginate_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--no-paginate '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="170" endline="191" pcid="2810">
                                           doNotVerifySSL=True)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_no_sign_request_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--no-sign-request '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
</class>

<class classid="68" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="242" endline="263" pcid="2813">
                                           output='json')
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_read_timeout_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--cli-read-timeout 70 '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="266" endline="287" pcid="2814">
                                           readTimeout=70)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_con_timeout_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--cli-connect-timeout 80 '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
</class>

<class classid="69" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="194" endline="212" pcid="2967">
    def test_flattens_marked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        value = ['foo', 'baz']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=True)):
            returned = self.parse_shorthand(argument, value)
        self.assertEqual(returned, [{"Bar": "foo"}, {"Bar": "baz"}])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="213" endline="231" pcid="2968">
    def test_does_not_flatten_unmarked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        value = ['Bar=foo', 'Bar=baz']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=False)):
            returned = self.parse_shorthand(argument, value)
        self.assertEqual(returned, [{"Bar": "foo"}, {"Bar": "baz"}])

</source>
</class>

<class classid="70" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="547" endline="563" pcid="2995">
    def test_flattens_marked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=True)):
            self.assert_generated_example_is(argument, '--arg Bar1 Bar2 Bar3')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="585" endline="601" pcid="2997">
    def test_does_not_flatten_unmarked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=False)):
            self.assert_generated_example_is(argument, 'Bar=string ...')

</source>
</class>

<class classid="71" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/output/test_json_output.py" startline="53" endline="73" pcid="3035">
    def setUp(self):
        super(TestListUsers, self).setUp()
        self.parsed_response = {
            'Users': [
                {
                    "UserName": "testuser-50",
                    "Path": "/",
                    "CreateDate": "2013-02-12T19:08:52Z",
                    "UserId": "EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::12345:user/testuser1"
                },
                {
                    "UserName": "testuser-51",
                    "Path": "/",
                    "CreateDate": "2012-10-14T23:53:39Z",
                    "UserId": u"EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::123456:user/testuser2"
                },
            ]
        }

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/output/test_yaml_output.py" startline="25" endline="45" pcid="3042">
    def setUp(self):
        super(TestYAMLOutput, self).setUp()
        self.parsed_response = {
            'Users': [
                {
                    "UserName": "testuser-50",
                    "Path": "/",
                    "CreateDate": "2013-02-12T19:08:52Z",
                    "UserId": "EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::12345:user/testuser1"
                },
                {
                    "UserName": "testuser-51",
                    "Path": "/",
                    "CreateDate": "2012-10-14T23:53:39Z",
                    "UserId": u"EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::123456:user/testuser2"
                },
            ]
        }

</source>
</class>

<class classid="72" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="188" endline="200" pcid="3206">
            help_cmd.doc.getvalue().decode('utf-8'),
            '[ :ref:`aws <cli:aws>` ]'
        )

    def test_breadcrumbs_service_command_html(self):
        help_cmd = ServiceHelpCommand(
            self.session, self.obj, self.command_table, self.arg_table,
            self.name, 'ec2'
        )
        help_cmd.doc.target = 'html'
        doc_handler = CLIDocumentEventHandler(help_cmd)
        doc_handler.doc_breadcrumbs(help_cmd)
        self.assertEqual(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="201" endline="213" pcid="3207">
            help_cmd.doc.getvalue().decode('utf-8'),
            '[ :ref:`aws <cli:aws>` ]'
        )

    def test_breadcrumbs_operation_command_html(self):
        help_cmd = ServiceHelpCommand(
            self.session, self.obj, self.command_table, self.arg_table,
            self.name, 'ec2.run-instances'
        )
        help_cmd.doc.target = 'html'
        doc_handler = CLIDocumentEventHandler(help_cmd)
        doc_handler.doc_breadcrumbs(help_cmd)
        self.assertEqual(
</source>
</class>

<class classid="73" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="469" endline="481" pcid="3296">
    def test_read_with_amount_size(self):
        filename = os.path.join(self.tempdir, 'foo')
        with open(filename, 'wb') as f:
            f.write(b'onetwothreefourfivesixseveneightnineten')
        chunk = ReadFileChunk.from_filename(
            filename, start_byte=11, chunk_size=4
        )
        self.assertEqual(chunk.read(1), b'f')
        self.assertEqual(chunk.read(1), b'o')
        self.assertEqual(chunk.read(1), b'u')
        self.assertEqual(chunk.read(1), b'r')
        self.assertEqual(chunk.read(1), b'')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_s3transfer.py" startline="147" endline="159" pcid="3566">
    def test_read_with_amount_size(self):
        filename = os.path.join(self.tempdir, 'foo')
        with open(filename, 'wb') as f:
            f.write(b'onetwothreefourfivesixseveneightnineten')
        chunk = ReadFileChunk.from_filename(
            filename, start_byte=11, chunk_size=4
        )
        self.assertEqual(chunk.read(1), b'f')
        self.assertEqual(chunk.read(1), b'o')
        self.assertEqual(chunk.read(1), b'u')
        self.assertEqual(chunk.read(1), b'r')
        self.assertEqual(chunk.read(1), b'')

</source>
</class>

<class classid="74" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="425" endline="435" pcid="3462">
    def get_call_args(self, **kwargs):
        default_call_args = {
            'fileobj': self.filename,
            'bucket': self.bucket,
            'key': self.key,
            'extra_args': self.extra_args,
            'subscribers': self.subscribers,
        }
        default_call_args.update(kwargs)
        return CallArgs(**default_call_args)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_upload.py" startline="490" endline="500" pcid="3660">
    def get_call_args(self, **kwargs):
        default_call_args = {
            'fileobj': self.filename,
            'bucket': self.bucket,
            'key': self.key,
            'extra_args': self.extra_args,
            'subscribers': self.subscribers,
        }
        default_call_args.update(kwargs)
        return CallArgs(**default_call_args)

</source>
</class>

<class classid="75" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_crt.py" startline="49" endline="68" pcid="3533">
    def test_upload_request(self):
        callargs = CallArgs(
            bucket=self.bucket,
            key=self.key,
            fileobj=self.filename,
            extra_args={},
            subscribers=[],
        )
        coordinator = s3transfer.crt.CRTTransferCoordinator()
        future = s3transfer.crt.CRTTransferFuture(
            s3transfer.crt.CRTTransferMeta(call_args=callargs), coordinator
        )
        crt_request = self.request_serializer.serialize_http_request(
            "put_object", future
        )
        self.assertEqual("PUT", crt_request.method)
        self.assertEqual(self.expected_path, crt_request.path)
        self.assertEqual(self.expected_host, crt_request.headers.get("host"))
        self.assertIsNone(crt_request.headers.get("Authorization"))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_crt.py" startline="69" endline="88" pcid="3534">
    def test_download_request(self):
        callargs = CallArgs(
            bucket=self.bucket,
            key=self.key,
            fileobj=self.filename,
            extra_args={},
            subscribers=[],
        )
        coordinator = s3transfer.crt.CRTTransferCoordinator()
        future = s3transfer.crt.CRTTransferFuture(
            s3transfer.crt.CRTTransferMeta(call_args=callargs), coordinator
        )
        crt_request = self.request_serializer.serialize_http_request(
            "get_object", future
        )
        self.assertEqual("GET", crt_request.method)
        self.assertEqual(self.expected_path, crt_request.path)
        self.assertEqual(self.expected_host, crt_request.headers.get("host"))
        self.assertIsNone(crt_request.headers.get("Authorization"))

</source>
</class>

<class classid="76" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="406" endline="421" pcid="3871">
    def test_properly_handles_multiple_spaces(self):
        alias_value = (
            'myservice myoperation    --my-parameter val'
        )

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation', '--my-parameter', 'val'],
            FakeParsedArgs(command='myservice')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="422" endline="438" pcid="3872">
    def test_properly_parses_aliases_broken_by_multiple_lines(self):
        alias_value = (
            'myservice myoperation \\'
            '\n--my-parameter val'
        )

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation', '--my-parameter', 'val'],
            FakeParsedArgs(command='myservice')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="439" endline="454" pcid="3873">
    def test_properly_preserves_quoted_values(self):
        alias_value = (
            'myservice myoperation --my-parameter \' \n$""\''
        )

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation', '--my-parameter', ' \n$""'],
            FakeParsedArgs(command='myservice')
        )

</source>
</class>

<class classid="77" nclones="2" nlines="20" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="313" endline="337" pcid="3967">
    def test_source_region_removed(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter
        )
        request_dict = {}
        params = {'SourceRegion': 'us-west-2'}
        request_dict['body'] = params
        request_dict['url'] = 'https://rds.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_rds(
            params=request_dict,
            request_signer=request_signer,
            model=operation_model
        )

        self.assertNotIn('SourceRegion', params)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="362" endline="385" pcid="3969">
    def test_dest_region_removed(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        request_dict = {}
        params = {'SourceRegion': 'us-west-2'}
        request_dict['body'] = params
        request_dict['url'] = 'https://rds.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_rds(
            params=request_dict,
            request_signer=request_signer,
            model=operation_model
        )

        self.assertNotIn('DestinationRegion', params)

</source>
</class>

<class classid="78" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="672" endline="682" pcid="3988">
    def test_tree_hash_added_only_if_not_exists(self):
        request_dict = {
            'headers': {
                'x-amz-sha256-tree-hash': 'pre-exists',
            },
            'body': six.BytesIO(b'hello world'),
        }
        handlers.add_glacier_checksums(request_dict)
        self.assertEqual(request_dict['headers']['x-amz-sha256-tree-hash'],
                         'pre-exists')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="683" endline="693" pcid="3989">
    def test_checksum_added_only_if_not_exists(self):
        request_dict = {
            'headers': {
                'x-amz-content-sha256': 'pre-exists',
            },
            'body': six.BytesIO(b'hello world'),
        }
        handlers.add_glacier_checksums(request_dict)
        self.assertEqual(request_dict['headers']['x-amz-content-sha256'],
                         'pre-exists')

</source>
</class>

<class classid="79" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="1128" endline="1140" pcid="4044">

    def test_adds_md5_when_v4(self):
        credentials = Credentials('key', 'secret')
        request_signer = RequestSigner(
            ServiceId('s3'), 'us-east-1', 's3', 'v4', credentials, mock.Mock())
        request_dict = {'body': b'bar',
                        'url': 'https://s3.us-east-1.amazonaws.com',
                        'method': 'PUT',
                        'headers': {}}
        context = self.get_context()
        conditionally_calculate_md5(
            request_dict, request_signer=request_signer, context=context)
        self.assertTrue('Content-MD5' in request_dict['headers'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="1185" endline="1197" pcid="4048">

    def test_adds_md5_when_s3v2(self):
        credentials = Credentials('key', 'secret')
        request_signer = RequestSigner(
            ServiceId('s3'), 'us-east-1', 's3', 's3', credentials, mock.Mock())
        request_dict = {'body': b'bar',
                        'url': 'https://s3.us-east-1.amazonaws.com',
                        'method': 'PUT',
                        'headers': {}}
        context = self.get_context()
        conditionally_calculate_md5(
            request_dict, request_signer=request_signer, context=context)
        self.assertTrue('Content-MD5' in request_dict['headers'])
</source>
</class>

<class classid="80" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="88" endline="98" pcid="4101">
    def setUp(self):
        super(TestTraverseAndDocumentShape, self).setUp()
        self.add_shape_to_params('Foo', 'String', 'This describes foo.')
        self.event_emitter = mock.Mock()
        self.request_example = RequestExampleDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)
        self.response_example = ResponseExampleDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="57" endline="67" pcid="4177">
    def setUp(self):
        super(TestTraverseAndDocumentShape, self).setUp()
        self.add_shape_to_params('Foo', 'String', 'This describes foo.')
        self.event_emitter = mock.Mock()
        self.request_params = RequestParamsDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)
        self.response_params = ResponseParamsDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)

</source>
</class>

<class classid="81" nclones="4" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="287" endline="299" pcid="4117">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo=[',
            '          \'string\',',
            '      ]',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="323" endline="335" pcid="4120">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo={',
            '          \'string\': \'string\'',
            '      }',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="361" endline="373" pcid="4123">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo={',
            '          \'Member\': \'string\'',
            '      }',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="400" endline="412" pcid="4126">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo={',
            '          \'Foo\': {\'... recursive ...\'}',
            '      }',
            '  )'
        ])

</source>
</class>

<class classid="82" nclones="4" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="300" endline="312" pcid="4118">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': [',
            '          \'string\',',
            '      ]',
            '  }'
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="413" endline="423" pcid="4127">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': {',
            '          \'Foo\': {\'... recursive ...\'}',
            '      }',
            '  }'
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="336" endline="348" pcid="4121">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': {',
            '          \'string\': \'string\'',
            '      }',
            '  }'
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="374" endline="386" pcid="4124">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': {',
            '          \'Member\': \'string\'',
            '      }',
            '  }'
        ])


</source>
</class>

<class classid="83" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="350" endline="360" pcid="4122">
    def setUp(self):
        super(TestDocumentStructure, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Member': {'shape': 'String',
                               'documentation': 'This is its member.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="254" endline="264" pcid="4195">
    def setUp(self):
        super(TestDocumentStructure, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Member': {'shape': 'String',
                               'documentation': 'This is its member.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
</class>

<class classid="84" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="388" endline="399" pcid="4125">
    def setUp(self):
        super(TestDocumentRecursiveShape, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Foo': {
                        'shape': 'Structure',
                        'documentation': 'This is a recursive structure.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="285" endline="296" pcid="4198">
    def setUp(self):
        super(TestDocumentRecursiveShape, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Foo': {
                        'shape': 'Structure',
                        'documentation': 'This is a recursive structure.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
</class>

<class classid="85" nclones="3" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="106" endline="123" pcid="4207">

    def test_is_input(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': 'bar'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo='bar'",
            ")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="284" endline="301" pcid="4215">

    def test_unicode_exammple(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': u'\u2713'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            u"foo.bar(",
            u"    foo='\u2713'",
            u")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="191" endline="208" pcid="4211">

    def test_unicode_string_example(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': u'bar'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo='bar'",
            ")"
        ])
</source>
</class>

<class classid="86" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_docstringparser.py" startline="187" endline="198" pcid="4248">
    def test_write_strips_nested_white_space(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)
        self.doc.handle_data.assert_called_once_with('foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_docstringparser.py" startline="187" endline="198" pcid="9181">
    def test_write_strips_nested_white_space(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)
        self.doc.handle_data.assert_called_once_with('foo')

</source>
</class>

<class classid="87" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_docstringparser.py" startline="199" endline="212" pcid="4249">
    def test_write_only_strips_until_text_is_found(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child_2.add_child(parser.DataNode(' '))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)

        calls = [mock.call('foo'), mock.call(' ')]
        self.doc.handle_data.assert_has_calls(calls)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_docstringparser.py" startline="199" endline="212" pcid="9182">
    def test_write_only_strips_until_text_is_found(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child_2.add_child(parser.DataNode(' '))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)

        calls = [mock.call('foo'), mock.call(' ')]
        self.doc.handle_data.assert_has_calls(calls)
</source>
</class>

<class classid="88" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_style.py" startline="31" endline="44" pcid="4250">
    def test_spaces(self):
        style = ReSTStyle(None, 4)
        self.assertEqual(style.spaces(), '')
        style.indent()
        self.assertEqual(style.spaces(), '    ')
        style.indent()
        self.assertEqual(style.spaces(), '        ')
        style.dedent()
        self.assertEqual(style.spaces(), '    ')
        style.dedent()
        self.assertEqual(style.spaces(), '')
        style.dedent()
        self.assertEqual(style.spaces(), '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_style.py" startline="30" endline="43" pcid="9183">
    def test_spaces(self):
        style = ReSTStyle(None, 4)
        self.assertEqual(style.spaces(), '')
        style.indent()
        self.assertEqual(style.spaces(), '    ')
        style.indent()
        self.assertEqual(style.spaces(), '        ')
        style.dedent()
        self.assertEqual(style.spaces(), '    ')
        style.dedent()
        self.assertEqual(style.spaces(), '')
        style.dedent()
        self.assertEqual(style.spaces(), '')

</source>
</class>

<class classid="89" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_document.py" startline="72" endline="93" pcid="4301">
    def test_add_new_section(self):
        section = self.doc_structure.add_new_section('mysection')

        # Ensure the name of the section is correct
        self.assertEqual(section.name, 'mysection')

        # Ensure we can get the section.
        self.assertEqual(
            self.doc_structure.get_section('mysection'), section)

        # Ensure the path is correct
        self.assertEqual(section.path, ['mydoc', 'mysection'])

        # Ensure some of the necessary attributes are passed to the
        # the section.
        self.assertEqual(section.style.indentation,
                         self.doc_structure.style.indentation)
        self.assertEqual(section.translation_map,
                         self.doc_structure.translation_map)
        self.assertEqual(section.hrefs,
                         self.doc_structure.hrefs)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_document.py" startline="71" endline="92" pcid="9234">
    def test_add_new_section(self):
        section = self.doc_structure.add_new_section('mysection')

        # Ensure the name of the section is correct
        self.assertEqual(section.name, 'mysection')

        # Ensure we can get the section.
        self.assertEqual(
            self.doc_structure.get_section('mysection'), section)

        # Ensure the path is correct
        self.assertEqual(section.path, ['mydoc', 'mysection'])

        # Ensure some of the necessary attributes are passed to the
        # the section.
        self.assertEqual(section.style.indentation,
                         self.doc_structure.style.indentation)
        self.assertEqual(section.translation_map,
                         self.doc_structure.translation_map)
        self.assertEqual(section.hrefs,
                         self.doc_structure.hrefs)

</source>
</class>

<class classid="90" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/response_parsing/test_response_parsing.py" startline="92" endline="108" pcid="4381">
def _convert_bytes_to_str(parsed):
    if isinstance(parsed, dict):
        new_dict = {}
        for key, value in parsed.items():
            new_dict[key] = _convert_bytes_to_str(value)
        return new_dict
    elif isinstance(parsed, bytes):
        return parsed.decode('utf-8')
    elif isinstance(parsed, list):
        new_list = []
        for item in parsed:
            new_list.append(_convert_bytes_to_str(item))
        return new_list
    else:
        return parsed


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_protocols.py" startline="269" endline="285" pcid="6188">


def _convert_bytes_to_str(parsed):
    if isinstance(parsed, dict):
        new_dict = {}
        for key, value in parsed.items():
            new_dict[key] = _convert_bytes_to_str(value)
        return new_dict
    elif isinstance(parsed, bytes):
        return parsed.decode('utf-8')
    elif isinstance(parsed, list):
        new_list = []
        for item in parsed:
            new_list.append(_convert_bytes_to_str(item))
        return new_list
    else:
        return parsed
</source>
</class>

<class classid="91" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="72" endline="85" pcid="4394">
    def test_fields(self):
        request = AWSRequest()
        request.url = '/'
        request.method = 'POST'
        request.data = {'Foo': u'\u2713'}
        self.signer.add_auth(request)
        self.assertEqual(request.data['AWSAccessKeyId'], 'foo')
        self.assertEqual(request.data['Foo'], u'\u2713')
        self.assertEqual(request.data['Timestamp'], '2014-06-20T08:40:23Z')
        self.assertEqual(request.data['Signature'],
                         u'Tiecw+t51tok4dTT8B4bg47zxHEM/KcD55f2/x6K22o=')
        self.assertEqual(request.data['SignatureMethod'], 'HmacSHA256')
        self.assertEqual(request.data['SignatureVersion'], '2')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="100" endline="114" pcid="4396">
    def test_get(self):
        request = AWSRequest()
        request.url = '/'
        request.method = 'GET'
        request.params = {'Foo': u'\u2713'}
        self.signer.add_auth(request)
        self.assertEqual(request.params['AWSAccessKeyId'], 'foo')
        self.assertEqual(request.params['Foo'], u'\u2713')
        self.assertEqual(request.params['Timestamp'], '2014-06-20T08:40:23Z')
        self.assertEqual(request.params['Signature'],
                         u'Un97klqZCONP65bA1+Iv4H3AcB2I40I4DBvw5ZERFPw=')
        self.assertEqual(request.params['SignatureMethod'], 'HmacSHA256')
        self.assertEqual(request.params['SignatureVersion'], '2')


</source>
</class>

<class classid="92" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="635" endline="655" pcid="4446">
    def test_presign_where_body_is_json_bytes(self):
        request = AWSRequest()
        request.method = 'GET'
        request.url = 'https://myservice.us-east-1.amazonaws.com/'
        request.data = b'{"Param": "value"}'
        self.auth.add_auth(request)
        query_string = self.get_parsed_query_string(request)
        expected_query_string = {
            'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
            'X-Amz-Credential': (
                'access_key/20140101/myregion/myservice/aws4_request'),
            'X-Amz-Expires': '60',
            'X-Amz-Date': '20140101T000000Z',
            'X-Amz-Signature': (
                '8e1d372d168d532313ce6df8f64a7dc51d'
                'e6f312a9cfba6e5b345d8a771e839c'),
            'X-Amz-SignedHeaders': 'host',
            'Param': 'value'
        }
        self.assertEqual(query_string, expected_query_string)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="656" endline="676" pcid="4447">
    def test_presign_where_body_is_json_string(self):
        request = AWSRequest()
        request.method = 'GET'
        request.url = 'https://myservice.us-east-1.amazonaws.com/'
        request.data = '{"Param": "value"}'
        self.auth.add_auth(request)
        query_string = self.get_parsed_query_string(request)
        expected_query_string = {
            'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
            'X-Amz-Credential': (
                'access_key/20140101/myregion/myservice/aws4_request'),
            'X-Amz-Expires': '60',
            'X-Amz-Date': '20140101T000000Z',
            'X-Amz-Signature': (
                '8e1d372d168d532313ce6df8f64a7dc51d'
                'e6f312a9cfba6e5b345d8a771e839c'),
            'X-Amz-SignedHeaders': 'host',
            'Param': 'value'
        }
        self.assertEqual(query_string, expected_query_string)

</source>
</class>

<class classid="93" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="20" endline="31" pcid="4563">
    def test_only_retries_error_for_sts(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('s3'),
            parsed_response={
                'Error': {'Code': 'IDPCommunicationError',
                          'Message': 'message'}},
            http_response=AWSResponse(
                status_code=400, raw=None, headers={},
                url='https://foo'),
            caught_exception=None, )
        self.assertFalse(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="32" endline="43" pcid="4564">
    def test_can_retry_idp_communication_error(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('sts'),
            parsed_response={
                'Error': {'Code': 'IDPCommunicationError',
                          'Message': 'message'}},
            http_response=AWSResponse(
                status_code=400, raw=None, headers={},
                url='https://foo'),
            caught_exception=None, )
        self.assertTrue(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="44" endline="56" pcid="4565">
    def test_not_idp_communication_error(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('sts'),
            parsed_response={
                'Error': {'Code': 'NotIDPCommunicationError',
                          'Message': 'message'}},
            http_response=AWSResponse(
                status_code=400, raw=None, headers={},
                url='https://foo'),
            caught_exception=None, )
        self.assertFalse(self.checker.is_retryable(context))


</source>
</class>

<class classid="94" nclones="3" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="80" endline="93" pcid="4569">
    def test_checksum_matches(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('dynamodb'),
            parsed_response={
                'Anything': ["foo"],
            },
            http_response=AWSResponse(
                status_code=200, raw=self.raw_stream(b'foo'),
                headers={'x-amz-crc32': '2356372769'},
                url='https://foo'),
            caught_exception=None
        )
        self.assertFalse(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="94" endline="107" pcid="4570">
    def test_checksum_not_matches(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('dynamodb'),
            parsed_response={
                'Anything': ["foo"],
            },
            http_response=AWSResponse(
                status_code=200, raw=self.raw_stream(b'foo'),
                headers={'x-amz-crc32': '2356372768'},
                url='https://foo'),
            caught_exception=None
        )
        self.assertTrue(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="108" endline="120" pcid="4571">
    def test_checksum_check_only_for_dynamodb(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('s3'),
            parsed_response={
                'Anything': ["foo"],
            },
            http_response=AWSResponse(
                status_code=200, raw=self.raw_stream(b'foo'),
                headers={'x-amz-crc32': '2356372768'},
                url='https://foo'),
            caught_exception=None
        )
        self.assertFalse(self.checker.is_retryable(context))
</source>
</class>

<class classid="95" nclones="3" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_s3_addressing.py" startline="96" endline="113" pcid="4658">
    def test_put_object_dns_name_non_classic(self):
        self.region_name = 'us-west-2'
        file_path = os.path.join(os.path.dirname(__file__),
                                 'put_object_data')
        with open(file_path, 'rb') as fp:
            params = {
                'Bucket': 'my.valid.name',
                'Key': 'mykeyname',
                'Body': fp,
                'ACL': 'public-read',
                'ContentLanguage': 'piglatin',
                'ContentType': 'text/plain'
            }
            prepared_request = self.get_prepared_request('put_object', params)
            self.assertEqual(
                prepared_request.url,
                'https://s3.us-west-2.amazonaws.com/my.valid.name/mykeyname')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_s3_addressing.py" startline="132" endline="149" pcid="4660">
    def test_put_object_dns_name_single_letter_non_classic(self):
        self.region_name = 'us-west-2'
        file_path = os.path.join(os.path.dirname(__file__),
                                 'put_object_data')
        with open(file_path, 'rb') as fp:
            params = {
                'Bucket': 'a.valid.name',
                'Key': 'mykeyname',
                'Body': fp,
                'ACL': 'public-read',
                'ContentLanguage': 'piglatin',
                'ContentType': 'text/plain'
            }
            prepared_request = self.get_prepared_request('put_object', params)
            self.assertEqual(
                prepared_request.url,
                'https://s3.us-west-2.amazonaws.com/a.valid.name/mykeyname')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_s3_addressing.py" startline="114" endline="131" pcid="4659">
    def test_put_object_dns_name_classic(self):
        self.region_name = 'us-east-1'
        file_path = os.path.join(os.path.dirname(__file__),
                                 'put_object_data')
        with open(file_path, 'rb') as fp:
            params = {
                'Bucket': 'my.valid.name',
                'Key': 'mykeyname',
                'Body': fp,
                'ACL': 'public-read',
                'ContentLanguage': 'piglatin',
                'ContentType': 'text/plain'
            }
            prepared_request = self.get_prepared_request('put_object', params)
            self.assertEqual(
                prepared_request.url,
                'https://s3.us-east-1.amazonaws.com/my.valid.name/mykeyname')

</source>
</class>

<class classid="96" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="590" endline="604" pcid="4716">
    def setUp(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'Float': {'shape': 'FloatType'},
                }
            },
            'FloatType': {
                'type': 'float',
                'min': 2,
                'max': 5,
            },
        }

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="636" endline="650" pcid="4720">
    def setUp(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'Blob': {'shape': 'BlobType'},
                }
            },
            'BlobType': {
                'type': 'blob',
                'min': 2,
                'max': 5,
            },
        }

</source>
</class>

<class classid="97" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="794" endline="807" pcid="4834">
    def test_fix_s3_host_initial(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://s3-us-west-2.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.s3-us-west-2.amazonaws.com/key.txt')
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="876" endline="889" pcid="4839">
    def test_switch_to_virtual_host_style(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.foo.amazonaws.com/key.txt')
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
</class>

<class classid="98" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="808" endline="828" pcid="4835">
    def test_fix_s3_host_only_applied_once(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://s3.us-west-2.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # Calling the handler again should not affect the end result:
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.s3.us-west-2.amazonaws.com/key.txt')
        # This was a bug previously.  We want to make sure that
        # calling fix_s3_host() again does not alter the auth_path.
        # Otherwise we'll get signature errors.
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="916" endline="936" pcid="4842">
    def test_fix_s3_host_only_applied_once(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # Calling the handler again should not affect the end result:
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.foo.amazonaws.com/key.txt')
        # This was a bug previously.  We want to make sure that
        # calling fix_s3_host() again does not alter the auth_path.
        # Otherwise we'll get signature errors.
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
</class>

<class classid="99" nclones="3" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="829" endline="843" pcid="4836">
    def test_dns_style_not_used_for_get_bucket_location(self):
        original_url = 'https://s3-us-west-2.amazonaws.com/bucket?location'
        request = AWSRequest(
            method='GET', headers={},
            url=original_url,
        )
        signature_version = 's3'
        region_name = 'us-west-2'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # The request url should not have been modified because this is
        # a request for GetBucketLocation.
        self.assertEqual(request.url, original_url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="965" endline="979" pcid="4845">
    def test_virtual_host_style_not_used_for_list_buckets(self):
        original_url = 'https://foo.amazonaws.com/'
        request = AWSRequest(
            method='GET', headers={},
            url=original_url,
        )
        signature_version = 's3'
        region_name = 'us-west-2'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # The request url should not have been modified because this is
        # a request for GetBucketLocation.
        self.assertEqual(request.url, original_url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="950" endline="964" pcid="4844">
    def test_virtual_host_style_not_used_for_get_bucket_location(self):
        original_url = 'https://foo.amazonaws.com/bucket?location'
        request = AWSRequest(
            method='GET', headers={},
            url=original_url,
        )
        signature_version = 's3'
        region_name = 'us-west-2'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # The request url should not have been modified because this is
        # a request for GetBucketLocation.
        self.assertEqual(request.url, original_url)

</source>
</class>

<class classid="100" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1733" endline="1745" pcid="4917">
    def test_parse(self):
        arn = 'arn:aws:s3:us-west-2:1023456789012:myresource'
        self.assertEqual(
            self.parser.parse_arn(arn),
            {
                'partition': 'aws',
                'service': 's3',
                'region': 'us-west-2',
                'account': '1023456789012',
                'resource': 'myresource',
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1750" endline="1762" pcid="4919">
    def test_parse_arn_with_resource_type(self):
        arn = 'arn:aws:s3:us-west-2:1023456789012:bucket_name:mybucket'
        self.assertEqual(
            self.parser.parse_arn(arn),
            {
                'partition': 'aws',
                'service': 's3',
                'region': 'us-west-2',
                'account': '1023456789012',
                'resource': 'bucket_name:mybucket',
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1763" endline="1776" pcid="4920">
    def test_parse_arn_with_empty_elements(self):
        arn = 'arn:aws:s3:::mybucket'
        self.assertEqual(
            self.parser.parse_arn(arn),
            {
                'partition': 'aws',
                'service': 's3',
                'region': '',
                'account': '',
                'resource': 'mybucket',
            }
        )


</source>
</class>

<class classid="101" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1789" endline="1808" pcid="4923">
    def test_accesspoint_arn(self):
        params = {
            'Bucket': 'arn:aws:s3:us-west-2:123456789012:accesspoint/endpoint'
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'endpoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'endpoint',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1809" endline="1828" pcid="4924">
    def test_accesspoint_arn_with_colon(self):
        params = {
            'Bucket': 'arn:aws:s3:us-west-2:123456789012:accesspoint:endpoint'
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'endpoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'endpoint',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3',
                }
            }
        )

</source>
</class>

<class classid="102" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1837" endline="1860" pcid="4926">
    def test_outpost_arn_with_colon(self):
        params = {
            'Bucket': (
                'arn:aws:s3-outposts:us-west-2:123456789012:outpost:'
                'op-01234567890123456:accesspoint:myaccesspoint'
            )
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'myaccesspoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'myaccesspoint',
                    'outpost_name': 'op-01234567890123456',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3-outposts',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1861" endline="1884" pcid="4927">
    def test_outpost_arn_with_slash(self):
        params = {
            'Bucket': (
                'arn:aws:s3-outposts:us-west-2:123456789012:outpost/'
                'op-01234567890123456/accesspoint/myaccesspoint'
            )
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'myaccesspoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'myaccesspoint',
                    'outpost_name': 'op-01234567890123456',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3-outposts',
                }
            }
        )

</source>
</class>

<class classid="103" nclones="3" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2629" endline="2641" pcid="5014">
    def test_metadata_token_not_supported_404(self):
        user_agent = 'my-user-agent'
        self.add_imds_response(b'', status_code=404)
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2655" endline="2667" pcid="5016">
    def test_metadata_token_not_supported_405(self):
        user_agent = 'my-user-agent'
        self.add_imds_response(b'', status_code=405)
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2642" endline="2654" pcid="5015">
    def test_metadata_token_not_supported_403(self):
        user_agent = 'my-user-agent'
        self.add_imds_response(b'', status_code=403)
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
</class>

<class classid="104" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2668" endline="2680" pcid="5017">
    def test_metadata_token_not_supported_timeout(self):
        user_agent = 'my-user-agent'
        self.add_imds_connection_error(ReadTimeoutError(endpoint_url='url'))
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2681" endline="2693" pcid="5018">
    def test_token_not_supported_exhaust_retries(self):
        user_agent = 'my-user-agent'
        self.add_imds_connection_error(ConnectTimeoutError(endpoint_url='url'))
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
</class>

<class classid="105" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1862" endline="1872" pcid="5210">
            'https://s3.amazonaws.com')

    def test_use_dualstack_endpoint(self):
        config = botocore.config.Config(use_dualstack_endpoint=True)
        bridge = ClientEndpointBridge(self.resolver, client_config=config)
        bridge.resolve('ec2', 'us-west-2')
        self.resolver.construct_endpoint.assert_called_with(
            'ec2',
            'us-west-2',
            use_dualstack_endpoint=True,
            use_fips_endpoint=False,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1873" endline="1883" pcid="5211">
        )

    def test_use_fips_endpoint(self):
        config = botocore.config.Config(use_fips_endpoint=True)
        bridge = ClientEndpointBridge(self.resolver, client_config=config)
        bridge.resolve('ec2', 'us-west-2')
        self.resolver.construct_endpoint.assert_called_with(
            'ec2',
            'us-west-2',
            use_dualstack_endpoint=False,
            use_fips_endpoint=True,
</source>
</class>

<class classid="106" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="390" endline="408" pcid="5348">
    def test_handler_call_order_with_hierarchy(self):
        def handler(call_number, **kwargs):
            kwargs['call_number'] = call_number
            self.hook_calls.append(kwargs)

        # We go from most specific to least specific, and each level is called
        # in the order they were registered for that particular hierarchy
        # level.
        self.emitter.register('foo.bar.baz', partial(handler, call_number=1))
        self.emitter.register('foo.bar', partial(handler, call_number=3))
        self.emitter.register('foo', partial(handler, call_number=5))
        self.emitter.register('foo.bar.baz', partial(handler, call_number=2))
        self.emitter.register('foo.bar', partial(handler, call_number=4))
        self.emitter.register('foo', partial(handler, call_number=6))

        self.emitter.emit('foo.bar.baz')
        self.assertEqual([k['call_number'] for k in self.hook_calls],
                         [1, 2, 3, 4, 5, 6])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="426" endline="443" pcid="5352">
    def test_register_first_hierarchy(self):
        def handler(call_number, **kwargs):
            kwargs['call_number'] = call_number
            self.hook_calls.append(kwargs)

        self.emitter.register('foo', partial(handler, call_number=5))
        self.emitter.register('foo.bar', partial(handler, call_number=2))

        self.emitter.register_first('foo', partial(handler, call_number=4))
        self.emitter.register_first('foo.bar', partial(handler, call_number=1))

        self.emitter.register('foo', partial(handler, call_number=6))
        self.emitter.register('foo.bar', partial(handler, call_number=3))

        self.emitter.emit('foo.bar')
        self.assertEqual([k['call_number'] for k in self.hook_calls],
                         [1, 2, 3, 4, 5, 6])

</source>
</class>

<class classid="107" nclones="3" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="335" endline="354" pcid="5390">
    def test_sign_with_signing_type_standard(self):
        auth = mock.Mock()
        post_auth = mock.Mock()
        query_auth = mock.Mock()
        auth_types = {
            'v4-presign-post': post_auth,
            'v4-query': query_auth,
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             signing_type='standard')
        self.assertFalse(post_auth.called)
        self.assertFalse(query_auth.called)
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='region_name'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="355" endline="374" pcid="5391">
    def test_sign_with_signing_type_presign_url(self):
        auth = mock.Mock()
        post_auth = mock.Mock()
        query_auth = mock.Mock()
        auth_types = {
            'v4-presign-post': post_auth,
            'v4-query': query_auth,
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             signing_type='presign-url')
        self.assertFalse(post_auth.called)
        self.assertFalse(auth.called)
        query_auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='region_name'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="375" endline="394" pcid="5392">
    def test_sign_with_signing_type_presign_post(self):
        auth = mock.Mock()
        post_auth = mock.Mock()
        query_auth = mock.Mock()
        auth_types = {
            'v4-presign-post': post_auth,
            'v4-query': query_auth,
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             signing_type='presign-post')
        self.assertFalse(auth.called)
        self.assertFalse(query_auth.called)
        post_auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='region_name'
        )

</source>
</class>

<class classid="108" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="408" endline="421" pcid="5394">
    def test_sign_override_region_from_context(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        self.request.context = {'signing': {'region': 'my-override-region'}}
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request)
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='my-override-region'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="437" endline="450" pcid="5396">
    def test_sign_override_signing_name_from_context(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        self.request.context = {'signing': {'signing_name': 'override_name'}}
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request)
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='override_name',
            region_name='region_name'
        )

</source>
</class>

<class classid="109" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="100" endline="110" pcid="5444">
    def test_does_provide_first_non_none_value_first_in_env_var_list(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={'FOO': 'baz'},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO', 'BAR'],
            },
            expected_value='baz',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="111" endline="121" pcid="5445">
    def test_does_provide_first_non_none_value_second_in_env_var_list(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={'BAR': 'baz'},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO', 'BAR'],
            },
            expected_value='baz',
        )

</source>
</class>

<class classid="110" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="122" endline="132" pcid="5446">
    def test_does_provide_none_if_all_list_env_vars_are_none(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO', 'BAR'],
            },
            expected_value=None,
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="202" endline="212" pcid="5453">
    def test_provide_value_from_config_list_if_all_vars_are_none(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={},
            create_config_chain_args={
                'config_property_names': ['config1', 'config2'],
            },
            expected_value=None,
        )

</source>
</class>

<class classid="111" nclones="4" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="235" endline="248" pcid="5456">
    def test_chain_provider_does_follow_priority_instance_var(self):
        self.assert_chain_does_provide(
            instance_map={'instance_var': 'from-instance'},
            environ_map={'ENV_VAR': 'from-env'},
            scoped_config_map={'config_var': 'from-config'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-instance',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="249" endline="262" pcid="5457">
    def test_chain_provider_does_follow_priority_env_var(self):
        self.assert_chain_does_provide(
            instance_map={'wrong_instance_var': 'from-instance'},
            environ_map={'ENV_VAR': 'from-env'},
            scoped_config_map={'config_var': 'from-confi'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-env',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="277" endline="291" pcid="5459">
    def test_chain_provider_does_follow_priority_default(self):
        self.assert_chain_does_provide(
            instance_map={'wrong_instance_var': 'from-instance'},
            environ_map={'WRONG_ENV_VAR': 'from-env'},
            scoped_config_map={'wrong_config_var': 'from-config'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-default',
        )


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="263" endline="276" pcid="5458">
    def test_chain_provider_does_follow_priority_config(self):
        self.assert_chain_does_provide(
            instance_map={'wrong_instance_var': 'from-instance'},
            environ_map={'WRONG_ENV_VAR': 'from-env'},
            scoped_config_map={'config_var': 'from-config'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-config',
        )

</source>
</class>

<class classid="112" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="104" endline="118" pcid="5490">
    def close_log_file_handler(self, tempdir, filename):
        logger = logging.getLogger('botocore')
        handlers = logger.handlers
        for handler in handlers[:]:
            if hasattr(handler, 'stream') and handler.stream.name == filename:
                handler.stream.close()
                logger.removeHandler(handler)
                os.remove(filename)
                # logging has an atexit handler that will try to flush/close
                # the file.  By setting this flag to False, we'll prevent it
                # from raising an exception, which is fine because we're
                # handling the closing of the file ourself.
                logging.raiseExceptions = False
        shutil.rmtree(tempdir)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="68" endline="82" pcid="5955">
    def close_log_file_handler(self, tempdir, filename):
        logger = logging.getLogger('botocore')
        handlers = logger.handlers
        for handler in handlers[:]:
            if hasattr(handler, 'stream') and handler.stream.name == filename:
                handler.stream.close()
                logger.removeHandler(handler)
                os.remove(filename)
                # logging has an atexit handler that will try to flush/close
                # the file.  By setting this flag to False, we'll prevent it
                # from raising an exception, which is fine because we're
                # handling the closing of the file ourself.
                logging.raiseExceptions = False
        shutil.rmtree(tempdir)

</source>
</class>

<class classid="113" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="193" endline="203" pcid="5501">
    def test_file_logger(self):
        tempdir = tempfile.mkdtemp()
        temp_file = os.path.join(tempdir, 'file_logger')
        self.session.set_file_logger(logging.DEBUG, temp_file)
        self.addCleanup(self.close_log_file_handler, tempdir, temp_file)
        self.session.get_credentials()
        self.assertTrue(os.path.isfile(temp_file))
        with open(temp_file) as logfile:
            s = logfile.read()
        self.assertTrue('Looking for credentials' in s)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="179" endline="189" pcid="5967">
    def test_file_logger(self):
        tempdir = tempfile.mkdtemp()
        temp_file = os.path.join(tempdir, 'file_logger')
        self.session.set_file_logger(logging.DEBUG, temp_file)
        self.addCleanup(self.close_log_file_handler, tempdir, temp_file)
        self.session.get_credentials()
        self.assertTrue(os.path.isfile(temp_file))
        with open(temp_file) as logfile:
            s = logfile.read()
        self.assertTrue('Looking for credentials' in s)

</source>
</class>

<class classid="114" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="209" endline="221" pcid="5503">
    def test_full_config_merges_creds_file_data(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            full_config = self.session.full_config
            self.assertEqual(full_config['profiles']['newprofile'],
                             {'aws_access_key_id': 'FROM_CREDS_FILE_1',
                              'aws_secret_access_key': 'FROM_CREDS_FILE_2'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="195" endline="207" pcid="5969">
    def test_full_config_merges_creds_file_data(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            full_config = self.session.full_config
            self.assertEqual(full_config['profiles']['newprofile'],
                             {'aws_access_key_id': 'FROM_CREDS_FILE_1',
                              'aws_secret_access_key': 'FROM_CREDS_FILE_2'})

</source>
</class>

<class classid="115" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="222" endline="234" pcid="5504">
    def test_path_not_in_available_profiles(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            profiles = self.session.available_profiles
            self.assertEqual(
                set(profiles),
                set(['foo', 'default', 'newprofile']))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="208" endline="220" pcid="5970">
    def test_path_not_in_available_profiles(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            profiles = self.session.available_profiles
            self.assertEqual(
                set(profiles),
                set(['foo', 'default', 'newprofile']))

</source>
</class>

<class classid="116" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="279" endline="290" pcid="5510">
    def test_register_with_unique_id(self):
        calls = []
        handler = lambda **kwargs: calls.append(kwargs)
        self.session.register('foo', handler, unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls[0]['event_name'], 'foo')
        calls = []
        self.session.unregister('foo', unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls, [])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="267" endline="278" pcid="5976">
    def test_register_with_unique_id(self):
        calls = []
        handler = lambda **kwargs: calls.append(kwargs)
        self.session.register('foo', handler, unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls[0]['event_name'], 'foo')
        calls = []
        self.session.unregister('foo', unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls, [])


</source>
</class>

<class classid="117" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="480" endline="493" pcid="5533">
    def test_credential_provider_not_called_when_creds_provided(self):
        cred_provider = mock.Mock()
        self.session.register_component(
            'credential_provider', cred_provider)
        self.session.create_client(
            'sts', 'us-west-2',
            aws_access_key_id='foo',
            aws_secret_access_key='bar',
            aws_session_token='baz')
        self.assertFalse(cred_provider.load_credentials.called,
                         "Credential provider was called even though "
                         "explicit credentials were provided to the "
                         "create_client call.")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="477" endline="490" pcid="5998">
    def test_credential_provider_not_called_when_creds_provided(self):
        cred_provider = mock.Mock()
        self.session.register_component(
            'credential_provider', cred_provider)
        self.session.create_client(
            'sts', 'us-west-2',
            aws_access_key_id='foo',
            aws_secret_access_key='bar',
            aws_session_token='baz')
        self.assertFalse(cred_provider.load_credentials.called,
                         "Credential provider was called even though "
                         "explicit credentials were provided to the "
                         "create_client call.")

</source>
</class>

<class classid="118" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="494" endline="507" pcid="5534">
    def test_cred_provider_called_when_partial_creds_provided(self):
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id='foo',
                aws_secret_access_key=None
            )
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id=None,
                aws_secret_access_key='foo',
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="491" endline="504" pcid="5999">
    def test_cred_provider_called_when_partial_creds_provided(self):
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id='foo',
                aws_secret_access_key=None
            )
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id=None,
                aws_secret_access_key='foo',
            )

</source>
</class>

<class classid="119" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="542" endline="558" pcid="5538">
    def test_create_client_with_merging_client_configs(self, client_creator):
        config = botocore.config.Config(region_name='us-west-2')
        other_config = botocore.config.Config(region_name='us-east-1')
        self.session.set_default_client_config(config)
        self.session.create_client('sts', config=other_config)

        # Grab the client config used in creating the client
        used_client_config = (
            client_creator.return_value.create_client.call_args[1][
                'client_config'])
        # Check that the client configs were merged
        self.assertEqual(used_client_config.region_name, 'us-east-1')
        # Make sure that the client config used is not the default client
        # config or the one passed in. It should be a new config.
        self.assertIsNot(used_client_config, config)
        self.assertIsNot(used_client_config, other_config)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="531" endline="547" pcid="6002">
    def test_create_client_with_merging_client_configs(self, client_creator):
        config = botocore.config.Config(region_name='us-west-2')
        other_config = botocore.config.Config(region_name='us-east-1')
        self.session.set_default_client_config(config)
        self.session.create_client('sts', config=other_config)

        # Grab the client config used in creating the client
        used_client_config = (
            client_creator.return_value.create_client.call_args[1][
                'client_config'])
        # Check that the client configs were merged
        self.assertEqual(used_client_config.region_name, 'us-east-1')
        # Make sure that the client config used is not the default client
        # config or the one passed in. It should be a new config.
        self.assertIsNot(used_client_config, config)
        self.assertIsNot(used_client_config, other_config)

</source>
</class>

<class classid="120" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="564" endline="580" pcid="5540">
    def test_create_client_with_region_and_client_config(self):
        config = botocore.config.Config()
        # Use a client config with no region configured.
        ec2_client = self.session.create_client(
            'ec2', region_name='us-west-2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # If the region name is changed, it should not change the
        # region of the client
        config.region_name = 'us-east-1'
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # Now make a new client with the updated client config.
        ec2_client = self.session.create_client(
            'ec2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="553" endline="569" pcid="6004">
    def test_create_client_with_region_and_client_config(self):
        config = botocore.config.Config()
        # Use a client config with no region configured.
        ec2_client = self.session.create_client(
            'ec2', region_name='us-west-2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # If the region name is changed, it should not change the
        # region of the client
        config.region_name = 'us-east-1'
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # Now make a new client with the updated client config.
        ec2_client = self.session.create_client(
            'ec2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-east-1')

</source>
</class>

<class classid="121" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="777" endline="794" pcid="5566">
        self.assertIs(self.components.get_component('foo'), second)

    def test_lazy_registration_factory_does_not_remove_from_list_on_error(self):
        class ArbitraryError(Exception):
            pass

        def bad_factory():
            raise ArbitraryError("Factory raises an exception.")

        self.components.lazy_register_component('foo', bad_factory)

        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')

        # Trying again should raise the same exception,
        # not an ValueError("Unknown component")
        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="699" endline="716" pcid="6020">
        self.assertIs(self.components.get_component('foo'), second)

    def test_lazy_registration_factory_does_not_remove_from_list_on_error(self):
        class ArbitraryError(Exception):
            pass

        def bad_factory():
            raise ArbitraryError("Factory raises an exception.")

        self.components.lazy_register_component('foo', bad_factory)

        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')

        # Trying again should raise the same exception,
        # not an ValueError("Unknown component")
        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')
</source>
</class>

<class classid="122" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_discovery.py" startline="316" endline="330" pcid="5592">
    def test_describe_endpoint_optional_fails_stale_cache(self):
        key = ()
        cache = {
            key: [{'Address': 'old.com', 'Expiration': 0}]
        }
        side_effect = [ConnectionError(error=None)] * 2
        self.construct_manager(cache=cache, side_effect=side_effect)
        kwargs = {'Operation': 'TestDiscoveryOptional'}
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        # This second call shouldn't go through as we just failed
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        self.client.describe_endpoints.call_args_list == [call()]

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_discovery.py" startline="343" endline="357" pcid="5594">
    def test_describe_endpoint_required_fails_stale_cache(self):
        key = ()
        cache = {
            key: [{'Address': 'old.com', 'Expiration': 0}]
        }
        side_effect = [ConnectionError(error=None)] * 2
        self.construct_manager(cache=cache, side_effect=side_effect)
        kwargs = {'Operation': 'TestDiscoveryRequired'}
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        # We have a stale endpoint, so this shouldn't fail or force a refresh
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        self.client.describe_endpoints.call_args_list == [call()]

</source>
</class>

<class classid="123" nclones="2" nlines="20" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="202" endline="227" pcid="5623">
    def test_response_metadata_on_json_request(self):
        parser = parsers.JSONParser()
        response = b'{"Str": "mystring"}'
        headers = {'x-amzn-requestid': 'request-id'}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse({'body': response, 'headers': headers,
                               'status_code': 200}, output_shape)
        # Note that the response metadata is normalized to match the query
        # protocol, even though this is not how it appears in the output.
        self.assertEqual(
            parsed, {'Str': 'mystring',
                     'ResponseMetadata': {'RequestId': 'request-id',
                                          'HTTPStatusCode': 200,
                                          'HTTPHeaders': headers}})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="288" endline="313" pcid="5626">
    def test_response_metadata_on_rest_json_response(self):
        parser = parsers.RestJSONParser()
        response = b'{"Str": "mystring"}'
        headers = {'x-amzn-requestid': 'request-id'}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse({'body': response, 'headers': headers,
                               'status_code': 200}, output_shape)
        # Note that the response metadata is normalized to match the query
        # protocol, even though this is not how it appears in the output.
        self.assertEqual(
            parsed, {'Str': 'mystring',
                     'ResponseMetadata': {'RequestId': 'request-id',
                                          'HTTPStatusCode': 200,
                                          'HTTPHeaders': headers}})

</source>
</class>

<class classid="124" nclones="2" nlines="22" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="257" endline="287" pcid="5625">
    def test_metadata_always_exists_for_json(self):
        # ResponseMetadata is used for more than just the request id. It
        # should always get populated, even if the request doesn't seem to
        # have an id.
        parser = parsers.JSONParser()
        response = b'{"Str": "mystring"}'
        headers = {}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse(
            {'body': response, 'headers': headers, 'status_code': 200},
            output_shape)
        expected = {
            'Str': 'mystring',
            'ResponseMetadata': {
                'HTTPStatusCode': 200,
                'HTTPHeaders': headers
            }
        }
        self.assertEqual(parsed, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="314" endline="344" pcid="5627">
    def test_metadata_always_exists_on_rest_json_response(self):
        # ResponseMetadata is used for more than just the request id. It
        # should always get populated, even if the request doesn't seem to
        # have an id.
        parser = parsers.RestJSONParser()
        response = b'{"Str": "mystring"}'
        headers = {}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse(
            {'body': response, 'headers': headers, 'status_code': 200},
            output_shape)
        expected = {
            'Str': 'mystring',
            'ResponseMetadata': {
                'HTTPStatusCode': 200,
                'HTTPHeaders': headers
            }
        }
        self.assertEqual(parsed, expected)

</source>
</class>

<class classid="125" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="672" endline="684" pcid="5648">
    def test_empty_rest_json_response(self):
        headers = {'x-amzn-requestid': 'request-id'}
        parser = parsers.RestJSONParser()
        output_shape = None
        parsed = parser.parse(
            {'body': b'', 'headers': headers, 'status_code': 200},
            output_shape)
        self.assertEqual(
            parsed,
            {'ResponseMetadata': {'RequestId': 'request-id',
                                  'HTTPStatusCode': 200,
                                  'HTTPHeaders': headers}})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="685" endline="698" pcid="5649">
    def test_empty_rest_xml_response(self):
        # This is the format used by cloudfront, route53.
        headers = {'x-amzn-requestid': 'request-id'}
        parser = parsers.RestXMLParser()
        output_shape = None
        parsed = parser.parse(
            {'body': b'', 'headers': headers, 'status_code': 200},
            output_shape)
        self.assertEqual(
            parsed,
            {'ResponseMetadata': {'RequestId': 'request-id',
                                  'HTTPStatusCode': 200,
                                  'HTTPHeaders': headers}})

</source>
</class>

<class classid="126" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1064" endline="1084" pcid="5667">
    def test_parse_error_response_for_query_protocol(self):
        body = (
            '<ErrorResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">'
            '  <Error>'
            '    <Type>Sender</Type>'
            '    <Code>InvalidInput</Code>'
            '    <Message>ARN asdf is not valid.</Message>'
            '  </Error>'
            '  <RequestId>request-id</RequestId>'
            '</ErrorResponse>'
        ).encode('utf-8')
        parser = parsers.QueryParser()
        parsed = parser.parse({
            'body': body, 'headers': {}, 'status_code': 400}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': 'InvalidInput',
            'Message': 'ARN asdf is not valid.',
            'Type': 'Sender',
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1132" endline="1152" pcid="5670">
    def test_can_parse_rest_xml_errors(self):
        body = (
            '<ErrorResponse xmlns="https://route53.amazonaws.com/doc/2013-04-01/">'
            '  <Error>'
            '    <Type>Sender</Type>'
            '    <Code>NoSuchHostedZone</Code>'
            '    <Message>No hosted zone found with ID: foobar</Message>'
            '  </Error>'
            '  <RequestId>bc269cf3-d44f-11e5-8779-2d21c30eb3f1</RequestId>'
            '</ErrorResponse>'
        ).encode('utf-8')
        parser = parsers.RestXMLParser()
        parsed = parser.parse({
            'body': body, 'headers': {}, 'status_code': 400}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': 'NoSuchHostedZone',
            'Message': 'No hosted zone found with ID: foobar',
            'Type': 'Sender',
        })

</source>
</class>

<class classid="127" nclones="3" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1326" endline="1342" pcid="5680">
    def test_can_parse_rest_json_modeled_fields(self):
        body = (
            b'{"ModeledField":"Some modeled field",'
            b'"Message":"Some message"}'
        )
        parser = parsers.RestJSONParser()
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1364" endline="1383" pcid="5682">
    def test_can_parse_ec2_modeled_fields(self):
        body = (
            b'<Response><Errors><Error>'
            b'<Code>ExceptionShape</Code>'
            b'<Message>Foo message</Message>'
            b'<ModeledField>Some modeled field</ModeledField>'
            b'</Error></Errors></Response>'
        )
        parser = parsers.EC2QueryParser()
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1405" endline="1422" pcid="5684">
    def test_can_parse_json_modeled_fields(self):
        body = (
            b'{"ModeledField":"Some modeled field",'
            b'"Message":"Some message",'
            b'"__type": "Prefix#SomeError"}'
        )
        parser = parsers.JSONParser()
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
</class>

<class classid="128" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1343" endline="1363" pcid="5681">
    def test_can_parse_rest_xml_modeled_fields(self):
        parser = parsers.RestXMLParser()
        body = (
            b'<?xml version="1.0"?>\n<ErrorResponse xmlns="http://foo.bar">'
            b'<Error><Type>Sender</Type><Code>NoSuchDistribution</Code>'
            b'<Message>The specified distribution does not exist.</Message>'
            b'<ModeledField>Some modeled field</ModeledField>'
            b'</Error>'
            b'</ErrorResponse>'
        )
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1384" endline="1404" pcid="5683">
    def test_can_parse_query_modeled_fields(self):
        parser = parsers.QueryParser()
        body = (
            b'<?xml version="1.0"?>\n<ErrorResponse xmlns="http://foo.bar">'
            b'<Error><Type>Sender</Type><Code>SomeCode</Code>'
            b'<Message>A message</Message>'
            b'<ModeledField>Some modeled field</ModeledField>'
            b'</Error>'
            b'</ErrorResponse>'
        )
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
</class>

<class classid="129" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="249" endline="267" pcid="5707">

    def test_no_cache(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn
        )

        expected_response = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="686" endline="703" pcid="5726">

    def test_no_cache(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        refresher = credentials.AssumeRoleWithWebIdentityCredentialFetcher(
            client_creator, self.load_token, self.role_arn
        )
        expected_response = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
</source>
</class>

<class classid="130" nclones="2" nlines="21" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="292" endline="320" pcid="5709">

    def test_retrieves_from_cache(self):
        date_in_future = datetime.utcnow() + timedelta(seconds=1000)
        utc_timestamp = date_in_future.isoformat() + 'Z'
        cache_key = (
            '793d6e2f27667ab2da104824407e486bfec24a47'
        )
        cache = {
            cache_key: {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': utc_timestamp,
                }
            }
        }
        client_creator = mock.Mock()
        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn, cache=cache
        )

        expected_response = self.get_expected_creds_from_response(
            cache[cache_key]
        )
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
        client_creator.assert_not_called()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="704" endline="731" pcid="5727">

    def test_retrieves_from_cache(self):
        date_in_future = datetime.utcnow() + timedelta(seconds=1000)
        utc_timestamp = date_in_future.isoformat() + 'Z'
        cache_key = (
            '793d6e2f27667ab2da104824407e486bfec24a47'
        )
        cache = {
            cache_key: {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': utc_timestamp,
                }
            }
        }
        client_creator = mock.Mock()
        refresher = credentials.AssumeRoleWithWebIdentityCredentialFetcher(
            client_creator, self.load_token, self.role_arn, cache=cache
        )
        expected_response = self.get_expected_creds_from_response(
            cache[cache_key]
        )
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
        client_creator.assert_not_called()
</source>
</class>

<class classid="131" nclones="2" nlines="23" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="409" endline="437" pcid="5713">

    def test_assume_role_in_cache_but_expired(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        cache = {
            'development--myrole': {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': datetime.now(tzlocal()),
                }
            }
        }

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn, cache=cache
        )
        expected = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="732" endline="761" pcid="5728">

    def test_assume_role_in_cache_but_expired(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        cache = {
            'development--myrole': {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': datetime.now(tzlocal()),
                }
            }
        }

        refresher = credentials.AssumeRoleWithWebIdentityCredentialFetcher(
            client_creator, self.load_token, self.role_arn, cache=cache
        )
        expected = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected)

</source>
</class>

<class classid="132" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="953" endline="966" pcid="5740">

    def test_envvars_found_with_security_token(self):
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SECURITY_TOKEN': 'baz',
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
        self.assertEqual(creds.method, 'env')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="967" endline="980" pcid="5741">

    def test_envvars_found_with_session_token(self):
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SESSION_TOKEN': 'baz',
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
        self.assertEqual(creds.method, 'env')
</source>
</class>

<class classid="133" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1013" endline="1027" pcid="5745">

    def test_error_when_expiry_required_but_empty(self):
        expiry_time = datetime.now(tzlocal()) - timedelta(hours=1)
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()

        del environ['AWS_CREDENTIAL_EXPIRATION']

        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            creds.get_frozen_credentials()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1114" endline="1131" pcid="5751">

    def test_missing_access_key_id_raises_error(self):
        expiry_time = datetime.now(tzlocal()) - timedelta(hours=1)
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()

        del environ['AWS_ACCESS_KEY_ID']

        # Since the credentials are expired, we'll trigger a refresh
        # whenever we try to access them. At that refresh time, the relevant
        # environment variables are incomplete, so an error will be raised.
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            creds.get_frozen_credentials()
</source>
</class>

<class classid="134" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3124" endline="3140" pcid="5885">
        with self.assertRaisesRegex(exception, 'Unsupported version'):
            provider.load()

    def test_missing_access_key_raises_exception(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            # Missing access key.
            'SecretAccessKey': 'bar',
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        exception = botocore.exceptions.CredentialRetrievalError
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3141" endline="3157" pcid="5886">
        with self.assertRaisesRegex(exception, 'Missing required key'):
            provider.load()

    def test_missing_secret_key_raises_exception(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            'AccessKeyId': 'foo',
            # Missing secret key.
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        exception = botocore.exceptions.CredentialRetrievalError
</source>
</class>

<class classid="135" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="193" endline="203" pcid="6084">
    def test_http_proxy_scheme_with_http_url(self):
        proxies = {'http': 'http://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'http://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['http'],
            proxy_headers={},
        )
        self.assert_request_sent(url=self.request.url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="215" endline="225" pcid="6086">
    def test_https_proxy_scheme_with_http_url(self):
        proxies = {'http': 'https://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'http://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['http'],
            proxy_headers={},
        )
        self.assert_request_sent(url=self.request.url)

</source>
</class>

<class classid="136" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="204" endline="214" pcid="6085">
    def test_http_proxy_scheme_with_https_url(self):
        proxies = {'https': 'http://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'https://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['https'],
            proxy_headers={},
        )
        self.assert_request_sent()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="226" endline="236" pcid="6087">
    def test_https_proxy_scheme_tls_in_tls(self):
        proxies = {'https': 'https://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'https://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['https'],
            proxy_headers={},
        )
        self.assert_request_sent()

</source>
</class>

<class classid="137" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="722" endline="734" pcid="6157">
    def assert_distribution_deployed_call_count(self):
        waiter_name = 'DistributionDeployed'
        waiter_model = self.get_waiter_model(self.service)
        self.client.meta.service_model = self.get_service_model(
            self.service)
        self.client.get_distribution.side_effect = [
            {'Distribution': {'Status': 'Deployed'}}
        ]
        waiter = create_waiter_with_client(waiter_name, waiter_model,
                                           self.client)
        waiter.wait()
        self.assertEqual(self.client.get_distribution.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="735" endline="747" pcid="6158">
    def assert_invalidation_completed_call_count(self):
        waiter_name = 'InvalidationCompleted'
        waiter_model = self.get_waiter_model(self.service)
        self.client.meta.service_model = self.get_service_model(
            self.service)
        self.client.get_invalidation.side_effect = [
            {'Invalidation': {'Status': 'Completed'}}
        ]
        waiter = create_waiter_with_client(waiter_name, waiter_model,
                                           self.client)
        waiter.wait()
        self.assertEqual(self.client.get_invalidation.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="748" endline="760" pcid="6159">
    def assert_streaming_distribution_deployed_call_count(self):
        waiter_name = 'StreamingDistributionDeployed'
        waiter_model = self.get_waiter_model(self.service)
        self.client.meta.service_model = self.get_service_model(
            self.service)
        self.client.get_streaming_distribution.side_effect = [
            {'StreamingDistribution': {'Status': 'Deployed'}}
        ]
        waiter = create_waiter_with_client(waiter_name, waiter_model,
                                           self.client)
        waiter.wait()
        self.assertEqual(self.client.get_streaming_distribution.call_count, 1)

</source>
</class>

<class classid="138" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_stub.py" startline="162" endline="177" pcid="6176">
    def test_get_client_error_with_extra_error_meta(self):
        error_code = "foo"
        error_message = "bar"
        error_meta = {
            "Endpoint": "https://foo.bar.baz",
        }
        self.stubber.add_client_error(
            'foo', error_code, error_message,
            http_status_code=301,
            service_error_meta=error_meta)
        with self.stubber:
            response = self.emit_get_response_event()
        error = response[1]['Error']
        self.assertIn('Endpoint', error)
        self.assertEqual(error['Endpoint'], "https://foo.bar.baz")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_stub.py" startline="178" endline="194" pcid="6177">
    def test_get_client_error_with_extra_response_meta(self):
        error_code = "foo"
        error_message = "bar"
        stub_response_meta = {
            "RequestId": "79104EXAMPLEB723",
        }
        self.stubber.add_client_error(
            'foo', error_code, error_message,
            http_status_code=301,
            response_meta=stub_response_meta)
        with self.stubber:
            response = self.emit_get_response_event()
        actual_response_meta = response[1]['ResponseMetadata']
        self.assertIn('RequestId', actual_response_meta)
        self.assertEqual(actual_response_meta['RequestId'], "79104EXAMPLEB723")


</source>
</class>

<class classid="139" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="378" endline="397" pcid="6463">
    def test_expect_100_continue_sends_307(self):
        # This is the case where we send a 100 continue and the server
        # immediately sends a 307
        with patch('urllib3.util.wait_for_read') as wait_mock:
            # Shows the server first sending a 100 continue response
            # then a 200 ok response.
            s = FakeSocket(
                b'HTTP/1.1 307 Temporary Redirect\r\n'
                b'Location: http://example.org\r\n')
            conn = AWSHTTPConnection('s3.amazonaws.com', 443)
            conn.sock = s
            wait_mock.return_value = True
            conn.request('GET', '/bucket/foo', b'body',
                         {'Expect': b'100-continue'})
            # Assert that we waited for the 100-continue response
            self.assertEqual(wait_mock.call_count, 1)
            response = conn.getresponse()
            # Now we should verify that our final response is the 307.
            self.assertEqual(response.status, 307)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="398" endline="417" pcid="6464">
    def test_expect_100_continue_no_response_from_server(self):
        with patch('urllib3.util.wait_for_read') as wait_mock:
            # Shows the server first sending a 100 continue response
            # then a 200 ok response.
            s = FakeSocket(
                b'HTTP/1.1 307 Temporary Redirect\r\n'
                b'Location: http://example.org\r\n')
            conn = AWSHTTPConnection('s3.amazonaws.com', 443)
            conn.sock = s
            # By settings wait_mock to return False, this indicates
            # that the server did not send any response.  In this situation
            # we should just send the request anyways.
            wait_mock.return_value = False
            conn.request('GET', '/bucket/foo', b'body',
                         {'Expect': b'100-continue'})
            # Assert that we waited for the 100-continue response
            self.assertEqual(wait_mock.call_count, 1)
            response = conn.getresponse()
            self.assertEqual(response.status, 307)

</source>
</class>

<class classid="140" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="407" endline="417" pcid="6534">
    def test_preserves_current_word(self):
        result = self.cli_parser.parse('aws ec2 stop-')
        self.assert_parsed_results_equal(
            result,
            current_command='ec2',
            parsed_params={},
            global_params={},
            lineage=['aws'],
            current_fragment='stop-',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="430" endline="440" pcid="6536">
    def test_current_fragment_populated_on_work_break(self):
        result = self.cli_parser.parse('aws ec2 ')
        self.assert_parsed_results_equal(
            result,
            current_command='ec2',
            parsed_params={},
            global_params={},
            lineage=['aws'],
            current_fragment='',
        )

</source>
</class>

<class classid="141" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="453" endline="464" pcid="6538">
    def test_option_not_preserved_when_space_separated(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst ')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='',
            unparsed_items=['--inst'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="465" endline="476" pcid="6539">
    def test_can_have_unparsed_option_with_current_fragment(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst foo')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='foo',
            unparsed_items=['--inst'],
        )

</source>
</class>

<class classid="142" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="477" endline="492" pcid="6540">
    def test_unknown_option_does_not_consume_arg(self):
        # In this case we're unlikely to offer any helpful
        # auto-completion, but we still need to decided where
        # we should put the 'foo' value.  I think it makes the
        # most sense to put this under "unparsed_items".
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst foo ')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='',
            unparsed_items=['--inst', 'foo'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="493" endline="504" pcid="6541">
    def test_can_handle_multiple_unknown_options(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst --foo ')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='',
            unparsed_items=['--inst', '--foo'],
        )

</source>
</class>

<class classid="143" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/ddb/test_autocomplete.py" startline="66" endline="80" pcid="6628">
    def test_complete_table_name(self):
        self.mock_client.list_tables.return_value = {
            'TableNames': [
                'tablename',
                'mytable'
            ]
        }
        parsed = self.parser.parse('aws ddb select ')
        results = self.completer.complete(parsed)
        self.assertEqual(
            results,
            [CompletionResult('tablename', 0),
             CompletionResult('mytable', 0)]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/ddb/test_autocomplete.py" startline="81" endline="95" pcid="6629">
    def test_complete_table_name_with_put(self):
        self.mock_client.list_tables.return_value = {
            'TableNames': [
                'tablename',
                'mytable'
            ]
        }
        parsed = self.parser.parse('aws ddb put ')
        results = self.completer.complete(parsed)
        self.assertEqual(
            results,
            [CompletionResult('tablename', 0),
             CompletionResult('mytable', 0)]
        )

</source>
</class>

<class classid="144" nclones="4" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="470" endline="483" pcid="6687">
    def test_scan_tags_with_multi_values(self):
        tags = [
            ':category: Foo, Bar',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="514" endline="527" pcid="6690">
    def test_scan_tags_with_multi_values_extra_space(self):
        tags = [
            ':category:    Foo, Bar   ',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="542" endline="555" pcid="6692">
    def test_scan_tags_with_multi_preserve_space(self):
        tags = [
            ':category: Foo Bar, Baz',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo Bar', 'Baz'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="528" endline="541" pcid="6691">
    def test_scan_tags_with_multi_values_no_space(self):
        tags = [
            ':category: Foo,Bar',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
</class>

<class classid="145" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="85" endline="110" pcid="6701">
    def test_can_prompt_for_multiple_values_in_order(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              name:
                type: prompt
                description: Enter user name
              group:
                type: prompt
                description: Enter group name
        """)
        self.responses['Enter user name'] = 'myname'
        self.responses['Enter group name'] = 'wheel'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['name'], 'myname')
        self.assertEqual(parameters['group'], 'wheel')
        # We should also have prompted in the order that the keys
        # were defined.
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Enter user name', 'myname'),
             ('Enter group name', 'wheel')],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="111" endline="140" pcid="6702">
    def test_can_prompt_for_conditional_values_true(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              should_stop:
                type: prompt
                description: Should we stop
            next_step:
              switch: should_stop
              yes: DONE
              no: ask_name
          ask_name:
            values:
              name:
                type: prompt
                description: Enter user name
        """)
        self.responses['Should we stop'] = 'no'
        self.responses['Enter user name'] = 'admin'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['should_stop'], 'no')
        self.assertEqual(parameters['name'], 'admin')
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Should we stop', 'no'),
             ('Enter user name', 'admin')],
        )

</source>
</class>

<class classid="146" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="169" endline="194" pcid="6704">
    def test_can_prompt_with_choices_for_prompt(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              name:
                type: prompt
                description: Enter user name
                choices:
                    - display: Administrator
                      actual_value: admin
                    - display: Developer
                      actual_value: dev
        """)
        self.responses['Enter user name'] = 'admin'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['name'], 'admin')
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Enter user name', 'admin', [{'display': 'Administrator',
                                             'actual_value': 'admin'},
                                            {'display': 'Developer',
                                             'actual_value': 'dev'}])],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="451" endline="479" pcid="6714">
    def test_choices_can_be_variable_reference(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              choices_var:
                type: static
                value:
                  - display: Administrator
                    actual_value: admin
                  - display: Developer
                    actual_value: dev
              name:
                type: prompt
                description: Enter user name
                choices: choices_var
        """)
        self.responses['Enter user name'] = 'admin'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['name'], 'admin')
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Enter user name', 'admin', [{'display': 'Administrator',
                                             'actual_value': 'admin'},
                                            {'display': 'Developer',
                                             'actual_value': 'dev'}])],
        )

</source>
</class>

<class classid="147" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="985" endline="1014" pcid="6740">
    def test_can_merge_nested_dicts(self):
        loaded = load_wizard("""
        execute:
          default:
            - type: define-variable
              varname: myvar
              value:
                foo:
                  bar:
                    baz: original-baz
                    baz2: original-baz2
                foo2: original-foo2
            - type: merge-dict
              output_var: result
              overlays:
              - "{myvar}"
              - foo:
                  bar:
                    baz: new-baz
                  bar2: new-bar2
        """)
        variables = {}
        self.executor.execute(loaded['execute'], variables)
        expected = {
            'foo': {'bar': {'baz': 'new-baz', 'baz2': 'original-baz2'},
                    'bar2': 'new-bar2'},
            'foo2': 'original-foo2',
        }
        self.assertEqual(variables['result'], expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1015" endline="1049" pcid="6741">
    def test_can_merge_dicts_with_vars(self):
        loaded = load_wizard("""
        execute:
          default:
            - type: define-variable
              varname: myvar
              value:
                foo:
                  bar:
                    baz: original-baz
                    baz2: original-baz2
                foo2: original-foo2
            - type: define-variable
              varname: myvar2
              value:
                foo:
                  bar:
                    baz: new-baz
                    baz2: original-baz2
                  bar2: new-bar2
            - type: merge-dict
              output_var: result
              overlays:
              - "{myvar}"
              - "{myvar2}"
        """)
        variables = {}
        self.executor.execute(loaded['execute'], variables)
        expected = {
            'foo': {'bar': {'baz': 'new-baz', 'baz2': 'original-baz2'},
                    'bar2': 'new-bar2'},
            'foo2': 'original-foo2',
        }
        self.assertEqual(variables['result'], expected)

</source>
</class>

<class classid="148" nclones="4" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1314" endline="1333" pcid="6765">

    def test_multiline_condition_statement(self):
        step_definition = {
            'type': 'template',
            'value': """{foo}
            {%if   {allow} == False    %}
not allow foo 
            {% endif %}
   {%if   {allow} == True    %}
allow foo
        {% endif %}
more text"""
        }
        parameters = {
            'foo': 'foo parameter',
            'allow': 'True',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, 'foo parameter\nallow foo\nmore text')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1357" endline="1369" pcid="6768">

    def test_positive_condition_statements_with_not_equal(self):
        step_definition = {
            'type': 'template',
            'value': "{%if {first_var} != {second_var} %}not equals{% endif %}"
        }
        parameters = {
            'first_var': 'first_value',
            'second_var': 'second_value',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, 'not equals')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1334" endline="1346" pcid="6766">

    def test_can_use_conditions_with_multiple_vars(self):
        step_definition = {
            'type': 'template',
            'value': "{%if {var1} == {var2} %}allow body{% endif %}"
        }
        parameters = {
            'var1': 'yes',
            'var2': 'yes',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, 'allow body')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1370" endline="1382" pcid="6769">

    def test_negative_condition_statements_with_not_equal(self):
        step_definition = {
            'type': 'template',
            'value': "{%if {first_var} != {second_var} %}not equals{% endif %}"
        }
        parameters = {
            'first_var': 'same_value',
            'second_var': 'same_value',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, '')
</source>
</class>

<class classid="149" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ec2/test_paginate.py" startline="55" endline="69" pcid="6819">
    def test_no_paginate(self):
        target_operations = {'foo': []}
        injector = EC2PageSizeInjector()
        injector.TARGET_OPERATIONS = target_operations
        parsed_globals = Namespace(paginate=False)
        call_parameters = {}
        event_name = 'operation-args-parsed.ec2.foo'
        injector.inject(
            event_name=event_name,
            parsed_globals=parsed_globals,
            call_parameters=call_parameters
        )
        page_size = call_parameters.get('PaginationConfig', {}).get('PageSize')
        self.assertIsNone(page_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ec2/test_paginate.py" startline="102" endline="115" pcid="6822">
    def test_non_target_operation(self):
        target_operations = {'foo': []}
        injector = EC2PageSizeInjector()
        injector.TARGET_OPERATIONS = target_operations
        parsed_globals = Namespace(paginate=True)
        call_parameters = {}
        event_name = 'operation-args-parsed.ec2.baz'
        injector.inject(
            event_name=event_name,
            parsed_globals=parsed_globals,
            call_parameters=call_parameters
        )
        page_size = call_parameters.get('PaginationConfig', {}).get('PageSize')
        self.assertIsNone(page_size)
</source>
</class>

<class classid="150" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="611" endline="624" pcid="6849">

    def _build_args(self, **kwargs):
        return argparse.Namespace(**dict({
            "hostname": None,
            "infrastructure_class": "ec2",
            "private_ip": None,
            "public_ip": None,
            "local": False,
            "username": None,
            "private_key": None,
            "ssh": None,
            "target": None,
            "use_instance_profile": None,
        }, **kwargs))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="1071" endline="1084" pcid="6868">
        self.assertEqual(self.register._use_hostname, None)
        self.assertEqual(self.register._name_for_iam, "192.0.2.42")


class TestOpsWorksRegisterOnPremises(TestOpsWorksBase):
    """Tests for functionality specific to on-premises instances."""

    def _build_args(self, **kwargs):
        return argparse.Namespace(**dict({
            "hostname": None,
            "infrastructure_class": "on-premises",
            "private_ip": None,
            "public_ip": None,
            "local": False,
</source>
</class>

<class classid="151" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="23" endline="37" pcid="6932">
    def test_s3_location(self):
        cmd = self.prefix + '--s3-location bucket=b,key=k,bundleType=zip'
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="172" endline="186" pcid="6943">
    def test_s3_location(self):
        cmd = self.prefix + '--s3-location bucket=b,key=k,bundleType=zip'
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="152" nclones="4" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="38" endline="55" pcid="6933">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="187" endline="204" pcid="6944">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="205" endline="222" pcid="6945">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="56" endline="73" pcid="6934">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="153" nclones="4" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="74" endline="92" pcid="6935">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="223" endline="241" pcid="6946">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="93" endline="111" pcid="6936">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="242" endline="260" pcid="6947">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="154" nclones="4" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="124" endline="139" pcid="6939">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="140" endline="155" pcid="6940">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="273" endline="288" pcid="6950">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="289" endline="304" pcid="6951">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="155" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="339" endline="357" pcid="6955">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="358" endline="376" pcid="6956">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="156" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="377" endline="396" pcid="6957">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="397" endline="416" pcid="6958">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="157" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="429" endline="445" pcid="6961">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="446" endline="462" pcid="6962">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="158" nclones="2" nlines="22" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="347" endline="376" pcid="7069">
                    notification_arns, s3_uploader, tags)

    def test_wait_for_changeset_no_changes(self):
        stack_name = "stack_name"
        changeset_id = "changeset-id"

        mock_client = Mock()
        mock_deployer = Deployer(mock_client)
        mock_waiter = Mock()
        mock_client.get_waiter.return_value = mock_waiter

        response = {
            "Status": "FAILED",
            "StatusReason": "The submitted information didn't contain changes."
        }

        waiter_error = botocore.exceptions.WaiterError(name="name",
                                                       reason="reason",
                                                       last_response=response)
        mock_waiter.wait.side_effect = waiter_error

        with self.assertRaises(exceptions.ChangeEmptyError):
            mock_deployer.wait_for_changeset(changeset_id, stack_name)

        waiter_config = {'Delay': 5}
        mock_waiter.wait.assert_called_once_with(ChangeSetName=changeset_id,
                                                 StackName=stack_name,
                                                 WaiterConfig=waiter_config)

        mock_client.get_waiter.assert_called_once_with(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="377" endline="406" pcid="7070">
                "change_set_create_complete")

    def test_wait_for_changeset_no_changes_with_another_error_msg(self):
        stack_name = "stack_name"
        changeset_id = "changeset-id"

        mock_client = Mock()
        mock_deployer = Deployer(mock_client)
        mock_waiter = Mock()
        mock_client.get_waiter.return_value = mock_waiter

        response = {
            "Status": "FAILED",
            "StatusReason": "No updates are to be performed"
        }

        waiter_error = botocore.exceptions.WaiterError(name="name",
                                                       reason="reason",
                                                       last_response=response)
        mock_waiter.wait.side_effect = waiter_error

        with self.assertRaises(exceptions.ChangeEmptyError):
            mock_deployer.wait_for_changeset(changeset_id, stack_name)

        waiter_config = {'Delay': 5}
        mock_waiter.wait.assert_called_once_with(ChangeSetName=changeset_id,
                                                 StackName=stack_name,
                                                 WaiterConfig=waiter_config)

        mock_client.get_waiter.assert_called_once_with(
</source>
</class>

<class classid="159" nclones="2" nlines="22" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="694" endline="723" pcid="7098">
        s3_url = "s3://bucket/key1/key2?versionId=SomeVersionNumber"

        upload_local_artifacts_mock.return_value = s3_url

        resource.export(resource_id, resource_dict, parent_dir)

        upload_local_artifacts_mock.assert_called_once_with(resource_id,
                                                            resource_dict,
                                                            resource.PROPERTY_NAME,
                                                            parent_dir,
                                                            self.s3_uploader_mock)

        self.assertEquals(resource_dict[resource.PROPERTY_NAME], {
            "b": "bucket",
            "o": "key1/key2",
            "v": "SomeVersionNumber"
        })

    @patch("awscli.customizations.cloudformation.artifact_exporter.Template")
    def test_export_cloudformation_stack(self, TemplateMock):
        stack_resource = CloudFormationStackResource(self.s3_uploader_mock)

        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME
        exported_template_dict = {"foo": "bar"}
        result_s3_url = "s3://hello/world"
        result_path_style_s3_url = "http://s3.amazonws.com/hello/world"

        template_instance_mock = Mock()
        TemplateMock.return_value = template_instance_mock
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="782" endline="811" pcid="7107">
        resource_dict = {}
        stack_resource.export(resource_id, resource_dict, "dir")
        self.assertEquals(resource_dict, {})
        self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    def test_export_cloudformation_stack_no_upload_path_not_file(self):
        stack_resource = CloudFormationStackResource(self.s3_uploader_mock)
        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME
        s3_url = "s3://hello/world"

        # Case 3: Path is not a file
        with self.make_temp_dir() as dirname:
            resource_dict = {property_name: dirname}
            with self.assertRaises(exceptions.ExportFailedError):
                stack_resource.export(resource_id, resource_dict, "dir")
                self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    @patch("awscli.customizations.cloudformation.artifact_exporter.Template")
    def test_export_serverless_application(self, TemplateMock):
        stack_resource = ServerlessApplicationResource(self.s3_uploader_mock)

        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME
        exported_template_dict = {"foo": "bar"}
        result_s3_url = "s3://hello/world"
        result_path_style_s3_url = "http://s3.amazonws.com/hello/world"

        template_instance_mock = Mock()
        TemplateMock.return_value = template_instance_mock
</source>
</class>

<class classid="160" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="179" endline="194" pcid="7388">
                        '      https://source.com/index.json'
        self.subprocess_utils.check_output.return_value = \
            list_response.encode('utf-8')
        self.test_subject.login()
        self.subprocess_utils.check_output.assert_called_with(
            self.update_operation_command,
            stderr=self.subprocess_utils.PIPE
        )

    def test_login_source_url_already_exists_old_nuget(self):
        non_default_source_name = 'Source Name'
        list_response = 'Registered Sources:\n' \
                        '\n' \
                        '  1. ' + non_default_source_name + ' [ENABLED]\n' \
                                                            '      ' + self.nuget_index_url
        self.subprocess_utils.check_output.return_value = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="195" endline="210" pcid="7389">
            list_response.encode('utf-8')
        self.test_subject.login()
        self.subprocess_utils.check_output.assert_called_with(
            [
                'nuget', 'sources', 'update',
                '-name', non_default_source_name,
                '-source', self.nuget_index_url,
                '-username', 'aws',
                '-password', self.auth_token
            ],
            stderr=self.subprocess_utils.PIPE
        )

    def test_login_source_url_already_exists(self):
        non_default_source_name = 'Source Name'
        list_response = 'Registered Sources:\n' \
</source>
</class>

<class classid="161" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="339" endline="360" pcid="7449">
    def test_to_path_style_s3_url_other_regions(self):
        key = "path/to/file"
        version = "someversion"
        region = "us-west-2"
        self._construct_uploader(region)

        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key, version)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com/{1}/{2}?versionId={3}".format(
                        region, self.bucket_name, key, version))

        # Without versionId, that query parameter should be omitted
        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com/{1}/{2}".format(
                        region, self.bucket_name, key))


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="361" endline="381" pcid="7450">
    def test_to_path_style_s3_url_china_regions(self):
        key = "path/to/file"
        version = "someversion"
        region = "cn-northwest-1"
        self._construct_uploader(region)

        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key, version)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com.cn/{1}/{2}?versionId={3}".format(
                        region, self.bucket_name, key, version))

        # Without versionId, that query parameter should be omitted
        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com.cn/{1}/{2}".format(
                        region, self.bucket_name, key))

</source>
</class>

<class classid="162" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="104" endline="116" pcid="7492">

class TestHelpDocumentationModifications(TestPaginateBase):
    def test_injects_pagination_help_text(self):
        with patch('awscli.customizations.paginate.get_paginator_config',
                   return_value={'result_key': 'abc'}):
            help_command = OperationHelpCommand(
                Mock(), Mock(), Mock(), 'foo', OperationDocumentEventHandler)
            help_command.obj = Mock(OperationModel)
            help_command.obj.name = 'foo'
            paginate.add_paging_description(help_command)
            self.assertIn('``foo`` is a paginated operation. Multiple API',
                          help_command.doc.getvalue().decode())
            self.assertIn('following query expressions: ``abc``',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="128" endline="140" pcid="7494">
                          help_command.doc.getvalue().decode())

    def test_does_not_show_result_key_if_not_present(self):
        with patch('awscli.customizations.paginate.get_paginator_config',
                   return_value={'limit_key': 'aaa'}):
            help_command = OperationHelpCommand(
                Mock(), Mock(), Mock(), 'foo', OperationDocumentEventHandler)
            help_command.obj = Mock(OperationModel)
            help_command.obj.name = 'foo'
            paginate.add_paging_description(help_command)
            self.assertIn('``foo`` is a paginated operation. Multiple API',
                          help_command.doc.getvalue().decode())
            self.assertNotIn('following query expressions',
</source>
</class>

<class classid="163" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="301" endline="316" pcid="7509">
            self.parsed_args, self.parsed_globals)

    def test_shadowed_args_are_replaced_when_pagination_turned_off(self):
        input_tokens = ['foo', 'bar']
        self.parsed_globals.paginate = True
        # Corresponds to --bar 10
        self.parsed_args.foo = None
        self.parsed_args.bar = 10
        shadowed_args = {'foo': mock.sentinel.ORIGINAL_ARG}
        arg_table = {'foo': mock.sentinel.PAGINATION_ARG}
        paginate.check_should_enable_pagination(
            input_tokens, shadowed_args, arg_table,
            self.parsed_args, self.parsed_globals)
        # We should have turned paginate off because the
        # user specified --bar 10
        self.assertFalse(self.parsed_globals.paginate)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="317" endline="333" pcid="7510">
        self.assertEqual(arg_table['foo'], mock.sentinel.ORIGINAL_ARG)

    def test_shadowed_args_are_replaced_when_pagination_set_off(self):
        input_tokens = ['foo', 'bar']
        self.parsed_globals.paginate = False
        # Corresponds to --bar 10
        self.parsed_args.foo = None
        self.parsed_args.bar = 10
        shadowed_args = {'foo': mock.sentinel.ORIGINAL_ARG}
        arg_table = {'foo': mock.sentinel.PAGINATION_ARG}
        paginate.check_should_enable_pagination(
            input_tokens, shadowed_args, arg_table,
            self.parsed_args, self.parsed_globals)
        # We should have turned paginate off because the
        # user specified --bar 10
        self.assertFalse(self.parsed_globals.paginate)
        self.assertEqual(arg_table['foo'], mock.sentinel.ORIGINAL_ARG)
</source>
</class>

<class classid="164" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ecs/test_codedeployvalidator.py" startline="105" endline="120" pcid="7622">

    def test_validate_deployment_group_error_service(self):
        invalid_dgp = {
            'deploymentGroupInfo': {
                'computePlatform': 'ECS',
                'ecsServices': [{
                    'serviceName': 'the-wrong-test-service',
                    'clusterName': 'test-cluster'
                }]
            }
        }
        bad_validator = CodeDeployValidator(None, self.TEST_RESOURCES)
        bad_validator.deployment_group_details = invalid_dgp

        with self.assertRaises(InvalidProperyError):
            bad_validator.validate_deployment_group()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ecs/test_codedeployvalidator.py" startline="121" endline="135" pcid="7623">

    def test_validate_deployment_group_error_cluster(self):
        invalid_dgp = {
            'deploymentGroupInfo': {
                'computePlatform': 'ECS',
                'ecsServices': [{
                    'serviceName': 'test-service',
                    'clusterName': 'the-wrong-test-cluster'
                }]
            }
        }
        bad_validator = CodeDeployValidator(None, self.TEST_RESOURCES)
        bad_validator.deployment_group_details = invalid_dgp

        with self.assertRaises(InvalidProperyError):
</source>
</class>

<class classid="165" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="313" endline="324" pcid="7675">
        cmd = (DEFAULT_CMD + ' --configurations '
               '[{\"Classification\":\"hadoop-env\",\"Properties\":{'
               '\"someProperty\":\"someValue\"},\"Configurations\":[]}]')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Configurations'] = [
            {
                'Classification': 'hadoop-env',
                'Configurations': [],
                'Properties': {'someProperty': 'someValue'}
            }
        ]
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="339" endline="350" pcid="7773">

ADDITIONAL_SLAVE_SECURITY_GROUPS = \
    ['sg-addSlave1', 'sg-addSlave2', 'sg-addSlave3', 'sg-addSlave4']


class TestCreateCluster(BaseAWSCommandParamsTest):
    prefix = 'emr create-cluster '

    def test_quick_start(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
</source>
</class>

<class classid="166" nclones="2" nlines="30" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="532" endline="568" pcid="7701">
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-groups '
            'InstanceGroupType=MASTER,InstanceCount=1,InstanceType=m1.large '
            'InstanceGroupType=CORE,InstanceCount=1,InstanceType=m1.large '
            'InstanceGroupType=TASK,InstanceCount=1,InstanceType=m1.large ')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_group_type_mismatch_cases(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-groups '
            'Name=MASTER,InstanceGroupType=MaSter,InstanceCount=1,'
            'InstanceType=m1.large Name=CORE,InstanceGroupType=cORE,'
            'InstanceCount=1,InstanceType=m1.large Name=TASK,'
            'InstanceGroupType=tAsK,InstanceCount=1,InstanceType=m1.large')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_type_and_count(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-type m1.large')
        expected_result = copy.deepcopy(DEFAULT_RESULT)
        expected_result['Instances'] = \
            {'KeepJobFlowAliveWhenNoSteps': True,
             'TerminationProtected': False,
             'InstanceGroups':
                [{'InstanceRole': 'MASTER',
                  'InstanceCount': 1,
                  'Name': 'MASTER',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'}]
             }
        self.assert_params_for_cmd(cmd, expected_result)
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-type m1.large --instance-count 3')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="565" endline="601" pcid="7799">
            'InstanceGroupType=TASK,InstanceCount=1,InstanceType=m1.large,CustomAmiId=ami-deadpork ')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_group_type_mismatch_cases(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-groups '
            'Name=MASTER,InstanceGroupType=MaSter,InstanceCount=1,'
            'InstanceType=m1.large,CustomAmiId=ami-deadbeef Name=CORE,InstanceGroupType=cORE,'
            'InstanceCount=1,InstanceType=m1.large,CustomAmiId=ami-deadbeef Name=TASK,'
            'InstanceGroupType=tAsK,InstanceCount=1,InstanceType=m1.large,CustomAmiId=ami-deadpork')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_type_and_count(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-type m1.large')
        expected_result = copy.deepcopy(DEFAULT_RESULT)
        expected_result['Instances'] = \
            {'KeepJobFlowAliveWhenNoSteps': True,
             'TerminationProtected': False,
             'InstanceGroups':
                [{'InstanceRole': 'MASTER',
                  'InstanceCount': 1,
                  'Name': 'MASTER',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'}]
             }
        self.assert_params_for_cmd(cmd, expected_result)
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-type m1.large --instance-count 3')
        expected_result = copy.deepcopy(DEFAULT_RESULT)
        expected_result['Instances'] = \
            {'KeepJobFlowAliveWhenNoSteps': True,
             'TerminationProtected': False,
             'InstanceGroups':
</source>
</class>

<class classid="167" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="589" endline="613" pcid="7703">
    def test_instance_groups_missing_required_parameter_error(self):
        cmd = ('emr create-cluster --use-default-roles --release-label'
               ' emr-4.0.0 ')
        expect_error_msg = (
            '\naws: error: Must specify either --instance-groups or '
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-count 2')
        expect_error_msg = (
            '\naws: error: Must specify either --instance-groups or '
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_instance_groups_exclusive_parameter_validation_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label 4.0.0 '
            '--instance-type m1.large --instance-groups ' +
            DEFAULT_INSTANCE_GROUPS_ARG)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="622" endline="646" pcid="7801">
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-count 2')
        expect_error_msg = (
            '\naws: error: Must specify either --instance-groups or '
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_instance_groups_exclusive_parameter_validation_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-type m1.large --instance-groups ' +
            DEFAULT_INSTANCE_GROUPS_ARG)
        expect_error_msg = (
            '\naws: error: You may not specify --instance-type '
            'or --instance-count with --instance-groups, '
            'because --instance-type and --instance-count are '
            'shortcut options for --instance-groups.\n')
</source>
</class>

<class classid="168" nclones="2" nlines="23" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="644" endline="673" pcid="7707">
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--auto-terminate '
            '--instance-groups '
            'Name=Master,InstanceGroupType=MASTER,InstanceCount=1')
        expect_error_msg = (
            '\nThe following required parameters are missing'
            ' for structure:: InstanceType\n')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceType')

    def test_instance_groups_missing_instance_count_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--auto-terminate '
            '--instance-groups '
            'Name=Master,InstanceGroupType=MASTER,InstanceType=m1.xlarge')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceCount')

    def test_instance_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups.json')
        cmd = ('emr create-cluster --use-default-roles'
               ' --release-label emr-4.0.0  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
            [
                {'InstanceRole': 'MASTER',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="677" endline="705" pcid="7805">
        expect_error_msg = (
            '\nThe following required parameters are missing'
            ' for structure:: InstanceType\n')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceType')

    def test_instance_groups_missing_instance_count_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--auto-terminate '
            '--instance-groups '
            'Name=Master,InstanceGroupType=MASTER,InstanceType=m1.xlarge')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceCount')

    def test_instance_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups.json')
        cmd = ('emr create-cluster --use-default-roles --ami-version 3.0.4  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
            [
                {'InstanceRole': 'MASTER',
                 'InstanceCount': 1,
                 'Name': 'Master Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.large'
                 },
</source>
</class>

<class classid="169" nclones="2" nlines="22" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="674" endline="702" pcid="7708">
                 'InstanceCount': 1,
                 'Name': 'Master Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.large'
                 },
                {'InstanceRole': 'CORE',
                 'InstanceCount': 2,
                 'Name': 'Core Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.xlarge'
                 },
                {'InstanceRole': 'TASK',
                 'InstanceCount': 3,
                 'Name': 'Task Instance Group',
                 'Market': 'SPOT',
                 'BidPrice': '3.45',
                 'InstanceType': 'm1.xlarge'
                 }
        ]
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_from_json_file_spot_bidprice_equals_ondemandprice(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups_spot_bidprice_equals_ondemandprice.json')
        cmd = ('emr create-cluster --use-default-roles'
               ' --release-label emr-4.0.0  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="706" endline="733" pcid="7806">
                {'InstanceRole': 'CORE',
                 'InstanceCount': 2,
                 'Name': 'Core Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.xlarge'
                 },
                {'InstanceRole': 'TASK',
                 'InstanceCount': 3,
                 'Name': 'Task Instance Group',
                 'Market': 'SPOT',
                 'BidPrice': '3.45',
                 'InstanceType': 'm1.xlarge'
                 }
        ]
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_from_json_file_spot_bidprice_equals_ondemandprice(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups_spot_bidprice_equals_ondemandprice.json')
        cmd = ('emr create-cluster --use-default-roles --ami-version 3.0.4  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
            [
                {'InstanceRole': 'MASTER',
                 'InstanceCount': 1,
                 'Name': 'Master Instance Group',
                 'Market': 'SPOT',
</source>
</class>

<class classid="170" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="748" endline="760" pcid="7713">
               'InstanceProfile=EMR_EC2_DefaultRole '
               '--service-role EMR_DefaultRole')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Ec2KeyName'] = 'testkey'
        result['Instances']['Ec2SubnetId'] = 'subnet-123456'
        result['JobFlowRole'] = 'EMR_EC2_DefaultRole'
        self.assert_params_for_cmd(cmd, result)

    def test_ec2_attributes_az(self):
        cmd = DEFAULT_CMD + '--ec2-attributes AvailabilityZone=us-east-1a'
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Placement'] = {'AvailabilityZone': 'us-east-1a'}
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="760" endline="772" pcid="7810">
        result['JobFlowRole'] = 'EMR_EC2_DefaultRole'
        self.assert_params_for_cmd(cmd, result)

    def test_ec2_attributes_az(self):
        cmd = DEFAULT_CMD + '--ec2-attributes AvailabilityZone=us-east-1a'
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Placement'] = {'AvailabilityZone': 'us-east-1a'}
        self.assert_params_for_cmd(cmd, result)

    def test_ec2_attributes_subnet_az_error(self):
        cmd = DEFAULT_CMD + '--ec2-attributes ' + \
            'SubnetId=subnet-123456,AvailabilityZone=us-east-1a'
        expect_error_msg = (
</source>
</class>

<class classid="171" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="761" endline="774" pcid="7714">

    def test_ec2_attributes_subnet_az_error(self):
        cmd = DEFAULT_CMD + '--ec2-attributes ' + \
            'SubnetId=subnet-123456,AvailabilityZone=us-east-1a'
        expect_error_msg = (
            '\naws: error: You may not specify both a SubnetId and an Availab'
            'ilityZone (placement) because ec2SubnetId implies a placement.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_ec2_attributes_with_subnet_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_ec2_attributes_with_subnet.json')
        cmd = ('emr create-cluster --release-label emr-4.0.0 '
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="773" endline="786" pcid="7811">
            '\naws: error: You may not specify both a SubnetId and an Availab'
            'ilityZone (placement) because ec2SubnetId implies a placement.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_ec2_attributes_with_subnet_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_ec2_attributes_with_subnet.json')
        cmd = ('emr create-cluster --ami-version 3.0.4 '
               '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG +
               ' --ec2-attributes file://' + data_path +
               ' --service-role EMR_DefaultRole')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Ec2KeyName'] = 'testkey'
</source>
</class>

<class classid="172" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="810" endline="825" pcid="7719">

        self.assert_params_for_cmd(cmd, result)

    def test_bootstrap_actions_exceed_maximum_error(self):
        cmd = DEFAULT_CMD + ' --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 18):
            cmd += ba_cmd

        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)

        self.assertEquals(expected_error_msg, result[1])

    def test_bootstrap_actions_exceed_maximum_with_applications_error(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="822" endline="837" pcid="7816">
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 18):
            cmd += ba_cmd

        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)

        self.assertEquals(expected_error_msg, result[1])

    def test_bootstrap_actions_exceed_maximum_with_applications_error(self):
        cmd = DEFAULT_CMD + ' --applications Name=GANGLIA Name=HBASE' +\
            ' Name=IMPALA,Args=arg1,arg2 --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 15):
            cmd += ba_cmd
</source>
</class>

<class classid="173" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="826" endline="845" pcid="7720">
        cmd = DEFAULT_CMD + ' --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 20):
            cmd += ba_cmd
        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_boostrap_actions_with_default_fields(self):
        cmd = DEFAULT_CMD + (
            ' --bootstrap-actions Path=s3://test/ba1 Path=s3://test/ba2')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['BootstrapActions'] = \
            [
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba1'}
                 },
                {'Name': 'Bootstrap action',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="838" endline="857" pcid="7817">
        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_boostrap_actions_with_default_fields(self):
        cmd = DEFAULT_CMD + (
            ' --bootstrap-actions Path=s3://test/ba1 Path=s3://test/ba2')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['BootstrapActions'] = \
            [
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba1'}
                 },
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba2'}
                 }
        ]
</source>
</class>

<class classid="174" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="865" endline="883" pcid="7724">
                 "ScriptBootstrapAction":
                    {"Path": "s3://mybucket/test2",
                     "Args": ["arg1", "arg2"]}
                 }
        ]
        self.assert_params_for_cmd(cmd, result)

    # Steps test cases
    def test_wrong_step_type_error(self):
        cmd = DEFAULT_CMD + '--steps Type=unknown'
        expected_error_msg = (
            '\naws: error: The step type unknown is not supported.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_default_step_type_name_action_on_failure(self):
        cmd = DEFAULT_CMD + '--steps Jar=s3://mybucket/mytest.jar'
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = [CUSTOM_JAR_STEP]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="990" endline="1008" pcid="7834">
             'IMPALA_BACKEND_PORT=22001,IMPALA_MEM_LIMIT=70%']
        ba_list = [INSTALL_GANGLIA_BA, INSTALL_HBASE_BA,
                   impala_ba]
        step_list = [INSTALL_HIVE_STEP, INSTALL_PIG_STEP, INSTALL_HBASE_STEP]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = step_list
        result['BootstrapActions'] = ba_list
        result['NewSupportedProducts'] = [INSTALL_MAPR_PRODUCT]
        self.assert_params_for_cmd(cmd, result)

    # Steps test cases
    def test_wrong_step_type_error(self):
        cmd = DEFAULT_CMD + '--steps Type=unknown'
        expected_error_msg = (
            '\naws: error: The step type unknown is not supported.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_default_step_type_name_action_on_failure(self):
</source>
</class>

<class classid="175" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="900" endline="912" pcid="7727">
            {'Name': 'Custom',
             'ActionOnFailure': 'TERMINATE_CLUSTER',
             'HadoopJarStep':
                {'Jar': 's3://mybucket/mytest.jar',
                 'Args': ['arg1', 'arg2'],
                 'MainClass': 'mymainclass'}
             }
        ]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = expected_steps
        self.assert_params_for_cmd(cmd, result)

    def test_streaming_step_with_default_fields(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1025" endline="1037" pcid="7837">
            'Args=arg1,arg2,MainClass=mymainclass,'
            'ActionOnFailure=TERMINATE_CLUSTER')
        expected_steps = [
            {'Name': 'Custom',
             'ActionOnFailure': 'TERMINATE_CLUSTER',
             'HadoopJarStep':
                {'Jar': 's3://mybucket/mytest.jar',
                 'Args': ['arg1', 'arg2'],
                 'MainClass': 'mymainclass'}
             }
        ]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = expected_steps
</source>
</class>

<class classid="176" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="971" endline="990" pcid="7735">
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = [PIG_DEFAULT_STEP]
        result['Applications'] = [{'Name': 'Pig'}]
        self.assert_params_for_cmd(cmd, result)

    def test_pig_missing_args(self):
        cmd = DEFAULT_CMD + '--applications Name=Pig --steps Type=Pig'
        expect_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for PigStepConfig: Args.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_pig_step_with_all_fields(self):
        test_step_config = (
            'Name=PigBasicStep,Type=Pig,' + PIG_BASIC_ARGS +
            ',ActionOnFailure=CANCEL_AND_WAIT')
        cmd = DEFAULT_CMD + (
            '--applications Name=Pig --steps ' + test_step_config)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Applications'] = [{'Name': 'Pig'}]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1212" endline="1231" pcid="7852">
            'Type=PIG,Args=-f,s3://test/pig3 ' +\
            ' Jar=s3://test/customJar2.jar ' +\
            ' --applications Name=Hive'

        expected_error_msg1 = (
            '\naws: error: Some of the steps require the following'
            ' applications to be installed: Impala, Pig. '
            'Please install the applications using --applications.\n')
        expected_error_msg2 = (
            '\naws: error: Some of the steps require the following'
            ' applications to be installed: Pig, Impala. '
            'Please install the applications using --applications.\n')
        result = self.run_cmd(cmd, 252)

        if(result[1] == expected_error_msg1 or
           result[1] == expected_error_msg2):
            self.assertTrue(True)
        else:
            self.assertTrue(False)

</source>
</class>

<class classid="177" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1018" endline="1033" pcid="7738">
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_emr_managed_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes EmrManagedMasterSecurityGroup=sg-master1,'
            'EmrManagedSlaveSecurityGroup=sg-slave1,'
            'ServiceAccessSecurityGroup=sg-service-access')

        result = copy.deepcopy(DEFAULT_RESULT)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1259" endline="1274" pcid="7855">
    @patch('awscli.customizations.emr.emrutils.call')
    def test_constructed_result(self, call_patch):
        call_patch.return_value = CREATE_CLUSTER_RESULT
        cmd = DEFAULT_CMD
        result = self.run_cmd(cmd, expected_rc=0)
        result_json = json.loads(result[0])
        self.assertEquals(result_json, CONSTRUCTED_RESULT)

    def test_all_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes EmrManagedMasterSecurityGroup=sg-master1,'
            'EmrManagedSlaveSecurityGroup=sg-slave1,'
            'ServiceAccessSecurityGroup=sg-service-access,'
            'AdditionalMasterSecurityGroups='
            '[sg-addMaster1,sg-addMaster2,sg-addMaster3,'
            'sg-addMaster4],AdditionalSlaveSecurityGroups=[sg-addSlave1,'
</source>
</class>

<class classid="178" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1034" endline="1049" pcid="7739">
        instances = result['Instances']
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP

        self.assert_params_for_cmd(cmd, result)

    def test_additional_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes AdditionalMasterSecurityGroups=[sg-addMaster1'
            ',sg-addMaster2,sg-addMaster3,sg-addMaster4],AdditionalSlaveSecu'
            'rityGroups=[sg-addSlave1,sg-addSlave2,sg-addSlave3,sg-addSlave4]')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1275" endline="1290" pcid="7856">
            'sg-addSlave2,sg-addSlave3,sg-addSlave4]')

        result = copy.deepcopy(DEFAULT_RESULT)
        instances = result['Instances']
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)
</source>
</class>

<class classid="179" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1059" endline="1071" pcid="7741">
    def test_security_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__),
            'input_ec2_attributes_with_security_groups.json')
        cmd = DEFAULT_CMD + '--ec2-attributes file://' + data_path

        result = copy.deepcopy(DEFAULT_RESULT)
        instances = result['Instances']
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['ServiceAccessSecurityGroup'] = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1300" endline="1312" pcid="7858">
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP

        self.assert_params_for_cmd(cmd, result)

    def test_additional_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes AdditionalMasterSecurityGroups=[sg-addMaster1'
            ',sg-addMaster2,sg-addMaster3,sg-addMaster4],AdditionalSlaveSecu'
</source>
</class>

<class classid="180" nclones="7" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1072" endline="1086" pcid="7742">
            SERVICE_ACCESS_SECURITY_GROUP
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_autoscaling_policy(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --auto-scaling-role EMR_AUTOSCALING_ROLE --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1114" endline="1128" pcid="7746">
                'VisibleToAllUsers': True,
                'ScaleDownBehavior': 'TERMINATE_AT_INSTANCE_HOUR',
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_ebs_config(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1129" endline="1143" pcid="7747">
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_missing_volume_type(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLTYPE_ARG)
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'VolumeType')

    def test_instance_groups_with_ebs_config_missing_size(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1356" endline="1370" pcid="7863">
                'AutoScalingRole': 'EMR_AUTOSCALING_ROLE',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_autoscaling_policy_missing_autoscaling_role(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        expected_error_msg = (
            '\naws: error: Must specify --auto-scaling-role when'
            ' configuring an AutoScaling policy for an instance group.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1341" endline="1355" pcid="7862">
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_autoscaling_policy(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --auto-scaling-role EMR_AUTOSCALING_ROLE --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY
                              },
                'AmiVersion': '3.1.0',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1371" endline="1385" pcid="7864">
    def test_scale_down_behavior(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --scale-down-behavior TERMINATE_AT_TASK_COMPLETION '
                             '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'ScaleDownBehavior': 'TERMINATE_AT_TASK_COMPLETION',
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_ebs_config(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1099" endline="1113" pcid="7745">
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        expected_error_msg = (
            '\naws: error: Must specify --auto-scaling-role when'
            ' configuring an AutoScaling policy for an instance group.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_scale_down_behavior(self):
        cmd = (self.prefix + '--release-label emr-4.0.0 --scale-down-behavior TERMINATE_AT_INSTANCE_HOUR '
                             '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'ReleaseLabel': 'emr-4.0.0',
</source>
</class>

<class classid="181" nclones="10" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1144" endline="1159" pcid="7748">
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_SIZE_ARG)
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'SizeInGB')

    def test_instance_groups_with_ebs_config_missing_volume_spec(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLSPEC_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLSPEC
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1212" endline="1227" pcid="7752">

    def test_instance_fleets_with_spot_master_only_with_ebs_conf(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1160" endline="1175" pcid="7749">
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_missing_iops(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1457" endline="1472" pcid="7868">
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_ebs_config_from_json(self):
           data_path = os.path.join(
               os.path.dirname(__file__), 'input_instance_groups_ebs_config.json')
           cmd = ('emr create-cluster --use-default-roles --ami-version 3.0.4  '
                  '--instance-groups file://' + data_path)
           result = copy.deepcopy(DEFAULT_RESULT)
           result['Instances']['InstanceGroups'] = \
               [
                   {'InstanceRole': 'MASTER',
                    'InstanceCount': 1,
                    'Name': 'Master Instance Group',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1473" endline="1488" pcid="7869">
                    'Market': 'ON_DEMAND',
                    'InstanceType': 'd2.xlarge',
                    'EbsConfiguration':
                   {'EbsBlockDeviceConfigs':
                         [
                           {'VolumeSpecification':
                            {'VolumeType': 'standard',
                            'SizeInGB': 10},
                            'VolumesPerInstance': 4
                            }
                         ],
                        'EbsOptimized': True}
                    },
                   {'InstanceRole': 'CORE',
                    'InstanceCount': 2,
                    'Name': 'Core Instance Group',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1525" endline="1540" pcid="7872">
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                  CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY_WITH_TARGETED_ODCR
                              },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_only(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY)
        result = \
            {
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1541" endline="1556" pcid="7873">
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY
                            },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_only_with_ebs_conf(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF)
        result = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1441" endline="1456" pcid="7867">
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_multiple_instance_groups(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES_VOLUME_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES
                             },
                'AmiVersion': '3.1.0',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1313" endline="1328" pcid="7859">
            'rityGroups=[sg-addSlave1,sg-addSlave2,sg-addSlave3,sg-addSlave4]')

        result = copy.deepcopy(DEFAULT_RESULT)
        instances = result['Instances']
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_security_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__),
            'input_ec2_attributes_with_security_groups.json')
        cmd = DEFAULT_CMD + '--ec2-attributes file://' + data_path
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1425" endline="1440" pcid="7866">
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_missing_iops(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS
                             },
                'AmiVersion': '3.1.0',
</source>
</class>

<class classid="182" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1176" endline="1193" pcid="7750">
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_multiple_instance_groups(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES_VOLUME_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1489" endline="1506" pcid="7870">
                    'Market': 'ON_DEMAND',
                    'InstanceType': 'd2.xlarge'
                    },
                   {'InstanceRole': 'TASK',
                    'InstanceCount': 3,
                    'Name': 'Task Instance Group',
                    'Market': 'SPOT',
                    'BidPrice': '3.45',
                    'InstanceType': 'd2.xlarge'
                    }
           ]
           self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_on_demand_master_only(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY)
        result = \
            {
</source>
</class>

<class classid="183" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1194" endline="1211" pcid="7751">
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_on_demand_master_only(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1507" endline="1524" pcid="7871">
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY
                            },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_on_demand_master_only_with_targeted_odcr(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY_WITH_TARGETED_ODCR)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
</source>
</class>

<class classid="184" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1228" endline="1247" pcid="7753">
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_specific_azs(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --ec2-attributes AvailabilityZones=[us-east-1a,us-east-1b]')
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY,
                              'Placement': {'AvailabilityZones': ['us-east-1a','us-east-1b']}
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1557" endline="1576" pcid="7874">
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF
                            },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_specific_azs(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --ec2-attributes AvailabilityZones=[us-east-1a,us-east-1b]')
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
</source>
</class>

<class classid="185" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1296" endline="1310" pcid="7758">
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_COMPLEX_CONFIG_FROM_JSON
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': [],
                'JobFlowRole': 'EMR_EC2_DefaultRole',
                'ServiceRole': 'EMR_DefaultRole'
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_both_fleet_group_specified(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --instance-groups ' + CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_ARG)
        expected_error_msg = (
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1326" endline="1340" pcid="7760">
    def test_create_cluster_with_security_config(self):
        cmd = (self.prefix + '--release-label emr-4.7.2 --security-configuration MySecurityConfig '+ 
               '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'ReleaseLabel': 'emr-4.7.2',
                'VisibleToAllUsers': True,
                'Tags': [],
                'SecurityConfiguration': 'MySecurityConfig'
            }
        self.assert_params_for_cmd(cmd, result)

    def test_create_cluster_with_security_config_and_kerberos_attributes(self):
</source>
</class>

<class classid="186" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1311" endline="1325" pcid="7759">
            '\naws: error: You cannot specify both --instance-groups'
            ' and --instance-fleets options together.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_instance_fleets_with_both_subnetid_subnetids_specified(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --ec2-attributes SubnetId=subnetid-1,SubnetIds=[subnetid-1,subnetid-2]')
        expected_error_msg = (
            '\naws: error: You cannot specify both SubnetId'
            ' and SubnetIds options together.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1341" endline="1355" pcid="7761">
        cmd = (self.prefix + '--release-label emr-4.7.2 --security-configuration MySecurityConfig' +
               ' --kerberos-attributes ' + DEFAULT_KERBEROS_ATTRIBUTES_ARGS +
               ' --instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'KerberosAttributes': KERBEROS_ATTRIBUTES,
                'ReleaseLabel': 'emr-4.7.2',
                'VisibleToAllUsers': True,
                'Tags': [],
                'SecurityConfiguration': 'MySecurityConfig'
            }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="187" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_modify_cluster_attributes.py" startline="62" endline="74" pcid="7911">
        result = self.run_cmd(cmdline, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_termination_protected_and_visible_to_all(self):
        args = ' --cluster-id j-ABC123456 --termination-protected'\
               ' --visible-to-all-users'
        cmdline = self.prefix + args
        result_set_termination_protection = {
            'JobFlowIds': ['j-ABC123456'], 'TerminationProtected': True}
        result_set_visible_to_all_users = {
            'JobFlowIds': ['j-ABC123456'], 'VisibleToAllUsers': True}
        self.run_cmd(cmdline)
        self.assertDictEqual(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_modify_cluster_attributes.py" startline="75" endline="87" pcid="7912">
            self.operations_called[0][1], result_set_visible_to_all_users)
        self.assertDictEqual(
            self.operations_called[1][1], result_set_termination_protection)

    def test_termination_protected_and_no_visible_to_all(self):
        args = ' --cluster-id j-ABC123456 --termination-protected'\
               ' --no-visible-to-all-users'
        cmdline = self.prefix + args
        result_set_termination_protection = {
            'JobFlowIds': ['j-ABC123456'], 'TerminationProtected': True}
        result_set_visible_to_all_users = {
            'JobFlowIds': ['j-ABC123456'], 'VisibleToAllUsers': False}
        self.run_cmd(cmdline)
</source>
</class>

<class classid="188" nclones="4" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="212" endline="229" pcid="7955">
            'Jar=s3://mybucket/mytest.jar,'
            'Args=arg1,arg2,MainClass=mymainclass,'
            'ActionOnFailure=TERMINATE_CLUSTER,'
            'Properties=k1=v1\,k2=v2\,k3')
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps': [
                {'Name': 'Custom',
                 'ActionOnFailure': 'TERMINATE_CLUSTER',
                 'HadoopJarStep':
                    {'Jar': 's3://mybucket/mytest.jar',
                     'Args': ['arg1', 'arg2'],
                     'MainClass': 'mymainclass',
                     'Properties':
                        [{'Key': 'k1', 'Value': 'v1'},
                         {'Key': 'k2', 'Value': 'v2'},
                         {'Key': 'k3', 'Value': ''}
                         ]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="356" endline="372" pcid="7965">
            expected_result_release=expected_result_release)

    def test_pig_missing_args(self):
        cmd = self.prefix + 'Type=Pig'
        expected_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for PigStepConfig: Args.\n'
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

    def test_pig_step_with_all_fields(self):
        test_step_config = \
            'Name=PigWithAllFields,' + \
            'Type=Pig,' + \
            self.PIG_BASIC_ARGS + ',' + \
            'ActionOnFailure=CANCEL_AND_WAIT'
        cmd = self.prefix + test_step_config
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="300" endline="316" pcid="7961">
        expected_result_release = copy.deepcopy(expected_result)
        expected_result_release['Steps'][0]['HadoopJarStep'] = \
            self.HIVE_DEFAULT_COMMAND_RUNNER_STEP

        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)

    def test_hive_step_missing_args(self):
        cmd = self.prefix + 'Type=Hive'
        expected_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for HiveStepConfig: Args.\n'

        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="257" endline="273" pcid="7958">

    def test_streaming_step_missing_args(self):
        cmd = self.prefix + 'Type=Streaming'
        expected_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for StreamingStepConfig: Args.\n'
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

    def test_streaming_jar_with_all_fields(self):
        test_step_config = 'Type=Streaming,' + \
            'Name=StreamingStepAllFields,' + \
            'ActionOnFailure=CANCEL_AND_WAIT,' + \
            self.STREAMING_ARGS
        cmd = self.prefix + test_step_config
        expected_result = {
            'JobFlowId': 'j-ABC',
</source>
</class>

<class classid="189" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="237" endline="256" pcid="7957">
            expected_result_release=expected_result)

    def test_streaming_step_with_default_fields(self):
        cmd = self.prefix + 'Type=Streaming,' + self.STREAMING_ARGS
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps': [
                {'Name': 'Streaming program',
                 'ActionOnFailure': 'CONTINUE',
                 'HadoopJarStep': self.STREAMING_HADOOP_SCRIPT_RUNNER_STEP
                 }
            ]
        }
        expected_result_release = copy.deepcopy(expected_result)
        expected_result_release['Steps'][0]['HadoopJarStep'] = \
            self.STREAMING_HADOOP_COMMAND_RUNNER_STEP

        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="282" endline="299" pcid="7960">
        expected_result_release = copy.deepcopy(expected_result)
        expected_result_release['Steps'][0]['HadoopJarStep'] = \
            self.STREAMING_HADOOP_COMMAND_RUNNER_STEP

        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)

    def test_hive_step_with_default_fields(self):
        cmd = self.prefix + 'Type=Hive,' + self.HIVE_BASIC_ARGS
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps':    [
                {'Name': 'Hive program',
                 'ActionOnFailure': 'CONTINUE',
                 'HadoopJarStep': self.HIVE_DEFAULT_SCRIPT_RUNNER_STEP
                 }]
            }
</source>
</class>

<class classid="190" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="286" endline="304" pcid="8027">
    def test_display_http_request_with_empty_string_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': ''
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: There is no associated body'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="347" endline="367" pcid="8030">
    def test_display_http_request_with_json_struct_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': '{"foo": "bar"}'
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: {\n'
                '    "foo": "bar"\n'
                '}'
            ]
        )

</source>
</class>

<class classid="191" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="714" endline="729" pcid="8054">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_detailed_formatter_is_a_tty(self, mock_is_a_tty):
        mock_is_a_tty.return_value = True
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=True
            )
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="732" endline="747" pcid="8055">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_detailed_formatter_not_a_tty(self, mock_is_a_tty):
        mock_is_a_tty.return_value = False
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=False
            )
        )
</source>
</class>

<class classid="192" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="766" endline="785" pcid="8057">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_force_color(self, mock_is_a_tty):
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.parsed_globals.color = 'on'
        # Even with settings that would typically turn off color, it
        # should be turned on because it was explicitly turned on
        mock_is_a_tty.return_value = False

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=True
            )
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="788" endline="806" pcid="8058">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_disable_color(self, mock_is_a_tty):
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.parsed_globals.color = 'off'
        # Even with settings that would typically enable color, it
        # should be turned off because it was explicitly turned off
        mock_is_a_tty.return_value = True

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=False
            )
</source>
</class>

<class classid="193" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="143" endline="163" pcid="8070">
    def test_emit_does_write_http_request_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        payload = {'body': b'data'}
        # In order for an http_request to have a request_id it must have been
        # preceeded by an api_call record.
        handler.emit('API_CALL', '', 'BOTOCORE')
        handler.emit('HTTP_REQUEST', payload, 'BOTOCORE')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'request_id': mock.ANY,
                    'event_type': 'HTTP_REQUEST',
                    'payload': payload,
                    'source': 'BOTOCORE',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertTrue(self.UUID_PATTERN.match(call['request_id']))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="164" endline="184" pcid="8071">
    def test_emit_does_write_http_response_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        payload = {'body': b'data'}
        # In order for an http_response to have a request_id it must have been
        # preceeded by an api_call record.
        handler.emit('API_CALL', '', 'BOTOCORE')
        handler.emit('HTTP_RESPONSE', payload, 'BOTOCORE')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'request_id': mock.ANY,
                    'event_type': 'HTTP_RESPONSE',
                    'payload': payload,
                    'source': 'BOTOCORE',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertTrue(self.UUID_PATTERN.match(call['request_id']))

</source>
</class>

<class classid="194" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="50" endline="72" pcid="8293">

    def test_convert_df_to_api_schedule(self):
        definition = self.load_def("""{
              "objects": [
                {
                  "id": "MySchedule",
                  "type": "Schedule",
                  "startDateTime": "2013-08-18T00:00:00",
                  "endDateTime": "2013-08-19T00:00:00",
                  "period": "1 day"
                }
            ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "MySchedule", "id": "MySchedule",
                "fields": [
                    {"key": "endDateTime",
                     "stringValue": "2013-08-19T00:00:00"},
                    {"key": "period", "stringValue": "1 day"},
                    {"key": "startDateTime",
                     "stringValue": "2013-08-18T00:00:00"},
                    {"key": "type", "stringValue": "Schedule"},
                ]}]
        self.assertEqual(actual, api)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="73" endline="96" pcid="8294">

    def test_convert_df_to_api_with_name(self):
        definition = self.load_def("""{
              "objects": [
                {
                  "id": "MySchedule",
                  "name": "OVERRIDE-NAME",
                  "type": "Schedule",
                  "startDateTime": "2013-08-18T00:00:00",
                  "endDateTime": "2013-08-19T00:00:00",
                  "period": "1 day"
                }
            ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "OVERRIDE-NAME", "id": "MySchedule",
                "fields": [
                    {"key": "endDateTime",
                     "stringValue": "2013-08-19T00:00:00"},
                    {"key": "period", "stringValue": "1 day"},
                    {"key": "startDateTime",
                     "stringValue": "2013-08-18T00:00:00"},
                    {"key": "type", "stringValue": "Schedule"},
                ]}]
        self.assertEqual(actual, api)
</source>
</class>

<class classid="195" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="117" endline="135" pcid="8297">

    def test_list_value_with_strings(self):
        definition = self.load_def("""{"objects": [
            {
              "id" : "emrActivity",
              "type" : "EmrActivity",
              "name" : "Foo",
              "step" : ["s3://foo1", "s3://foo2", "s3://foo3"]
            }
        ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "Foo", "id": "emrActivity",
                "fields": [
                    {"key": "step", "stringValue": "s3://foo1"},
                    {"key": "step", "stringValue": "s3://foo2"},
                    {"key": "step", "stringValue": "s3://foo3"},
                    {"key": "type", "stringValue": "EmrActivity"}
                ]}]
        self.assertEqual(actual, api)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="136" endline="155" pcid="8298">

    def test_value_with_refs(self):
        definition = self.load_def("""{"objects": [
            {
              "id" : "emrActivity",
              "type" : "EmrActivity",
              "name" : "Foo",
              "step" : ["s3://foo1", {"ref": "otherValue"}, "s3://foo3"]
            }
        ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "Foo", "id": "emrActivity",
                "fields": [
                    {"key": "step", "stringValue": "s3://foo1"},
                    {"key": "step", "refValue": "otherValue"},
                    {"key": "step", "stringValue": "s3://foo3"},
                    {"key": "type", "stringValue": "EmrActivity"}
                ]}]
        self.assertEqual(actual, api)

</source>
</class>

<class classid="196" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_arg_serialize.py" startline="118" endline="135" pcid="8325">
    def test_build_args_with_start_interval(self):
        parsed_args = FakeParsedArgs(
            start_interval=['2014-02-01T00:00:00',
                            '2014-02-04T00:00:00',]
        )
        builder = QueryArgBuilder()
        query = builder.build_query(parsed_args)
        self.assertEqual(query, {
            'selectors': [{
                'fieldName': '@actualStartTime',
                 'operator': {
                     'type': 'BETWEEN',
                     'values': ['2014-02-01T00:00:00',
                                '2014-02-04T00:00:00']
                 }
            }]
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_arg_serialize.py" startline="136" endline="153" pcid="8326">
    def test_build_args_with_end_interval(self):
        parsed_args = FakeParsedArgs(
            schedule_interval=['2014-02-01T00:00:00',
                               '2014-02-04T00:00:00',]
        )
        builder = QueryArgBuilder()
        query = builder.build_query(parsed_args)
        self.assertEqual(query, {
            'selectors': [{
                'fieldName': '@scheduledStartTime',
                 'operator': {
                     'type': 'BETWEEN',
                     'values': ['2014-02-01T00:00:00',
                                '2014-02-04T00:00:00']
                 }
            }]
        })

</source>
</class>

<class classid="197" nclones="2" nlines="20" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dlm/test_create_default_role.py" startline="127" endline="161" pcid="8375">
        self.assertEqual(self.operations_called[0][1]['RoleName'],
                         LIFECYCLE_DEFAULT_ROLE_NAME)

    # Use case: Default role does not exist.
    # Managed Policy exists.
    # Expected results: Operations are performed by the client to verify
    # existence of policy, creation of role and then
    # attaching policy to role
    # create-default-role is executed resource type = snapshot
    @mock.patch('awscli.customizations.dlm.'
                'iam.IAM.check_if_role_exists')
    def test_default_role_not_exist_snapshot(self, role_exists_patch):

        role_exists_patch.return_value = False

        self.run_cmd(self.prefix + " --resource-type=%s"
                     % (RESOURCE_TYPE_SNAPSHOT),
                     expected_rc=0)
        self.assertEqual(len(self.operations_called), 5)

        # Call to check if managed policy exists.
        self.assertEqual(self.operations_called[0][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[0][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN)

        self.assert_create_default_role(LIFECYCLE_DEFAULT_ROLE_NAME,
                                        LIFECYCLE_DEFAULT_ROLE_ASSUME_POLICY)
        self.assert_attached_policy_to_role(
            self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN,
            LIFECYCLE_DEFAULT_ROLE_NAME)

        # Call to get policy's default version id
        self.assertEqual(self.operations_called[3][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[3][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dlm/test_create_default_role.py" startline="181" endline="212" pcid="8377">
        self.assertEqual(self.operations_called[0][1]['RoleName'],
                         LIFECYCLE_DEFAULT_ROLE_NAME_AMI)

    # Use case: Default role does not exist for AMI.
    # AMI Managed Policy exists.
    # Expected results: Operations are performed by the client to verify
    # existence of policy, creation of role and then
    # attaching policy to role
    # create-default-role is executed with resource type = image
    @mock.patch('awscli.customizations.dlm.'
                'iam.IAM.check_if_role_exists')
    def test_default_role_not_exist_ami(self, role_exists_patch):

        role_exists_patch.return_value = False

        self.run_cmd(self.prefix + " --resource-type=%s"
                     % (RESOURCE_TYPE_IMAGE),
                     expected_rc=0)
        self.assertEqual(len(self.operations_called), 5)

        # Call to check if managed policy exists.
        self.assertEqual(self.operations_called[0][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[0][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_AMI_ARN)

        self.assert_create_default_role(LIFECYCLE_DEFAULT_ROLE_NAME_AMI,
                                        LIFECYCLE_DEFAULT_ROLE_ASSUME_POLICY)
        self.assert_attached_policy_to_role(
            self.LIFECYCLE_DEFAULT_MANAGED_POLICY_AMI_ARN,
            LIFECYCLE_DEFAULT_ROLE_NAME_AMI)

        # Call to get policy's default version id
</source>
</class>

<class classid="198" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="106" endline="121" pcid="8390">
    def test_s3_use_src_name(self):
        """
        No directory operation. Local source name given. S3
        common prefix given.
        """
        src = 'fileformat_test.py'
        dest = 's3://kyknapp/golfVid/'
        parameters = {'dir_op': False}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': os.path.abspath(src),
                             'type': 'local'},
                     'dest': {'path': 'kyknapp/golfVid/', 'type': 's3'},
                     'dir_op': False, 'use_src_name': True}
        self.assertEqual(files, ref_files)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="122" endline="138" pcid="8391">
    def test_s3_keep_dest_name(self):
        """
        No directory operation. Local source name given. S3
        full key given.
        """
        src = 'fileformat_test.py'
        dest = 's3://kyknapp/golfVid/file.py'
        parameters = {'dir_op': False}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': os.path.abspath(src),
                             'type': 'local'},
                     'dest': {'path': 'kyknapp/golfVid/file.py', 'type': 's3'},
                     'dir_op': False, 'use_src_name': False}
        self.assertEqual(files, ref_files)


</source>
</class>

<class classid="199" nclones="3" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_base.py" startline="168" endline="184" pcid="8463">

    def test_compare_size(self):
        """
        Confirms compare size works.
        """
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='comparator_test.py', size=11,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dest_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="93" endline="114" pcid="8482">

    def test_compare_exact_timestamps_same_age_diff_size(self):
        """
        Confirm that files of differing sizes are synced when
        the source and destination are the same age and
        `exact_timestamps` is set.
        """
        time_both = datetime.datetime.now()

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=20,
                            last_update=time_both, src_type='s3',
                            dest_type='local', operation_name='download')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_both, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="71" endline="92" pcid="8481">

    def test_compare_exact_timestamps_same_age_same_size(self):
        """
        Confirm that same-sized files are not synced when
        the source and destination are the same age and
        `exact_timestamps` is set.
        """
        time_both = datetime.datetime.now()

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_both, src_type='s3',
                            dest_type='local', operation_name='download')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_both, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertFalse(should_sync)
</source>
</class>

<class classid="200" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_base.py" startline="185" endline="202" pcid="8464">

    def test_compare_lastmod_upload(self):
        """
        Confirms compare time works for uploads.
        """
        time = datetime.datetime.now()
        future_time = time + datetime.timedelta(0, 3)
        src_file = FileStat(src='', dest='',
                            compare_key='comparator_test.py', size=10,
                            last_update=future_time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dest_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_base.py" startline="203" endline="220" pcid="8465">

    def test_compare_lastmod_copy(self):
        """
        Confirms compare time works for copies.
        """
        time = datetime.datetime.now()
        future_time = time + datetime.timedelta(0, 3)
        src_file = FileStat(src='', dest='',
                            compare_key='comparator_test.py', size=10,
                            last_update=future_time, src_type='s3',
                            dest_type='s3', operation_name='copy')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='s3', operation_name='')
        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dest_file)
        self.assertTrue(should_sync)
</source>
</class>

<class classid="201" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_sizeonly.py" startline="25" endline="45" pcid="8476">
    def test_compare_size_only(self):
        """
        Confirm that files are synced when size differs.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src + datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=11,
                            last_update=time_src, src_type='local',
                            dest_type='s3', operation_name='upload')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='s3',
                            dest_type='local', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_sizeonly.py" startline="46" endline="68" pcid="8477">
    def test_compare_size_only_different_update_times(self):
        """
        Confirm that files with the same size but different update times
        are not synced.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src + datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_src, src_type='local',
                            dest_type='s3', operation_name='upload')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='s3',
                            dest_type='local', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertFalse(should_sync)


</source>
</class>

<class classid="202" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="25" endline="47" pcid="8479">

    def test_compare_exact_timestamps_dest_older(self):
        """
        Confirm that same-sized files are synced when
        the destination is older than the source and
        `exact_timestamps` is set.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src - datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_src, src_type='s3',
                            dest_type='local', operation_name='download')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="115" endline="138" pcid="8483">

    def test_compare_exact_timestamps_diff_age_not_download(self):
        """
        Confirm that same sized files are synced when the timestamps differ,
        the type of operation is not a download, and ``exact_timestamps``
        is set.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src - datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_src, src_type='s3',
                            dest_type='local', operation_name='upload')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)

</source>
</class>

<class classid="203" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="96" endline="110" pcid="8496">
    def test_on_queued(self):
        subscriber = self.get_result_subscriber(QueuedResultSubscriber)
        subscriber.on_queued(self.future)
        result = self.get_queued_result()
        self.assert_result_queue_is_empty()
        self.assertEqual(
            result,
            QueuedResult(
                transfer_type=self.transfer_type,
                src=self.src,
                dest=self.dest,
                total_transfer_size=self.size
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="143" endline="157" pcid="8499">
    def test_on_done_failure(self):
        subscriber = self.get_result_subscriber(DoneResultSubscriber)
        subscriber.on_done(self.failure_future)
        result = self.get_queued_result()
        self.assert_result_queue_is_empty()
        self.assertEqual(
            result,
            FailureResult(
                transfer_type=self.transfer_type,
                src=self.src,
                dest=self.dest,
                exception=self.ref_exception
            )
        )

</source>
</class>

<class classid="204" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="931" endline="948" pcid="8544">
    def test_delete_success_with_files_remaining(self):
        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.files_transferred = 1

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=None)

        self.result_printer(success_result)

        ref_success_statement = (
            'delete: s3://mybucket/mykey\n'
            'Completed 1 file(s) with ~3 file(s) remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="949" endline="966" pcid="8545">
    def test_delete_success_but_no_expected_files_transferred_provided(self):
        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=None)

        self.result_printer(success_result)

        ref_success_statement = (
            'delete: s3://mybucket/mykey\n'
            'Completed 1 file(s) with ~0 file(s) remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
</class>

<class classid="205" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="967" endline="989" pcid="8546">
    def test_failure(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)
        self.assertEqual(self.out_file.getvalue(), '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1340" endline="1362" pcid="8564">
    def test_print_unicode_failure(self):
        transfer_type = 'upload'
        src = u'\u2713'
        dest = 's3://mybucket/mykey'

        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            u'upload failed: \u2713 to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)
        self.assertEqual(self.out_file.getvalue(), '')

</source>
</class>

<class classid="206" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1406" endline="1420" pcid="8570">
    def test_print_failure_result(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'
        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1472" endline="1486" pcid="8576">
    def test_print_failure_result(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'
        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)

</source>
</class>

<class classid="207" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1426" endline="1447" pcid="8572">
    def test_final_total_does_not_try_to_clear_empty_progress(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = mb
        self.result_recorder.bytes_transferred = mb

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)
        self.result_printer(success_result)
        ref_statement = 'upload: file to s3://mybucket/mykey\n'
        self.assertEqual(self.out_file.getvalue(), ref_statement)

        self.result_recorder.final_expected_files_transferred = 1
        self.result_printer(FinalTotalSubmissionsResult(1))
        self.assertEqual(self.out_file.getvalue(), ref_statement)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1492" endline="1515" pcid="8578">
    def test_final_total_does_not_try_to_clear_empty_progress(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = mb
        self.result_recorder.bytes_transferred = mb

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)
        self.result_printer(success_result)
        ref_statement = ''
        self.assertEqual(self.out_file.getvalue(), ref_statement)

        self.result_recorder.final_expected_files_transferred = 1
        self.result_printer(FinalTotalSubmissionsResult(1))
        # The final total submission result should be a noop and
        # not print anything out.
        self.assertEqual(self.out_file.getvalue(), ref_statement)


</source>
</class>

<class classid="208" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="116" endline="128" pcid="8661">
    def test_enqueue_downloads(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='bucket/key', dest='filename',
                         compare_key='key',
                         operation_name='download'))

        self.s3_transfer_handler.call(fileinfos)
        self.assertEqual(
            self.transfer_manager.download.call_count, num_transfers)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="129" endline="141" pcid="8662">
    def test_enqueue_copies(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='sourcebucket/sourcekey', dest='bucket/key',
                         compare_key='key',
                         operation_name='copy'))

        self.s3_transfer_handler.call(fileinfos)
        self.assertEqual(
            self.transfer_manager.copy.call_count, num_transfers)

</source>
</class>

<class classid="209" nclones="2" nlines="30" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="70" endline="110" pcid="8730">
    def test_compare_key_less(self):
        """
        Confirm the appropriate action is taken when the soruce compare key
        is less than the destination compare key.
        """
        self.not_at_src_sync_strategy.determine_should_sync.return_value = False

        # Try when the sync strategy says to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = True

        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='bomparator_test.py', size=10,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        src_files.append(src_file)
        dest_files.append(dest_file)
        ref_list.append(src_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="111" endline="151" pcid="8731">
    def test_compare_key_greater(self):
        """
        Confirm the appropriate action is taken when the soruce compare key
        is greater than the destination compare key.
        """
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = False

        # Try when the sync strategy says to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = True
        
        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='domparator_test.py', size=10,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        src_files.append(src_file)
        dest_files.append(dest_file)
        ref_list.append(dest_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)


</source>
</class>

<class classid="210" nclones="2" nlines="24" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="152" endline="184" pcid="8732">
    def test_empty_src(self):
        """
        Confirm the appropriate action is taken when there are no more source
        files to take.
        """
        # Try when the sync strategy says to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = True

        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        dest_files.append(dest_file)
        ref_list.append(dest_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="185" endline="218" pcid="8733">
    def test_empty_dest(self):
        """
        Confirm the appropriate action is taken when there are no more dest
        files to take.
        """
        # Try when the sync strategy says to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = True

        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='domparator_test.py', size=10,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        src_files.append(src_file)
        ref_list.append(src_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)


</source>
</class>

<class classid="211" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_utils.py" startline="595" endline="606" pcid="8789">
    def test_create_multipart_upload(self):
        params = {}
        RequestParamsMapper.map_create_multipart_upload_params(
            params, self.cli_params)
        self.assertEqual(
            params,
            {'SSECustomerAlgorithm': 'AES256',
             'SSECustomerKey': 'my-sse-c-key',
             'SSEKMSKeyId': 'my-kms-key',
             'ServerSideEncryption': 'AES256'}
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_utils.py" startline="616" endline="627" pcid="8791">
    def test_upload_part_copy(self):
        params = {}
        RequestParamsMapper.map_upload_part_copy_params(
            params, self.cli_params)
        self.assertEqual(
            params,
            {'CopySourceSSECustomerAlgorithm': 'AES256',
             'CopySourceSSECustomerKey': 'my-sse-c-copy-source-key',
             'SSECustomerAlgorithm': 'AES256',
             'SSECustomerKey': 'my-sse-c-key'})


</source>
</class>

<class classid="212" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="253" endline="266" pcid="8831">
    @mock.patch('s3transfer.crt.S3Client')
    def test_uses_endpoint_url_parameter_for_crt_manager(
            self, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['endpoint_url'] = 'https://my.endpoint.com'
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.assertEqual(
            self.session.create_client.call_args[1]['endpoint_url'],
            'https://my.endpoint.com'
        )
        self.assert_tls_enabled_for_crt_client(mock_crt_client)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="268" endline="281" pcid="8832">
    @mock.patch('s3transfer.crt.S3Client')
    def test_can_disable_tls_using_endpoint_scheme_for_crt_manager(
            self, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['endpoint_url'] = 'http://my.endpoint.com'
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.assertEqual(
            self.session.create_client.call_args[1]['endpoint_url'],
            'http://my.endpoint.com'
        )
        self.assert_tls_disabled_for_crt_client(mock_crt_client)
</source>
</class>

<class classid="213" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="41" endline="53" pcid="9053">
    def test_extract_string(self):
        parsed_result = {'type': 'literal', 'value': 'spam'}
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('"spam"')
        expected = {
            'expression': ':n0',
            'identifiers': {},
            'values': {':n0': 'spam'},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="54" endline="66" pcid="9054">
    def test_extract_bytes(self):
        parsed_result = {'type': 'literal', 'value': b'spam'}
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('b"spam"')
        expected = {
            'expression': ':n0',
            'identifiers': {},
            'values': {':n0': b'spam'},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
</class>

<class classid="214" nclones="2" nlines="20" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="112" endline="136" pcid="9058">
    def test_represent_or(self):
        parsed_result = {
            'type': 'or_expression',
            'children': [
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'eggs'},
                    {'type': 'literal', 'value': 6}
                ]}
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam = 7 or eggs = 6')
        expected = {
            'expression': '#n0 = :n1 OR #n2 = :n3',
            'identifiers': {'#n0': 'spam', '#n2': 'eggs'},
            'values': {':n1': 7, ':n3': 6},
            'substitution_count': 4,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="137" endline="161" pcid="9059">
    def test_represent_and(self):
        parsed_result = {
            'type': 'and_expression',
            'children': [
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'eggs'},
                    {'type': 'literal', 'value': 6}
                ]}
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam = 7 and eggs = 6')
        expected = {
            'expression': '#n0 = :n1 AND #n2 = :n3',
            'identifiers': {'#n0': 'spam', '#n2': 'eggs'},
            'values': {':n1': 7, ':n3': 6},
            'substitution_count': 4,
        }
        self.assertEqual(result, expected)

</source>
</class>

<class classid="215" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="184" endline="204" pcid="9061">
    def test_represent_not(self):
        parsed_result = {
            'type': 'not_expression',
            'children': [
                {'type': 'comparator', 'value': 'ne', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('NOT spam <> 7')
        expected = {
            'expression': 'NOT #n0 <> :n1',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 7},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="205" endline="225" pcid="9062">
    def test_represent_subexpression(self):
        parsed_result = {
            'type': 'subexpression',
            'children': [
                {'type': 'comparator', 'value': 'lte', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('( spam <= 7 )')
        expected = {
            'expression': '( #n0 <= :n1 )',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 7},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
</class>

<class classid="216" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/__init__.py" startline="550" endline="572" pcid="9302">
    def delete_bucket(self, bucket_name, attempts=5, delay=5):
        self.remove_all_objects(bucket_name)
        client = self._create_client_for_bucket(bucket_name)

        # There's a chance that, even though the bucket has been used
        # several times, the delete will fail due to eventual consistency
        # issues.
        attempts_remaining = attempts
        while True:
            attempts_remaining -= 1
            try:
                client.delete_bucket(Bucket=bucket_name)
                break
            except client.exceptions.NoSuchBucket:
                if self.bucket_not_exists(bucket_name):
                    # Fast fail when the NoSuchBucket error is real.
                    break
                if attempts_remaining <= 0:
                    raise
                time.sleep(delay)

        self._bucket_to_region.pop(bucket_name, None)

</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="804" endline="826" pcid="9971">
    def delete_bucket(self, bucket_name, attempts=5, delay=5):
        self.remove_all_objects(bucket_name)
        client = self.create_client_for_bucket(bucket_name)

        # There's a chance that, even though the bucket has been used
        # several times, the delete will fail due to eventual consistency
        # issues.
        attempts_remaining = attempts
        while True:
            attempts_remaining -= 1
            try:
                client.delete_bucket(Bucket=bucket_name)
                break
            except client.exceptions.NoSuchBucket:
                if self.bucket_not_exists(bucket_name):
                    # Fast fail when the NoSuchBucket error is real.
                    break
                if attempts_remaining <= 0:
                    raise
                time.sleep(delay)

        self.regions.pop(bucket_name, None)

</source>
</class>

<class classid="217" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/__init__.py" startline="660" endline="671" pcid="9317">
    def _wait_for_key(self, bucket_name, key_name, extra_params=None,
                      min_successes=3, exists=True):
        client = self._create_client_for_bucket(bucket_name)
        if exists:
            waiter = client.get_waiter('object_exists')
        else:
            waiter = client.get_waiter('object_not_exists')
        params = {'Bucket': bucket_name, 'Key': key_name}
        if extra_params is not None:
            params.update(extra_params)
        for _ in range(min_successes):
            waiter.wait(**params)
</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="905" endline="917" pcid="9984">
    def _wait_for_key(self, bucket_name, key_name, extra_params=None,
                      min_successes=3, exists=True):
        client = self.create_client_for_bucket(bucket_name)
        if exists:
            waiter = client.get_waiter('object_exists')
        else:
            waiter = client.get_waiter('object_not_exists')
        params = {'Bucket': bucket_name, 'Key': key_name}
        if extra_params is not None:
            params.update(extra_params)
        for _ in range(min_successes):
            waiter.wait(**params)

</source>
</class>

<class classid="218" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/client.py" startline="266" endline="279" pcid="10329">
    def _add_response_example(self, section, shape):
        example_section = section.add_new_section('syntax')
        example_section.style.new_line()
        example_section.style.bold('Syntax')
        example_section.style.new_paragraph()
        documenter = ResponseExampleDocumenter(
            service_id=self._service_id,
            operation_name=None,
            event_emitter=self._client.meta.events,
        )
        documenter.document_example(
            example_section, shape, include=[self._GENERIC_ERROR_SHAPE],
        )

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/client.py" startline="280" endline="292" pcid="10330">
    def _add_response_params(self, section, shape):
        params_section = section.add_new_section('Structure')
        params_section.style.new_line()
        params_section.style.bold('Structure')
        params_section.style.new_paragraph()
        documenter = ResponseParamsDocumenter(
            service_id=self._service_id,
            operation_name=None,
            event_emitter=self._client.meta.events,
        )
        documenter.document_params(
            params_section, shape, include=[self._GENERIC_ERROR_SHAPE],
        )
</source>
</class>

<class classid="219" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/style.py" startline="232" endline="255" pcid="10376">
    def end_a(self):
        self.doc.do_translation = False
        if self.a_href:
            last_write = self.doc.pop_write()
            last_write = last_write.rstrip(' ')
            if last_write and last_write != '`':
                if ':' in last_write:
                    last_write = last_write.replace(':', r'\:')
                self.doc.push_write(last_write)
                self.doc.push_write(' <%s>`__' % self.a_href)
            elif last_write == '`':
                # Look at start_a().  It will do a self.doc.write('`')
                # which is the start of the link title.  If that is the
                # case then there was no link text.  We should just
                # use an inline link.  The syntax of this is
                # `<http://url>`_
                self.doc.push_write('`<%s>`__' % self.a_href)
            else:
                self.doc.push_write(self.a_href)
                self.doc.hrefs[self.a_href] = self.a_href
                self.doc.write('`__')
            self.a_href = None
        self.doc.write(' ')

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/style.py" startline="232" endline="255" pcid="13973">
    def end_a(self):
        self.doc.do_translation = False
        if self.a_href:
            last_write = self.doc.pop_write()
            last_write = last_write.rstrip(' ')
            if last_write and last_write != '`':
                if ':' in last_write:
                    last_write = last_write.replace(':', r'\:')
                self.doc.push_write(last_write)
                self.doc.push_write(' <%s>`__' % self.a_href)
            elif last_write == '`':
                # Look at start_a().  It will do a self.doc.write('`')
                # which is the start of the link title.  If that is the
                # case then there was no link text.  We should just
                # use an inline link.  The syntax of this is
                # `<http://url>`_
                self.doc.push_write('`<%s>`__' % self.a_href)
            else:
                self.doc.push_write(self.a_href)
                self.doc.hrefs[self.a_href] = self.a_href
                self.doc.write('`__')
            self.a_href = None
        self.doc.write(' ')

</source>
</class>

<class classid="220" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="66" endline="80" pcid="10415">
    def add_tag(self, tag, attrs=None, is_start=True):
        if not self._doc_has_handler(tag, is_start):
            self.unhandled_tags.append(tag)
            return

        if is_start:
            if tag == 'li':
                node = LineItemNode(attrs)
            else:
                node = TagNode(tag, attrs)
            self.current_node.add_child(node)
            self.current_node = node
        else:
            self.current_node = self.current_node.parent

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="66" endline="80" pcid="14012">
    def add_tag(self, tag, attrs=None, is_start=True):
        if not self._doc_has_handler(tag, is_start):
            self.unhandled_tags.append(tag)
            return

        if is_start:
            if tag == 'li':
                node = LineItemNode(attrs)
            else:
                node = TagNode(tag, attrs)
            self.current_node.add_child(node)
            self.current_node = node
        else:
            self.current_node = self.current_node.parent

</source>
</class>

<class classid="221" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="154" endline="172" pcid="10431">
    def _lstrip(self, node):
        """
        Traverses the tree, stripping out whitespace until text data is found
        :param node: The node to strip
        :return: True if non-whitespace data was found, False otherwise
        """
        for child in node.children:
            if isinstance(child, DataNode):
                child.lstrip()
                if child.data:
                    return True
            else:
                found = self._lstrip(child)
                if found:
                    return True

        return False


</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="154" endline="172" pcid="14028">
    def _lstrip(self, node):
        """
        Traverses the tree, stripping out whitespace until text data is found
        :param node: The node to strip
        :return: True if non-whitespace data was found, False otherwise
        """
        for child in node.children:
            if isinstance(child, DataNode):
                child.lstrip()
                if child.data:
                    return True
            else:
                found = self._lstrip(child)
                if found:
                    return True

        return False


</source>
</class>

<class classid="222" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="186" endline="200" pcid="10434">
    def write(self, doc):
        if not self.data:
            return

        if self.data.isspace():
            str_data = ' '
        else:
            end_space = self.data[-1].isspace()
            words = self.data.split()
            words = doc.translate_words(words)
            str_data = ' '.join(words)
            if end_space:
                str_data += ' '

        doc.handle_data(str_data)
</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="186" endline="200" pcid="14031">
    def write(self, doc):
        if not self.data:
            return

        if self.data.isspace():
            str_data = ' '
        else:
            end_space = self.data[-1].isspace()
            words = self.data.split()
            words = doc.translate_words(words)
            str_data = ' '.join(words)
            if end_space:
                str_data += ' '

        doc.handle_data(str_data)
</source>
</class>

<class classid="223" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="24" endline="34" pcid="10435">
    def __init__(self, target='man'):
        self.style = ReSTStyle(self)
        self.target = target
        self.parser = DocStringParser(self)
        self.keep_data = True
        self.do_translation = False
        self.translation_map = {}
        self.hrefs = {}
        self._writes = []
        self._last_doc_string = None

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="24" endline="34" pcid="14219">
    def __init__(self, target='man'):
        self.style = ReSTStyle(self)
        self.target = target
        self.parser = DocStringParser(self)
        self.keep_data = True
        self.do_translation = False
        self.translation_map = {}
        self.hrefs = {}
        self._writes = []
        self._last_doc_string = None

</source>
</class>

<class classid="224" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="87" endline="98" pcid="10445">
    def include_doc_string(self, doc_string):
        if doc_string:
            try:
                start = len(self._writes)
                self.parser.feed(doc_string)
                self.parser.close()
                end = len(self._writes)
                self._last_doc_string = (start, end)
            except Exception:
                LOG.debug('Error parsing doc string', exc_info=True)
                LOG.debug(doc_string)

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="87" endline="98" pcid="14229">
    def include_doc_string(self, doc_string):
        if doc_string:
            try:
                start = len(self._writes)
                self.parser.feed(doc_string)
                self.parser.close()
                end = len(self._writes)
                self._last_doc_string = (start, end)
            except Exception:
                LOG.debug('Error parsing doc string', exc_info=True)
                LOG.debug(doc_string)

</source>
</class>

<class classid="225" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="107" endline="129" pcid="10447">
    def __init__(self, name, section_names=None, target='man', context=None):
        """Provides a Hierarichial structure to a ReSTDocument

        You can write to it similiar to as you can to a ReSTDocument but
        has an innate structure for more orginaztion and abstraction.

        :param name: The name of the document
        :param section_names: A list of sections to be included
            in the document.
        :param target: The target documentation of the Document structure
        :param context: A dictionary of data to store with the strucuture. These
            are only stored per section not the entire structure.
        """
        super(DocumentStructure, self).__init__(target=target)
        self._name = name
        self._structure = OrderedDict()
        self._path = [self._name]
        self._context = {}
        if context is not None:
            self._context = context
        if section_names is not None:
            self._generate_structure(section_names)

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="107" endline="129" pcid="14231">
    def __init__(self, name, section_names=None, target='man', context=None):
        """Provides a Hierarichial structure to a ReSTDocument

        You can write to it similiar to as you can to a ReSTDocument but
        has an innate structure for more orginaztion and abstraction.

        :param name: The name of the document
        :param section_names: A list of sections to be included
            in the document.
        :param target: The target documentation of the Document structure
        :param context: A dictionary of data to store with the strucuture. These
            are only stored per section not the entire structure.
        """
        super(DocumentStructure, self).__init__(target=target)
        self._name = name
        self._structure = OrderedDict()
        self._path = [self._name]
        self._context = {}
        if context is not None:
            self._context = context
        if section_names is not None:
            self._generate_structure(section_names)

</source>
</class>

<class classid="226" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="193" endline="210" pcid="10457">
    def flush_structure(self):
        """Flushes a doc structure to a ReSTructed string

        The document is flushed out in a DFS style where sections and their
        subsections' values are added to the string as they are visited.
        """
        # We are at the root flush the links at the beginning of the
        # document
        if len(self.path) == 1:
            if self.hrefs:
                self.style.new_paragraph()
                for refname, link in self.hrefs.items():
                    self.style.link_target_definition(refname, link)
        value = self.getvalue()
        for name, section in self._structure.items():
            value += section.flush_structure()
        return value

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="193" endline="210" pcid="14241">
    def flush_structure(self):
        """Flushes a doc structure to a ReSTructed string

        The document is flushed out in a DFS style where sections and their
        subsections' values are added to the string as they are visited.
        """
        # We are at the root flush the links at the beginning of the
        # document
        if len(self.path) == 1:
            if self.hrefs:
                self.style.new_paragraph()
                for refname, link in self.hrefs.items():
                    self.style.link_target_definition(refname, link)
        value = self.getvalue()
        for name, section in self._structure.items():
            value += section.flush_structure()
        return value

</source>
</class>

<class classid="227" nclones="2" nlines="42" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="38" endline="90" pcid="11341">
    def add_auth(self, request):
        if self.credentials is None:
            raise NoCredentialsError()

        # Use utcnow() because that's what gets mocked by tests, but set
        # timezone because CRT assumes naive datetime is local time.
        datetime_now = datetime.datetime.utcnow().replace(
            tzinfo=datetime.timezone.utc)

        # Use existing 'X-Amz-Content-SHA256' header if able
        existing_sha256 = self._get_existing_sha256(request)

        self._modify_request_before_signing(request)

        credentials_provider = awscrt.auth.AwsCredentialsProvider.new_static(
            access_key_id=self.credentials.access_key,
            secret_access_key=self.credentials.secret_key,
            session_token=self.credentials.token)

        if self._is_streaming_checksum_payload(request):
            explicit_payload = STREAMING_UNSIGNED_PAYLOAD_TRAILER
        elif self._should_sha256_sign_payload(request):
            if existing_sha256:
                explicit_payload = existing_sha256
            else:
                explicit_payload = None  # to be calculated during signing
        else:
            explicit_payload = UNSIGNED_PAYLOAD

        if self._should_add_content_sha256_header(explicit_payload):
            body_header = \
                awscrt.auth.AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA_256
        else:
            body_header = awscrt.auth.AwsSignedBodyHeaderType.NONE

        signing_config = awscrt.auth.AwsSigningConfig(
            algorithm=awscrt.auth.AwsSigningAlgorithm.V4,
            signature_type=self._SIGNATURE_TYPE,
            credentials_provider=credentials_provider,
            region=self._region_name,
            service=self._service_name,
            date=datetime_now,
            should_sign_header=self._should_sign_header,
            use_double_uri_encode=self._USE_DOUBLE_URI_ENCODE,
            should_normalize_uri_path=self._SHOULD_NORMALIZE_URI_PATH,
            signed_body_value=explicit_payload,
            signed_body_header_type=body_header,
            expiration_in_seconds=self._expiration_in_seconds,
            )
        crt_request = self._crt_request_from_aws_request(request)
        future = awscrt.auth.aws_sign_request(crt_request, signing_config)
        future.result()
        self._apply_signing_changes(request, crt_request)
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="226" endline="278" pcid="11353">
        self._expiration_in_seconds = None

    def add_auth(self, request):
        if self.credentials is None:
            raise NoCredentialsError()

        # Use utcnow() because that's what gets mocked by tests, but set
        # timezone because CRT assumes naive datetime is local time.
        datetime_now = datetime.datetime.utcnow().replace(
            tzinfo=datetime.timezone.utc)

        # Use existing 'X-Amz-Content-SHA256' header if able
        existing_sha256 = self._get_existing_sha256(request)

        self._modify_request_before_signing(request)

        credentials_provider = awscrt.auth.AwsCredentialsProvider.new_static(
            access_key_id=self.credentials.access_key,
            secret_access_key=self.credentials.secret_key,
            session_token=self.credentials.token)

        if self._is_streaming_checksum_payload(request):
            explicit_payload = STREAMING_UNSIGNED_PAYLOAD_TRAILER
        elif self._should_sha256_sign_payload(request):
            if existing_sha256:
                explicit_payload = existing_sha256
            else:
                explicit_payload = None  # to be calculated during signing
        else:
            explicit_payload = UNSIGNED_PAYLOAD

        if self._should_add_content_sha256_header(explicit_payload):
            body_header = \
                awscrt.auth.AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA_256
        else:
            body_header = awscrt.auth.AwsSignedBodyHeaderType.NONE

        signing_config = awscrt.auth.AwsSigningConfig(
            algorithm=awscrt.auth.AwsSigningAlgorithm.V4_ASYMMETRIC,
            signature_type=self._SIGNATURE_TYPE,
            credentials_provider=credentials_provider,
            region=self._region_name,
            service=self._service_name,
            date=datetime_now,
            should_sign_header=self._should_sign_header,
            use_double_uri_encode=self._USE_DOUBLE_URI_ENCODE,
            should_normalize_uri_path=self._SHOULD_NORMALIZE_URI_PATH,
            signed_body_value=explicit_payload,
            signed_body_header_type=body_header,
            expiration_in_seconds=self._expiration_in_seconds,
            )
        crt_request = self._crt_request_from_aws_request(request)
        future = awscrt.auth.aws_sign_request(crt_request, signing_config)
</source>
</class>

<class classid="228" nclones="2" nlines="24" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="91" endline="119" pcid="11342">

    def _crt_request_from_aws_request(self, aws_request):
        url_parts = urlsplit(aws_request.url)
        crt_path = url_parts.path if url_parts.path else '/'
        if aws_request.params:
            array = []
            for (param, value) in aws_request.params.items():
                value = str(value)
                array.append('%s=%s' % (param, value))
            crt_path = crt_path + '?' + '&'.join(array)
        elif url_parts.query:
            crt_path = '%s?%s' % (crt_path, url_parts.query)

        crt_headers = awscrt.http.HttpHeaders(aws_request.headers.items())

        # CRT requires body (if it exists) to be an I/O stream.
        crt_body_stream = None
        if aws_request.body:
            if hasattr(aws_request.body, 'seek'):
                crt_body_stream = aws_request.body
            else:
                crt_body_stream = BytesIO(aws_request.body)

        crt_request = awscrt.http.HttpRequest(
            method=aws_request.method,
            path=crt_path,
            headers=crt_headers,
            body_stream=crt_body_stream)
        return crt_request
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="279" endline="307" pcid="11354">
        future.result()
        self._apply_signing_changes(request, crt_request)

    def _crt_request_from_aws_request(self, aws_request):
        url_parts = urlsplit(aws_request.url)
        crt_path = url_parts.path if url_parts.path else '/'
        if aws_request.params:
            array = []
            for (param, value) in aws_request.params.items():
                value = str(value)
                array.append('%s=%s' % (param, value))
            crt_path = crt_path + '?' + '&'.join(array)
        elif url_parts.query:
            crt_path = '%s?%s' % (crt_path, url_parts.query)

        crt_headers = awscrt.http.HttpHeaders(aws_request.headers.items())

        # CRT requires body (if it exists) to be an I/O stream.
        crt_body_stream = None
        if aws_request.body:
            if hasattr(aws_request.body, 'seek'):
                crt_body_stream = aws_request.body
            else:
                crt_body_stream = BytesIO(aws_request.body)

        crt_request = awscrt.http.HttpRequest(
            method=aws_request.method,
            path=crt_path,
            headers=crt_headers,
</source>
</class>

<class classid="229" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="404" endline="445" pcid="11366">
                 expires=DEFAULT_EXPIRES):
        super().__init__(credentials, service_name, region_name)
        self._expiration_in_seconds = expires

    def _modify_request_before_signing(self, request):
        super()._modify_request_before_signing(request)

        # We automatically set this header, so if it's the auto-set value we
        # want to get rid of it since it doesn't make sense for presigned urls.
        content_type = request.headers.get('content-type')
        if content_type == 'application/x-www-form-urlencoded; charset=utf-8':
            del request.headers['content-type']

        # Now parse the original query string to a dict, inject our new query
        # params, and serialize back to a query string.
        url_parts = urlsplit(request.url)
        # parse_qs makes each value a list, but in our case we know we won't
        # have repeated keys so we know we have single element lists which we
        # can convert back to scalar values.
        query_dict = dict(
            [(k, v[0]) for k, v in
             parse_qs(url_parts.query, keep_blank_values=True).items()])
        # The spec is particular about this.  It *has* to be:
        # https://<endpoint>?<operation params>&<auth params>
        # You can't mix the two types of params together, i.e just keep doing
        # new_query_params.update(op_params)
        # new_query_params.update(auth_params)
        # percent_encode_sequence(new_query_params)
        if request.data:
            # We also need to move the body params into the query string. To
            # do this, we first have to convert it to a dict.
            query_dict.update(_get_body_as_dict(request))
            request.data = ''
        new_query_string = percent_encode_sequence(query_dict)
        # url_parts is a tuple (and therefore immutable) so we need to create
        # a new url_parts with the new query string.
        # <part>   - <index>
        # scheme   - 0
        # netloc   - 1
        # path     - 2
        # query    - 3  <-- we're replacing this.
        # fragment - 4
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="494" endline="535" pcid="11371">
                 expires=DEFAULT_EXPIRES):
        super().__init__(credentials, service_name, region_name)
        self._expiration_in_seconds = expires

    def _modify_request_before_signing(self, request):
        super()._modify_request_before_signing(request)

        # We automatically set this header, so if it's the auto-set value we
        # want to get rid of it since it doesn't make sense for presigned urls.
        content_type = request.headers.get('content-type')
        if content_type == 'application/x-www-form-urlencoded; charset=utf-8':
            del request.headers['content-type']

        # Now parse the original query string to a dict, inject our new query
        # params, and serialize back to a query string.
        url_parts = urlsplit(request.url)
        # parse_qs makes each value a list, but in our case we know we won't
        # have repeated keys so we know we have single element lists which we
        # can convert back to scalar values.
        query_dict = dict(
            [(k, v[0]) for k, v in
             parse_qs(url_parts.query, keep_blank_values=True).items()])
        # The spec is particular about this.  It *has* to be:
        # https://<endpoint>?<operation params>&<auth params>
        # You can't mix the two types of params together, i.e just keep doing
        # new_query_params.update(op_params)
        # new_query_params.update(auth_params)
        # percent_encode_sequence(new_query_params)
        if request.data:
            # We also need to move the body params into the query string. To
            # do this, we first have to convert it to a dict.
            query_dict.update(_get_body_as_dict(request))
            request.data = ''
        new_query_string = percent_encode_sequence(query_dict)
        # url_parts is a tuple (and therefore immutable) so we need to create
        # a new url_parts with the new query string.
        # <part>   - <index>
        # scheme   - 0
        # netloc   - 1
        # path     - 2
        # query    - 3  <-- we're replacing this.
        # fragment - 4
</source>
</class>

<class classid="230" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/core.py" startline="289" endline="300" pcid="12048">
    def run_step(self, step_definition, parameters):
        var_resolver = VariableResolver()
        value = var_resolver.resolve_variables(
            parameters, step_definition['value'],
        )
        load_type = step_definition['load_type']
        if load_type == 'json':
            return json.loads(value)
        else:
            raise ValueError(f'Unsupported load_type: {load_type}')


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/core.py" startline="304" endline="315" pcid="12049">
    def run_step(self, step_definition, parameters):
        var_resolver = VariableResolver()
        value = var_resolver.resolve_variables(
            parameters, step_definition['value'],
        )
        dump_type = step_definition['dump_type']
        if dump_type == 'json':
            return json.dumps(value)
        else:
            raise ValueError(f'Unsupported load_type: {dump_type}')


</source>
</class>

<class classid="231" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/ui/section.py" startline="32" endline="46" pcid="12149">
    def _get_container(self):
        content = f" {self._definition['shortname']}"
        buffer = Buffer(
            document=Document(content),
            read_only=True
        )
        return Window(
            content=BufferControl(
                buffer=buffer, focusable=False
            ),
            style=self._get_style,
            width=Dimension.exact(len(content) + 1),
            dont_extend_height=True,
        )

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/ui/prompt.py" startline="82" endline="96" pcid="12162">
    def _get_container(self):
        content = f'{self._value_description}:'
        buffer = Buffer(
            document=Document(content),
            read_only=True
        )
        return Window(
            content=BufferControl(
                buffer=buffer, focusable=False
            ),
            style=self._get_style,
            width=Dimension.exact(len(content) + 1),
            dont_extend_height=True,
        )

</source>
</class>

<class classid="232" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/codedeploy.py" startline="23" endline="48" pcid="12313">

def initialize(cli):
    """
    The entry point for CodeDeploy high level commands.
    """
    cli.register(
        'building-command-table.main',
        change_name
    )
    cli.register(
        'building-command-table.deploy',
        inject_commands
    )
    cli.register(
        'building-argument-table.deploy.get-application-revision',
        modify_revision_arguments
    )
    cli.register(
        'building-argument-table.deploy.register-application-revision',
        modify_revision_arguments
    )
    cli.register(
        'building-argument-table.deploy.create-deployment',
        modify_revision_arguments
    )

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/datapipeline/__init__.py" startline="66" endline="84" pcid="13097">


def register_customizations(cli):
    cli.register(
        'building-argument-table.datapipeline.put-pipeline-definition',
        add_pipeline_definition)
    cli.register(
        'building-argument-table.datapipeline.activate-pipeline',
        activate_pipeline_definition)
    # botocore level events use service id, not service name
    cli.register(
        'after-call.data-pipeline.GetPipelineDefinition',
        translate_definition)
    cli.register(
        'building-command-table.datapipeline',
        register_commands)
    cli.register_last(
        'doc-output.datapipeline.get-pipeline-definition',
        document_translation)
</source>
</class>

<class classid="233" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/applicationutils.py" startline="129" endline="145" pcid="12676">
def _build_install_hive_step(region,
                             action_on_failure=constants.TERMINATE_CLUSTER):
    step_args = [
        emrutils.build_s3_link(constants.HIVE_SCRIPT_PATH, region),
        constants.INSTALL_HIVE_ARG,
        constants.BASE_PATH_ARG,
        emrutils.build_s3_link(constants.HIVE_BASE_PATH, region),
        constants.HIVE_VERSIONS,
        constants.LATEST]
    step = emrutils.build_step(
        name=constants.INSTALL_HIVE_NAME,
        action_on_failure=action_on_failure,
        jar=emrutils.build_s3_link(constants.SCRIPT_RUNNER_PATH, region),
        args=step_args)
    return step


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/applicationutils.py" startline="164" endline="180" pcid="12678">
def _build_pig_install_step(region,
                            action_on_failure=constants.TERMINATE_CLUSTER):
    step_args = [
        emrutils.build_s3_link(constants.PIG_SCRIPT_PATH, region),
        constants.INSTALL_PIG_ARG,
        constants.BASE_PATH_ARG,
        emrutils.build_s3_link(constants.PIG_BASE_PATH, region),
        constants.PIG_VERSIONS,
        constants.LATEST]
    step = emrutils.build_step(
        name=constants.INSTALL_PIG_NAME,
        action_on_failure=action_on_failure,
        jar=emrutils.build_s3_link(constants.SCRIPT_RUNNER_PATH, region),
        args=step_args)
    return step


</source>
</class>

<class classid="234" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="109" endline="127" pcid="12776">
def build_hive_step(parsed_step, release_label, region=None):
    args = parsed_step.get('Args')
    emrutils.check_required_field(
        structure=constants.HIVE_STEP_CONFIG, name='Args', value=args)
    emrutils.check_empty_string_list(name='Args', value=args)
    name = _apply_default_value(
        arg=parsed_step.get('Name'),
        value=constants.DEFAULT_HIVE_STEP_NAME)
    action_on_failure = \
        _apply_default_value(
            arg=parsed_step.get('ActionOnFailure'),
            value=constants.DEFAULT_FAILURE_ACTION)

    return emrutils.build_step(
        jar=_get_runner_jar(release_label, region),
        args=_build_hive_args(args, release_label, region),
        name=name,
        action_on_failure=action_on_failure)

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="148" endline="166" pcid="12778">

def build_pig_step(parsed_step, release_label, region=None):
    args = parsed_step.get('Args')
    emrutils.check_required_field(
        structure=constants.PIG_STEP_CONFIG, name='Args', value=args)
    emrutils.check_empty_string_list(name='Args', value=args)
    name = _apply_default_value(
        arg=parsed_step.get('Name'),
        value=constants.DEFAULT_PIG_STEP_NAME)
    action_on_failure = _apply_default_value(
        arg=parsed_step.get('ActionOnFailure'),
        value=constants.DEFAULT_FAILURE_ACTION)

    return emrutils.build_step(
        jar=_get_runner_jar(release_label, region),
        args=_build_pig_args(args, release_label, region),
        name=name,
        action_on_failure=action_on_failure)

</source>
</class>

<class classid="235" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="128" endline="147" pcid="12777">

def _build_hive_args(args, release_label, region):
    args_list = []
    if release_label:
        args_list.append(constants.HIVE_SCRIPT_COMMAND)
    else:
        args_list.append(emrutils.build_s3_link(
            relative_path=constants.HIVE_SCRIPT_PATH, region=region))

    args_list.append(constants.RUN_HIVE_SCRIPT)

    if not release_label:
        args_list.append(constants.HIVE_VERSIONS)
        args_list.append(constants.LATEST)

    args_list.append(constants.ARGS)
    args_list += args

    return args_list

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="167" endline="186" pcid="12779">

def _build_pig_args(args, release_label, region):
    args_list = []
    if release_label:
        args_list.append(constants.PIG_SCRIPT_COMMAND)
    else:
        args_list.append(emrutils.build_s3_link(
            relative_path=constants.PIG_SCRIPT_PATH, region=region))

    args_list.append(constants.RUN_PIG_SCRIPT)

    if not release_label:
        args_list.append(constants.PIG_VERSIONS)
        args_list.append(constants.LATEST)

    args_list.append(constants.ARGS)
    args_list += args

    return args_list

</source>
</class>

</clones>
