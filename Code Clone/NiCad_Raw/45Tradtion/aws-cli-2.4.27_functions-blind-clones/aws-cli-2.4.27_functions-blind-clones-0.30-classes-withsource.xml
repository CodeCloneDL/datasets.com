<clones>
<systeminfo processor="nicad6" system="aws-cli-2.4.27" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="14307" npairs="2828"/>
<runinfo ncompares="5091282" cputime="1335597"/>
<classinfo nclasses="522"/>

<class classid="1" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/utils/botocore/__init__.py" startline="99" endline="120" pcid="113">
def temporary_file(mode):
    """This is a cross platform temporary file creation.

    tempfile.NamedTemporary file on windows creates a secure temp file
    that can't be read by other processes and can't be opened a second time.

    For tests, we generally *want* them to be read multiple times.
    The test fixture writes the temp file contents, the test reads the
    temp file.

    """
    temporary_directory = tempfile.mkdtemp()
    basename = 'tmpfile-%s-%s' % (int(time.time()), random.randint(1, 1000))
    full_filename = os.path.join(temporary_directory, basename)
    open(full_filename, 'w').close()
    try:
        with open(full_filename, mode) as f:
            yield f
    finally:
        shutil.rmtree(temporary_directory)


</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="140" endline="161" pcid="9917">
def temporary_file(mode):
    """This is a cross platform temporary file creation.

    tempfile.NamedTemporary file on windows creates a secure temp file
    that can't be read by other processes and can't be opened a second time.

    For tests, we generally *want* them to be read multiple times.
    The test fixture writes the temp file contents, the test reads the
    temp file.

    """
    temporary_directory = tempfile.mkdtemp()
    basename = 'tmpfile-%s' % str(random_chars(8))
    full_filename = os.path.join(temporary_directory, basename)
    open(full_filename, 'w').close()
    try:
        with open(full_filename, mode) as f:
            yield f
    finally:
        shutil.rmtree(temporary_directory)


</source>
</class>

<class classid="2" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/utils/botocore/__init__.py" startline="469" endline="497" pcid="152">
    def wait(self, check, *args, **kwargs):
        """
        Wait until the check succeeds the configured number of times

        :type check: callable
        :param check: A callable that returns True or False to indicate
        if the check succeeded or failed.

        :type args: list
        :param args: Any ordered arguments to be passed to the check.

        :type kwargs: dict
        :param kwargs: Any keyword arguments to be passed to the check.
        """
        attempts = 0
        successes = 0
        if self.delay_initial_poll:
            time.sleep(self.delay)
        while attempts < self.max_attempts:
            attempts += 1
            if check(*args, **kwargs):
                successes += 1
                if successes >= self.min_successes:
                    return
            else:
                time.sleep(self.delay)
        fail_msg = self._fail_message(attempts, successes)
        raise ConsistencyWaiterException(fail_msg)

</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="976" endline="1004" pcid="9991">
    def wait(self, check, *args, **kwargs):
        """
        Wait until the check succeeds the configured number of times

        :type check: callable
        :param check: A callable that returns True or False to indicate
        if the check succeeded or failed.

        :type args: list
        :param args: Any ordered arguments to be passed to the check.

        :type kwargs: dict
        :param kwargs: Any keyword arguments to be passed to the check.
        """
        attempts = 0
        successes = 0
        if self.delay_initial_poll:
            time.sleep(self.delay)
        while attempts < self.max_attempts:
            attempts += 1
            if check(*args, **kwargs):
                successes += 1
                if successes >= self.min_successes:
                    return
            else:
                time.sleep(self.delay)
        fail_msg = self._fail_message(attempts, successes)
        raise ConsistencyWaiterException(fail_msg)

</source>
</class>

<class classid="3" nclones="3" nlines="14" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_copy.py" startline="26" endline="42" pcid="165">
    def test_copy_below_threshold(self):
        transfer_manager = self.create_transfer_manager(self.config)
        key = '1mb.txt'
        new_key = '1mb-copy.txt'

        filename = self.files.create_file_with_size(key, filesize=1024 * 1024)
        self.upload_file(filename, key)

        future = transfer_manager.copy(
            copy_source={'Bucket': self.bucket_name, 'Key': key},
            bucket=self.bucket_name,
            key=new_key,
        )

        future.result()
        self.assertTrue(self.object_exists(new_key))

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_copy.py" startline="43" endline="61" pcid="166">
    def test_copy_above_threshold(self):
        transfer_manager = self.create_transfer_manager(self.config)
        key = '20mb.txt'
        new_key = '20mb-copy.txt'

        filename = self.files.create_file_with_size(
            key, filesize=20 * 1024 * 1024
        )
        self.upload_file(filename, key)

        future = transfer_manager.copy(
            copy_source={'Bucket': self.bucket_name, 'Key': key},
            bucket=self.bucket_name,
            key=new_key,
        )

        future.result()
        self.assertTrue(self.object_exists(new_key))

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_copy.py" startline="62" endline="85" pcid="167">
    def test_progress_subscribers_on_copy(self):
        subscriber = RecordingSubscriber()
        transfer_manager = self.create_transfer_manager(self.config)
        key = '20mb.txt'
        new_key = '20mb-copy.txt'

        filename = self.files.create_file_with_size(
            key, filesize=20 * 1024 * 1024
        )
        self.upload_file(filename, key)

        future = transfer_manager.copy(
            copy_source={'Bucket': self.bucket_name, 'Key': key},
            bucket=self.bucket_name,
            key=new_key,
            subscribers=[subscriber],
        )

        future.result()
        # The callback should have been called enough times such that
        # the total amount of bytes we've seen (via the "amount"
        # arg to the callback function) should be the size
        # of the file we uploaded.
        self.assertEqual(subscriber.calculate_bytes_seen(), 20 * 1024 * 1024)
</source>
</class>

<class classid="4" nclones="6" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_download.py" startline="41" endline="55" pcid="169">
    def test_below_threshold(self):
        transfer_manager = self.create_transfer_manager(self.config)

        filename = self.files.create_file_with_size(
            'foo.txt', filesize=1024 * 1024
        )
        self.upload_file(filename, '1mb.txt')

        download_path = os.path.join(self.files.rootdir, '1mb.txt')
        future = transfer_manager.download(
            self.bucket_name, '1mb.txt', download_path
        )
        future.result()
        assert_files_equal(filename, download_path)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_download.py" startline="56" endline="70" pcid="170">
    def test_above_threshold(self):
        transfer_manager = self.create_transfer_manager(self.config)

        filename = self.files.create_file_with_size(
            'foo.txt', filesize=20 * 1024 * 1024
        )
        self.upload_file(filename, '20mb.txt')

        download_path = os.path.join(self.files.rootdir, '20mb.txt')
        future = transfer_manager.download(
            self.bucket_name, '20mb.txt', download_path
        )
        future.result()
        assert_files_equal(filename, download_path)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_download.py" startline="212" endline="225" pcid="174">
    def test_below_threshold_for_fileobj(self):
        transfer_manager = self.create_transfer_manager(self.config)

        filename = self.files.create_file_with_size(
            'foo.txt', filesize=1024 * 1024
        )
        self.upload_file(filename, '1mb.txt')

        download_path = os.path.join(self.files.rootdir, '1mb.txt')
        with open(download_path, 'wb') as f:
            future = transfer_manager.download(self.bucket_name, '1mb.txt', f)
            future.result()
        assert_files_equal(filename, download_path)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_download.py" startline="226" endline="239" pcid="175">
    def test_above_threshold_for_fileobj(self):
        transfer_manager = self.create_transfer_manager(self.config)

        filename = self.files.create_file_with_size(
            'foo.txt', filesize=20 * 1024 * 1024
        )
        self.upload_file(filename, '20mb.txt')

        download_path = os.path.join(self.files.rootdir, '20mb.txt')
        with open(download_path, 'wb') as f:
            future = transfer_manager.download(self.bucket_name, '20mb.txt', f)
            future.result()
        assert_files_equal(filename, download_path)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_download.py" startline="256" endline="271" pcid="177">
    def test_above_threshold_for_nonseekable_fileobj(self):
        transfer_manager = self.create_transfer_manager(self.config)

        filename = self.files.create_file_with_size(
            'foo.txt', filesize=20 * 1024 * 1024
        )
        self.upload_file(filename, '20mb.txt')

        download_path = os.path.join(self.files.rootdir, '20mb.txt')
        with open(download_path, 'wb') as f:
            future = transfer_manager.download(
                self.bucket_name, '20mb.txt', NonSeekableWriter(f)
            )
            future.result()
        assert_files_equal(filename, download_path)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_download.py" startline="240" endline="255" pcid="176">
    def test_below_threshold_for_nonseekable_fileobj(self):
        transfer_manager = self.create_transfer_manager(self.config)

        filename = self.files.create_file_with_size(
            'foo.txt', filesize=1024 * 1024
        )
        self.upload_file(filename, '1mb.txt')

        download_path = os.path.join(self.files.rootdir, '1mb.txt')
        with open(download_path, 'wb') as f:
            future = transfer_manager.download(
                self.bucket_name, '1mb.txt', NonSeekableWriter(f)
            )
            future.result()
        assert_files_equal(filename, download_path)

</source>
</class>

<class classid="5" nclones="2" nlines="39" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_download.py" startline="77" endline="131" pcid="171">
    def test_large_download_exits_quicky_on_exception(self):
        transfer_manager = self.create_transfer_manager(self.config)

        filename = self.files.create_file_with_size(
            'foo.txt', filesize=60 * 1024 * 1024
        )
        self.upload_file(filename, '60mb.txt')

        download_path = os.path.join(self.files.rootdir, '60mb.txt')
        timeout = 10
        bytes_transferring = threading.Event()
        subscriber = WaitForTransferStart(bytes_transferring)
        try:
            with transfer_manager:
                future = transfer_manager.download(
                    self.bucket_name,
                    '60mb.txt',
                    download_path,
                    subscribers=[subscriber],
                )
                if not bytes_transferring.wait(timeout):
                    future.cancel()
                    raise RuntimeError(
                        "Download transfer did not start after waiting for "
                        "%s seconds." % timeout
                    )
                # Raise an exception which should cause the preceding
                # download to cancel and exit quickly
                start_time = time.time()
                raise KeyboardInterrupt()
        except KeyboardInterrupt:
            pass
        end_time = time.time()
        # The maximum time allowed for the transfer manager to exit.
        # This means that it should take less than a couple second after
        # sleeping to exit.
        max_allowed_exit_time = 5
        actual_time_to_exit = end_time - start_time
        self.assertLess(
            actual_time_to_exit,
            max_allowed_exit_time,
            "Failed to exit under {}. Instead exited in {}.".format(
                max_allowed_exit_time, actual_time_to_exit
            ),
        )

        # Make sure the future was cancelled because of the KeyboardInterrupt
        with self.assertRaisesRegex(CancelledError, 'KeyboardInterrupt()'):
            future.result()

        # Make sure the actual file and the temporary do not exist
        # by globbing for the file and any of its extensions
        possible_matches = glob.glob('%s*' % download_path)
        self.assertEqual(possible_matches, [])

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_upload.py" startline="73" endline="130" pcid="242">
    def test_large_upload_exits_quicky_on_exception(self):
        transfer_manager = self.create_transfer_manager(
            self.config, self.client_with_no_retries
        )

        filename = self.get_input_fileobj(
            name='foo.txt', size=20 * 1024 * 1024
        )

        timeout = 10
        bytes_transferring = threading.Event()
        subscriber = WaitForTransferStart(bytes_transferring)
        try:
            with transfer_manager:
                future = transfer_manager.upload(
                    filename,
                    self.bucket_name,
                    '20mb.txt',
                    subscribers=[subscriber],
                )
                if not bytes_transferring.wait(timeout):
                    future.cancel()
                    raise RuntimeError(
                        "Download transfer did not start after waiting for "
                        "%s seconds." % timeout
                    )
                # Raise an exception which should cause the preceding
                # download to cancel and exit quickly
                start_time = time.time()
                raise KeyboardInterrupt()
        except KeyboardInterrupt:
            pass
        end_time = time.time()
        # The maximum time allowed for the transfer manager to exit.
        # This means that it should take less than a couple second after
        # sleeping to exit.
        max_allowed_exit_time = 5
        actual_time_to_exit = end_time - start_time
        self.assertLess(
            actual_time_to_exit,
            max_allowed_exit_time,
            "Failed to exit under {}. Instead exited in {}.".format(
                max_allowed_exit_time, actual_time_to_exit
            ),
        )

        try:
            future.result()
            self.skipTest(
                'Upload completed before interrupted and therefore '
                'could not cancel the upload'
            )
        except CancelledError as e:
            self.assertEqual(str(e), 'KeyboardInterrupt()')
            # If the transfer did get cancelled,
            # make sure the object does not exist.
            self.assertTrue(self.object_not_exists('20mb.txt'))

</source>
</class>

<class classid="6" nclones="3" nlines="18" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_crt.py" startline="79" endline="98" pcid="186">
    def test_upload_below_multipart_chunksize(self):
        transfer = self._create_s3_transfer()
        file_size = 1024 * 1024
        filename = self.files.create_file_with_size(
            'foo.txt', filesize=file_size
        )
        self.addCleanup(self.delete_object, 'foo.txt')

        with transfer:
            future = transfer.upload(
                filename,
                self.bucket_name,
                'foo.txt',
                subscribers=[self.record_subscriber],
            )
            future.result()

        self.assertTrue(self.object_exists('foo.txt'))
        self._assert_subscribers_called(file_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_crt.py" startline="118" endline="143" pcid="188">
    def test_upload_file_above_threshold_with_acl(self):
        transfer = self._create_s3_transfer()
        file_size = 6 * 1024 * 1024
        filename = self.files.create_file_with_size(
            '6mb.txt', filesize=file_size
        )
        extra_args = {'ACL': 'public-read'}
        self.addCleanup(self.delete_object, '6mb.txt')

        with transfer:
            future = transfer.upload(
                filename,
                self.bucket_name,
                '6mb.txt',
                extra_args=extra_args,
                subscribers=[self.record_subscriber],
            )
            future.result()

        self.assertTrue(self.object_exists('6mb.txt'))
        response = self.client.get_object_acl(
            Bucket=self.bucket_name, Key='6mb.txt'
        )
        self._assert_has_public_read_acl(response)
        self._assert_subscribers_called(file_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_crt.py" startline="99" endline="117" pcid="187">
    def test_upload_above_multipart_chunksize(self):
        transfer = self._create_s3_transfer()
        file_size = 20 * 1024 * 1024
        filename = self.files.create_file_with_size(
            '20mb.txt', filesize=file_size
        )
        self.addCleanup(self.delete_object, '20mb.txt')

        with transfer:
            future = transfer.upload(
                filename,
                self.bucket_name,
                '20mb.txt',
                subscribers=[self.record_subscriber],
            )
            future.result()
        self.assertTrue(self.object_exists('20mb.txt'))
        self._assert_subscribers_called(file_size)

</source>
</class>

<class classid="7" nclones="2" nlines="17" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_crt.py" startline="207" endline="226" pcid="191">
    def test_download_below_threshold(self):
        transfer = self._create_s3_transfer()
        filename = self.files.create_file_with_size(
            'foo.txt', filesize=1024 * 1024
        )
        self.upload_file(filename, 'foo.txt')

        download_path = os.path.join(self.files.rootdir, 'downloaded.txt')
        with transfer:
            future = transfer.download(
                self.bucket_name,
                'foo.txt',
                download_path,
                subscribers=[self.record_subscriber],
            )
            future.result()
        file_size = self.osutil.get_file_size(download_path)
        self._assert_subscribers_called(file_size)
        assert_files_equal(filename, download_path)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_crt.py" startline="227" endline="246" pcid="192">
    def test_download_above_threshold(self):
        transfer = self._create_s3_transfer()
        filename = self.files.create_file_with_size(
            'foo.txt', filesize=20 * 1024 * 1024
        )
        self.upload_file(filename, 'foo.txt')

        download_path = os.path.join(self.files.rootdir, 'downloaded.txt')
        with transfer:
            future = transfer.download(
                self.bucket_name,
                'foo.txt',
                download_path,
                subscribers=[self.record_subscriber],
            )
            future.result()
        assert_files_equal(filename, download_path)
        file_size = self.osutil.get_file_size(download_path)
        self._assert_subscribers_called(file_size)

</source>
</class>

<class classid="8" nclones="2" nlines="14" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_s3transfer.py" startline="182" endline="204" pcid="214">
    def test_progress_callback_on_upload(self):
        self.amount_seen = 0
        lock = threading.Lock()

        def progress_callback(amount):
            with lock:
                self.amount_seen += amount

        transfer = self.create_s3_transfer()
        filename = self.files.create_file_with_size(
            '20mb.txt', filesize=20 * 1024 * 1024
        )
        transfer.upload_file(
            filename, self.bucket_name, '20mb.txt', callback=progress_callback
        )
        self.addCleanup(self.delete_object, '20mb.txt')

        # The callback should have been called enough times such that
        # the total amount of bytes we've seen (via the "amount"
        # arg to the callback function) should be the size
        # of the file we uploaded.
        self.assertEqual(self.amount_seen, 20 * 1024 * 1024)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/s3transfer/test_s3transfer.py" startline="205" endline="228" pcid="216">
    def test_callback_called_once_with_sigv4(self):
        # Verify #98, where the callback was being invoked
        # twice when using signature version 4.
        self.amount_seen = 0
        lock = threading.Lock()

        def progress_callback(amount):
            with lock:
                self.amount_seen += amount

        client = self.session.create_client(
            's3', self.region, config=Config(signature_version='s3v4')
        )
        transfer = s3transfer.S3Transfer(client)
        filename = self.files.create_file_with_size(
            '10mb.txt', filesize=10 * 1024 * 1024
        )
        transfer.upload_file(
            filename, self.bucket_name, '10mb.txt', callback=progress_callback
        )
        self.addCleanup(self.delete_object, '10mb.txt')

        self.assertEqual(self.amount_seen, 10 * 1024 * 1024)

</source>
</class>

<class classid="9" nclones="2" nlines="17" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/integration/test_cli.py" startline="464" endline="495" pcid="291">

    def test_profile_arg_has_precedence_over_env_vars(self):
        # At a high level, we're going to set access_key/secret_key
        # via env vars, but ensure that a --profile <foo> results
        # in creds being retrieved from the shared creds file
        # and not from env vars.
        env_vars = os.environ.copy()
        with temporary_file('w') as f:
            env_vars.pop('AWS_PROFILE', None)
            env_vars.pop('AWS_DEFAULT_PROFILE', None)
            # 'aws configure list' only shows 4 values
            # from the credentials so we'll show
            # 4 char values.
            env_vars['AWS_ACCESS_KEY_ID'] = 'enva'
            env_vars['AWS_SECRET_ACCESS_KEY'] = 'envb'
            env_vars['AWS_SHARED_CREDENTIALS_FILE'] = f.name
            env_vars['AWS_CONFIG_FILE'] = 'does-not-exist-foo'
            f.write(
                '[from_argument]\n'
                'aws_access_key_id=proa\n'
                'aws_secret_access_key=prob\n'
            )
            f.flush()
            p = aws('configure list --profile from_argument',
                    env_vars=env_vars)
            # 1. We should see the profile name being set.
            self.assertIn('from_argument', p.stdout)
            # 2. The creds should be proa/prob, which come
            #    from the "from_argument" profile.
            self.assertIn('proa', p.stdout)
            self.assertIn('prob', p.stdout)
            self.assertIn('shared-credentials-file', p.stdout)
</source>
<source file="systems/aws-cli-2.4.27/tests/integration/test_cli.py" startline="496" endline="527" pcid="292">

    def test_profile_arg_wins_over_profile_env_var(self):
        env_vars = os.environ.copy()
        with temporary_file('w') as f:
            # Remove existing profile related env vars.
            env_vars.pop('AWS_PROFILE', None)
            env_vars.pop('AWS_DEFAULT_PROFILE', None)
            env_vars['AWS_SHARED_CREDENTIALS_FILE'] = f.name
            env_vars['AWS_CONFIG_FILE'] = 'does-not-exist-foo'
            f.write(
                '[from_env_var]\n'
                'aws_access_key_id=enva\n'
                'aws_secret_access_key=envb\n'
                '\n'
                '[from_argument]\n'
                'aws_access_key_id=proa\n'
                'aws_secret_access_key=prob\n'
            )
            f.flush()
            # Now we set the current profile via env var:
            env_vars['AWS_PROFILE'] = 'from_env_var'
            # If we specify the --profile argument, that
            # value should win over the AWS_PROFILE env var.
            p = aws('configure list --profile from_argument',
                    env_vars=env_vars)
            # 1. We should see the profile name being set.
            self.assertIn('from_argument', p.stdout)
            # 2. The creds should be profa/profb, which come
            #    from the "from_argument" profile.
            self.assertIn('proa', p.stdout)
            self.assertIn('prob', p.stdout)

</source>
</class>

<class classid="10" nclones="2" nlines="19" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="28" endline="52" pcid="296">
    def setUp(self):
        super(TestAssumeRoleCredentials, self).setUp()
        self.environ = os.environ.copy()
        self.parent_session = Session()
        self.iam = self.parent_session.create_client('iam')
        self.sts = self.parent_session.create_client('sts')
        self.tempdir = tempfile.mkdtemp()
        self.config_file = os.path.join(self.tempdir, 'config')

        # A role trust policy that allows the current account to call assume
        # role on itself.
        account_id = self.sts.get_caller_identity()['Account']
        self.role_policy = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "arn:aws:iam::%s:root" % account_id
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="135" endline="165" pcid="376">
    def setUp(self):
        self.env_original = os.environ.copy()
        self.environ_copy = os.environ.copy()
        super(TestAssumeRoleCredentials, self).setUp()
        os.environ = self.environ_copy
        # The tests rely on manipulating AWS_CONFIG_FILE,
        # but we also need to make sure we don't accidentally
        # pick up the ~/.aws/credentials file either.
        os.environ['AWS_SHARED_CREDENTIALS_FILE'] = str(uuid4())
        self.parent_session = Session()
        self.iam = self.parent_session.create_client('iam')
        self.sts = self.parent_session.create_client('sts')
        self.tempdir = tempfile.mkdtemp()
        self.config_file = os.path.join(self.tempdir, 'config')

        # A role trust policy that allows the current account to call assume
        # role on itself.
        account_id = self.sts.get_caller_identity()['Account']
        self.role_policy = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "arn:aws:iam::%s:root" % account_id
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }

</source>
</class>

<class classid="11" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="60" endline="74" pcid="299">
    def create_role(self, policy_document, policy_arn=None):
        name = self.random_name()
        response = self.iam.create_role(
            RoleName=name,
            AssumeRolePolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(self.iam.delete_role, RoleName=name)
        if policy_arn:
            self.iam.attach_role_policy(RoleName=name, PolicyArn=policy_arn)
            self.addCleanup(
                self.iam.detach_role_policy, RoleName=name,
                PolicyArn=policy_arn
            )
        return response['Role']

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="174" endline="188" pcid="379">
    def create_role(self, policy_document, policy_arn=None):
        name = self.random_name()
        response = self.iam.create_role(
            RoleName=name,
            AssumeRolePolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(self.iam.delete_role, RoleName=name)
        if policy_arn:
            self.iam.attach_role_policy(RoleName=name, PolicyArn=policy_arn)
            self.addCleanup(
                self.iam.detach_role_policy, RoleName=name,
                PolicyArn=policy_arn
            )
        return response['Role']

</source>
</class>

<class classid="12" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="75" endline="91" pcid="300">
    def create_user(self, policy_arns):
        name = self.random_name()
        user = self.iam.create_user(UserName=name)['User']
        self.addCleanup(self.iam.delete_user, UserName=name)

        for arn in policy_arns:
            self.iam.attach_user_policy(
                UserName=name,
                PolicyArn=arn
            )
            self.addCleanup(
                self.iam.detach_user_policy,
                UserName=name, PolicyArn=arn
            )

        return user

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="189" endline="205" pcid="380">
    def create_user(self, policy_arns):
        name = self.random_name()
        user = self.iam.create_user(UserName=name)['User']
        self.addCleanup(self.iam.delete_user, UserName=name)

        for arn in policy_arns:
            self.iam.attach_user_policy(
                UserName=name,
                PolicyArn=arn
            )
            self.addCleanup(
                self.iam.detach_user_policy,
                UserName=name, PolicyArn=arn
            )

        return user

</source>
</class>

<class classid="13" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="129" endline="149" pcid="303">
    def create_assume_policy(self, role_arn):
        policy_document = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": role_arn,
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        name = self.random_name()
        response = self.iam.create_policy(
            PolicyName=name,
            PolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(
            self.iam.delete_policy, PolicyArn=response['Policy']['Arn']
        )
        return response['Policy']['Arn']

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="250" endline="270" pcid="384">
    def create_assume_policy(self, role_arn):
        policy_document = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": role_arn,
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        name = self.random_name()
        response = self.iam.create_policy(
            PolicyName=name,
            PolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(
            self.iam.delete_policy, PolicyArn=response['Policy']['Arn']
        )
        return response['Policy']['Arn']

</source>
</class>

<class classid="14" nclones="2" nlines="27" similarity="96">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="162" endline="214" pcid="305">
    def test_recursive_assume_role(self):
        # Create the final role, the one that will actually have access to s3
        final_role = self.create_role(self.role_policy, S3_READ_POLICY_ARN)

        # Create the role that can assume the final role
        middle_policy_arn = self.create_assume_policy(final_role['Arn'])
        middle_role = self.create_role(self.role_policy, middle_policy_arn)

        # Create a user that can only assume the middle-man role, and then get
        # static credentials for it.
        user_policy_arn = self.create_assume_policy(middle_role['Arn'])
        user = self.create_user([user_policy_arn])
        user_creds = self.create_creds(user['UserName'])

        # Setup the config file with the profiles we'll be using. For
        # convenience static credentials are placed here instead of putting
        # them in the credentials file.
        config = (
            '[default]\n'
            'aws_access_key_id = %s\n'
            'aws_secret_access_key = %s\n'
            '[profile middle]\n'
            'source_profile = default\n'
            'role_arn = %s\n'
            '[profile final]\n'
            'source_profile = middle\n'
            'role_arn = %s\n'
        )
        config = config % (
            user_creds['AccessKeyId'], user_creds['SecretAccessKey'],
            middle_role['Arn'], final_role['Arn']
        )
        with open(self.config_file, 'w') as f:
            f.write(config)

        # Wait for IAM permissions to propagate
        middle_creds = self.wait_for_assume_role(
            role_arn=middle_role['Arn'],
            access_key=user_creds['AccessKeyId'],
            secret_key=user_creds['SecretAccessKey'],
        )
        self.wait_for_assume_role(
            role_arn=final_role['Arn'],
            access_key=middle_creds['AccessKeyId'],
            secret_key=middle_creds['SecretAccessKey'],
            token=middle_creds['SessionToken'],
        )

        # Configure our credentials file to be THE credentials file
        self.environ['AWS_CONFIG_FILE'] = self.config_file

        self.assert_s3_read_only_profile(profile_name='final')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="286" endline="338" pcid="386">
    def test_recursive_assume_role(self):
        # Create the final role, the one that will actually have access to s3
        final_role = self.create_role(self.role_policy, S3_READ_POLICY_ARN)

        # Create the role that can assume the final role
        middle_policy_arn = self.create_assume_policy(final_role['Arn'])
        middle_role = self.create_role(self.role_policy, middle_policy_arn)

        # Create a user that can only assume the middle-man role, and then get
        # static credentials for it.
        user_policy_arn = self.create_assume_policy(middle_role['Arn'])
        user = self.create_user([user_policy_arn])
        user_creds = self.create_creds(user['UserName'])

        # Setup the config file with the profiles we'll be using. For
        # convenience static credentials are placed here instead of putting
        # them in the credentials file.
        config = (
            '[default]\n'
            'aws_access_key_id = %s\n'
            'aws_secret_access_key = %s\n'
            '[profile middle]\n'
            'source_profile = default\n'
            'role_arn = %s\n'
            '[profile final]\n'
            'source_profile = middle\n'
            'role_arn = %s\n'
        )
        config = config % (
            user_creds['AccessKeyId'], user_creds['SecretAccessKey'],
            middle_role['Arn'], final_role['Arn']
        )
        with open(self.config_file, 'w') as f:
            f.write(config)

        # Wait for IAM permissions to propagate
        middle_creds = self.wait_for_assume_role(
            role_arn=middle_role['Arn'],
            access_key=user_creds['AccessKeyId'],
            secret_key=user_creds['SecretAccessKey'],
        )
        self.wait_for_assume_role(
            role_arn=final_role['Arn'],
            access_key=middle_creds['AccessKeyId'],
            secret_key=middle_creds['SecretAccessKey'],
            token=middle_creds['SessionToken'],
        )

        # Configure our credentials file to be THE credentials file
        os.environ['AWS_CONFIG_FILE'] = self.config_file

        self.assert_s3_read_only_session(Session(profile='final'))

</source>
</class>

<class classid="15" nclones="2" nlines="19" similarity="94">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="215" endline="249" pcid="306">
    def test_assume_role_with_credential_source(self):
        # Create a role with read access to S3
        role = self.create_role(self.role_policy, S3_READ_POLICY_ARN)

        # Create a user that can assume the role and get static credentials
        # for it.
        user_policy_arn = self.create_assume_policy(role['Arn'])
        user = self.create_user([user_policy_arn])
        user_creds = self.create_creds(user['UserName'])

        # Setup the config file with the profile we'll be using.
        config = (
            '[profile assume]\n'
            'role_arn = %s\n'
            'credential_source = Environment\n'
        )
        config = config % role['Arn']
        with open(self.config_file, 'w') as f:
            f.write(config)

        # Wait for IAM permissions to propagate
        self.wait_for_assume_role(
            role_arn=role['Arn'],
            access_key=user_creds['AccessKeyId'],
            secret_key=user_creds['SecretAccessKey'],
        )

        # Setup the environment so that our new config file is THE config
        # file and add the expected credentials since we're using the
        # environment as our credential source.
        self.environ['AWS_CONFIG_FILE'] = self.config_file
        self.environ['AWS_SECRET_ACCESS_KEY'] = user_creds['SecretAccessKey']
        self.environ['AWS_ACCESS_KEY_ID'] = user_creds['AccessKeyId']

        self.assert_s3_read_only_profile(profile_name='assume')
</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="339" endline="373" pcid="387">
    def test_assume_role_with_credential_source(self):
        # Create a role with read access to S3
        role = self.create_role(self.role_policy, S3_READ_POLICY_ARN)

        # Create a user that can assume the role and get static credentials
        # for it.
        user_policy_arn = self.create_assume_policy(role['Arn'])
        user = self.create_user([user_policy_arn])
        user_creds = self.create_creds(user['UserName'])

        # Setup the config file with the profile we'll be using.
        config = (
            '[profile assume]\n'
            'role_arn = %s\n'
            'credential_source = Environment\n'
        )
        config = config % role['Arn']
        with open(self.config_file, 'w') as f:
            f.write(config)

        # Wait for IAM permissions to propagate
        self.wait_for_assume_role(
            role_arn=role['Arn'],
            access_key=user_creds['AccessKeyId'],
            secret_key=user_creds['SecretAccessKey'],
        )

        # Setup the environment so that our new config file is THE config
        # file and add the expected credentials since we're using the
        # environment as our credential source.
        os.environ['AWS_CONFIG_FILE'] = self.config_file
        os.environ['AWS_SECRET_ACCESS_KEY'] = user_creds['SecretAccessKey']
        os.environ['AWS_ACCESS_KEY_ID'] = user_creds['AccessKeyId']

        self.assert_s3_read_only_session(Session(profile='assume'))
</source>
</class>

<class classid="16" nclones="3" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="190" endline="201" pcid="408">
    def _wait_for_key(self, bucket_name, key_name, extra_params=None,
                      min_successes=3, exists=True):
        if exists:
            waiter = self.client.get_waiter('object_exists')
        else:
            waiter = self.client.get_waiter('object_not_exists')
        params = {'Bucket': bucket_name, 'Key': key_name}
        if extra_params is not None:
            params.update(extra_params)
        for _ in range(min_successes):
            waiter.wait(**params)

</source>
<source file="systems/aws-cli-2.4.27/tests/__init__.py" startline="660" endline="671" pcid="9317">
    def _wait_for_key(self, bucket_name, key_name, extra_params=None,
                      min_successes=3, exists=True):
        client = self._create_client_for_bucket(bucket_name)
        if exists:
            waiter = client.get_waiter('object_exists')
        else:
            waiter = client.get_waiter('object_not_exists')
        params = {'Bucket': bucket_name, 'Key': key_name}
        if extra_params is not None:
            params.update(extra_params)
        for _ in range(min_successes):
            waiter.wait(**params)
</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="905" endline="917" pcid="9984">
    def _wait_for_key(self, bucket_name, key_name, extra_params=None,
                      min_successes=3, exists=True):
        client = self.create_client_for_bucket(bucket_name)
        if exists:
            waiter = client.get_waiter('object_exists')
        else:
            waiter = client.get_waiter('object_not_exists')
        params = {'Bucket': bucket_name, 'Key': key_name}
        if extra_params is not None:
            params.update(extra_params)
        for _ in range(min_successes):
            waiter.wait(**params)

</source>
</class>

<class classid="17" nclones="2" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="326" endline="340" pcid="425">
    def test_can_paginate(self):
        for i in range(5):
            key_name = 'key%s' % i
            self.create_object(key_name)
        # Eventual consistency.
        time.sleep(3)
        paginator = self.client.get_paginator('list_objects')
        generator = paginator.paginate(MaxKeys=1,
                                       Bucket=self.bucket_name)
        responses = list(generator)
        self.assertEqual(len(responses), 5, responses)
        key_names = [el['Contents'][0]['Key']
                     for el in responses]
        self.assertEqual(key_names, ['key0', 'key1', 'key2', 'key3', 'key4'])

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="342" endline="357" pcid="426">
    def test_can_paginate_with_page_size(self):
        for i in range(5):
            key_name = 'key%s' % i
            self.create_object(key_name)
        # Eventual consistency.
        time.sleep(3)
        paginator = self.client.get_paginator('list_objects')
        generator = paginator.paginate(PaginationConfig={'PageSize': 1},
                                       Bucket=self.bucket_name)
        responses = list(generator)
        self.assertEqual(len(responses), 5, responses)
        data = [r for r in responses]
        key_names = [el['Contents'][0]['Key']
                     for el in data]
        self.assertEqual(key_names, ['key0', 'key1', 'key2', 'key3', 'key4'])

</source>
</class>

<class classid="18" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="480" endline="494" pcid="435">
    def test_unicode_system_character(self):
        # Verify we can use a unicode system character which would normally
        # break the xml parser
        key_name = 'foo\x08'
        self.create_object(key_name)
        self.addCleanup(self.delete_object, key_name, self.bucket_name)
        parsed = self.client.list_objects(Bucket=self.bucket_name)
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], key_name)

        parsed = self.client.list_objects(Bucket=self.bucket_name,
                                          EncodingType='url')
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], 'foo%08')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="495" endline="509" pcid="436">
    def test_unicode_system_character_with_list_v2(self):
        # Verify we can use a unicode system character which would normally
        # break the xml parser
        key_name = 'foo\x08'
        self.create_object(key_name)
        self.addCleanup(self.delete_object, key_name, self.bucket_name)
        parsed = self.client.list_objects_v2(Bucket=self.bucket_name)
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], key_name)

        parsed = self.client.list_objects_v2(Bucket=self.bucket_name,
                                          EncodingType='url')
        self.assertEqual(len(parsed['Contents']), 1)
        self.assertEqual(parsed['Contents'][0]['Key'], 'foo%08')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="510" endline="524" pcid="437">
    def test_unicode_system_character_with_list_object_versions(self):
        # Verify we can use a unicode system character which would normally
        # break the xml parser
        key_name = 'foo\x03'
        self.create_object(key_name)
        self.addCleanup(self.delete_object, key_name, self.bucket_name)
        parsed = self.client.list_object_versions(Bucket=self.bucket_name)
        self.assertEqual(len(parsed['Versions']), 1)
        self.assertEqual(parsed['Versions'][0]['Key'], key_name)

        parsed = self.client.list_object_versions(Bucket=self.bucket_name,
                                          EncodingType='url')
        self.assertEqual(len(parsed['Versions']), 1)
        self.assertEqual(parsed['Versions'][0]['Key'], 'foo%03')

</source>
</class>

<class classid="19" nclones="3" nlines="10" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="588" endline="601" pcid="442">
    def test_copy_with_quoted_char(self):
        key_name = 'a+b/foo'
        self.create_object(key_name=key_name)

        key_name2 = key_name + 'bar'
        self.client.copy_object(
            Bucket=self.bucket_name, Key=key_name2,
            CopySource='%s/%s' % (self.bucket_name, key_name))

        # Now verify we can retrieve the copied object.
        data = self.client.get_object(
            Bucket=self.bucket_name, Key=key_name2)
        self.assertEqual(data['Body'].read().decode('utf-8'), 'foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="616" endline="630" pcid="444">
    def test_can_copy_with_dict_form(self):
        key_name = 'a+b/foo?versionId=abcd'
        self.create_object(key_name=key_name)

        key_name2 = key_name + 'bar'
        self.client.copy_object(
            Bucket=self.bucket_name, Key=key_name2,
            CopySource={'Bucket': self.bucket_name,
                        'Key': key_name})

        # Now verify we can retrieve the copied object.
        data = self.client.get_object(
            Bucket=self.bucket_name, Key=key_name2)
        self.assertEqual(data['Body'].read().decode('utf-8'), 'foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="602" endline="615" pcid="443">
    def test_copy_with_query_string(self):
        key_name = 'a+b/foo?notVersionid=bar'
        self.create_object(key_name=key_name)

        key_name2 = key_name + 'bar'
        self.client.copy_object(
            Bucket=self.bucket_name, Key=key_name2,
            CopySource='%s/%s' % (self.bucket_name, key_name))

        # Now verify we can retrieve the copied object.
        data = self.client.get_object(
            Bucket=self.bucket_name, Key=key_name2)
        self.assertEqual(data['Body'].read().decode('utf-8'), 'foo')

</source>
</class>

<class classid="20" nclones="2" nlines="13" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="671" endline="685" pcid="449">
    def test_presign_sigv4(self):
        self.client_config.signature_version = 's3v4'
        self.client = self.session.create_client(
            's3', config=self.client_config)
        presigned_url = self.client.generate_presigned_url(
            'get_object', Params={'Bucket': self.bucket_name, 'Key': self.key})
        self.assertTrue(
            presigned_url.startswith(
                'https://%s.s3.us-east-1.amazonaws.com/%s' % (
                    self.bucket_name, self.key)),
            "Host was suppose to be the us-east-1 endpoint, instead "
            "got: %s" % presigned_url)
        # Try to retrieve the object using the presigned url.
        self.assertEqual(http_get(presigned_url).data, b'foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="730" endline="752" pcid="452">
    def test_presign_sigv4(self):
        # For a newly created bucket, you can't use virtualhosted
        # addressing and 's3v4' due to the backwards compat behavior
        # using '.s3.amazonaws.com' for anything in the AWS partition.
        # Instead you either have to use the older 's3' signature version
        # of you have to use path style addressing.  The latter is being
        # done here.
        self.client_config.signature_version = 's3v4'
        self.client_config.s3 = {'addressing_style': 'path'}
        self.client = self.session.create_client(
            's3', config=self.client_config)
        presigned_url = self.client.generate_presigned_url(
            'get_object', Params={'Bucket': self.bucket_name, 'Key': self.key})

        self.assertTrue(
            presigned_url.startswith(
                'https://s3.us-west-2.amazonaws.com/%s/%s' % (
                    self.bucket_name, self.key)),
            "Host was suppose to be the us-west-2 endpoint, instead "
            "got: %s" % presigned_url)
        # Try to retrieve the object using the presigned url.
        self.assertEqual(http_get(presigned_url).data, b'foo')

</source>
</class>

<class classid="21" nclones="2" nlines="21" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="686" endline="720" pcid="450">
    def test_presign_post_sigv4(self):
        self.client_config.signature_version = 's3v4'
        self.client = self.session.create_client(
            's3', config=self.client_config)

        # Create some of the various supported conditions.
        conditions = [
            {"acl": 'public-read'},
        ]

        # Create the fields that follow the policy.
        fields = {
            'acl': 'public-read',
        }

        # Retrieve the args for the presigned post.
        post_args = self.client.generate_presigned_post(
            self.bucket_name, self.key, Fields=fields,
            Conditions=conditions)

        # Make sure that the form can be posted successfully.
        files = {'file': ('baz', 'some data')}

        # Make sure the correct endpoint is being used
        self.assertTrue(
            post_args['url'].startswith(
                'https://%s.s3.us-east-1.amazonaws.com/' % self.bucket_name),
            "Host was suppose to use us-east-1 endpoint, instead "
            "got: %s" % post_args['url'])

        r = http_post(post_args['url'], data=post_args['fields'],
                      files=files)
        self.assertEqual(r.status, 204)


</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="753" endline="786" pcid="453">
    def test_presign_post_sigv4(self):
        self.client_config.signature_version = 's3v4'
        self.client = self.session.create_client(
            's3', config=self.client_config)

        # Create some of the various supported conditions.
        conditions = [
            {"acl": "public-read"},
        ]

        # Create the fields that follow the policy.
        fields = {
            'acl': 'public-read',
        }

        # Retrieve the args for the presigned post.
        post_args = self.client.generate_presigned_post(
            self.bucket_name, self.key, Fields=fields, Conditions=conditions)

        # Make sure that the form can be posted successfully.
        files = {'file': ('baz', 'some data')}

        # Make sure the correct endpoint is being used
        self.assertTrue(
            post_args['url'].startswith(
                'https://%s.s3.us-west-2.amazonaws.com/' % self.bucket_name),
            "Host was suppose to use DNS style, instead "
            "got: %s" % post_args['url'])

        r = http_post(post_args['url'], data=post_args['fields'],
                      files=files)
        self.assertEqual(r.status, 204)


</source>
</class>

<class classid="22" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="789" endline="803" pcid="454">
    def test_bucket_in_other_region(self):
        # This verifies expect 100-continue behavior.  We previously
        # had a bug where we did not support this behavior and trying to
        # create a bucket and immediately PutObject with a file like object
        # would actually cause errors.
        client = self.session.create_client('s3', 'us-east-1')
        with temporary_file('w') as f:
            f.write('foobarbaz' * 1024 * 1024)
            f.flush()
            with open(f.name, 'rb') as body_file:
                response = client.put_object(
                    Bucket=self.bucket_name,
                    Key='foo.txt', Body=body_file)
            self.assert_status_code(response, 200)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="804" endline="816" pcid="455">
    def test_bucket_in_other_region_using_http(self):
        client = self.session.create_client(
            's3', 'us-east-1', endpoint_url='http://s3.amazonaws.com/')
        with temporary_file('w') as f:
            f.write('foobarbaz' * 1024 * 1024)
            f.flush()
            with open(f.name, 'rb') as body_file:
                response = client.put_object(
                    Bucket=self.bucket_name,
                    Key='foo.txt', Body=body_file)
            self.assert_status_code(response, 200)


</source>
</class>

<class classid="23" nclones="2" nlines="19" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="845" endline="866" pcid="459">
    def test_paginate_list_objects_unicode(self):
        key_names = [
            u'non-ascii-key-\xe4\xf6\xfc-01.txt',
            u'non-ascii-key-\xe4\xf6\xfc-02.txt',
            u'non-ascii-key-\xe4\xf6\xfc-03.txt',
            u'non-ascii-key-\xe4\xf6\xfc-04.txt',
        ]
        for key in key_names:
            response = self.client.put_object(Bucket=self.bucket_name,
                                              Key=key, Body='')
            self.assert_status_code(response, 200)

        list_objs_paginator = self.client.get_paginator('list_objects')
        key_refs = []
        for response in list_objs_paginator.paginate(Bucket=self.bucket_name,
                                                     PaginationConfig={
                                                         'PageSize': 2}):
            for content in response['Contents']:
                key_refs.append(content['Key'])

        self.assertEqual(key_names, key_refs)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_s3.py" startline="868" endline="889" pcid="460">
    def test_paginate_list_objects_safe_chars(self):
        key_names = [
            u'-._~safe-chars-key-01.txt',
            u'-._~safe-chars-key-02.txt',
            u'-._~safe-chars-key-03.txt',
            u'-._~safe-chars-key-04.txt',
        ]
        for key in key_names:
            response = self.client.put_object(Bucket=self.bucket_name,
                                              Key=key, Body='')
            self.assert_status_code(response, 200)

        list_objs_paginator = self.client.get_paginator('list_objects')
        key_refs = []
        for response in list_objs_paginator.paginate(Bucket=self.bucket_name,
                                                     PaginationConfig={
                                                         'PageSize': 2}):
            for content in response['Contents']:
                key_refs.append(content['Key'])

        self.assertEqual(key_names, key_refs)

</source>
</class>

<class classid="24" nclones="2" nlines="15" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_waiters.py" startline="27" endline="42" pcid="488">
    def test_create_table_and_wait(self):
        table_name = 'botocoretest-%s' % random_chars(10)
        self.client.create_table(
            TableName=table_name,
            ProvisionedThroughput={"ReadCapacityUnits": 5,
                                   "WriteCapacityUnits": 5},
            KeySchema=[{"AttributeName": "foo", "KeyType": "HASH"}],
            AttributeDefinitions=[{"AttributeName": "foo",
                                   "AttributeType": "S"}])
        self.addCleanup(self.client.delete_table, TableName=table_name)
        waiter = self.client.get_waiter('table_exists')
        waiter.wait(TableName=table_name)
        parsed = self.client.describe_table(TableName=table_name)
        self.assertEqual(parsed['Table']['TableStatus'], 'ACTIVE')


</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/test_waiters.py" startline="27" endline="47" pcid="551">
    def test_wait_table_exists(self):
        # Create a table.
        table_name = 'awscliddb-%s' % random_chars(10)
        self.client.create_table(
            TableName=table_name,
            ProvisionedThroughput={"ReadCapacityUnits": 5,
                                   "WriteCapacityUnits": 5},
            KeySchema=[{"AttributeName": "foo", "KeyType": "HASH"}],
            AttributeDefinitions=[{"AttributeName": "foo",
                                   "AttributeType": "S"}])
        self.addCleanup(self.client.delete_table, TableName=table_name)

        # Wait for the table to be active.
        p = aws(
            'dynamodb wait table-exists --table-name %s --region us-west-2' %
            table_name)
        self.assertEqual(p.rc, 0)

        # Make sure the table is active.
        parsed = self.client.describe_table(TableName=table_name)
        self.assertEqual(parsed['Table']['TableStatus'], 'ACTIVE')
</source>
</class>

<class classid="25" nclones="2" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_client_http.py" startline="63" endline="81" pcid="515">
            def do_CONNECT(self):
                remote_host, remote_port = self.path.split(':')

                # Ensure we're sending the correct host header in CONNECT
                if self.headers.get('host') != remote_host:
                    self.send_response(400)
                    self.end_headers()
                    return

                self.send_response(200)
                self.end_headers()

                remote_host, remote_port = self.path.split(':')
                remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                remote_socket.connect((remote_host, int(remote_port)))

                self._tunnel(self.request, remote_socket)
                remote_socket.close()

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_client_http.py" startline="243" endline="258" pcid="530">
    def do_CONNECT(self):
        if not self.validate_auth():
            self.send_response(401)
            self.end_headers()
            return

        self.send_response(200)
        self.end_headers()

        remote_host, remote_port = self.path.split(':')
        remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        remote_socket.connect((remote_host, int(remote_port)))

        self._tunnel(self.request, remote_socket)
        remote_socket.close()

</source>
</class>

<class classid="26" nclones="3" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/test_codecommit.py" startline="61" endline="73" pcid="547">
    def test_integration_using_cli_driver(self, dt_mock, stdout_mock):
        dt_mock.utcnow.return_value = datetime(2010, 10, 8)
        driver = create_clidriver()
        entry_point = AWSCLIEntryPoint(driver)
        rc = entry_point.main('codecommit credential-helper get'.split())
        output = stdout_mock.getvalue().strip()
        self.assertEquals(
            ('username=foo\n'
             'password=20101008T000000Z'
             '7dc259e2d505af354a1219b9bcd784bd384dc706efa0d9aefc571f214be4c89c'),
             output)
        self.assertEquals(0, rc)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/test_codecommit.py" startline="93" endline="106" pcid="549">
    def test_integration_vpc_using_cli_driver(self, dt_mock, stdout_mock):
        dt_mock.utcnow.return_value = datetime(2010, 10, 8)
        driver = create_clidriver()
        entry_point = AWSCLIEntryPoint(driver)
        rc = entry_point.main('codecommit credential-helper get'.split())
        output = stdout_mock.getvalue().strip()
        self.assertEquals(
            ('username=foo\n'
             'password=20101008T000000Z'
             '9ed987cc6336c3de2d9f06b9236c7a9fd76b660b080db15983290e636dbfbd6b'),
             output)
        self.assertEquals(0, rc)


</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/test_codecommit.py" startline="77" endline="89" pcid="548">
    def test_integration_fips_using_cli_driver(self, dt_mock, stdout_mock):
        dt_mock.utcnow.return_value = datetime(2010, 10, 8)
        driver = create_clidriver()
        entry_point = AWSCLIEntryPoint(driver)
        rc = entry_point.main('codecommit credential-helper get'.split())
        output = stdout_mock.getvalue().strip()
        self.assertEquals(
            ('username=foo\n'
             'password=20101008T000000Z'
             '500037cb3514b3fe01ebcda7c80973f5b4c0d8199a7a6563b85fd6edf272d460'),
             output)
        self.assertEquals(0, rc)

</source>
</class>

<class classid="27" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="200" endline="213" pcid="566">
    def test_mv_s3_to_s3_multipart(self, s3_utils, shared_bucket,
                                   shared_copy_bucket):
        from_bucket = shared_bucket
        to_bucket = shared_copy_bucket
        file_contents = six.BytesIO(b'abcd' * (1024 * 1024 * 10))
        s3_utils.put_object(from_bucket, 'foo.txt', file_contents)

        p = aws('s3 mv s3://%s/foo.txt s3://%s/foo.txt' % (from_bucket,
                                                           to_bucket))
        self.assert_no_errors(p)
        s3_utils.assert_key_contents_equal(to_bucket, 'foo.txt', file_contents)
        # And verify that the object no longer exists in the from_bucket.
        assert s3_utils.key_not_exists(from_bucket, key_name='foo.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="383" endline="395" pcid="577">
    def test_cp_s3_s3_multipart(self, s3_utils, shared_bucket,
                                shared_copy_bucket):
        from_bucket = shared_bucket
        to_bucket = shared_copy_bucket
        file_contents = six.BytesIO(b'abcd' * (1024 * 1024 * 10))
        s3_utils.put_object(from_bucket, 'foo.txt', file_contents)

        p = aws('s3 cp s3://%s/foo.txt s3://%s/foo.txt' %
                (from_bucket, to_bucket))
        self.assert_no_errors(p)
        s3_utils.assert_key_contents_equal(to_bucket, 'foo.txt', file_contents)
        assert s3_utils.key_exists(from_bucket, key_name='foo.txt')

</source>
</class>

<class classid="28" nclones="3" nlines="16" similarity="87">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="836" endline="852" pcid="601">
    def test_cp_region(self, files, s3_utils, shared_non_dns_compatible_bucket,
                       shared_non_dns_compatible_us_east_1_bucket):
        src_region = 'us-west-2'
        src_bucket = shared_non_dns_compatible_bucket
        dest_region = 'us-east-1'
        dest_bucket = shared_non_dns_compatible_us_east_1_bucket
        files.create_file('foo.txt', 'foo')
        p = aws('s3 sync %s s3://%s/ --region %s' %
                (files.rootdir, src_bucket, src_region))
        self.assert_no_errors(p)
        p2 = aws('s3 cp s3://%s/ s3://%s/ --region %s --source-region %s '
                 '--recursive' %
                 (src_bucket, dest_bucket, dest_region,
                  src_region))
        assert p2.rc == 0, p2.stdout
        assert s3_utils.key_exists(dest_bucket, 'foo.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="870" endline="887" pcid="603">
    def test_mv_region(self, files, s3_utils, shared_non_dns_compatible_bucket,
                       shared_non_dns_compatible_us_east_1_bucket):
        src_region = 'us-west-2'
        src_bucket = shared_non_dns_compatible_bucket
        dest_region = 'us-east-1'
        dest_bucket = shared_non_dns_compatible_us_east_1_bucket
        files.create_file('foo.txt', 'foo')
        p = aws('s3 sync %s s3://%s/ --region %s' %
                (files.rootdir, src_bucket, src_region))
        self.assert_no_errors(p)
        p2 = aws('s3 mv s3://%s/ s3://%s/ --region %s --source-region %s '
                 '--recursive' %
                 (src_bucket, dest_bucket, dest_region,
                  src_region))
        assert p2.rc == 0, p2.stdout
        assert s3_utils.key_exists(dest_bucket, 'foo.txt')
        assert s3_utils.key_not_exists(src_bucket, 'foo.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="853" endline="869" pcid="602">
    def test_sync_region(self, files, s3_utils,
                         shared_non_dns_compatible_bucket,
                         shared_non_dns_compatible_us_east_1_bucket):
        src_region = 'us-west-2'
        src_bucket = shared_non_dns_compatible_bucket
        dest_region = 'us-east-1'
        dest_bucket = shared_non_dns_compatible_us_east_1_bucket
        files.create_file('foo.txt', 'foo')
        p = aws('s3 sync %s s3://%s/ --region %s' %
                (files.rootdir, src_bucket, src_region))
        self.assert_no_errors(p)
        p2 = aws('s3 sync s3://%s/ s3://%s/ --region %s --source-region %s ' %
                 (src_bucket, dest_bucket, dest_region,
                  src_region))
        assert p2.rc == 0, p2.stdout
        assert s3_utils.key_exists(dest_bucket, 'foo.txt')

</source>
</class>

<class classid="29" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="955" endline="965" pcid="608">
    def test_no_write_access_small_file(self, files, s3_utils, shared_bucket):
        if os.geteuid() == 0:
            pytest.skip('Cannot completely remove write access as root user.')
        os.chmod(files.rootdir, 0o444)
        s3_utils.put_object(shared_bucket, 'foo.txt',
                            contents='Hello world')
        p = aws('s3 cp s3://%s/foo.txt %s' % (
            shared_bucket, os.path.join(files.rootdir, 'foo.txt')))
        assert p.rc == 1
        assert 'download failed' in p.stderr

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="967" endline="984" pcid="609">
    def test_no_write_access_large_file(self, files, s3_utils, shared_bucket):
        if os.geteuid() == 0:
            pytest.skip('Cannot completely remove write access as root user.')
        # We have to use a file like object because using a string
        # would result in the header + body sent as a single packet
        # which effectively disables the expect 100 continue logic.
        # This will result in a test error because we won't follow
        # the temporary redirect for the newly created bucket.
        contents = six.BytesIO(b'a' * 10 * 1024 * 1024)
        s3_utils.put_object(shared_bucket, 'foo.txt',
                            contents=contents)
        os.chmod(files.rootdir, 0o444)
        p = aws('s3 cp s3://%s/foo.txt %s' % (
            shared_bucket, os.path.join(files.rootdir, 'foo.txt')))
        assert p.rc == 1
        assert 'download failed' in p.stderr


</source>
</class>

<class classid="30" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1002" endline="1018" pcid="611">
    def test_follow_symlinks(self, files, s3_utils, symlink_files,
                             shared_bucket):
        # Get rid of the bad symlink first.
        os.remove(os.path.join(files.rootdir, 'b-badsymlink'))
        p = aws('s3 sync %s s3://%s/ --follow-symlinks' %
                (files.rootdir, shared_bucket))
        self.assert_no_errors(p)
        contents = s3_utils.get_key_contents(shared_bucket, 'a-goodsymlink')
        assert contents == 'foo.txt contents'
        assert s3_utils.key_not_exists(shared_bucket, 'b-badsymlink')
        contents = s3_utils.get_key_contents(
            shared_bucket, 'c-goodsymlink/foo.txt')
        assert contents == 'foo.txt contents'
        contents = s3_utils.get_key_contents(
            shared_bucket, 'realfiles/foo.txt')
        assert contents == 'foo.txt contents'

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1019" endline="1035" pcid="612">
    def test_follow_symlinks_default(self, files, s3_utils, symlink_files,
                                     shared_bucket):
        # Get rid of the bad symlink first.
        os.remove(os.path.join(files.rootdir, 'b-badsymlink'))
        p = aws('s3 sync %s s3://%s/' %
                (files.rootdir, shared_bucket))
        self.assert_no_errors(p)
        contents = s3_utils.get_key_contents(shared_bucket, 'a-goodsymlink')
        assert contents == 'foo.txt contents'
        assert s3_utils.key_not_exists(shared_bucket, 'b-badsymlink')
        contents = s3_utils.get_key_contents(
            shared_bucket, 'c-goodsymlink/foo.txt')
        assert contents == 'foo.txt contents'
        contents = s3_utils.get_key_contents(
            shared_bucket, 'realfiles/foo.txt')
        assert contents == 'foo.txt contents'

</source>
</class>

<class classid="31" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1122" endline="1132" pcid="620">
    def test_ls_with_prefix(self, s3_utils, shared_bucket):
        s3_utils.put_object(shared_bucket, 'foo.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'foo', 'contents')
        s3_utils.put_object(shared_bucket, 'bar.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'subdir/foo.txt', 'contents')
        p = aws('s3 ls s3://%s' % shared_bucket)
        assert 'PRE subdir/' in p.stdout
        assert '8 foo.txt' in p.stdout
        assert '8 foo' in p.stdout
        assert '8 bar.txt' in p.stdout

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1133" endline="1143" pcid="621">
    def test_ls_recursive(self, s3_utils, shared_bucket):
        s3_utils.put_object(shared_bucket, 'foo.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'foo', 'contents')
        s3_utils.put_object(shared_bucket, 'bar.txt', 'contents')
        s3_utils.put_object(shared_bucket, 'subdir/foo.txt', 'contents')
        p = aws('s3 ls s3://%s --recursive' % shared_bucket)
        assert '8 foo.txt' in p.stdout
        assert '8 foo' in p.stdout
        assert '8 bar.txt' in p.stdout
        assert '8 subdir/foo.txt' in p.stdout

</source>
</class>

<class classid="32" nclones="2" nlines="12" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1853" endline="1871" pcid="672">
    def test_large_file_sse_copy(self, files, s3_utils, shared_bucket):
        key = 'foo.txt'
        new_key = 'bar.txt'
        contents = 'a' * (10 * (1024 * 1024))

        # This is a little faster and more efficient than
        # calling self.put_object()
        file_name = files.create_file(key, contents)
        p = aws('s3 cp %s s3://%s/%s' % (file_name, shared_bucket, key))
        self.assert_no_errors(p)

        # Copy the file using AES256
        p = aws('s3 cp s3://%s/%s s3://%s/%s --sse AES256' % (
            shared_bucket, key, shared_bucket, new_key))
        self.assert_no_errors(p)

        # Ensure the file was copied correctly
        s3_utils.assert_key_contents_equal(shared_bucket, new_key, contents)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1885" endline="1902" pcid="674">
    def test_large_file_sse_kms_copy(self, files, s3_utils, shared_bucket):
        key = 'foo.txt'
        new_key = 'bar.txt'
        contents = 'a' * (10 * (1024 * 1024))

        # This is a little faster and more efficient than
        # calling self.put_object()
        file_name = files.create_file(key, contents)
        p = aws('s3 cp %s s3://%s/%s' % (file_name, shared_bucket, key))
        self.assert_no_errors(p)

        # Copy the file using KMS
        p = aws('s3 cp s3://%s/%s s3://%s/%s --sse aws:kms' % (
            shared_bucket, key, shared_bucket, new_key))
        self.assert_no_errors(p)
        self.download_and_assert_kms_object_integrity(
            shared_bucket, key, contents, files, s3_utils)

</source>
</class>

<class classid="33" nclones="2" nlines="18" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1903" endline="1931" pcid="675">
    def test_smoke_sync_sse(self, files, s3_utils, shared_bucket):
        key = 'foo.txt'
        contents = 'contents'
        file_name = files.create_file(key, contents)

        # Upload sync
        p = aws('s3 sync %s s3://%s/foo/ --sse AES256' % (
            files.rootdir, shared_bucket))
        self.assert_no_errors(p)
        s3_utils.wait_until_key_exists(shared_bucket, 'foo/foo.txt')

        # Copy sync
        p = aws('s3 sync s3://%s/foo/ s3://%s/bar/ --sse AES256' % (
            shared_bucket, shared_bucket))
        self.assert_no_errors(p)
        s3_utils.wait_until_key_exists(shared_bucket, 'bar/foo.txt')

        # Remove the original file
        os.remove(file_name)

        # Download sync
        p = aws('s3 sync s3://%s/bar/ %s --sse AES256' % (
            shared_bucket, files.rootdir))
        self.assert_no_errors(p)

        assert os.path.isfile(file_name)
        with open(file_name, 'r') as f:
            assert f.read() == contents

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1932" endline="1959" pcid="676">
    def test_smoke_sync_sse_kms(self, files, shared_bucket):
        key = 'foo.txt'
        contents = 'contents'
        file_name = files.create_file(key, contents)

        # Upload sync
        p = aws('s3 sync %s s3://%s/foo/ --sse aws:kms' % (
            files.rootdir, shared_bucket))
        self.assert_no_errors(p)

        # Copy sync
        p = aws('s3 sync s3://%s/foo/ s3://%s/bar/ --sse aws:kms' % (
            shared_bucket, shared_bucket))
        self.assert_no_errors(p)

        # Remove the original file
        os.remove(file_name)

        # Download sync
        p = aws('s3 sync s3://%s/bar/ %s --sse aws:kms' % (
            shared_bucket, files.rootdir))
        self.assert_no_errors(p)

        assert os.path.isfile(file_name)
        with open(file_name, 'r') as f:
            assert f.read() == contents


</source>
</class>

<class classid="34" nclones="2" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="1975" endline="1988" pcid="678">
    def test_sse_c_upload_and_download(self, files, s3_utils, encrypt_key,
                                       shared_bucket):
        key = 'foo.txt'
        contents = 'contents'
        file_name = files.create_file(key, contents)

        # Upload the file using SSE-C
        p = aws('s3 cp %s s3://%s --sse-c AES256 --sse-c-key %s' % (
            file_name, shared_bucket, encrypt_key))
        self.assert_no_errors(p)

        self.download_and_assert_sse_c_object_integrity(
            shared_bucket, key, encrypt_key, contents, files, s3_utils)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="2004" endline="2017" pcid="680">
    def test_sse_c_upload_and_download_large_file(self, files, s3_utils,
                                                  encrypt_key, shared_bucket):
        key = 'foo.txt'
        contents = 'a' * (10 * (1024 * 1024))
        file_name = files.create_file(key, contents)

        # Upload the file using SSE-C
        p = aws('s3 cp %s s3://%s --sse-c AES256 --sse-c-key %s' % (
            file_name, shared_bucket, encrypt_key))
        self.assert_no_errors(p)

        self.download_and_assert_sse_c_object_integrity(
            shared_bucket, key, encrypt_key, contents, files, s3_utils)

</source>
</class>

<class classid="35" nclones="2" nlines="17" similarity="82">
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="2018" endline="2040" pcid="681">
    def test_sse_c_copy(self, files, s3_utils, encrypt_key, other_encrypt_key,
                        shared_bucket):
        key = 'foo.txt'
        new_key = 'bar.txt'
        contents = 'contents'
        file_name = files.create_file(key, contents)

        # Upload the file using SSE-C
        p = aws('s3 cp %s s3://%s --sse-c AES256 --sse-c-key %s' % (
            file_name, shared_bucket, encrypt_key))
        self.assert_no_errors(p)

        # Copy the file using SSE-C and a new encryption key
        p = aws(
            's3 cp s3://%s/%s s3://%s/%s --sse-c AES256 --sse-c-key %s '
            '--sse-c-copy-source AES256 --sse-c-copy-source-key %s' % (
                shared_bucket, key, shared_bucket, new_key, other_encrypt_key,
                encrypt_key))
        self.assert_no_errors(p)
        self.download_and_assert_sse_c_object_integrity(
            shared_bucket, new_key, other_encrypt_key, contents, files,
            s3_utils)

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/customizations/s3/test_plugin.py" startline="2041" endline="2063" pcid="682">
    def test_sse_c_copy_large_file(self, files, s3_utils, encrypt_key,
                                   other_encrypt_key, shared_bucket):
        key = 'foo.txt'
        new_key = 'bar.txt'
        contents = 'a' * (10 * (1024 * 1024))
        file_name = files.create_file(key, contents)

        # Upload the file using SSE-C
        p = aws('s3 cp %s s3://%s --sse-c AES256 --sse-c-key %s' % (
            file_name, shared_bucket, encrypt_key))
        self.assert_no_errors(p)

        # Copy the file using SSE-C and a new encryption key
        p = aws(
            's3 cp s3://%s/%s s3://%s/%s --sse-c AES256 --sse-c-key %s '
            '--sse-c-copy-source AES256 --sse-c-copy-source-key %s' % (
                shared_bucket, key, shared_bucket, new_key, other_encrypt_key,
                encrypt_key))
        self.assert_no_errors(p)
        self.download_and_assert_sse_c_object_integrity(
            shared_bucket, new_key, other_encrypt_key, contents, files,
            s3_utils)

</source>
</class>

<class classid="36" nclones="2" nlines="14" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/functional/autoprompt/test_prompttoolkit.py" startline="268" endline="282" pcid="767">
    def test_choose_and_disable_history_mode_with_enter(
            self, app_runner, prompter):
        prompter.args = ['s3']
        with app_runner.run_app_in_thread():
            self.assert_history_mode_is_disabled(app_runner.app)
            app_runner.feed_input(Keys.ControlR)
            self.assert_history_mode_is_enabled(app_runner.app)
            app_runner.feed_input(Keys.Down)
            self.assert_selected_history_completion(
                app_runner.app, 's3 ls')
            app_runner.feed_input(Keys.Enter)
            self.assert_history_mode_is_disabled(app_runner.app)
            self.assert_current_buffer(app_runner.app, 'input_buffer')
            self.assert_current_buffer_text(app_runner.app, 's3 ls')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/autoprompt/test_prompttoolkit.py" startline="283" endline="298" pcid="768">
    def test_choose_and_disable_history_mode_with_space(
            self, app_runner, prompter):
        prompter.args = ['s3']
        with app_runner.run_app_in_thread():
            self.assert_history_mode_is_disabled(app_runner.app)
            app_runner.feed_input(Keys.ControlR)
            self.assert_history_mode_is_enabled(app_runner.app)
            app_runner.feed_input(Keys.Down)
            self.assert_selected_history_completion(
                app_runner.app, 's3 ls')
            app_runner.feed_input(' ')
            self.assert_history_mode_is_disabled(app_runner.app)
            self.assert_current_buffer(app_runner.app, 'input_buffer')
            self.assert_current_buffer_text(app_runner.app, 's3 ls ')


</source>
</class>

<class classid="37" nclones="3" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/functional/elasticache/test_create_cache_cluster.py" startline="22" endline="43" pcid="799">
    def test_create_cache_cluster(self):
        args = ('--cache-cluster-id cachecluster-us-east-1c '
                '--num-cache-nodes 1 '
                '--cache-node-type cache.m1.small '
                '--engine memcached '
                '--engine-version 1.4.5 '
                '--cache-security-group-names group1 group2 '
                '--preferred-availability-zone us-east-1c '
                '--auto-minor-version-upgrade '
                '--preferred-maintenance-window fri:08:00-fri:09:00')
        cmdline = self.prefix + args
        result = {'AutoMinorVersionUpgrade': True,
                  'CacheClusterId': 'cachecluster-us-east-1c',
                  'CacheNodeType': 'cache.m1.small',
                  'CacheSecurityGroupNames': ['group1', 'group2'],
                  'Engine': 'memcached',
                  'EngineVersion': '1.4.5',
                  'NumCacheNodes': 1,
                  'PreferredAvailabilityZone': 'us-east-1c',
                  'PreferredMaintenanceWindow': 'fri:08:00-fri:09:00'}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elasticache/test_create_cache_cluster.py" startline="66" endline="87" pcid="801">
    def test_minor_upgrade_arg_not_specified(self):
        args = ('--cache-cluster-id cachecluster-us-east-1c '
                '--num-cache-nodes 1 '
                '--cache-node-type cache.m1.small '
                '--engine memcached '
                '--engine-version 1.4.5 '
                '--cache-security-group-names group1 group2 '
                '--preferred-availability-zone us-east-1c '
                '--preferred-maintenance-window fri:08:00-fri:09:00')
        cmdline = self.prefix + args
        # Note how if neither '--auto-minor-version-upgrade' nor
        # '--no-auto-minor-version-upgrade' is specified, then
        # AutoMinorVersionUpgrade is not in the result dict.
        result = {'CacheClusterId': 'cachecluster-us-east-1c',
                  'CacheNodeType': 'cache.m1.small',
                  'CacheSecurityGroupNames': ['group1', 'group2'],
                  'Engine': 'memcached',
                  'EngineVersion': '1.4.5',
                  'NumCacheNodes': 1,
                  'PreferredAvailabilityZone': 'us-east-1c',
                  'PreferredMaintenanceWindow': 'fri:08:00-fri:09:00'}
        self.assert_params_for_cmd(cmdline, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elasticache/test_create_cache_cluster.py" startline="44" endline="65" pcid="800">
    def test_create_cache_cluster_no_auto_minor_upgrade(self):
        args = ('--cache-cluster-id cachecluster-us-east-1c '
                '--num-cache-nodes 1 '
                '--cache-node-type cache.m1.small '
                '--engine memcached '
                '--engine-version 1.4.5 '
                '--cache-security-group-names group1 group2 '
                '--preferred-availability-zone us-east-1c '
                '--no-auto-minor-version-upgrade '
                '--preferred-maintenance-window fri:08:00-fri:09:00')
        cmdline = self.prefix + args
        result = {'AutoMinorVersionUpgrade': False,
                  'CacheClusterId': 'cachecluster-us-east-1c',
                  'CacheNodeType': 'cache.m1.small',
                  'CacheSecurityGroupNames': ['group1', 'group2'],
                  'Engine': 'memcached',
                  'EngineVersion': '1.4.5',
                  'NumCacheNodes': 1,
                  'PreferredAvailabilityZone': 'us-east-1c',
                  'PreferredMaintenanceWindow': 'fri:08:00-fri:09:00'}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="38" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/functional/test_clidriver.py" startline="66" endline="84" pcid="901">
    def test_imds_region_is_used_as_fallback_wo_v2_support(self):
        # Remove region override from the environment variables.
        self.environ.pop('AWS_DEFAULT_REGION', 0)
        # First response should be from the IMDS server for security token
        # if server supports IMDSv1 only there will be no response for token
        self.add_response(None)
        # Then another response from the IMDS server for an availability
        # zone.
        self.add_response(b'us-mars-2a')
        # Once a region is fetched form the IMDS server we need to mock an
        # XML response from ec2 so that the CLI driver doesn't throw an error
        # during parsing.
        self.add_response(
            b'<?xml version="1.0" ?><foo><bar>text</bar></foo>')
        capture = RegionCapture()
        self.session.register('before-send.ec2.*', capture)
        self.driver.main(['ec2', 'describe-instances'])
        self.assertEqual(capture.region, 'us-mars-2')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_clidriver.py" startline="85" endline="103" pcid="902">
    def test_imds_region_is_used_as_fallback_with_v2_support(self):
        # Remove region override from the environment variables.
        self.environ.pop('AWS_DEFAULT_REGION', 0)
        # First response should be from the IMDS server for security token
        # if server supports IMDSv2 it'll return token
        self.add_response(b'token')
        # Then another response from the IMDS server for an availability
        # zone.
        self.add_response(b'us-mars-2a')
        # Once a region is fetched form the IMDS server we need to mock an
        # XML response from ec2 so that the CLI driver doesn't throw an error
        # during parsing.
        self.add_response(
            b'<?xml version="1.0" ?><foo><bar>text</bar></foo>')
        capture = RegionCapture()
        self.session.register('before-send.ec2.*', capture)
        self.driver.main(['ec2', 'describe-instances'])
        self.assertEqual(capture.region, 'us-mars-2')

</source>
</class>

<class classid="39" nclones="10" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="21" endline="38" pcid="914">
    def test_tcp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol tcp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '6',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="93" endline="110" pcid="918">
    def test_number(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol 99'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '99',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="57" endline="74" pcid="916">
    def test_icmp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol icmp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="21" endline="38" pcid="966">
    def test_tcp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol tcp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '6',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="57" endline="74" pcid="968">
    def test_icmp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol icmp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="75" endline="92" pcid="917">
    def test_all(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol all'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '-1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="39" endline="56" pcid="967">
    def test_udp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol udp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '17',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="93" endline="110" pcid="970">
    def test_number(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol 99'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '99',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="75" endline="92" pcid="969">
    def test_all(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol all'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '-1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="39" endline="56" pcid="915">
    def test_udp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol udp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '17',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="40" nclones="11" nlines="12" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="104" endline="117" pcid="938">
    def test_secondary_ip_address(self):
        args = ' --image-id ami-foobar --count 1 '
        args += '--secondary-private-ip-addresses 10.0.2.106'
        args_list = (self.prefix + args).split()
        result = {
            'ImageId': 'ami-foobar',
            'NetworkInterfaces': [
                {'DeviceIndex': 0,
                 'PrivateIpAddresses': [
                     {'Primary': False, 'PrivateIpAddress': '10.0.2.106'}]}],
            'MaxCount': 1,
            'MinCount': 1}
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="118" endline="131" pcid="939">
    def test_secondary_ip_address_with_subnet(self):
        args = ' --image-id ami-foobar --count 1 --subnet subnet-12345678 '
        args += '--secondary-private-ip-addresses 10.0.2.106'
        result = {
            'ImageId': 'ami-foobar',
            'NetworkInterfaces': [
                {'DeviceIndex': 0,
                 'SubnetId': 'subnet-12345678',
                 'PrivateIpAddresses': [
                     {'Primary': False, 'PrivateIpAddress': '10.0.2.106'}]}],
            'MaxCount': 1,
            'MinCount': 1}
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="132" endline="145" pcid="940">
    def test_secondary_ip_addresses(self):
        args = ' --image-id ami-foobar --count 1 '
        args += '--secondary-private-ip-addresses 10.0.2.106 10.0.2.107'
        result = {
            'ImageId': 'ami-foobar',
            'NetworkInterfaces': [
                {'DeviceIndex': 0,
                 'PrivateIpAddresses': [
                     {'Primary': False, 'PrivateIpAddress': u'10.0.2.106'},
                     {'Primary': False, 'PrivateIpAddress': u'10.0.2.107'}]}],
            'MaxCount': 1,
            'MinCount': 1}
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="223" endline="239" pcid="947">
    def test_associate_public_ip_address_and_group_id(self):
        args = ' --image-id ami-foobar --count 1 '
        args += '--security-group-id sg-12345678 '
        args += '--associate-public-ip-address --subnet-id subnet-12345678'
        result = {
            'NetworkInterfaces': [
                {'DeviceIndex': 0,
                 'AssociatePublicIpAddress': True,
                 'SubnetId': 'subnet-12345678',
                 'Groups': ['sg-12345678']}
            ],
            'ImageId': 'ami-foobar',
            'MaxCount': 1,
            'MinCount': 1
        }
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="186" endline="200" pcid="944">
    def test_associate_public_ip_address_switch_order(self):
        args = ' --image-id ami-foobar --count 1 '
        args += '--associate-public-ip-address --subnet-id subnet-12345678'
        result = {
            'NetworkInterfaces': [
                {'DeviceIndex': 0,
                 'AssociatePublicIpAddress': True,
                 'SubnetId': 'subnet-12345678'}
            ],
            'ImageId': 'ami-foobar',
            'MaxCount': 1,
            'MinCount': 1
        }
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="171" endline="185" pcid="943">
    def test_associate_public_ip_address(self):
        args = ' --image-id ami-foobar --count 1 --subnet-id subnet-12345678 '
        args += '--associate-public-ip-address'
        result = {
            'NetworkInterfaces': [
                {'DeviceIndex': 0,
                 'AssociatePublicIpAddress': True,
                 'SubnetId': 'subnet-12345678'},
            ],
            'ImageId': 'ami-foobar',
            'MaxCount': 1,
            'MinCount': 1
        }
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="296" endline="309" pcid="952">
    def test_ipv6_addresses_and_associate_public_ip_address(self):
        args = ' --associate-public-ip-address --count 1'
        args += ' --ipv6-addresses Ipv6Address=::1 --image-id ami-foobar '
        expected = {
            'NetworkInterfaces': [{
                'DeviceIndex': 0,
                'AssociatePublicIpAddress': True,
                'Ipv6Addresses': [{'Ipv6Address': '::1'}]
            }],
            'ImageId': 'ami-foobar',
            'MaxCount': 1,
            'MinCount': 1
        }
        self.assert_run_instances_call(args, expected)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="281" endline="295" pcid="951">
    def test_ipv6_address_count_and_associate_public_ip_address(self):
        args = ' --associate-public-ip-address'
        args += ' --ipv6-address-count 5 --image-id ami-foobar --count 1'
        expected = {
            'NetworkInterfaces': [{
                'DeviceIndex': 0,
                'AssociatePublicIpAddress': True,
                'Ipv6AddressCount': 5
            }],
            'ImageId': 'ami-foobar',
            'MaxCount': 1,
            'MinCount': 1
        }
        self.assert_run_instances_call(args, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="158" endline="170" pcid="942">
    def test_secondary_ip_address_count_with_subnet(self):
        args = ' --image-id ami-foobar --count 1 --subnet subnet-12345678 '
        args += '--secondary-private-ip-address-count 4'
        result = {
            'NetworkInterfaces': [{'DeviceIndex': 0,
                                   'SubnetId': 'subnet-12345678',
                                   'SecondaryPrivateIpAddressCount': 4}],
            'ImageId': 'ami-foobar',
            'MaxCount': 1,
            'MinCount': 1
        }
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="146" endline="157" pcid="941">
    def test_secondary_ip_address_count(self):
        args = ' --image-id ami-foobar --count 1 '
        args += '--secondary-private-ip-address-count 4'
        result = {
            'NetworkInterfaces': [{'DeviceIndex': 0,
                                   'SecondaryPrivateIpAddressCount': 4}],
            'ImageId': 'ami-foobar',
            'MaxCount': 1,
            'MinCount': 1
        }
        self.assert_run_instances_call(args, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_run_instances.py" startline="201" endline="212" pcid="945">
    def test_no_associate_public_ip_address(self):
        args = ' --image-id ami-foobar --count 1  --subnet-id subnet-12345678 '
        args += '--no-associate-public-ip-address'
        result = {
            'ImageId': 'ami-foobar',
            'NetworkInterfaces': [{'AssociatePublicIpAddress': False,
                                   'DeviceIndex': 0,
                                   'SubnetId': 'subnet-12345678'}],
            'MaxCount': 1,
            'MinCount': 1}
        self.assert_run_instances_call(args, result)

</source>
</class>

<class classid="41" nclones="25" nlines="12" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_associate_address.py" startline="28" endline="40" pcid="980">
    def test_vpc_basic(self):
        cmdline = self.prefix
        cmdline += ' --instance-id i-12345678'
        cmdline += ' --public-ip 192.168.0.0'
        cmdline += ' --allocation-id eipalloc-12345678'
        cmdline += ' --allow-reassociation'
        result = {'InstanceId': 'i-12345678',
                  'PublicIp': '192.168.0.0',
                  'AllowReassociation': True,
                  'AllocationId': 'eipalloc-12345678'}
        self.assert_params_for_cmd(cmdline, result)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/opsworks/test_create_instance.py" startline="22" endline="34" pcid="1715">
    def test_simple(self):
        cmdline = self.prefix
        cmdline += ' --stack-id f623987f-6303-4bba-a38e-63073e85c726'
        cmdline += ' --layer-ids cb27894d-35f3-4435-b422-6641a785fa4a'
        cmdline += ' --instance-type c1.medium'
        cmdline += ' --hostname aws-client-instance'
        result = {'StackId': 'f623987f-6303-4bba-a38e-63073e85c726',
                  'Hostname': 'aws-client-instance',
                  'LayerIds': ['cb27894d-35f3-4435-b422-6641a785fa4a'],
                  'InstanceType': 'c1.medium'}
        self.assert_params_for_cmd(cmdline, result)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3api/test_put_object.py" startline="81" endline="94" pcid="2775">
    def test_website_redirect(self):
        cmdline = self.prefix
        cmdline += ' --bucket mybucket'
        cmdline += ' --key mykey'
        cmdline += ' --acl public-read'
        cmdline += ' --website-redirect-location http://www.example.com/'
        expected = {
            'ACL': 'public-read',
            'Bucket': 'mybucket',
            'Key': 'mykey',
            'WebsiteRedirectLocation': 'http://www.example.com/'
        }
        self.assert_params_for_cmd(cmdline, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_copy_params.py" startline="125" endline="136" pcid="8851">
    def test_grants(self):
        cmdline = self.prefix
        cmdline += self.file_path
        cmdline += ' s3://mybucket/mykey'
        cmdline += ' --grants read=bob'
        cmdline += ' full=alice'
        result = {'Bucket': u'mybucket',
                  'GrantFullControl': u'alice',
                  'GrantRead': u'bob',
                  'Key': u'mykey'}
        self.assert_params(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/sns/test_create_platform_application.py" startline="21" endline="33" pcid="1317">
    def test_gcm_shorthand(self):
        cmdline = self.prefix
        cmdline += ' --name gcmpushapp'
        cmdline += ' --platform GCM'
        cmdline += ' --attributes '
        cmdline += 'PlatformCredential=foo,'
        cmdline += 'PlatformPrincipal=bar'
        result = {'Name': 'gcmpushapp',
                  'Platform': 'GCM',
                  'Attributes': {'PlatformCredential': 'foo',
                                 'PlatformPrincipal': 'bar'}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/opsworks/test_create_stack.py" startline="23" endline="36" pcid="1713">
    def test_attributes_file(self):
        cmdline = self.prefix
        cmdline += ' --service-role-arn arn-blahblahblah'
        cmdline += ' --name FooStack'
        cmdline += ' --stack-region us-west-2'
        cmdline += ' --default-instance-profile-arn arn-foofoofoo'
        result = {'ServiceRoleArn': 'arn-blahblahblah',
                  'Name': 'FooStack',
                  'Region': 'us-west-2',
                  'DefaultInstanceProfileArn': 'arn-foofoofoo'
                  }
        self.assert_params_for_cmd(cmdline, result)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/sesv2/test_put_account_details.py" startline="20" endline="31" pcid="1495">
    def test_put_account_details(self):
        cmdline = self.prefix
        cmdline += '  --website-url https://example.com '
        cmdline += '--mail-type MARKETING '
        cmdline += '--use-case-description Description'

        result = {
            'WebsiteURL': 'https://example.com',
            'MailType': 'MARKETING',
            'UseCaseDescription': 'Description'
        }
        self.assert_params_for_cmd(cmdline, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/sqs/test_add_permission.py" startline="35" endline="46" pcid="2630">
    def test_multiple_accounts(self):
        cmdline = self.prefix
        cmdline += ' --queue-url %s' % self.queue_url
        cmdline += ' --aws-account-ids 888888888888 999999999999'
        cmdline += ' --actions SendMessage'
        cmdline += ' --label FooBarLabel'
        result = {'QueueUrl': self.queue_url,
                  'Actions': ['SendMessage'],
                  'AWSAccountIds': ['888888888888', '999999999999'],
                  'Label': 'FooBarLabel'}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/sqs/test_add_permission.py" startline="23" endline="34" pcid="2629">
    def test_all_param(self):
        cmdline = self.prefix
        cmdline += ' --queue-url %s' % self.queue_url
        cmdline += ' --aws-account-ids 888888888888'
        cmdline += ' --actions SendMessage'
        cmdline += ' --label FooBarLabel'
        result = {'QueueUrl': self.queue_url,
                  'Actions': ['SendMessage'],
                  'AWSAccountIds': ['888888888888'],
                  'Label': 'FooBarLabel'}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/sqs/test_add_permission.py" startline="47" endline="59" pcid="2631">
    def test_multiple_actions(self):
        cmdline = self.prefix
        cmdline += ' --queue-url %s' % self.queue_url
        cmdline += ' --aws-account-ids 888888888888'
        cmdline += ' --actions SendMessage ReceiveMessage'
        cmdline += ' --label FooBarLabel'
        result = {'QueueUrl': self.queue_url,
                  'Actions': ['SendMessage', 'ReceiveMessage'],
                  'AWSAccountIds': ['888888888888'],
                  'Label': 'FooBarLabel'}
        self.assert_params_for_cmd(cmdline, result)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/sns/test_create_platform_application.py" startline="34" endline="50" pcid="1318">
    def test_gcm_json(self):
        cmdline = self.prefix
        cmdline += ' --name gcmpushapp'
        cmdline += ' --platform GCM'
        cmdline += ' --attributes '
        cmdline += ('{"PlatformCredential":"AIzaSyClE2lcV2zEKTLYYo645zfk2jhQPFeyxDo",'
                    '"PlatformPrincipal":"There+is+no+principal+for+GCM"}')
        result = {
            'Name': 'gcmpushapp',
            'Platform': 'GCM',
            'Attributes': {
              'PlatformCredential': 'AIzaSyClE2lcV2zEKTLYYo645zfk2jhQPFeyxDo',
              'PlatformPrincipal': 'There+is+no+principal+for+GCM'}
        }
        self.assert_params_for_cmd(cmdline, result)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3api/test_put_object.py" startline="95" endline="113" pcid="2776">
    def test_sse_key_with_binary_file(self):
        # Create contents that do not get mapped to ascii
        contents = b'\xc2'
        filename = self.files.create_file('key', contents, mode='wb')
        cmdline = self.prefix
        cmdline += ' --bucket mybucket'
        cmdline += ' --key mykey'
        cmdline += ' --sse-customer-algorithm AES256'
        cmdline += ' --sse-customer-key fileb://%s' % filename
        expected = {
            'Bucket': 'mybucket',
            'Key': 'mykey',
            'SSECustomerAlgorithm': 'AES256',
            'SSECustomerKey': 'wg==',  # Note the key gets base64 encoded.
            'SSECustomerKeyMD5': 'ZGXa0dMXUr4/MoPo9w/u9w=='
        }
        self.assert_params_for_cmd(cmdline, expected)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/awslambda/test_function.py" startline="150" endline="164" pcid="2299">
    def test_publish_layer_version_with_content_and_zipfile_argument(self):
        cmdline = self.prefix
        cmdline += ' --layer-name mylayer'
        cmdline += ' --content'
        cmdline += ' S3Bucket=mybucket,S3Key=mykey,S3ObjectVersion=vs'
        cmdline += ' --zip-file fileb://%s' % self.zip_file
        result = {
            'LayerName': 'mylayer',
            'Content': {'S3Bucket': 'mybucket',
                        'S3Key': 'mykey',
                        'S3ObjectVersion': 'vs',
                        'ZipFile': self.zip_file_contents}
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/awslambda/test_function.py" startline="137" endline="149" pcid="2298">
    def test_publish_layer_version_with_content_argument(self):
        cmdline = self.prefix
        cmdline += ' --layer-name mylayer'
        cmdline += ' --content'
        cmdline += ' S3Bucket=mybucket,S3Key=mykey,S3ObjectVersion=vs'
        result = {
            'LayerName': 'mylayer',
            'Content': {'S3Bucket': 'mybucket',
                        'S3Key': 'mykey',
                        'S3ObjectVersion': 'vs'}
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudsearch/test_cloudsearch.py" startline="52" endline="66" pcid="1611">
    def test_latlon(self):
        cmdline = self.prefix
        cmdline += ' --domain-name abc123'
        cmdline += ' --name foo'
        cmdline += ' --type latlon'
        cmdline += ' --default-value 10'
        cmdline += ' --search-enabled false'
        result = {
            'DomainName': 'abc123',
            'IndexField': {
                'IndexFieldName': 'foo',
                'IndexFieldType': 'latlon',
                'LatLonOptions': {
                    'DefaultValue': '10', 'SearchEnabled': False}}}
        self.assert_params_for_cmd(cmdline, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_copy_params.py" startline="110" endline="124" pcid="8850">
    def test_content_params(self):
        cmdline = self.prefix
        cmdline += self.file_path
        cmdline += ' s3://mybucket/mykey'
        cmdline += ' --content-encoding x-gzip'
        cmdline += ' --content-language piglatin'
        cmdline += ' --cache-control max-age=3600,must-revalidate'
        cmdline += ' --content-disposition attachment;filename="fname.ext"'
        result = {'Bucket': 'mybucket', 'Key': 'mykey',
                  'ContentEncoding': 'x-gzip',
                  'ContentLanguage': 'piglatin',
                  'ContentDisposition': 'attachment;filename="fname.ext"',
                  'CacheControl': 'max-age=3600,must-revalidate'}
        self.assert_params(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/awslambda/test_function.py" startline="57" endline="72" pcid="2292">
    def test_create_function_with_code_argument(self):
        cmdline = self.prefix
        cmdline += ' --function-name myfunction --runtime myruntime'
        cmdline += ' --role myrole --handler myhandler'
        cmdline += ' --code S3Bucket=mybucket,S3Key=mykey,S3ObjectVersion=vs'
        result = {
            'FunctionName': 'myfunction',
            'Runtime': 'myruntime',
            'Role': 'myrole',
            'Handler': 'myhandler',
            'Code': {'S3Bucket': 'mybucket',
                     'S3Key': 'mykey',
                     'S3ObjectVersion': 'vs'}
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/apigateway/test_put_integration.py" startline="20" endline="34" pcid="2626">
    def test_put_integration(self):
        cmdline = self.prefix
        cmdline += '--rest-api-id api-id '
        cmdline += '--resource-id resource-id '
        cmdline += '--http-method GET '
        cmdline += '--type HTTP '
        cmdline += '--integration-http-method GET '
        cmdline += '--uri https://api.endpoint.com'
        result = {
            'restApiId': 'api-id', 'resourceId': 'resource-id',
            'httpMethod': 'GET', 'type': 'HTTP',
            'integrationHttpMethod': 'GET',
            'uri': 'https://api.endpoint.com'
        }
        self.assert_params_for_cmd(cmdline, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudsearch/test_cloudsearch.py" startline="37" endline="51" pcid="1610">
    def test_flattened(self):
        cmdline = self.prefix
        cmdline += ' --domain-name abc123'
        cmdline += ' --name foo'
        cmdline += ' --type int'
        cmdline += ' --default-value 10'
        cmdline += ' --search-enabled false'
        result = {
            'DomainName': 'abc123',
            'IndexField': {'IndexFieldName': 'foo',
                           'IndexFieldType': 'int',
                           'IntOptions': {'DefaultValue': 10,
                                          'SearchEnabled': False}}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/awslambda/test_function.py" startline="43" endline="56" pcid="2291">
    def test_create_function_with_file(self):
        cmdline = self.prefix
        cmdline += ' --function-name myfunction --runtime myruntime'
        cmdline += ' --role myrole --handler myhandler'
        cmdline += ' --zip-file fileb://%s' % self.zip_file
        result = {
            'FunctionName': 'myfunction',
            'Runtime': 'myruntime',
            'Role': 'myrole',
            'Handler': 'myhandler',
            'Code': {'ZipFile': self.zip_file_contents}
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudsearch/test_cloudsearch.py" startline="21" endline="32" pcid="1609">
    def test_flattened(self):
        cmdline = self.prefix
        cmdline += ' --domain-name abc123'
        cmdline += ' --name foo'
        cmdline += ' --expression 10'
        result = {
            'DomainName': 'abc123',
            'Expression': {'ExpressionName': 'foo',
                           'ExpressionValue': '10'}}
        self.assert_params_for_cmd(cmdline, result)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/translate/test_import_terminology.py" startline="48" endline="62" pcid="2662">
    def test_import_terminology_with_file_and_tmx(self):
        cmdline = self.prefix
        cmdline += ' --name myterminology --merge-strategy OVERWRITE'
        cmdline += ' --terminology-data Format=TMX'
        cmdline += ' --data-file fileb://%s' % self.temp_file
        result = {
            'Name': 'myterminology',
            'MergeStrategy': 'OVERWRITE',
            'TerminologyData': {
                'File': self.temp_file_contents,
                'Format': 'TMX',
            },
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/translate/test_import_terminology.py" startline="33" endline="47" pcid="2661">
    def test_import_terminology_with_file_and_csv(self):
        cmdline = self.prefix
        cmdline += ' --name myterminology --merge-strategy OVERWRITE'
        cmdline += ' --terminology-data Format=CSV'
        cmdline += ' --data-file fileb://%s' % self.temp_file
        result = {
            'Name': 'myterminology',
            'MergeStrategy': 'OVERWRITE',
            'TerminologyData': {
                'File': self.temp_file_contents,
                'Format': 'CSV',
            },
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/awslambda/test_function.py" startline="73" endline="90" pcid="2293">
    def test_create_function_with_code_and_zipfile_argument(self):
        cmdline = self.prefix
        cmdline += ' --function-name myfunction --runtime myruntime'
        cmdline += ' --role myrole --handler myhandler'
        cmdline += ' --code S3Bucket=mybucket,S3Key=mykey,S3ObjectVersion=vs'
        cmdline += ' --zip-file fileb://%s' % self.zip_file
        result = {
            'FunctionName': 'myfunction',
            'Runtime': 'myruntime',
            'Role': 'myrole',
            'Handler': 'myhandler',
            'Code': {'S3Bucket': 'mybucket',
                     'S3Key': 'mykey',
                     'S3ObjectVersion': 'vs',
                     'ZipFile': self.zip_file_contents}
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/configservice/test_put_configuration_recorder.py" startline="41" endline="57" pcid="2678">
    def test_configuration_recorder_with_recording_group(self):
        cmdline = self.prefix + ' --configuration-recorder'
        cmdline += ' name=myrecorder,roleARN=myarn'
        cmdline += ' --recording-group'
        cmdline += ' allSupported=true,resourceTypes='
        cmdline += 'AWS::EC2::Volume,AWS::EC2::VPC'
        result = {
            'ConfigurationRecorder': {
                'name': 'myrecorder',
                'roleARN': 'myarn',
                'recordingGroup': {
                    'allSupported': True,
                    'resourceTypes': ['AWS::EC2::Volume', 'AWS::EC2::VPC']
                }
            }
        }
        self.assert_params_for_cmd(cmdline, result)
</source>
</class>

<class classid="42" nclones="4" nlines="10" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_describe_instances.py" startline="45" endline="55" pcid="996">
    def test_filter_json(self):
        args = """ --filters {"Name":"group-name","Values":["foobar"]}"""
        cmdline = self.prefix + args
        result = {
            'Filters': [
                {'Name': 'group-name',
                 'Values': ['foobar']},
            ],
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_describe_instances.py" startline="67" endline="77" pcid="998">
    def test_filter_values(self):
        args = """ --filters Name=group-name,Values=foobar,fiebaz"""
        cmdline = self.prefix + args
        result = {
            'Filters': [
                {'Name': 'group-name',
                 'Values': ['foobar', 'fiebaz']},
            ],
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_describe_instances.py" startline="78" endline="91" pcid="999">
    def test_multiple_filters(self):
        args = (' --filters Name=group-name,Values=foobar '
                'Name=instance-id,Values=i-12345')
        cmdline = self.prefix + args
        result = {
            'Filters': [
                {'Name': 'group-name',
                 'Values': ['foobar']},
                {'Name': 'instance-id',
                 'Values': ['i-12345']},
            ],
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_describe_instances.py" startline="56" endline="66" pcid="997">
    def test_filter_simple(self):
        args = """ --filters Name=group-name,Values=foobar"""
        cmdline = self.prefix + args
        result = {
            'Filters': [
                {'Name': 'group-name',
                 'Values': ['foobar']},
            ],
        }
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="43" nclones="2" nlines="34" similarity="91">
<source file="systems/aws-cli-2.4.27/tests/functional/gamelift/test_upload_build.py" startline="29" endline="75" pcid="1016">
    def test_upload_build(self):
        self.files.create_file('tmpfile', 'Some contents')
        cmdline = self.prefix
        cmdline += ' --name mybuild --build-version myversion'
        cmdline += ' --build-root %s' % self.files.rootdir

        self.parsed_responses = [
            {'Build': {'BuildId': 'myid'}},
            {'StorageLocation': {
                'Bucket': 'mybucket',
                'Key': 'mykey'},
             'UploadCredentials': {
                'AccessKeyId': 'myaccesskey',
                'SecretAccessKey': 'mysecretkey',
                'SessionToken': 'mytoken'}},
            {}
        ]

        stdout, stderr, rc = self.run_cmd(cmdline, expected_rc=0)

        # First the build is created.
        self.assertEqual(len(self.operations_called), 3)
        self.assertEqual(self.operations_called[0][0].name, 'CreateBuild')
        self.assertEqual(
            self.operations_called[0][1],
            {'Name': 'mybuild', 'Version': 'myversion'}
        )

        # Second the credentials are requested.
        self.assertEqual(
            self.operations_called[1][0].name, 'RequestUploadCredentials')
        self.assertEqual(
            self.operations_called[1][1], {'BuildId': 'myid'})

        # The build is then uploaded to S3.
        self.assertEqual(self.operations_called[2][0].name, 'PutObject')
        self.assertEqual(
            self.operations_called[2][1],
            {'Body': mock.ANY, 'Bucket': 'mybucket', 'Key': 'mykey'}
        )

        # Check the output of the command.
        self.assertIn(
            'Successfully uploaded %s to AWS GameLift' % self.files.rootdir,
            stdout)
        self.assertIn('Build ID: myid', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/gamelift/test_upload_build.py" startline="76" endline="124" pcid="1017">
    def test_upload_build_with_operating_system_param(self):
        self.files.create_file('tmpfile', 'Some contents')
        cmdline = self.prefix
        cmdline += ' --name mybuild --build-version myversion'
        cmdline += ' --build-root %s' % self.files.rootdir
        cmdline += ' --operating-system WINDOWS_2012'

        self.parsed_responses = [
            {'Build': {'BuildId': 'myid'}},
            {'StorageLocation': {
                'Bucket': 'mybucket',
                'Key': 'mykey'},
             'UploadCredentials': {
                'AccessKeyId': 'myaccesskey',
                'SecretAccessKey': 'mysecretkey',
                'SessionToken': 'mytoken'}},
            {}
        ]

        stdout, stderr, rc = self.run_cmd(cmdline, expected_rc=0)

        # First the build is created.
        self.assertEqual(len(self.operations_called), 3)
        self.assertEqual(self.operations_called[0][0].name, 'CreateBuild')
        self.assertEqual(
            self.operations_called[0][1],
            {'Name': 'mybuild', 'Version': 'myversion',
             'OperatingSystem': 'WINDOWS_2012'}
        )

        # Second the credentials are requested.
        self.assertEqual(
            self.operations_called[1][0].name, 'RequestUploadCredentials')
        self.assertEqual(
            self.operations_called[1][1], {'BuildId': 'myid'})

        # The build is then uploaded to S3.
        self.assertEqual(self.operations_called[2][0].name, 'PutObject')
        self.assertEqual(
            self.operations_called[2][1],
            {'Body': mock.ANY, 'Bucket': 'mybucket', 'Key': 'mykey'}
        )

        # Check the output of the command.
        self.assertIn(
            'Successfully uploaded %s to AWS GameLift' % self.files.rootdir,
            stdout)
        self.assertIn('Build ID: myid', stdout)

</source>
</class>

<class classid="44" nclones="3" nlines="19" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/gamelift/test_upload_build.py" startline="125" endline="149" pcid="1018">
    def test_upload_build_with_empty_directory(self):
        cmdline = self.prefix
        cmdline += ' --name mybuild --build-version myversion'
        cmdline += ' --build-root %s' % self.files.rootdir

        self.parsed_responses = [
            {'Build': {'BuildId': 'myid'}},
            {'StorageLocation': {
                'Bucket': 'mybucket',
                'Key': 'mykey'},
             'UploadCredentials': {
                'AccessKeyId': 'myaccesskey',
                'SecretAccessKey': 'mysecretkey',
                'SessionToken': 'mytoken'}},
            {}
            ]

        stdout, stderr, rc = self.run_cmd(cmdline, expected_rc=255)

        self.assertIn(
            'Fail to upload %s. '
            'The build root directory is empty or does not exist.\n'
            % self.files.rootdir,
            stderr)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/gamelift/test_upload_build.py" startline="177" endline="200" pcid="1020">
    def test_upload_build_with_nonprovided_directory(self):
        cmdline = self.prefix
        cmdline += ' --name mybuild --build-version myversion'
        cmdline += ' --build-root %s' % '""'

        self.parsed_responses = [
            {'Build': {'BuildId': 'myid'}},
            {'StorageLocation': {
                'Bucket': 'mybucket',
                'Key': 'mykey'},
             'UploadCredentials': {
                'AccessKeyId': 'myaccesskey',
                'SecretAccessKey': 'mysecretkey',
                'SessionToken': 'mytoken'}},
            {}
            ]

        stdout, stderr, rc = self.run_cmd(cmdline, expected_rc=255)

        self.assertIn(
            'Fail to upload %s. '
            'The build root directory is empty or does not exist.\n'
            % '""',
            stderr)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/gamelift/test_upload_build.py" startline="150" endline="176" pcid="1019">
    def test_upload_build_with_nonexistent_directory(self):
        dir_not_exist = os.path.join(self.files.rootdir, 'does_not_exist')

        cmdline = self.prefix
        cmdline += ' --name mybuild --build-version myversion'
        cmdline += ' --build-root %s' % dir_not_exist

        self.parsed_responses = [
            {'Build': {'BuildId': 'myid'}},
            {'StorageLocation': {
                'Bucket': 'mybucket',
                'Key': 'mykey'},
             'UploadCredentials': {
                'AccessKeyId': 'myaccesskey',
                'SecretAccessKey': 'mysecretkey',
                'SessionToken': 'mytoken'}},
            {}
            ]

        stdout, stderr, rc = self.run_cmd(cmdline, expected_rc=255)

        self.assertIn(
            'Fail to upload %s. '
            'The build root directory is empty or does not exist.\n'
            % dir_not_exist,
            stderr)

</source>
</class>

<class classid="45" nclones="3" nlines="19" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="184" endline="202" pcid="1047">
    def test_copy(self):
        expected_head_params = {
            'Bucket': 'mysourcebucket',
            'Key': 'mysourcekey',
        }
        expected_copy_object = {
            'Bucket': self.bucket,
            'Key': self.key,
            'CopySource': self.copy_source,
        }
        self.add_head_object_response(expected_params=expected_head_params)
        self.add_successful_copy_responses(
            expected_copy_params=expected_copy_object
        )

        future = self.manager.copy(**self.create_call_kwargs())
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="203" endline="227" pcid="1048">
    def test_copy_with_extra_args(self):
        self.extra_args['MetadataDirective'] = 'REPLACE'

        expected_head_params = {
            'Bucket': 'mysourcebucket',
            'Key': 'mysourcekey',
        }
        expected_copy_object = {
            'Bucket': self.bucket,
            'Key': self.key,
            'CopySource': self.copy_source,
            'MetadataDirective': 'REPLACE',
        }

        self.add_head_object_response(expected_params=expected_head_params)
        self.add_successful_copy_responses(
            expected_copy_params=expected_copy_object
        )

        call_kwargs = self.create_call_kwargs()
        call_kwargs['extra_args'] = self.extra_args
        future = self.manager.copy(**call_kwargs)
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="228" endline="253" pcid="1049">
    def test_copy_maps_extra_args_to_head_object(self):
        self.extra_args['CopySourceSSECustomerAlgorithm'] = 'AES256'

        expected_head_params = {
            'Bucket': 'mysourcebucket',
            'Key': 'mysourcekey',
            'SSECustomerAlgorithm': 'AES256',
        }
        expected_copy_object = {
            'Bucket': self.bucket,
            'Key': self.key,
            'CopySource': self.copy_source,
            'CopySourceSSECustomerAlgorithm': 'AES256',
        }

        self.add_head_object_response(expected_params=expected_head_params)
        self.add_successful_copy_responses(
            expected_copy_params=expected_copy_object
        )

        call_kwargs = self.create_call_kwargs()
        call_kwargs['extra_args'] = self.extra_args
        future = self.manager.copy(**call_kwargs)
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
</class>

<class classid="46" nclones="2" nlines="14" similarity="86">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="259" endline="276" pcid="1051">
    def test_copy_with_tagging(self):
        extra_args = {'Tagging': 'tag1=val1', 'TaggingDirective': 'REPLACE'}
        self.add_head_object_response()
        self.add_successful_copy_responses(
            expected_copy_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'CopySource': self.copy_source,
                'Tagging': 'tag1=val1',
                'TaggingDirective': 'REPLACE',
            }
        )
        future = self.manager.copy(
            self.copy_source, self.bucket, self.key, extra_args
        )
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="540" endline="554" pcid="1067">
    def test_mp_copy_with_tagging_directive(self):
        extra_args = {'Tagging': 'tag1=val1', 'TaggingDirective': 'REPLACE'}
        self.add_head_object_response()
        self.add_successful_copy_responses(
            expected_create_mpu_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'Tagging': 'tag1=val1',
            }
        )
        future = self.manager.copy(
            self.copy_source, self.bucket, self.key, extra_args
        )
        future.result()
        self.stubber.assert_no_pending_responses()
</source>
</class>

<class classid="47" nclones="4" nlines="11" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="444" endline="457" pcid="1062">
    def test_copy_blacklists_args_to_create_multipart(self):
        # This argument can never be used for multipart uploads
        self.extra_args['MetadataDirective'] = 'COPY'

        head_params, add_copy_kwargs = self._get_expected_params()
        self.add_head_object_response(expected_params=head_params)
        self.add_successful_copy_responses(**add_copy_kwargs)

        call_kwargs = self.create_call_kwargs()
        call_kwargs['extra_args'] = self.extra_args
        future = self.manager.copy(**call_kwargs)
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="494" endline="515" pcid="1065">
    def test_copy_maps_extra_args_to_head_object(self):
        self.extra_args['CopySourceSSECustomerAlgorithm'] = 'AES256'

        head_params, add_copy_kwargs = self._get_expected_params()

        # The CopySourceSSECustomerAlgorithm needs to get mapped to
        # SSECustomerAlgorithm for HeadObject
        head_params['SSECustomerAlgorithm'] = 'AES256'
        self.add_head_object_response(expected_params=head_params)

        # However, it needs to remain the same for UploadPartCopy.
        self._add_params_to_expected_params(
            add_copy_kwargs, ['copy'], self.extra_args
        )
        self.add_successful_copy_responses(**add_copy_kwargs)

        call_kwargs = self.create_call_kwargs()
        call_kwargs['extra_args'] = self.extra_args
        future = self.manager.copy(**call_kwargs)
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="475" endline="493" pcid="1064">
    def test_copy_passes_args_to_create_multipart_and_upload_part(self):
        # This will only be used for the complete multipart upload
        # and upload part.
        self.extra_args['SSECustomerAlgorithm'] = 'AES256'

        head_params, add_copy_kwargs = self._get_expected_params()
        self.add_head_object_response(expected_params=head_params)

        self._add_params_to_expected_params(
            add_copy_kwargs, ['create_mpu', 'copy'], self.extra_args
        )
        self.add_successful_copy_responses(**add_copy_kwargs)

        call_kwargs = self.create_call_kwargs()
        call_kwargs['extra_args'] = self.extra_args
        future = self.manager.copy(**call_kwargs)
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_copy.py" startline="458" endline="474" pcid="1063">
    def test_copy_args_to_only_create_multipart(self):
        self.extra_args['ACL'] = 'private'

        head_params, add_copy_kwargs = self._get_expected_params()
        self.add_head_object_response(expected_params=head_params)

        self._add_params_to_expected_params(
            add_copy_kwargs, ['create_mpu'], self.extra_args
        )
        self.add_successful_copy_responses(**add_copy_kwargs)

        call_kwargs = self.create_call_kwargs()
        call_kwargs['extra_args'] = self.extra_args
        future = self.manager.copy(**call_kwargs)
        future.result()
        self.stubber.assert_no_pending_responses()

</source>
</class>

<class classid="48" nclones="4" nlines="14" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="365" endline="382" pcid="1092">
    def test_download(self):
        self.extra_args['RequestPayer'] = 'requester'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'RequestPayer': 'requester',
        }
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(expected_params)
        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="383" endline="400" pcid="1093">
    def test_download_with_checksum_enabled(self):
        self.extra_args['ChecksumMode'] = 'ENABLED'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'ChecksumMode': 'ENABLED',
        }
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(expected_params)
        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="517" endline="537" pcid="1101">
    def test_download_with_checksum_enabled(self):
        self.extra_args['ChecksumMode'] = 'ENABLED'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'ChecksumMode': 'ENABLED',
        }
        expected_ranges = ['bytes=0-3', 'bytes=4-7', 'bytes=8-']
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(
            expected_params, expected_ranges
        )

        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_download.py" startline="495" endline="516" pcid="1100">
    def test_download(self):
        self.extra_args['RequestPayer'] = 'requester'
        expected_params = {
            'Bucket': self.bucket,
            'Key': self.key,
            'RequestPayer': 'requester',
        }
        expected_ranges = ['bytes=0-3', 'bytes=4-7', 'bytes=8-']
        self.add_head_object_response(expected_params)
        self.add_successful_get_object_responses(
            expected_params, expected_ranges
        )

        future = self.manager.download(
            self.bucket, self.key, self.filename, self.extra_args
        )
        future.result()

        # Ensure that the contents are correct
        with open(self.filename, 'rb') as f:
            self.assertEqual(self.content, f.read())

</source>
</class>

<class classid="49" nclones="2" nlines="20" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_manager.py" startline="58" endline="90" pcid="1108">
    def test_error_in_context_manager_cancels_incomplete_transfers(self):
        # The purpose of this test is to make sure if an error is raised
        # in the body of the context manager, incomplete transfers will
        # be cancelled with value of the exception wrapped by a CancelledError

        # NOTE: The fact that delete() was chosen to test this is arbitrary
        # other than it is the easiet to set up for the stubber.
        # The specific operation is not important to the purpose of this test.
        num_transfers = 100
        futures = []
        ref_exception_msg = 'arbitrary exception'

        for _ in range(num_transfers):
            self.stubber.add_response('delete_object', {})

        manager = TransferManager(
            self.client,
            TransferConfig(
                max_request_concurrency=1, max_submission_concurrency=1
            ),
        )
        try:
            with manager:
                for i in range(num_transfers):
                    futures.append(manager.delete('mybucket', 'mykey'))
                raise ArbitraryException(ref_exception_msg)
        except ArbitraryException:
            # At least one of the submitted futures should have been
            # cancelled.
            with self.assertRaisesRegex(FatalError, ref_exception_msg):
                for future in futures:
                    future.result()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_manager.py" startline="97" endline="128" pcid="1109">
    def test_cntrl_c_in_context_manager_cancels_incomplete_transfers(self):
        # The purpose of this test is to make sure if an error is raised
        # in the body of the context manager, incomplete transfers will
        # be cancelled with value of the exception wrapped by a CancelledError

        # NOTE: The fact that delete() was chosen to test this is arbitrary
        # other than it is the easiet to set up for the stubber.
        # The specific operation is not important to the purpose of this test.
        num_transfers = 100
        futures = []

        for _ in range(num_transfers):
            self.stubber.add_response('delete_object', {})

        manager = TransferManager(
            self.client,
            TransferConfig(
                max_request_concurrency=1, max_submission_concurrency=1
            ),
        )
        try:
            with manager:
                for i in range(num_transfers):
                    futures.append(manager.delete('mybucket', 'mykey'))
                raise KeyboardInterrupt()
        except KeyboardInterrupt:
            # At least one of the submitted futures should have been
            # cancelled.
            with self.assertRaisesRegex(CancelledError, 'KeyboardInterrupt()'):
                for future in futures:
                    future.result()

</source>
</class>

<class classid="50" nclones="2" nlines="17" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_crt.py" startline="110" endline="131" pcid="1127">
    def test_upload(self):
        self.s3_crt_client.make_request.side_effect = (
            self._simulate_make_request_side_effect
        )
        future = self.transfer_manager.upload(
            self.filename, self.bucket, self.key, {}, [self.record_subscriber]
        )
        future.result()

        callargs = self.s3_crt_client.make_request.call_args
        callargs_kwargs = callargs[1]
        self.assertEqual(callargs_kwargs["send_filepath"], self.filename)
        self.assertIsNone(callargs_kwargs["recv_filepath"])
        self.assertEqual(
            callargs_kwargs["type"], awscrt.s3.S3RequestType.PUT_OBJECT
        )
        crt_request = callargs_kwargs["request"]
        self.assertEqual("PUT", crt_request.method)
        self.assertEqual(self.expected_path, crt_request.path)
        self.assertEqual(self.expected_host, crt_request.headers.get("host"))
        self._assert_subscribers_called(future)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_crt.py" startline="164" endline="185" pcid="1129">
    def test_delete(self):
        self.s3_crt_client.make_request.side_effect = (
            self._simulate_make_request_side_effect
        )
        future = self.transfer_manager.delete(
            self.bucket, self.key, {}, [self.record_subscriber]
        )
        future.result()

        callargs = self.s3_crt_client.make_request.call_args
        callargs_kwargs = callargs[1]
        self.assertIsNone(callargs_kwargs["send_filepath"])
        self.assertIsNone(callargs_kwargs["recv_filepath"])
        self.assertEqual(
            callargs_kwargs["type"], awscrt.s3.S3RequestType.DEFAULT
        )
        crt_request = callargs_kwargs["request"]
        self.assertEqual("DELETE", crt_request.method)
        self.assertEqual(self.expected_path, crt_request.path)
        self.assertEqual(self.expected_host, crt_request.headers.get("host"))
        self._assert_subscribers_called(future)

</source>
</class>

<class classid="51" nclones="6" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="201" endline="212" pcid="1153">
    def test_upload_for_seekable_filelike_obj_that_has_been_seeked(self):
        self.add_put_object_response_with_default_expected_params()
        bytes_io = BytesIO(self.content)
        seek_pos = 5
        bytes_io.seek(seek_pos)
        future = self.manager.upload(
            bytes_io, self.bucket, self.key, self.extra_args
        )
        future.result()
        self.assert_expected_client_calls_were_correct()
        self.assertEqual(b''.join(self.sent_bodies), self.content[seek_pos:])

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="433" endline="444" pcid="1169">
    def test_upload_for_seekable_filelike_obj(self):
        self.add_create_multipart_response_with_default_expected_params()
        self.add_upload_part_responses_with_default_expected_params()
        self.add_complete_multipart_response_with_default_expected_params()
        bytes_io = BytesIO(self.content)
        future = self.manager.upload(
            bytes_io, self.bucket, self.key, self.extra_args
        )
        future.result()
        self.assert_expected_client_calls_were_correct()
        self.assert_upload_part_bodies_were_correct()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="459" endline="470" pcid="1171">
    def test_upload_for_non_seekable_filelike_obj(self):
        self.add_create_multipart_response_with_default_expected_params()
        self.add_upload_part_responses_with_default_expected_params()
        self.add_complete_multipart_response_with_default_expected_params()
        stream = NonSeekableReader(self.content)
        future = self.manager.upload(
            stream, self.bucket, self.key, self.extra_args
        )
        future.result()
        self.assert_expected_client_calls_were_correct()
        self.assert_upload_part_bodies_were_correct()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="445" endline="458" pcid="1170">
    def test_upload_for_seekable_filelike_obj_that_has_been_seeked(self):
        self.add_create_multipart_response_with_default_expected_params()
        self.add_upload_part_responses_with_default_expected_params()
        self.add_complete_multipart_response_with_default_expected_params()
        bytes_io = BytesIO(self.content)
        seek_pos = 1
        bytes_io.seek(seek_pos)
        future = self.manager.upload(
            bytes_io, self.bucket, self.key, self.extra_args
        )
        future.result()
        self.assert_expected_client_calls_were_correct()
        self.assertEqual(b''.join(self.sent_bodies), self.content[seek_pos:])

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="421" endline="432" pcid="1168">
    def test_upload_for_fileobj(self):
        self.add_create_multipart_response_with_default_expected_params()
        self.add_upload_part_responses_with_default_expected_params()
        self.add_complete_multipart_response_with_default_expected_params()
        with open(self.filename, 'rb') as f:
            future = self.manager.upload(
                f, self.bucket, self.key, self.extra_args
            )
            future.result()
        self.assert_expected_client_calls_were_correct()
        self.assert_upload_part_bodies_were_correct()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3transfer/test_upload.py" startline="471" endline="504" pcid="1172">
    def test_limits_in_memory_chunks_for_fileobj(self):
        # Limit the maximum in memory chunks to one but make number of
        # threads more than one. This means that the upload will have to
        # happen sequentially despite having many threads available because
        # data is sequentially partitioned into chunks in memory and since
        # there can only every be one in memory chunk, each upload part will
        # have to happen one at a time.
        self.config.max_request_concurrency = 10
        self.config.max_in_memory_upload_chunks = 1
        self._manager = TransferManager(self.client, self.config)

        # Add some default stubbed responses.
        # These responses are added in order of part number so if the
        # multipart upload is not done sequentially, which it should because
        # we limit the in memory upload chunks to one, the stubber will
        # raise exceptions for mismatching parameters for partNumber when
        # once the upload() method is called on the transfer manager.
        # If there is a mismatch, the stubber error will propagate on
        # the future.result()
        self.add_create_multipart_response_with_default_expected_params()
        self.add_upload_part_responses_with_default_expected_params()
        self.add_complete_multipart_response_with_default_expected_params()
        with open(self.filename, 'rb') as f:
            future = self.manager.upload(
                f, self.bucket, self.key, self.extra_args
            )
            future.result()

        # Make sure that the stubber had all of its stubbed responses consumed.
        self.assert_expected_client_calls_were_correct()
        # Ensure the contents were uploaded in sequentially order by checking
        # the sent contents were in order.
        self.assert_upload_part_bodies_were_correct()

</source>
</class>

<class classid="52" nclones="4" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/functional/test_document_types.py" startline="278" endline="290" pcid="1237">
    def test_shorthand_not_supported_for_nested_doc_type(self):
        cmdline = [
            'doctype', 'describe-resource',
            '--modeled-mixed-with-doc-type-param',
            'DocType={foo=bar}',
        ]
        self.assert_raises_shorthand_syntax_error(
            cmdline,
            stderr_contains=self.nested_doctype_shorthand_error(
                '--modeled-mixed-with-doc-type-param', member_name='DocType'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_document_types.py" startline="291" endline="304" pcid="1238">
    def test_shorthand_not_supported_for_nested_doc_type_in_list(self):
        cmdline = [
            'doctype', 'describe-resource',
            '--modeled-mixed-with-doc-type-param',
            'ListOfDocTypes=[{foo=bar}]',
        ]
        self.assert_raises_shorthand_syntax_error(
            cmdline,
            stderr_contains=self.nested_doctype_shorthand_error(
                '--modeled-mixed-with-doc-type-param',
                member_name='ListOfDocTypes'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_document_types.py" startline="319" endline="332" pcid="1240">
    def test_shorthand_not_supported_for_nested_doc_type_in_nested_list(self):
        cmdline = [
            'doctype', 'describe-resource',
            '--modeled-mixed-with-doc-type-param',
            'NestedListsOfDocTypes=[[{foo=bar}]]',
        ]
        self.assert_raises_shorthand_syntax_error(
            cmdline,
            stderr_contains=self.nested_doctype_shorthand_error(
                '--modeled-mixed-with-doc-type-param',
                member_name='NestedListsOfDocTypes'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_document_types.py" startline="305" endline="318" pcid="1239">
    def test_shorthand_not_supported_for_nested_doc_type_in_map(self):
        cmdline = [
            'doctype', 'describe-resource',
            '--modeled-mixed-with-doc-type-param',
            'MapOfDocTypes={key={foo=bar}}',
        ]
        self.assert_raises_shorthand_syntax_error(
            cmdline,
            stderr_contains=self.nested_doctype_shorthand_error(
                '--modeled-mixed-with-doc-type-param',
                member_name='MapOfDocTypes'
            )
        )

</source>
</class>

<class classid="53" nclones="2" nlines="12" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="110" endline="126" pcid="1269">
        return cmdline

    def _get_nuget_commands(self):
        nuget_index_url = self.nuget_index_url_fmt.format(
            endpoint=self.endpoint
        )

        commands = []
        commands.append(
            [
                'nuget', 'sources', 'add',
                '-name', self.nuget_source_name,
                '-source', nuget_index_url,
                '-username', 'aws',
                '-password', self.auth_token
            ]
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="127" endline="142" pcid="1270">
        return commands

    def _get_dotnet_commands(self):
        nuget_index_url = self.nuget_index_url_fmt.format(
            endpoint=self.endpoint
        )

        commands = []
        commands.append(
            [
                'dotnet', 'nuget', 'add', 'source', nuget_index_url,
                '--name', self.nuget_source_name,
                '--username', 'aws',
                '--password', self.auth_token
            ]
        )
</source>
</class>

<class classid="54" nclones="2" nlines="25" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="301" endline="332" pcid="1279">
        for command in commands:
            self.assertIn(' '.join(command), stdout)

    def _assert_pypi_rc_has_expected_content(
        self, pypi_rc_str, server, repo_url=None, username=None, password=None
    ):
        pypi_rc = RawConfigParser()
        pypi_rc.read_string(pypi_rc_str)

        self.assertIn('distutils', pypi_rc.sections())
        self.assertIn('index-servers', pypi_rc.options('distutils'))
        index_servers = pypi_rc.get('distutils', 'index-servers')
        index_servers = [
            index_server.strip()
            for index_server
            in index_servers.split('\n')
            if index_server.strip() != ''
        ]
        self.assertIn(server, index_servers)

        if repo_url or username or password:
            self.assertIn(server, pypi_rc.sections())

        if repo_url:
            self.assertIn('repository', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'repository'), repo_url)

        if username:
            self.assertIn('username', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'username'), username)

        if password:
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="558" endline="589" pcid="7414">
        self.auth_token = 'auth-token'
        self.expiration = (datetime.now(tzlocal()) + relativedelta(years=1)
                           + relativedelta(months=9)).replace(microsecond=0)
        self.endpoint = 'https://{domain}-{domainOwner}.codeartifact.aws.' \
            'a2z.com/{format}/{repository}/'.format(
                domain=self.domain,
                domainOwner=self.domain_owner,
                format=self.package_format,
                repository=self.repository
            )
        self.default_pypi_rc = self.DEFAULT_PYPI_RC_FMT.format(
            repository_endpoint=self.endpoint,
            auth_token=self.auth_token
        )
        self.subprocess_utils = mock.Mock()
        self.test_pypi_rc_path = self.file_creator.full_path('pypirc')
        if not os.path.isdir(os.path.dirname(self.test_pypi_rc_path)):
            os.makedirs(os.path.dirname(self.test_pypi_rc_path))

        self.test_subject = TwineLogin(
            self.auth_token,
            self.expiration,
            self.endpoint,
            self.domain,
            self.repository,
            self.subprocess_utils,
            self.test_pypi_rc_path
        )

    def tearDown(self):
        self.file_creator.remove_all()

</source>
</class>

<class classid="55" nclones="4" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="343" endline="356" pcid="1281">
            self._get_nuget_commands()
        )

    def test_nuget_login_with_domain_owner_without_duration_seconds(self):
        cmdline = self._setup_cmd(tool='nuget', include_domain_owner=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="462" endline="475" pcid="1289">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_without_duration_seconds(self):
        cmdline = self._setup_cmd(tool='dotnet', include_domain_owner=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="357" endline="370" pcid="1282">
            self._get_nuget_commands()
        )

    def test_nuget_login_without_domain_owner_with_duration_seconds(self):
        cmdline = self._setup_cmd(tool='nuget', include_duration_seconds=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="477" endline="490" pcid="1290">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_without_domain_owner_with_duration_seconds(self):
        cmdline = self._setup_cmd(tool='dotnet', include_duration_seconds=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
</class>

<class classid="56" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="371" endline="389" pcid="1283">
            self._get_nuget_commands()
        )

    def test_nuget_login_with_domain_owner_duration_sections(self):
        cmdline = self._setup_cmd(
            tool='nuget',
            include_domain_owner=True,
            include_duration_seconds=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="492" endline="510" pcid="1291">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_duration_sections(self):
        cmdline = self._setup_cmd(
            tool='dotnet',
            include_domain_owner=True,
            include_duration_seconds=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_check_output_execution(
</source>
</class>

<class classid="57" nclones="6" nlines="12" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="400" endline="415" pcid="1285">
            result.stdout
        )

    def test_nuget_login_with_domain_owner_dry_run(self):
        cmdline = self._setup_cmd(
            tool='nuget', include_domain_owner=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_nuget_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="523" endline="538" pcid="1293">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_dry_run(self):
        cmdline = self._setup_cmd(
            tool='dotnet', include_domain_owner=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_dotnet_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="432" endline="449" pcid="1287">
            result.stdout
        )

    def test_nuget_login_with_domain_owner_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='nuget', include_domain_owner=True,
            include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_nuget_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="416" endline="431" pcid="1286">
            result.stdout
        )

    def test_nuget_login_with_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='nuget', include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_nuget_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="557" endline="574" pcid="1295">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_domain_owner_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='dotnet', include_domain_owner=True,
            include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_domain_owner=True,
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_dotnet_commands(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="540" endline="555" pcid="1294">
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_dotnet_login_with_duration_seconds_dry_run(self):
        cmdline = self._setup_cmd(
            tool='dotnet', include_duration_seconds=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='nuget',
            include_duration_seconds=True,
            result=result
        )
        self._assert_dry_run_execution(
            self._get_dotnet_commands(),
</source>
</class>

<class classid="58" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="601" endline="612" pcid="1299">
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_execution(self._get_npm_commands())

    def test_npm_login_with_domain_owner_duration(self):
        cmdline = self._setup_cmd(tool='npm', include_domain_owner=True,
                                  include_duration_seconds=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='npm', result=result,
            include_domain_owner=True, include_duration_seconds=True
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="673" endline="684" pcid="1306">
        self._assert_expiration_printed_to_stdout(result.stdout)
        self._assert_subprocess_execution(self._get_pip_commands())

    def test_pip_login_with_domain_owner_duration(self):
        cmdline = self._setup_cmd(tool='pip', include_domain_owner=True,
                                  include_duration_seconds=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='pypi', result=result, include_domain_owner=True,
            include_duration_seconds=True
        )
</source>
</class>

<class classid="59" nclones="3" nlines="15" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="715" endline="731" pcid="1310">
            'Argument --namespace is not supported for pip', result.stderr
        )

    def test_twine_login_without_domain_owner(self):
        cmdline = self._setup_cmd(tool='twine')
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(package_format='pypi', result=result)
        self._assert_expiration_printed_to_stdout(result.stdout)
        with open(self.test_pypi_rc_path) as f:
            test_pypi_rc_str = f.read()

        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=test_pypi_rc_str,
            server='codeartifact',
            repo_url=self.endpoint,
            username='aws',
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="766" endline="787" pcid="1313">
            password=self.auth_token
        )

    def test_twine_login_with_domain_owner_duration(self):
        cmdline = self._setup_cmd(tool='twine', include_domain_owner=True,
                                  include_duration_seconds=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='pypi', result=result, include_domain_owner=True,
            include_duration_seconds=True
        )
        self._assert_expiration_printed_to_stdout(result.stdout)

        with open(self.test_pypi_rc_path) as f:
            test_pypi_rc_str = f.read()

        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=test_pypi_rc_str,
            server='codeartifact',
            repo_url=self.endpoint,
            username='aws',
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="746" endline="765" pcid="1312">
            password=self.auth_token
        )

    def test_twine_login_with_domain_owner(self):
        cmdline = self._setup_cmd(tool='twine', include_domain_owner=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='pypi', result=result, include_domain_owner=True
        )
        self._assert_expiration_printed_to_stdout(result.stdout)

        with open(self.test_pypi_rc_path) as f:
            test_pypi_rc_str = f.read()

        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=test_pypi_rc_str,
            server='codeartifact',
            repo_url=self.endpoint,
            username='aws',
</source>
</class>

<class classid="60" nclones="2" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="732" endline="745" pcid="1311">
            password=self.auth_token
        )

    def test_twine_login_without_domain_owner_dry_run(self):
        cmdline = self._setup_cmd(tool='twine', dry_run=True)
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(package_format='pypi', result=result)
        self.assertFalse(os.path.exists(self.test_pypi_rc_path))
        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=self._get_twine_commands(),
            server='codeartifact',
            repo_url=self.endpoint,
            username='aws',
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="788" endline="805" pcid="1314">
            password=self.auth_token
        )

    def test_twine_login_with_domain_owner_dry_run(self):
        cmdline = self._setup_cmd(
            tool='twine', include_domain_owner=True, dry_run=True
        )
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        self._assert_operations_called(
            package_format='pypi', result=result, include_domain_owner=True
        )
        self.assertFalse(os.path.exists(self.test_pypi_rc_path))
        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=self._get_twine_commands(),
            server='codeartifact',
            repo_url=self.endpoint,
            username='aws',
</source>
</class>

<class classid="61" nclones="2" nlines="16" similarity="93">
<source file="systems/aws-cli-2.4.27/tests/functional/cloudfront/test_update_distribution.py" startline="63" endline="93" pcid="1326">
    def test_distribution_config(self):
        # To demonstrate the original --distribution-config still works
        cmdline = self.prefix + ('--distribution-config '
            'Origins={Quantity=1,Items=[{Id=foo,DomainName=bar}]},'
            'DefaultCacheBehavior={'
                'TargetOriginId=foo,'
                'ForwardedValues={QueryString=False,Cookies={Forward=none}},'
                'TrustedSigners={Enabled=True,Quantity=0},'
                'ViewerProtocolPolicy=allow-all,'
                'MinTTL=0'
                '},'
            'CallerReference=abcd,'
            'Enabled=True,'
            'Comment='
            )
        result = {
            'DistributionConfig': {
                'Origins': {
                    'Quantity': 1,
                    'Items': [{'Id': 'foo', 'DomainName': 'bar'}]
                },
                'CallerReference': 'abcd',
                'Comment': '',
                'Enabled': True,
                'DefaultCacheBehavior': mock.ANY,
                },
            'Id': 'myid',
            }
        self.run_cmd(cmdline)
        self.assertEqual(self.last_kwargs, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudfront/test_create_distribution.py" startline="90" endline="119" pcid="1340">
    def test_distribution_config(self):
        # To demonstrate the original --distribution-config still works
        cmdline = self.prefix + ('--distribution-config '
            'Origins={Quantity=1,Items=[{Id=foo,DomainName=bar}]},'
            'DefaultCacheBehavior={'
                'TargetOriginId=foo,'
                'ForwardedValues={QueryString=False,Cookies={Forward=none}},'
                'TrustedSigners={Enabled=True,Quantity=0},'
                'ViewerProtocolPolicy=allow-all,'
                'MinTTL=0'
                '},'
            'CallerReference=abcd,'
            'Enabled=True,'
            'Comment='
            )
        result = {
            'DistributionConfig': {
                'Origins': {
                    'Quantity': 1,
                    'Items': [{'Id': 'foo', 'DomainName': 'bar'}]
                },
                'CallerReference': 'abcd',
                'Comment': '',
                'Enabled': True,
                'DefaultCacheBehavior': mock.ANY,
                },
            }
        self.run_cmd(cmdline)
        self.assertEqual(self.last_kwargs, result)

</source>
</class>

<class classid="62" nclones="3" nlines="20" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/cloudfront/test_create_distribution.py" startline="22" endline="43" pcid="1337">
    def test_origin_domain_name_with_custom_domain(self):
        cmdline = self.prefix + '--origin-domain-name foo.com'
        result = {
            'DistributionConfig': {
                'Origins': {
                    'Quantity': 1,
                    'Items': [{
                        'CustomOriginConfig': mock.ANY,
                        'DomainName': 'foo.com',
                        'Id': mock.ANY,
                        'OriginPath': '',
                    }]
                },
                'CallerReference': mock.ANY,
                'Comment': '',
                'Enabled': True,
                'DefaultCacheBehavior': mock.ANY,
                },
            }
        self.run_cmd(cmdline)
        self.assertEqual(self.last_kwargs, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudfront/test_create_distribution.py" startline="44" endline="65" pcid="1338">
    def test_origin_domain_name_with_s3_domain(self):
        cmdline = self.prefix + '--origin-domain-name foo.s3.amazonaws.com'
        result = {
            'DistributionConfig': {
                'Origins': {
                    'Quantity': 1,
                    'Items': [{
                        'S3OriginConfig': mock.ANY,
                        'DomainName': 'foo.s3.amazonaws.com',
                        'Id': mock.ANY,
                        'OriginPath': '',
                    }]
                },
                'CallerReference': mock.ANY,
                'Comment': '',
                'Enabled': True,
                'DefaultCacheBehavior': mock.ANY,
                },
            }
        self.run_cmd(cmdline)
        self.assertEqual(self.last_kwargs, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudfront/test_create_distribution.py" startline="66" endline="89" pcid="1339">
    def test_s3_domain_with_default_root_object(self):
        cmdline = (self.prefix + '--origin-domain-name foo.s3.amazonaws.com '
                   + '--default-root-object index.html')
        result = {
            'DistributionConfig': {
                'Origins': {
                    'Quantity': 1,
                    'Items': [{
                        'S3OriginConfig': mock.ANY,
                        'DomainName': 'foo.s3.amazonaws.com',
                        'Id': mock.ANY,
                        'OriginPath': '',
                    }]
                },
                'CallerReference': mock.ANY,
                'Comment': '',
                'Enabled': True,
                'DefaultCacheBehavior': mock.ANY,
                'DefaultRootObject': 'index.html',
                },
            }
        self.run_cmd(cmdline)
        self.assertEqual(self.last_kwargs, result)

</source>
</class>

<class classid="63" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/logs/test_tail.py" startline="153" endline="167" pcid="1384">
    def test_tail_defaults_to_10m(self):
        datetime_mock = mock.Mock(wraps=datetime)
        datetime_mock.utcnow = mock.Mock(
            return_value=datetime(1970, 1, 1, 0, 10, 1, tzinfo=tz.tzutc()))
        with mock.patch('awscli.customizations.logs.tail.datetime',
                        new=datetime_mock):
            self.assert_params_for_cmd(
                'logs tail %s' % self.group_name,
                params={
                    'logGroupName': self.group_name,
                    'interleaved': True,
                    'startTime': 1000,
                }
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/logs/test_tail.py" startline="178" endline="192" pcid="1386">
    def test_tail_with_relative_since(self):
        datetime_mock = mock.Mock(wraps=datetime)
        datetime_mock.utcnow = mock.Mock(
            return_value=datetime(1970, 1, 1, 0, 0, 2, tzinfo=tz.tzutc()))
        with mock.patch('awscli.customizations.logs.tail.datetime',
                        new=datetime_mock):
            self.assert_params_for_cmd(
                'logs tail %s --since 1s' % self.group_name,
                params={
                    'logGroupName': self.group_name,
                    'interleaved': True,
                    'startTime': 1000,
                }
            )

</source>
</class>

<class classid="64" nclones="3" nlines="20" similarity="95">
<source file="systems/aws-cli-2.4.27/tests/functional/ecs/test_deploy.py" startline="129" endline="154" pcid="1399">

    def test_deploy_with_defaults(self):
        cmdline = self.PREFIX
        cmdline += '--service ' + self.service_name
        cmdline += ' --task-definition ' + self.task_def_file
        cmdline += ' --codedeploy-appspec ' + self.appspec_file

        expected_create_deployment_params = \
            self.mock_deployer._get_create_deploy_request(
                self.application_name, self.deployment_group_name)

        self.parsed_responses = self._get_parsed_responses(
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name)

        expected_params = self._get_expected_params(
                                    self.service_name,
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name,
                                    expected_create_deployment_params)

        stdout, _, _ = self.assert_params_list_for_cmd(
            cmdline, expected_params, 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ecs/test_deploy.py" startline="155" endline="181" pcid="1400">
        self.assertEqual(stdout, self.expected_stdout)

    def test_deploy_with_default_arns(self):
        cmdline = self.PREFIX
        cmdline += '--service ' + self.service_arn
        cmdline += ' --cluster ' + self.cluster_arn
        cmdline += ' --task-definition ' + self.task_def_file
        cmdline += ' --codedeploy-appspec ' + self.appspec_file

        expected_create_deployment_params = \
            self.mock_deployer._get_create_deploy_request(
                self.application_name, self.deployment_group_name)

        self.parsed_responses = self._get_parsed_responses(
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name)

        expected_params = self._get_expected_params(
                                    self.service_arn,
                                    self.cluster_arn,
                                    self.application_name,
                                    self.deployment_group_name,
                                    expected_create_deployment_params)

        stdout, _, _ = self.assert_params_list_for_cmd(
            cmdline, expected_params, 0)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ecs/test_deploy.py" startline="182" endline="207" pcid="1401">

        self.assertEqual(stdout, self.expected_stdout)

    def test_deploy_with_json_appspec(self):
        cmdline = self.PREFIX
        cmdline += '--service ' + self.service_name
        cmdline += ' --task-definition ' + self.task_def_file
        cmdline += ' --codedeploy-appspec ' + self.appspec_file_json

        expected_create_deployment_params = \
            self.mock_deployer._get_create_deploy_request(
                self.application_name, self.deployment_group_name)

        self.parsed_responses = self._get_parsed_responses(
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name)

        expected_params = self._get_expected_params(
                                    self.service_name,
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name,
                                    expected_create_deployment_params)

        stdout, _, _ = self.assert_params_list_for_cmd(
</source>
</class>

<class classid="65" nclones="2" nlines="41" similarity="97">
<source file="systems/aws-cli-2.4.27/tests/functional/ecs/test_deploy.py" startline="208" endline="266" pcid="1402">
            cmdline, expected_params, 0)

        self.assertEqual(stdout, self.expected_stdout)

    def test_deploy_with_custom_timeout(self):
        cmdline = self.PREFIX
        cmdline += '--service ' + self.service_name
        cmdline += ' --task-definition ' + self.task_def_file
        cmdline += ' --codedeploy-appspec ' + self.appspec_file

        expected_create_deployment_params = \
            self.mock_deployer._get_create_deploy_request(
                self.application_name, self.deployment_group_name)

        custom_deployment_grp_response = {
            'deploymentGroupInfo': {
                'applicationName': self.application_name,
                'deploymentGroupName': self.deployment_group_name,
                'computePlatform': 'ECS',
                'blueGreenDeploymentConfiguration': {
                    'deploymentReadyOption': {
                        'waitTimeInMinutes': 5
                    },
                    'terminateBlueInstancesOnDeploymentSuccess': {
                        'terminationWaitTimeInMinutes': 60
                    }
                },
                'ecsServices': [{
                    'serviceName': self.service_name,
                    'clusterName': self.cluster_name
                }]
            }
        }
        custom_timeout = str(60 + 5 + TIMEOUT_BUFFER_MIN)

        self.parsed_responses = self._get_parsed_responses(
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name)

        self.parsed_responses[2] = custom_deployment_grp_response

        expected_params = self._get_expected_params(
                                    self.service_name,
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name,
                                    expected_create_deployment_params)

        expected_stdout = ("Successfully registered new ECS task "
                           "definition " + self.task_definition_arn + "\n"
                           "Successfully created deployment " +
                           self.deployment_id + "\n"
                           "Waiting for " + self.deployment_id +
                           " to succeed (will wait up to " + custom_timeout
                           + " minutes)...\nSuccessfully deployed "
                           + self.task_definition_arn + " to service '"
                           + self.service_name + "'\n")

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ecs/test_deploy.py" startline="267" endline="325" pcid="1403">
        stdout, _, _ = self.assert_params_list_for_cmd(
            cmdline, expected_params, 0)

        self.assertEqual(stdout, expected_stdout)

    def test_deploy_with_max_timeout(self):
        cmdline = self.PREFIX
        cmdline += '--service ' + self.service_name
        cmdline += ' --task-definition ' + self.task_def_file
        cmdline += ' --codedeploy-appspec ' + self.appspec_file

        expected_create_deployment_params = \
            self.mock_deployer._get_create_deploy_request(
                self.application_name, self.deployment_group_name)

        custom_deployment_grp_response = {
            'deploymentGroupInfo': {
                'applicationName': self.application_name,
                'deploymentGroupName': self.deployment_group_name,
                'computePlatform': 'ECS',
                'blueGreenDeploymentConfiguration': {
                    'deploymentReadyOption': {
                        'waitTimeInMinutes': 90
                    },
                    'terminateBlueInstancesOnDeploymentSuccess': {
                        'terminationWaitTimeInMinutes': 300
                    }
                },
                'ecsServices': [{
                    'serviceName': self.service_name,
                    'clusterName': self.cluster_name
                }]
            }
        }
        max_timeout = str(MAX_WAIT_MIN)

        self.parsed_responses = self._get_parsed_responses(
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name)

        self.parsed_responses[2] = custom_deployment_grp_response

        expected_params = self._get_expected_params(
                                    self.service_name,
                                    self.cluster_name,
                                    self.application_name,
                                    self.deployment_group_name,
                                    expected_create_deployment_params)

        expected_stdout = ("Successfully registered new ECS task "
                           "definition " + self.task_definition_arn + "\n"
                           "Successfully created deployment " +
                           self.deployment_id + "\n"
                           "Waiting for " + self.deployment_id +
                           " to succeed (will wait up to " + max_timeout
                           + " minutes)...\nSuccessfully deployed "
                           + self.task_definition_arn + " to service '"
                           + self.service_name + "'\n")
</source>
</class>

<class classid="66" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="47" endline="58" pcid="1414">
    def test_subcommand_alias_with_additonal_params(self):
        self.add_alias(
            'my-alias', 'ec2 describe-regions --region-names us-east-1')
        cmdline = 'my-alias'
        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="160" endline="172" pcid="1421">
    def test_alias_chaining(self):
        self.add_alias('base-alias', 'ec2 describe-regions')
        self.add_alias(
            'wrapper-alias', 'base-alias --region-names us-east-1')
        cmdline = 'wrapper-alias'
        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')

</source>
</class>

<class classid="67" nclones="4" nlines="18" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="70" endline="93" pcid="1416">
    def test_subcommand_alias_with_global_params(self):
        self.add_alias(
            'my-alias',
            'ec2 describe-regions --query Regions[].RegionName --output text')
        self.parsed_responses = [
            {
                'Regions': [
                    {
                        'Endpoint': 'ec2.us-east-1.amazonaws.com',
                        'RegionName': 'us-east-1'
                    }
                ]
            }
        ]
        cmdline = 'my-alias'
        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')
        self.assertEqual(stdout.strip(), 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="118" endline="141" pcid="1418">
    def test_global_params_then_subcommand_alias(self):
        self.add_alias('my-alias', 'ec2 describe-regions')
        self.parsed_responses = [
            {
                'Regions': [
                    {
                        'Endpoint': 'ec2.us-east-1.amazonaws.com',
                        'RegionName': 'us-east-1'
                    }
                ]
            }
        ]
        cmdline = '--query=Regions[].RegionName '
        cmdline += '--output=text '
        cmdline += 'my-alias'
        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')
        self.assertEqual(stdout.strip(), 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="173" endline="197" pcid="1422">
    def test_alias_chaining_with_globals(self):
        self.add_alias('base-alias', 'ec2 describe-regions')
        self.add_alias(
            'wrapper-alias',
            'base-alias --query Regions[].RegionName --output text')
        cmdline = 'wrapper-alias'
        self.parsed_responses = [
            {
                'Regions': [
                    {
                        'Endpoint': 'ec2.us-east-1.amazonaws.com',
                        'RegionName': 'us-east-1'
                    }
                ]
            }
        ]
        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')
        self.assertEqual(stdout.strip(), 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_alias.py" startline="94" endline="117" pcid="1417">
    def test_subcommand_alias_then_global_params(self):
        self.add_alias('my-alias', 'ec2 describe-regions')
        self.parsed_responses = [
            {
                'Regions': [
                    {
                        'Endpoint': 'ec2.us-east-1.amazonaws.com',
                        'RegionName': 'us-east-1'
                    }
                ]
            }
        ]
        cmdline = 'my-alias '
        cmdline += '--query=Regions[].RegionName '
        cmdline += '--output=text'
        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(
            self.operations_called[0][0].service_model.service_name,
            'ec2'
        )
        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')
        self.assertEqual(stdout.strip(), 'us-east-1')

</source>
</class>

<class classid="68" nclones="6" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_list.py" startline="21" endline="40" pcid="1433">
    def test_show_nothing_when_no_history_and_call_made(self):
        self.environ['AWS_CONFIG_FILE'] = ''
        self.driver = create_clidriver()
        self.entry_point = AWSCLIEntryPoint(self.driver)
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd('history show', expected_rc=0)
        # The history show should not display anything as no history should
        # have been collected
        self.assertEqual('', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_show.py" startline="42" endline="61" pcid="1438">
    def test_show_nothing_when_no_history(self):
        self.environ['AWS_CONFIG_FILE'] = ''
        self.driver = create_clidriver()
        self.entry_point = AWSCLIEntryPoint(self.driver)
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd('history show', expected_rc=0)
        # The history show should not display anything as no history should
        # have been collected
        self.assertEqual('', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_show.py" startline="84" endline="105" pcid="1440">
    def test_show_with_exclude(self):
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd(
            'history show --exclude CLI_ARGUMENTS', expected_rc=0)
        # Make sure the API call was not included because of the filter,
        # but all other events such as the version are included.
        #
        # The show command writes the history out as binary to the attached
        # stream so we want to determine if the values are in the binary
        # stdout stream
        self.assertNotIn("['ec2', 'describe-regions']", stdout)
        self.assertIn('version', stdout)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_show.py" startline="62" endline="83" pcid="1439">
    def test_show_with_include(self):
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd(
            'history show --include CLI_ARGUMENTS', expected_rc=0)
        # Make sure the CLI version was not included because of the filter.
        #
        # The show command writes the history out as binary to the attached
        # stream so we want to determine if the values are in the binary
        # stdout stream
        self.assertIn('describe-regions', stdout)
        self.assertNotIn('version', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_show.py" startline="20" endline="41" pcid="1437">
    def test_show_latest(self):
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        self.run_cmd('ec2 describe-regions', expected_rc=0)
        stdout, _, _ = self.run_cmd('history show', expected_rc=0)
        # Test that the CLI specific events are present such as arguments
        # entered and version
        #
        # The show command writes the history out as binary to the attached
        # stream so we want to determine if the values are in the binary
        # stdout stream
        self.assertIn('describe-regions', stdout)
        self.assertIn('version', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_list.py" startline="51" endline="66" pcid="1435">
    def test_show_one_call_present(self):
        self.parsed_responses = [
            {
                "Regions": [
                    {
                        "Endpoint": "ec2.ap-south-1.amazonaws.com",
                        "RegionName": "ap-south-1"
                    },
                ]
            }
        ]
        _, _, rc = self.run_cmd('ec2 describe-regions', expected_rc=0)
        self.history_recorder.record('CLI_RC', rc, 'CLI')
        stdout, _, _ = self.run_cmd('history list', expected_rc=0)
        self.assertIn('ec2 describe-regions', stdout)

</source>
</class>

<class classid="69" nclones="2" nlines="17" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_db.py" startline="413" endline="436" pcid="1473">

    def test_can_emit_http_request_record(self):
        # HTTP_REQUEST records have have their entire body field as a binary
        # blob, howver it will all be utf-8 valid since the binary fields
        # from the api call will have been b64 encoded.
        payload = {
            'url': ('https://lambda.us-west-2.amazonaws.com/2015-03-31/'
                    'functions'),
            'method': 'POST',
            'headers': CaseInsensitiveDict({
                'foo': 'bar'
            }),
            'body': b'body with no invalid utf-8 bytes in it',
            'streaming': False
        }
        self.handler.emit('HTTP_REQUEST', payload, 'BOTOCORE')
        record = self._get_last_record()
        parsed_payload = payload.copy()
        parsed_payload['headers'] = dict(parsed_payload['headers'])
        parsed_payload['body'] = 'body with no invalid utf-8 bytes in it'
        self._assert_record_has_command_id(record)
        self._assert_expected_event_type('HTTP_REQUEST', record)
        self._assert_expected_payload(parsed_payload, record)
        self._assert_expected_source('BOTOCORE', record)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_db.py" startline="437" endline="457" pcid="1474">

    def test_can_emit_http_response_record(self):
        # HTTP_RESPONSE also contains a binary response in its body, but it
        # will not contain any non-unicode characters
        payload = {
            'status_code': 200,
            'headers': CaseInsensitiveDict({
                'foo': 'bar'
            }),
            'body': b'body with no invalid utf-8 bytes in it',
            'streaming': False
        }
        self.handler.emit('HTTP_RESPONSE', payload, 'BOTOCORE')
        record = self._get_last_record()
        parsed_payload = payload.copy()
        parsed_payload['headers'] = dict(parsed_payload['headers'])
        parsed_payload['body'] = 'body with no invalid utf-8 bytes in it'
        self._assert_record_has_command_id(record)
        self._assert_expected_event_type('HTTP_RESPONSE', record)
        self._assert_expected_payload(parsed_payload, record)
        self._assert_expected_source('BOTOCORE', record)
</source>
</class>

<class classid="70" nclones="2" nlines="16" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_db.py" startline="458" endline="477" pcid="1475">

    def test_can_emit_parsed_response_record(self):
        payload = {
            "Count": 1,
            "Items": [
                {
                    "strkey": {
                        "S": "string"
                    }
                }
            ],
            "ScannedCount": 1,
            "ConsumedCapacity": None
        }
        self.handler.emit('PARSED_RESPONSE', payload, 'BOTOCORE')
        record = self._get_last_record()
        self._assert_record_has_command_id(record)
        self._assert_expected_event_type('PARSED_RESPONSE', record)
        self._assert_expected_payload(payload, record)
        self._assert_expected_source('BOTOCORE', record)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/history/test_db.py" startline="478" endline="500" pcid="1476">

    def test_can_emit_parsed_response_record_with_binary(self):
        # PARSED_RESPONSE can also contain raw bytes
        payload = {
            "Count": 1,
            "Items": [
                {
                    "bitkey": {
                        "B": b"binary data \xfe\xed"
                    }
                }
            ],
            "ScannedCount": 1,
            "ConsumedCapacity": None
        }
        self.handler.emit('PARSED_RESPONSE', payload, 'BOTOCORE')
        record = self._get_last_record()
        parsed_payload = payload.copy()
        parsed_payload['Items'][0]['bitkey']['B'] = "<Byte sequence>"
        self._assert_record_has_command_id(record)
        self._assert_expected_event_type('PARSED_RESPONSE', record)
        self._assert_expected_payload(payload, record)
        self._assert_expected_source('BOTOCORE', record)
</source>
</class>

<class classid="71" nclones="3" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/ses/test_send_email.py" startline="36" endline="48" pcid="1485">
    def test_plain_text_multiple_to(self):
        args = (' --subject This_is_a_test --from foo@bar.com'
                ' --to fie1@baz.com fie2@baz.com --text This_is_the_message')
        args_list = (self.prefix + args).split()
        result = {'Source': 'foo@bar.com',
                  'Destination': {
                      'ToAddresses': ['fie1@baz.com', 'fie2@baz.com']},
                  'Message': {
                      'Body': {'Text': {'Data': 'This_is_the_message'}},
                      'Subject': {'Data': 'This_is_a_test'}}}

        self.assert_params_for_cmd(args_list, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ses/test_send_email.py" startline="49" endline="63" pcid="1486">
    def test_plain_text_multiple_cc(self):
        args = (' --subject This_is_a_test --from foo@bar.com'
                ' --to fie1@baz.com fie2@baz.com --text This_is_the_message'
                ' --cc fie3@baz.com fie4@baz.com')
        args_list = (self.prefix + args).split()
        result = {'Source': 'foo@bar.com',
                  'Destination': {
                      'CcAddresses': ['fie3@baz.com', 'fie4@baz.com'],
                      'ToAddresses': ['fie1@baz.com', 'fie2@baz.com']},
                  'Message': {
                      'Body': {'Text': {'Data': 'This_is_the_message'}},
                      'Subject': {'Data': 'This_is_a_test'}}}

        self.assert_params_for_cmd(args_list, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ses/test_send_email.py" startline="64" endline="81" pcid="1487">
    def test_plain_text_multiple_bcc(self):
        args = (' --subject This_is_a_test --from foo@bar.com'
                ' --to fie1@baz.com fie2@baz.com --text This_is_the_message'
                ' --cc fie3@baz.com fie4@baz.com'
                ' --bcc fie5@baz.com fie6@baz.com')
        args_list = (self.prefix + args).split()

        result = {
            'Source': 'foo@bar.com',
            'Destination': {'BccAddresses': ['fie5@baz.com', 'fie6@baz.com'],
                            'CcAddresses': ['fie3@baz.com', 'fie4@baz.com'],
                            'ToAddresses': ['fie1@baz.com', 'fie2@baz.com']},
            'Message': {
                'Body': {'Text': {'Data': 'This_is_the_message'}},
                'Subject': {'Data': 'This_is_a_test'}}}

        self.assert_params_for_cmd(args_list, result)

</source>
</class>

<class classid="72" nclones="2" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/ses/test_send_email.py" startline="82" endline="94" pcid="1488">
    def test_html_text(self):
        args = (' --subject This_is_a_test --from foo@bar.com'
                ' --to fie@baz.com --html This_is_the_html_message')
        args_list = (self.prefix + args).split()
        result = {
            'Source': 'foo@bar.com',
            'Destination': {'ToAddresses': ['fie@baz.com']},
            'Message': {'Subject': {'Data': 'This_is_a_test'},
                        'Body': {
                            'Html': {'Data': 'This_is_the_html_message'}}}}

        self.assert_params_for_cmd(args_list, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ses/test_send_email.py" startline="95" endline="109" pcid="1489">
    def test_html_both(self):
        args = (' --subject This_is_a_test --from foo@bar.com'
                ' --to fie@baz.com --html This_is_the_html_message'
                ' --text This_is_the_text_message')
        args_list = (self.prefix + args).split()
        result = {
            'Source': 'foo@bar.com',
            'Destination': {'ToAddresses': ['fie@baz.com']},
            'Message': {
                'Subject': {'Data': 'This_is_a_test'},
                'Body': {
                    'Text': {'Data': 'This_is_the_text_message'},
                    'Html': {'Data': 'This_is_the_html_message'}}}}
        self.assert_params_for_cmd(args_list, result)

</source>
</class>

<class classid="73" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_get_token.py" startline="23" endline="33" pcid="1506">
    def setUp(self):
        super(TestGetTokenCommand, self).setUp()
        self.cluster_name = 'MyCluster'
        self.role_arn = 'arn:aws:iam::012345678910:role/RoleArn'
        self.access_key = 'ABCDEFGHIJKLMNOPQRST'
        self.secret_key = 'TSRQPONMLKJUHGFEDCBA'
        self.session_token = 'TOKENTOKENTOKENTOKEN'
        self.environ['AWS_ACCESS_KEY_ID'] = self.access_key
        self.environ['AWS_SECRET_ACCESS_KEY'] = self.secret_key
        self.expected_token_prefix = 'k8s-aws-v1.'

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/sso/__init__.py" startline="20" endline="31" pcid="2708">
    def setUp(self):
        super(BaseSSOTest, self).setUp()
        self.files = FileCreator()
        self.start_url = 'https://mysigin.com'
        self.sso_region = 'us-west-2'
        self.account = '012345678912'
        self.role_name = 'SSORole'
        self.config_file = self.files.full_path('config')
        self.environ['AWS_CONFIG_FILE'] = self.config_file
        self.set_config_file_content()
        self.access_token = 'foo.token.string'

</source>
</class>

<class classid="74" nclones="4" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_update_kubeconfig.py" startline="263" endline="275" pcid="1532">
        self.assert_config_state("new_config", "output_single")

    def test_use_environment(self):
        configs = ['invalid_string_clusters',
                   'valid_empty_existing',
                   'valid_existing']
        passed = None
        environment = ['does_not_exist',
                       'invalid_string_clusters',
                       'valid_empty_existing',
                       'valid_existing']

        self.assert_cmd(configs, passed, environment)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_update_kubeconfig.py" startline="311" endline="322" pcid="1536">
        self.assert_config_state("valid_existing", 'output_combined')

    def test_corrupted_and_missing(self):
        configs = ["invalid_string_clusters",
                   "invalid_string_users"]
        passed = None
        environment = ["invalid_string_clusters",
                       "does_not_exist",
                       "does_not_exist2",
                       "invalid_string_users"]

        with self.assertRaises(KubeconfigCorruptedError):
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_update_kubeconfig.py" startline="297" endline="310" pcid="1535">
            self.assert_cmd(configs, passed, environment)

    def test_all_but_one_corrupted(self):
        configs = ["valid_existing",
                   "invalid_string_cluster_entry",
                   "invalid_string_contexts",
                   "invalid_text"]
        passed = None
        environment = ["valid_existing",
                       "invalid_string_cluster_entry",
                       "invalid_string_contexts",
                       "invalid_text"]

        self.assert_cmd(configs, passed, environment)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_update_kubeconfig.py" startline="285" endline="296" pcid="1534">
        self.assert_config_state("valid_existing", "output_combined")

    def test_all_corrupted(self):
        configs = ["invalid_string_cluster_entry",
                   "invalid_string_contexts",
                   "invalid_text"]
        passed = None
        environment = ["invalid_string_cluster_entry",
                       "invalid_string_contexts",
                       "invalid_text"]

        with self.assertRaises(KubeconfigCorruptedError):
</source>
</class>

<class classid="75" nclones="2" nlines="14" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_update_kubeconfig.py" startline="331" endline="350" pcid="1538">
            self.assert_cmd(configs, passed, environment)

    def test_environmemt_empty_elements(self):
        configs = ["valid_existing"]

        self.initialize_tempfiles(configs)
        env_variable = build_environment([
            "",
            self._get_temp_config("valid_existing")
        ])
        args = ["--name", "ExampleCluster"]

        with mock.patch.dict(os.environ, {'KUBECONFIG': env_variable}):
            with mock.patch(
                "awscli.customizations.eks.update_kubeconfig.DEFAULT_PATH",
                            self._get_temp_config("default_temp")):
                self.command(args, None)

        self.mock_create_client.assert_called_once_with('eks')
        self.client\
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_update_kubeconfig.py" startline="351" endline="367" pcid="1539">
            .describe_cluster.assert_called_once_with(name='ExampleCluster')
        self.assert_config_state("valid_existing", "output_combined")

    def test_environmemt_all_empty(self):
        configs = ["valid_existing"]

        self.initialize_tempfiles(configs)
        env_variable = build_environment(["", ""," ", "\t",""])
        args = ["--name", "ExampleCluster"]

        with mock.patch.dict(os.environ, {'KUBECONFIG': env_variable}):
            with mock.patch(
                "awscli.customizations.eks.update_kubeconfig.DEFAULT_PATH",
                            self._get_temp_config("default_temp")):
                self.command(args, None)

        self.mock_create_client.assert_called_once_with('eks')
</source>
</class>

<class classid="76" nclones="4" nlines="19" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_util.py" startline="37" endline="64" pcid="1557">
def describe_cluster_response():
    """Get an example describe_cluster call (For mocking)"""
    return {
        "cluster": {
            "status": "ACTIVE",
            "endpoint": "https://endpoint.amazonaws.com",
            "name": EXAMPLE_NAME,
            "certificateAuthority": {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpWR1Z6ZEdsdVp5QkVZWFJoRFFwVVpYTjBhVzVuSUVSaGRHRU5DbFJsYzNScGJtY2dSR0YwWVEwS2EzVmlaWEp1WlhSbGN6QWVGdzBLVkdWemRHbHVaeUJFWVhSaERRcFVaWE4wYVc1bklFUmhkR0ZWQkFNVERRcHJkV0psY201bGRHVnpNQUVpTUEwS1ZHVnpkR2x1WnlCRVlYUmhEUXBVWlhOMGFXNW5JRVJoZEdFTkNsUmxjM1JwYm1jZ1JHRjBZY3UvR1FnbmFTcDNZaHBDTWhGVVpYTjBhVzVuSUVSaGRHRXl3clZqeEpWNjNwNFVHRmpZdHdGR1drUldJVkV1VkdWemRHbHVaeUJFWVhSaGJzT0MxSVJiTDhPd0lpMVhiWGg2VkdWemRHbHVaeUJFWVhSaFpXVndTTk9VVUZKNmN5QWJaaFpnWVNkTUV3MEtGMVJsYzNScGJtY2dSR0YwWVFZRFZSMFBBUUVFQkFNQ0FsUmxjM1JwYm1jZ1JHRjBZUUV3RFFvR0NTcElEUXBVWlhOMGFXNW5JRVJoZEdGcEgxc1pPRTNMa3lrMU9DWUNHUloyTEZjM3paOCtHell3WEZSbGMzUnBibWNnUkdGMFlYMUR5NjFNMVlGV1AxWVRIMVJsYzNScGJtY2dSR0YwWVd0aE5oMVphM2dWUDBGaGNSWjdKaW9oZVc4N1JsUmxjM1JwYm1jZ1JHRjBZUVpIVHd4NE9IdzZmZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
            },
            "roleArn": "arn:aws:iam::111222333444/eksRole",
            "resourcesVpcConfig": {
                "subnetIds": [
                    "subnet-00000000000000000",
                    "subnet-00000000000000001",
                    "subnet-00000000000000002"
                ],
                "vpcId": "vpc-00000000000000000",
                "securityGroupIds": [
                    "sg-00000000000000000"
                ]
            },
            "version": "1.10",
            "arn": "arn:aws:eks:region:111222333444:cluster/" + EXAMPLE_NAME,
            "createdAt": 1500000000.000
        }
    }

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_util.py" startline="118" endline="144" pcid="1560">
def describe_cluster_deleting_response():
    """Get an example describe_cluster call during deletion"""
    return {
        "cluster": {
            "status": "DELETING",
            "endpoint": "https://endpoint.amazonaws.com",
            "name": EXAMPLE_NAME,
            "certificateAuthority": {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpWR1Z6ZEdsdVp5QkVZWFJoRFFwVVpYTjBhVzVuSUVSaGRHRU5DbFJsYzNScGJtY2dSR0YwWVEwS2EzVmlaWEp1WlhSbGN6QWVGdzBLVkdWemRHbHVaeUJFWVhSaERRcFVaWE4wYVc1bklFUmhkR0ZWQkFNVERRcHJkV0psY201bGRHVnpNQUVpTUEwS1ZHVnpkR2x1WnlCRVlYUmhEUXBVWlhOMGFXNW5JRVJoZEdFTkNsUmxjM1JwYm1jZ1JHRjBZY3UvR1FnbmFTcDNZaHBDTWhGVVpYTjBhVzVuSUVSaGRHRXl3clZqeEpWNjNwNFVHRmpZdHdGR1drUldJVkV1VkdWemRHbHVaeUJFWVhSaGJzT0MxSVJiTDhPd0lpMVhiWGg2VkdWemRHbHVaeUJFWVhSaFpXVndTTk9VVUZKNmN5QWJaaFpnWVNkTUV3MEtGMVJsYzNScGJtY2dSR0YwWVFZRFZSMFBBUUVFQkFNQ0FsUmxjM1JwYm1jZ1JHRjBZUUV3RFFvR0NTcElEUXBVWlhOMGFXNW5JRVJoZEdGcEgxc1pPRTNMa3lrMU9DWUNHUloyTEZjM3paOCtHell3WEZSbGMzUnBibWNnUkdGMFlYMUR5NjFNMVlGV1AxWVRIMVJsYzNScGJtY2dSR0YwWVd0aE5oMVphM2dWUDBGaGNSWjdKaW9oZVc4N1JsUmxjM1JwYm1jZ1JHRjBZUVpIVHd4NE9IdzZmZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
            },
            "roleArn": "arn:aws:iam::111222333444/eksRole",
            "resourcesVpcConfig": {
                "subnetIds": [
                    "subnet-00000000000000000",
                    "subnet-00000000000000001",
                    "subnet-00000000000000002"
                ],
                "vpcId": "vpc-00000000000000000",
                "securityGroupIds": [
                    "sg-00000000000000000"
                ]
            },
            "version": "1.10",
            "arn": "arn:aws:eks:region:111222333444:cluster/" + EXAMPLE_NAME,
            "createdAt": 1500000000.000
        }
    }
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_util.py" startline="92" endline="117" pcid="1559">
def describe_cluster_creating_response():
    """Get an example describe_cluster call during creation"""
    return {
        "cluster": {
            "status": "CREATING",
            "name": EXAMPLE_NAME,
            "certificateAuthority": {},
            "roleArn": "arn:aws:iam::111222333444/eksRole",
            "resourcesVpcConfig": {
                "subnetIds": [
                    "subnet-00000000000000000",
                    "subnet-00000000000000001",
                    "subnet-00000000000000002"
                ],
                "vpcId": "vpc-00000000000000000",
                "securityGroupIds": [
                    "sg-00000000000000000"
                ]
            },
            "version": "1.10",
            "arn": "arn:aws:eks:region:111222333444:cluster/" + EXAMPLE_NAME,
            "createdAt": 1500000000.000
        }
    }


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/eks/test_util.py" startline="65" endline="91" pcid="1558">
def describe_cluster_no_status_response():
    """Get an example describe_cluster call (For mocking)"""
    return {
        "cluster": {
            "endpoint": "https://endpoint.amazonaws.com",
            "name": EXAMPLE_NAME,
            "certificateAuthority": {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpWR1Z6ZEdsdVp5QkVZWFJoRFFwVVpYTjBhVzVuSUVSaGRHRU5DbFJsYzNScGJtY2dSR0YwWVEwS2EzVmlaWEp1WlhSbGN6QWVGdzBLVkdWemRHbHVaeUJFWVhSaERRcFVaWE4wYVc1bklFUmhkR0ZWQkFNVERRcHJkV0psY201bGRHVnpNQUVpTUEwS1ZHVnpkR2x1WnlCRVlYUmhEUXBVWlhOMGFXNW5JRVJoZEdFTkNsUmxjM1JwYm1jZ1JHRjBZY3UvR1FnbmFTcDNZaHBDTWhGVVpYTjBhVzVuSUVSaGRHRXl3clZqeEpWNjNwNFVHRmpZdHdGR1drUldJVkV1VkdWemRHbHVaeUJFWVhSaGJzT0MxSVJiTDhPd0lpMVhiWGg2VkdWemRHbHVaeUJFWVhSaFpXVndTTk9VVUZKNmN5QWJaaFpnWVNkTUV3MEtGMVJsYzNScGJtY2dSR0YwWVFZRFZSMFBBUUVFQkFNQ0FsUmxjM1JwYm1jZ1JHRjBZUUV3RFFvR0NTcElEUXBVWlhOMGFXNW5JRVJoZEdGcEgxc1pPRTNMa3lrMU9DWUNHUloyTEZjM3paOCtHell3WEZSbGMzUnBibWNnUkdGMFlYMUR5NjFNMVlGV1AxWVRIMVJsYzNScGJtY2dSR0YwWVd0aE5oMVphM2dWUDBGaGNSWjdKaW9oZVc4N1JsUmxjM1JwYm1jZ1JHRjBZUVpIVHd4NE9IdzZmZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
            },
            "roleArn": "arn:aws:iam::111222333444/eksRole",
            "resourcesVpcConfig": {
                "subnetIds": [
                    "subnet-00000000000000000",
                    "subnet-00000000000000001",
                    "subnet-00000000000000002"
                ],
                "vpcId": "vpc-00000000000000000",
                "securityGroupIds": [
                    "sg-00000000000000000"
                ]
            },
            "version": "1.10",
            "arn": "arn:aws:eks:region:111222333444:cluster/" + EXAMPLE_NAME,
            "createdAt": 1500000000.000
        }
    }

</source>
</class>

<class classid="77" nclones="2" nlines="16" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/servicecatalog/test_generate_createproduct.py" startline="57" endline="74" pcid="1562">
                ]}

    def init_params(self):
        self.obj_key = 'development-environment.template'
        self.template_path = os.path.join(os.path.dirname(__file__),
                                          self.obj_key)
        self.bucket_name = 'bucket_name'
        self.product_name = 'prod_name'
        self.tags = 'Key=key1,Value=value1  Key=key2,Value=value2 \
                    Key=key3,Value=value3'
        self.product_owner = 'prod_owner'
        self.product_type = 'CLOUD_FORMATION_TEMPLATE'
        self.provisioning_artifact_name = 'prov_art_name'
        self.provisioning_artifact_description = 'prov_art_desc'
        self.provisioning_artifact_type = 'CLOUD_FORMATION_TEMPLATE'
        self.product_description = 'prod_desc'
        self.product_distributor = 'prod_dist'
        self.support_description = 'support_desc'
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1919" endline="1936" pcid="4932">
    def setUp(self):
        self.operation_name = 'GetObject'
        self.signature_version = 's3v4'
        self.region_name = 'us-west-2'
        self.service = 's3'
        self.account = '123456789012'
        self.bucket = 'mybucket'
        self.key = 'key.txt'
        self.accesspoint_name = 'myaccesspoint'
        self.outpost_name = 'op-123456789012'
        self.partition = 'aws'
        self.endpoint_resolver = mock.Mock()
        self.dns_suffix = 'amazonaws.com'
        self.endpoint_resolver.construct_endpoint.return_value = {
            'dnsSuffix': self.dns_suffix
        }
        self.endpoint_setter = self.get_endpoint_setter()

</source>
</class>

<class classid="78" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/test_generatecliskeleton.py" startline="21" endline="31" pcid="1612">
    def test_generate_cli_skeleton_s3api(self):
        cmdline = 's3api delete-object --generate-cli-skeleton'
        stdout, _, rc = self.run_cmd(cmdline)
        self.assertEqual(rc, 0)
        loaded_skeleton = json.loads(stdout)
        self.assertEqual(loaded_skeleton['Bucket'], '')
        self.assertEqual(loaded_skeleton['BypassGovernanceRetention'], True)
        self.assertEqual(loaded_skeleton['Key'], '')
        self.assertEqual(loaded_skeleton['MFA'], '')
        self.assertEqual(loaded_skeleton['RequestPayer'], 'requester')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_generatecliskeleton.py" startline="51" endline="61" pcid="1615">
    def test_generate_cli_skeleton_s3api(self):
        cmdline = 's3api delete-object --generate-cli-skeleton yaml-input'
        stdout, _, rc = self.run_cmd(cmdline)
        self.assertEqual(rc, 0)
        loaded_skeleton = yaml.safe_load(stdout)
        self.assertEqual(loaded_skeleton['Bucket'], '')
        self.assertEqual(loaded_skeleton['BypassGovernanceRetention'], True)
        self.assertEqual(loaded_skeleton['Key'], '')
        self.assertEqual(loaded_skeleton['MFA'], '')
        self.assertEqual(loaded_skeleton['RequestPayer'], 'requester')

</source>
</class>

<class classid="79" nclones="2" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/cloudtrail/test_validation.py" startline="110" endline="120" pcid="1636">
        self.assertIn('Digest file\ts3://1/%s\tvalid'
                      % digest_provider.digests[0], stdout)

    def test_verbose_output_shows_valid_digests(self):
        key_provider, digest_provider, validator = create_scenario(
            ['gap'], [])
        _setup_mock_traverser(self._mock_traverser, key_provider,
                              digest_provider, validator)
        stdout, stderr, rc = self.run_cmd(
            "cloudtrail validate-logs --trail-arn %s --start-time %s --verbose"
            % (TEST_TRAIL_ARN, START_TIME_ARG), 0)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudtrail/test_validation.py" startline="121" endline="133" pcid="1637">
        self.assertIn('Digest file\ts3://1/%s\tvalid'
                      % digest_provider.digests[0], stdout)

    def test_warns_when_digest_deleted(self):
        key_provider, digest_provider, validator = create_scenario(
            ['gap', 'missing', 'link', 'missing'], [])
        _setup_mock_traverser(self._mock_traverser, key_provider,
                              digest_provider, validator)
        stdout, stderr, rc = self.run_cmd(
            "cloudtrail validate-logs --trail-arn %s --start-time %s --verbose"
            % (TEST_TRAIL_ARN, START_TIME_ARG), 1)
        self.assertIn('Digest file\ts3://1/%s\tINVALID: not found'
                      % digest_provider.digests[1], stderr)
</source>
</class>

<class classid="80" nclones="2" nlines="14" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/cloudtrail/test_validation.py" startline="176" endline="191" pcid="1641">
            'Results found for 2014-08-10T01:00:00Z to 2014-08-10T02:30:00Z',
            stdout)

    def test_warns_when_no_digests_after_start_date(self):
        key_provider = Mock()
        key_provider.get_public_keys.return_value = [{'Fingerprint': 'a'}]
        digest_provider = Mock()
        digest_provider.load_digest_keys_in_range.return_value = []
        validator = Mock()
        _setup_mock_traverser(self._mock_traverser, key_provider,
                              digest_provider, validator)
        stdout, stderr, rc = self.run_cmd(
            ('cloudtrail validate-logs --trail-arn %s --start-time %s '
             '--end-time %s') % (TEST_TRAIL_ARN, START_TIME_ARG, END_TIME_ARG),
            0)
        self.assertIn('Results requested for %s to %s\nNo digests found'
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/cloudtrail/test_validation.py" startline="192" endline="207" pcid="1642">
                      % (format_display_date(START_DATE),
                         format_display_date(END_DATE)), stdout)

    def test_warns_when_no_digests_found_in_range(self):
        key_provider = Mock()
        key_provider.get_public_keys.return_value = [{'Fingerprint': 'a'}]
        digest_provider = Mock()
        digest_provider.load_digest_keys_in_range.return_value = []
        validator = Mock()
        _setup_mock_traverser(self._mock_traverser, key_provider,
                              digest_provider, validator)
        stdout, stderr, rc = self.run_cmd(
            ("cloudtrail validate-logs --trail-arn %s --start-time '%s' "
             "--end-time '%s'")
            % (TEST_TRAIL_ARN, START_TIME_ARG, END_TIME_ARG), 0)
        self.assertIn('Results requested for %s to %s\nNo digests found'
</source>
</class>

<class classid="81" nclones="20" nlines="13" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="37" endline="50" pcid="1656">
    def test_simple_select(self):
        command = ['ddb', 'select', 'mytable']
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        operations_called = [o[0].name for o in self.operations_called]
        self.assertEqual(operations_called, ['Scan'])
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="326" endline="339" pcid="1672">
    def test_select_return_consumed_capacity(self):
        command = [
            'ddb', 'select', 'mytable', '--return-consumed-capacity',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'TOTAL',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="75" endline="87" pcid="1658">
    def test_select_with_index_name(self):
        command = ['ddb', 'select', 'mytable', '--index-name', 'myindex']
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'IndexName': 'myindex',
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="284" endline="297" pcid="1669">
    def test_select_consistent_read(self):
        command = [
            'ddb', 'select', 'mytable', '--consistent-read',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="233" endline="247" pcid="1666">
    def test_select_with_attributes_all(self):
        command = [
            'ddb', 'select', 'mytable', '--attributes', 'ALL'
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'Select': 'ALL_ATTRIBUTES',
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="312" endline="325" pcid="1671">
    def test_select_no_return_consumed_capacity(self):
        command = [
            'ddb', 'select', 'mytable', '--no-return-consumed-capacity',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="298" endline="311" pcid="1670">
    def test_select_no_consistent_read(self):
        command = [
            'ddb', 'select', 'mytable', '--no-consistent-read',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': False,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="340" endline="355" pcid="1673">
    def test_select_return_consumed_capacity_with_index(self):
        command = [
            'ddb', 'select', 'mytable', '--return-consumed-capacity',
            '--index-name', 'myindex',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'INDEXES',
            'ConsistentRead': True,
            'IndexName': 'myindex',
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="356" endline="369" pcid="1674">
    def test_select_with_query(self):
        command = [
            'ddb', 'select', 'mytable', '--query', 'Items'
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response['Items'])

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="88" endline="103" pcid="1659">
    def test_select_with_projection(self):
        command = [
            'ddb', 'select', 'mytable', '--projection', 'foo'
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'ProjectionExpression': '#n0',
            'ExpressionAttributeNames': {'#n0': 'foo'},
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="248" endline="264" pcid="1667">
    def test_select_with_attributes_all_projected(self):
        command = [
            'ddb', 'select', 'mytable', '--attributes', 'ALL_PROJECTED',
            '--index-name', 'myindex',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'Select': 'ALL_PROJECTED_ATTRIBUTES',
            'IndexName': 'myindex',
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="130" endline="149" pcid="1661">
    def test_filter_with_function(self):
        command = [
            'ddb', 'select', 'mytable', '--filter', 'contains(foo, "bar")'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': 'contains(#n0, :n1)',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                ':n1': {'S': 'bar'},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="150" endline="169" pcid="1662">
    def test_filter_with_set(self):
        command = [
            'ddb', 'select', 'mytable', '--filter', 'foo = {1, 2, 3}'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': '#n0 = :n1',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                ':n1': {'NS': ['1', '2', '3']},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="265" endline="283" pcid="1668">
    def test_select_with_attributes_count(self):
        self.parsed_response = {
            "Count": 1,
            "ScannedCount": 1,
        }
        command = [
            'ddb', 'select', 'mytable', '--attributes', 'COUNT'
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'Select': 'COUNT',
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="170" endline="190" pcid="1663">
    def test_filter_with_bytes(self):
        command = [
            'ddb', 'select', 'mytable', '--filter', 'foo <> b"4pyT"'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': '#n0 <> :n1',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                # This will be base64 encoded during serialization
                ':n1': {'B': b'\xe2\x9c\x93'},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="213" endline="232" pcid="1665">
    def test_filter_with_map(self):
        command = [
            'ddb', 'select', 'mytable', '--filter', 'foo <> {"bar": 4}'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': '#n0 <> :n1',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                ':n1': {'M': {"bar": {"N": "4"}}},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_put.py" startline="140" endline="155" pcid="1695">

    def test_put_with_condition(self):
        command = [
            'ddb', 'put', 'mytable', '{foo: bar}',
            '--condition', 'attribute_exists(foo)',
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConditionExpression': 'attribute_exists(#n0)',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'Item': {"foo": {"S": "bar"}},
        }
        self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="191" endline="212" pcid="1664">
    def test_filter_with_list(self):
        command = [
            'ddb', 'select', 'mytable', '--filter', 'foo <> [-1, 2, "3"]'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': '#n0 <> :n1',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                ':n1': {'L': [
                    {'N': '-1'}, {'N': '2'}, {'S': '3'},
                ]},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="104" endline="129" pcid="1660">
    def test_select_with_filter(self):
        self.parsed_response = {
            "Count": 1,
            "Items": [{"foo": {"N": "2"}}],
            "ScannedCount": 1,
        }
        command = [
            'ddb', 'select', 'mytable', '--filter', 'foo BETWEEN 1 AND 3'
        ]

        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'FilterExpression': '#n0 BETWEEN :n1 AND :n2',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {
                ':n1': {'N': '1'},
                ':n2': {'N': '3'},
            }
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="51" endline="74" pcid="1657">
    def test_select_query(self):
        self.parsed_response = {
            "Count": 1,
            "Items": [{"foo": {"N": "2"}}],
            "ScannedCount": 1,
        }
        command = [
            'ddb', 'select', 'mytable', '--key-condition', 'foo = 1'
        ]
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'ConsistentRead': True,
            'KeyConditionExpression': '#n0 = :n1',
            'ExpressionAttributeNames': {'#n0': 'foo'},
            'ExpressionAttributeValues': {':n1': {'N': '1'}}
        }
        stdout, _, _ = self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        self.assert_yaml_response_equal(stdout, self.parsed_response)
        operations_called = [o[0].name for o in self.operations_called]
        self.assertEqual(operations_called, ['Query'])

</source>
</class>

<class classid="82" nclones="2" nlines="15" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="370" endline="384" pcid="1675">
    def test_select_returns_bytes(self):
        self.parsed_response = {
            "Count": 1,
            "Items": [{"foo": {"B": b"\xe2\x9c\x93"}}],
            "ScannedCount": 1,
        }
        command = ['ddb', 'select', 'mytable']
        stdout, _, _ = self.run_cmd(command, expected_rc=0)
        expected = {
            'Count': 1,
            'Items': [{"foo": b'\xe2\x9c\x93'}],
            "ScannedCount": 1,
        }
        self.assert_yaml_response_equal(stdout, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_select.py" startline="385" endline="400" pcid="1676">
    def test_consumed_capacity_omitted_if_none(self):
        self.parsed_response = {
            "Count": 1,
            "Items": [{"foo": {"S": "spam"}}],
            "ScannedCount": 1,
            "ConsumedCapacity": None,
        }
        command = ['ddb', 'select', 'mytable']
        stdout, _, _ = self.run_cmd(command, expected_rc=0)
        expected = {
            "Count": 1,
            "Items": [{"foo": "spam"}],
            "ScannedCount": 1,
        }
        self.assert_yaml_response_equal(stdout, expected)

</source>
</class>

<class classid="83" nclones="2" nlines="11" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_put.py" startline="50" endline="62" pcid="1691">

    def test_simple_put(self):
        command = ['ddb', 'put', 'mytable', '{foo: bar}']
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'Item': {"foo": {"S": "bar"}},
        }
        self.assert_params_for_cmd(
            command, expected_params, expected_rc=0
        )
        operations_called = [o[0].name for o in self.operations_called]
        self.assertEqual(operations_called, ['PutItem'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ddb/test_put.py" startline="179" endline="190" pcid="1698">

    def test_load_items_from_stdin(self):
        command = ['ddb', 'put', 'mytable', '-']
        expected_params = {
            'TableName': 'mytable',
            'ReturnConsumedCapacity': 'NONE',
            'Item': {"foo": {"S": "bar"}},
        }
        with capture_input(b'{foo: bar}'):
            self.assert_params_for_cmd(
                command, expected_params, expected_rc=0
            )
</source>
</class>

<class classid="84" nclones="2" nlines="12" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/functional/test_timeformat.py" startline="36" endline="49" pcid="1704">
    def test_iso(self):
        self.environ['AWS_CONFIG_FILE'] = self.files.create_file(
            'iso',
            '[default]\ncli_timestamp_format = iso8601\n')
        self.driver = create_clidriver()
        self.entry_point = AWSCLIEntryPoint(self.driver)
        expected_time = datetime.datetime.fromtimestamp(0).replace(
            tzinfo=tzlocal()).isoformat()

        stdout, _, _ = self.run_cmd(self.command)
        json_response = json.loads(stdout)
        start_time = json_response["builds"][0]["startTime"]
        self.assertEqual(expected_time, start_time)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_timeformat.py" startline="50" endline="62" pcid="1705">
    def test_none(self):
        self.environ['AWS_CONFIG_FILE'] = self.files.create_file(
            'none',
            '[default]\ncli_timestamp_format = wire\n')
        self.driver = create_clidriver()
        self.entry_point = AWSCLIEntryPoint(self.driver)
        expected_time = 0

        stdout, _, _ = self.run_cmd(self.command)
        json_response = json.loads(stdout)
        start_time = json_response["builds"][0]["startTime"]
        self.assertEqual(expected_time, start_time)

</source>
</class>

<class classid="85" nclones="6" nlines="10" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="28" endline="38" pcid="1813">
    def test_create_single_client_memory_constant(self):
        self.cmd('create_client', 's3')
        self.cmd('free_clients')
        self.record_memory()
        for _ in range(100):
            self.cmd('create_client', 's3')
            self.cmd('free_clients')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="104" endline="117" pcid="1818">
    def test_create_memory_paginators_in_loop(self):
        # See ``test_create_memory_clients_in_loop`` to understand why
        # paginators are first initialized and then freed. Same reason applies.
        self.cmd('create_multiple_paginators', '200', 's3', 'list_objects')
        self.cmd('free_paginators')
        self.record_memory()
        # 500 waiters in batches of 50.
        for _ in range(10):
            self.cmd(
                'create_multiple_paginators', '50', 's3', 'list_objects')
            self.cmd('free_paginators')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="78" endline="92" pcid="1816">
    def test_create_memory_waiters_in_loop(self):
        # See ``test_create_memory_clients_in_loop`` to understand why
        # waiters are first initialized and then freed. Same reason applies.
        self.cmd('create_multiple_waiters', '200', 's3', 'bucket_exists')
        self.cmd('free_waiters')
        self.record_memory()
        # 500 waiters in batches of 50.
        for _ in range(10):
            self.cmd(
                'create_multiple_waiters', '50', 's3', 'bucket_exists')
            self.cmd('free_waiters')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="93" endline="103" pcid="1817">
    def test_create_single_paginator_memory_constant(self):
        self.cmd('create_paginator', 's3', 'list_objects')
        self.cmd('free_paginators')
        self.record_memory()
        for _ in range(100):
            self.cmd('create_paginator', 's3', 'list_objects')
            self.cmd('free_paginators')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="39" endline="66" pcid="1814">
    def test_create_memory_clients_in_loop(self):
        # We need to first create clients and free then before
        # recording our memory samples.  This is because of two reasons:
        # 1. Caching.  Some of the botocore internals will cache data, so
        #    the first client created will consume more memory than subsequent
        #    clients.  We're interested in growing memory, not total
        #    memory usage (for now), so we we care about the memory in the
        #    steady state case.
        # 2. Python memory allocation.  Due to how python allocates memory
        #    via it's small object allocator, arena's aren't freed until the
        #    entire 256kb isn't in use.  If a single allocation in a single
        #    pool in a single arena is still in use, the arena is not
        #    freed.  This case is easy to hit, and pretty much any
        #    fragmentation guarantees this case is hit.  The best we can
        #    do is verify that memory that's released back to python's
        #    allocator (but not to the OS) is at least reused in subsequent
        #    requests to create botocore clients.
        self.cmd('create_multiple_clients', '200', 's3')
        self.cmd('free_clients')
        self.record_memory()
        # 500 clients in batches of 50.
        for _ in range(10):
            self.cmd('create_multiple_clients', '50', 's3')
            self.cmd('free_clients')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/leak/test_resource_leaks.py" startline="67" endline="77" pcid="1815">
    def test_create_single_waiter_memory_constant(self):
        self.cmd('create_waiter', 's3', 'bucket_exists')
        self.cmd('free_waiters')
        self.record_memory()
        for _ in range(100):
            self.cmd('create_waiter', 's3', 'bucket_exists')
            self.cmd('free_waiters')
        self.record_memory()
        start, end = self.memory_samples
        self.assertTrue((end - start) < self.MAX_GROWTH_BYTES, (end - start))

</source>
</class>

<class classid="86" nclones="2" nlines="14" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_history.py" startline="50" endline="65" pcid="1823">
    def test_does_record_api_call(self):
        self.http_stubber.add_response(body=self.s3_response_body)
        with self.http_stubber:
            self.client.list_buckets()

        api_call_events = self._get_all_events_of_type('API_CALL')
        self.assertEqual(len(api_call_events), 1)
        event = api_call_events[0]
        event_type, payload, source = event
        self.assertEqual(payload, {
                'operation': u'ListBuckets',
                'params': {},
                'service': 's3'
        })
        self.assertEqual(source, 'BOTOCORE')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_history.py" startline="97" endline="116" pcid="1825">
    def test_does_record_http_response(self):
        self.http_stubber.add_response(body=self.s3_response_body)
        with self.http_stubber:
            self.client.list_buckets()

        http_response_events = self._get_all_events_of_type('HTTP_RESPONSE')
        self.assertEqual(len(http_response_events), 1)
        event = http_response_events[0]
        event_type, payload, source = event

        self.assertEqual(payload, {
                'status_code': 200,
                'headers': {},
                'streaming': False,
                'body': self.s3_response_body,
                'context': {'operation_name': 'ListBuckets'}
            }
        )
        self.assertEqual(source, 'BOTOCORE')

</source>
</class>

<class classid="87" nclones="6" nlines="12" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="150" endline="163" pcid="1916">
    def test_endpoint_discovery_required_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint", endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_required(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryRequired"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="276" endline="288" pcid="1926">
    def test_endpoint_discovery_optional_with_env_var_default(self):
        self.environ['AWS_ENDPOINT_DISCOVERY_ENABLED'] = 'auto'
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint", config=None
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_optional(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryOptional"
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="198" endline="211" pcid="1919">
    def test_endpoint_discovery_optional_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint", endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_optional(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryOptional"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="181" endline="197" pcid="1918">
    def test_endpoint_discovery_enabled_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        config = Config(endpoint_discovery_enabled=True)
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint",
            config=config,
            endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_required(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryRequired"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="164" endline="180" pcid="1917">
    def test_endpoint_discovery_disabled_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        config = Config(endpoint_discovery_enabled=False)
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint",
            config=config,
            endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_required(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryRequired"
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="212" endline="228" pcid="1920">
    def test_endpoint_discovery_optional_disabled_with_custom_endpoint(self):
        endpoint = "https://custom.domain/"
        config = Config(endpoint_discovery_enabled=False)
        client, http_stubber = self.create_client(
            service_name="test-discovery-endpoint",
            config=config,
            endpoint_url=endpoint
        )
        with http_stubber as stubber:
            stubber.add_response(status=200, body=b'{}')
            client.test_discovery_optional(Foo="bar")
            self.assert_discovery_skipped(
                stubber,
                b"test-discovery-endpoint.TestDiscoveryOptional",
            )
            self.assert_endpoint_used(stubber.requests[0].url, endpoint)

</source>
</class>

<class classid="88" nclones="3" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="310" endline="321" pcid="1929">
    def test_endpoint_discovery_with_config_file_enabled(self):
        with temporary_file('w') as f:
            self.set_endpoint_discovery_config_file(f, "True")
            discovered_endpoint = 'https://discovered.domain'
            client, http_stubber = self.create_client(
                service_name="test-discovery-endpoint"
            )
            with http_stubber as stubber:
                self.add_describe_endpoints_response(stubber, discovered_endpoint)
                client.test_discovery_required(Foo="bar")
                self.assert_endpoint_discovery_used(stubber, discovered_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="322" endline="333" pcid="1930">
    def test_endpoint_discovery_with_config_file_enabled_lowercase(self):
        with temporary_file('w') as f:
            self.set_endpoint_discovery_config_file(f, "true")
            discovered_endpoint = 'https://discovered.domain'
            client, http_stubber = self.create_client(
                service_name="test-discovery-endpoint"
            )
            with http_stubber as stubber:
                self.add_describe_endpoints_response(stubber, discovered_endpoint)
                client.test_discovery_required(Foo="bar")
                self.assert_endpoint_discovery_used(stubber, discovered_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_discovery.py" startline="345" endline="355" pcid="1932">
    def test_endpoint_discovery_with_config_file_auto(self):
        with temporary_file('w') as f:
            self.set_endpoint_discovery_config_file(f, "AUTO")
            discovered_endpoint = 'https://discovered.domain'
            client, http_stubber = self.create_client(
                service_name="test-discovery-endpoint"
            )
            with http_stubber as stubber:
                self.add_describe_endpoints_response(stubber, discovered_endpoint)
                client.test_discovery_required(Foo="bar")
                self.assert_endpoint_discovery_used(stubber, discovered_endpoint)
</source>
</class>

<class classid="89" nclones="7" nlines="12" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="285" endline="304" pcid="1968">
    def test_assume_role(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = B\n\n'
            '[profile B]\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
        )
        self.write_config(config)

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)
        stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="349" endline="370" pcid="1971">
    def test_container_credential_source(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'credential_source = EcsContainer\n'
        )
        self.write_config(config)

        container_creds = self.create_random_credentials()
        self.container_provider.load.return_value = container_creds

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)

        stubber.assert_no_pending_responses()
        self.assertEqual(self.container_provider.load.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="397" endline="423" pcid="1974">
    def test_recursive_assume_role(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = B\n\n'
            '[profile B]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleB\n'
            'source_profile = C\n\n'
            '[profile C]\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
        )
        self.write_config(config)

        profile_b_creds = self.create_random_credentials()
        profile_b_response = self.create_assume_role_response(profile_b_creds)
        profile_a_creds = self.create_random_credentials()
        profile_a_response = self.create_assume_role_response(profile_a_creds)

        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', profile_b_response)
        stubber.add_response('assume_role', profile_a_response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, profile_a_creds)
        stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="327" endline="348" pcid="1970">
    def test_instance_metadata_credential_source(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'credential_source = Ec2InstanceMetadata\n'
        )
        self.write_config(config)

        metadata_creds = self.create_random_credentials()
        self.metadata_provider.load.return_value = metadata_creds

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)

        stubber.assert_no_pending_responses()
        self.assertEqual(self.metadata_provider.load.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="632" endline="650" pcid="1982">
    def test_self_referential_profile(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = A\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
        )
        self.write_config(config)

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)
        stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="424" endline="448" pcid="1975">
    def test_recursive_assume_role_stops_at_static_creds(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = B\n\n'
            '[profile B]\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
            'role_arn = arn:aws:iam::123456789:role/RoleB\n'
            'source_profile = C\n\n'
            '[profile C]\n'
            'aws_access_key_id = abc123\n'
            'aws_secret_access_key = def456\n'
        )
        self.write_config(config)

        profile_a_creds = self.create_random_credentials()
        profile_a_response = self.create_assume_role_response(profile_a_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', profile_a_response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, profile_a_creds)
        stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="305" endline="326" pcid="1969">
    def test_environment_credential_source(self):
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'credential_source = Environment\n'
        )
        self.write_config(config)

        environment_creds = self.create_random_credentials()
        self.env_provider.load.return_value = environment_creds

        expected_creds = self.create_random_credentials()
        response = self.create_assume_role_response(expected_creds)
        session, stubber = self.create_session(profile='A')
        stubber.add_response('assume_role', response)

        actual_creds = session.get_credentials()
        self.assert_creds_equal(actual_creds, expected_creds)

        stubber.assert_no_pending_responses()
        self.assertEqual(self.env_provider.load.call_count, 1)

</source>
</class>

<class classid="90" nclones="2" nlines="12" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="531" endline="551" pcid="1979">
    def test_web_identity_source_profile_ignores_env_vars(self):
        token_path = os.path.join(self.tempdir, 'token')
        with open(token_path, 'w') as token_file:
            token_file.write('a.token')
        self.environ['AWS_ROLE_ARN'] = 'arn:aws:iam::123456789:role/RoleB'
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'source_profile = B\n'
            '[profile B]\n'
            'web_identity_token_file = %s\n' % token_path
        )
        self.write_config(config)

        session, _ = self.create_session(profile='A')
        # The config is split between the profile and the env, we
        # should only be looking at the profile so this should raise
        # a configuration error.
        with self.assertRaises(InvalidConfigError):
            session.get_credentials()

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_credentials.py" startline="611" endline="631" pcid="1981">
    def test_web_identity_credential_source_ignores_env_vars(self):
        token_path = os.path.join(self.tempdir, 'token')
        with open(token_path, 'w') as token_file:
            token_file.write('a.token')
        self.environ['AWS_ROLE_ARN'] = 'arn:aws:iam::123456789:role/RoleB'
        self.environ['AWS_WEB_IDENTITY_TOKEN_FILE'] = token_path
        config = (
            '[profile A]\n'
            'role_arn = arn:aws:iam::123456789:role/RoleA\n'
            'credential_source = Environment\n'
        )
        self.write_config(config)

        session, _ = self.create_session(profile='A')
        # We should not get credentials from web-identity configured in the
        # environment when the Environment credential_source is set.
        # There are no Environment credentials, so this should raise a
        # retrieval error.
        with self.assertRaises(CredentialRetrievalError):
            session.get_credentials()

</source>
</class>

<class classid="91" nclones="7" nlines="12" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_neptune.py" startline="33" endline="50" pcid="2002">
    def test_create_db_cluster(self):
        params = {
            'DBClusterIdentifier': 'my-cluster',
            'Engine': 'neptune',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CreateDBClusterResponse>'
            b'<CreateDBClusterResult>'
            b'</CreateDBClusterResult>'
            b'</CreateDBClusterResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.create_db_cluster(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_rds.py" startline="27" endline="43" pcid="2275">
    def test_copy_snapshot(self):
        params = {
            'SourceDBSnapshotIdentifier': 'source-db',
            'TargetDBSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
                    b'<CopyDBSnapshotResponse>'
                    b'<CopyDBSnapshotResult></CopyDBSnapshotResult>'
                    b'</CopyDBSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_rds.py" startline="62" endline="79" pcid="2277">
    def test_start_db_instance_automated_backups_replication(self):
        params = {
            'SourceDBInstanceArn': 'arn:aws:rds:us-east-1:123456789012:db:source-db-instance',
            'SourceRegion': 'us-east-1',
        }
        response_body = (
            b'<StartDBInstanceAutomatedBackupsReplicationResponse>'
            b'<StartDBInstanceAutomatedBackupsReplicationResult>'
            b'</StartDBInstanceAutomatedBackupsReplicationResult>'
            b'</StartDBInstanceAutomatedBackupsReplicationResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.start_db_instance_automated_backups_replication(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)


</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_rds.py" startline="44" endline="61" pcid="2276">
    def test_create_db_instance_read_replica(self):
        params = {
            'SourceDBInstanceIdentifier': 'source-db',
            'DBInstanceIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CreateDBInstanceReadReplicaResponse>'
            b'<CreateDBInstanceReadReplicaResult>'
            b'</CreateDBInstanceReadReplicaResult>'
            b'</CreateDBInstanceReadReplicaResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.create_db_instance_read_replica(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_docdb.py" startline="53" endline="69" pcid="2283">
    def test_copy_db_cluster_snapshot(self):
        params = {
            'SourceDBClusterSnapshotIdentifier': 'source-db',
            'TargetDBClusterSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CopyDBClusterSnapshotResponse>'
            b'<CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_cluster_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_neptune.py" startline="51" endline="67" pcid="2003">
    def test_copy_db_cluster_snapshot(self):
        params = {
            'SourceDBClusterSnapshotIdentifier': 'source-db',
            'TargetDBClusterSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CopyDBClusterSnapshotResponse>'
            b'<CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_cluster_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_docdb.py" startline="33" endline="52" pcid="2282">
    def test_create_db_cluster(self):
        params = {
            'DBClusterIdentifier': 'my-cluster',
            'Engine': 'docdb',
            'SourceRegion': 'us-east-1',
            'MasterUsername': 'master',
            'MasterUserPassword': 'mypassword'
        }
        response_body = (
            b'<CreateDBClusterResponse>'
            b'<CreateDBClusterResult>'
            b'</CreateDBClusterResult>'
            b'</CreateDBClusterResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.create_db_cluster(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)

</source>
</class>

<class classid="92" nclones="4" nlines="27" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_modeled_exceptions.py" startline="28" endline="66" pcid="2007">
    def test_query_service(self):
        body = (
            b'<ErrorResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">'
            b'<Error><Type>Sender</Type>'
            b'<Name>foobar</Name>'
            b'<Code>AlreadyExists</Code>'
            b'<Message>Template already exists</Message>'
            b'</Error></ErrorResponse>'
        )
        response = {
            'Error': {
                # NOTE: The name and type are also present here as we return
                # the entire Error node as the 'Error' field for query
                'Name': 'foobar',
                'Type': 'Sender',
                'Code': 'AlreadyExists',
                'Message': 'Template already exists',
            },
            'ResponseMetadata': {
                'HTTPStatusCode': 400,
                'HTTPHeaders': {},
                'RetryAttempts': 0,
            },
            # Modeled properties on the exception shape
            'Name': 'foobar',
        }
        ses, http_stubber = self._create_client('ses')
        exception_cls = ses.exceptions.AlreadyExistsException
        with http_stubber as stubber:
            stubber.add_response(status=400, headers={}, body=body)
            with self.assertRaises(exception_cls) as assertion_context:
                template = {
                    'TemplateName': 'foobar',
                    'SubjectPart': 'foo',
                    'TextPart': 'bar'
                }
                ses.create_template(Template=template)
            self.assertEqual(assertion_context.exception.response, response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_modeled_exceptions.py" startline="67" endline="99" pcid="2008">
    def test_rest_xml_service(self):
        body = (
            b'<?xml version="1.0"?>\n'
            b'<ErrorResponse xmlns="http://cloudfront.amazonaws.com/doc/2019-03-26/">'
            b'<Error><Type>Sender</Type><Code>NoSuchDistribution</Code>'
            b'<Message>The specified distribution does not exist.</Message>'
            b'</Error>'
            b'<RequestId>request-id</RequestId>'
            b'</ErrorResponse>'
        )
        response = {
            'Error': {
                'Type': 'Sender',
                'Code': 'NoSuchDistribution',
                'Message': 'The specified distribution does not exist.',
            },
            'ResponseMetadata': {
                'HTTPStatusCode': 404,
                'HTTPHeaders': {},
                'RequestId': 'request-id',
                'RetryAttempts': 0,
            },
            # Modeled properties on the exception shape
            'Message': 'The specified distribution does not exist.',
        }
        cloudfront, http_stubber = self._create_client('cloudfront')
        exception_cls = cloudfront.exceptions.NoSuchDistribution
        with http_stubber as stubber:
            stubber.add_response(status=404, headers={}, body=body)
            with self.assertRaises(exception_cls) as assertion_context:
                cloudfront.get_distribution(Id='foobar')
            self.assertEqual(assertion_context.exception.response, response)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_modeled_exceptions.py" startline="137" endline="169" pcid="2010">
    def test_json_service(self):
        headers = {
            'x-amzn-RequestId': 'request-id',
            'x-amzn-id-2': 'id-2',
        }
        body = (
            b'{"__type":"ResourceNotFoundException",'
            b'"message":"Stream not found"}'
        )
        response = {
            'Error': {
                'Code': 'ResourceNotFoundException',
                'Message': 'Stream not found',
            },
            'ResponseMetadata': {
                'HTTPStatusCode': 400,
                'HTTPHeaders': {
                    'x-amzn-requestid': 'request-id',
                    'x-amzn-id-2': 'id-2',
                },
                'RequestId': 'request-id',
                'RetryAttempts': 0,
            },
            # Modeled properties on the exception shape
            'message': 'Stream not found',
        }
        kinesis, http_stubber = self._create_client('kinesis')
        exception_cls = kinesis.exceptions.ResourceNotFoundException
        with http_stubber as stubber:
            stubber.add_response(status=400, headers=headers, body=body)
            with self.assertRaises(exception_cls) as assertion_context:
                kinesis.describe_stream(StreamName='foobar')
            self.assertEqual(assertion_context.exception.response, response)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_modeled_exceptions.py" startline="100" endline="136" pcid="2009">
    def test_rest_json_service(self):
        headers = {
            'x-amzn-RequestId': 'request-id',
            'x-amzn-ErrorType': 'FileSystemAlreadyExists:',
        }
        body = (
            b'{"ErrorCode":"FileSystemAlreadyExists",'
            b'"FileSystemId":"fs-abcabc12",'
            b'"Message":"File system already exists"}'
        )
        response = {
            'Error': {
                'Code': 'FileSystemAlreadyExists',
                'Message': 'File system already exists',
            },
            'ResponseMetadata': {
                'HTTPStatusCode': 409,
                'HTTPHeaders': {
                    'x-amzn-requestid': 'request-id',
                    'x-amzn-errortype': 'FileSystemAlreadyExists:',
                },
                'RequestId': 'request-id',
                'RetryAttempts': 0,
            },
            # Modeled properties on the exception shape
            'ErrorCode': 'FileSystemAlreadyExists',
            'FileSystemId': 'fs-abcabc12',
            'Message': 'File system already exists',
        }
        efs, http_stubber = self._create_client('efs')
        exception_cls = efs.exceptions.FileSystemAlreadyExists
        with http_stubber as stubber:
            stubber.add_response(status=409, headers=headers, body=body)
            with self.assertRaises(exception_cls) as assertion_context:
                efs.create_file_system()
            self.assertEqual(assertion_context.exception.response, response)

</source>
</class>

<class classid="93" nclones="5" nlines="11" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="195" endline="212" pcid="2033">
    def test_mixed_modeled_and_unmodeled_config_vars(self):
        with temporary_file('w') as f:
            self.set_config_file(
                f,
                '[default]\n'
                's3 = \n'
                '    payload_signing_enabled = true\n'
                '    unmodeled = unmodeled_val'
            )
            client = self.create_s3_client()
            self.assertEqual(
                client.meta.config.s3,
                {
                    'payload_signing_enabled': True,
                    'unmodeled': 'unmodeled_val'
                }
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="238" endline="253" pcid="2036">
    def test_use_arn_region_nested_config_var(self):
        with temporary_file('w') as f:
            self.set_config_file(
                f,
                '[default]\n'
                's3 = \n'
                '    use_arn_region = true'
            )
            client = self.create_s3_client()
            self.assertEqual(
                client.meta.config.s3,
                {
                    'use_arn_region': True,
                }
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="223" endline="237" pcid="2035">
    def test_use_arn_region_config_var(self):
        with temporary_file('w') as f:
            self.set_config_file(
                f,
                '[default]\n'
                's3_use_arn_region = true'
            )
            client = self.create_s3_client()
            self.assertEqual(
                client.meta.config.s3,
                {
                    'use_arn_region': True,
                }
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="264" endline="280" pcid="2038">
    def test_use_arn_region_env_var_overrides_config_var(self):
        self.environ['AWS_S3_USE_ARN_REGION'] = 'false'
        with temporary_file('w') as f:
            self.set_config_file(
                f,
                '[default]\n'
                's3 = \n'
                '    use_arn_region = true'
            )
            client = self.create_s3_client()
        self.assertEqual(
            client.meta.config.s3,
            {
                'use_arn_region': False,
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="295" endline="314" pcid="2040">
    def test_client_config_use_arn_region_overrides_config_var(self):
        with temporary_file('w') as f:
            self.set_config_file(
                f,
                '[default]\n'
                's3 = \n'
                '    use_arn_region = true'
            )
            client = self.create_s3_client(
                config=Config(
                    s3={'use_arn_region': False}
                )
            )
        self.assertEqual(
            client.meta.config.s3,
            {
                'use_arn_region': False,
            }
        )

</source>
</class>

<class classid="94" nclones="5" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="464" endline="475" pcid="2060">
    def test_accesspoint_arn_with_custom_endpoint_and_dualstack(self):
        accesspoint_arn = (
            'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint'
        )
        self.client, http_stubber = self.create_stubbed_s3_client(
            endpoint_url='https://custom.com',
            config=Config(s3={'use_dualstack_endpoint': True}))
        http_stubber.add_response()
        self.client.list_objects(Bucket=accesspoint_arn)
        expected_endpoint = 'myendpoint-123456789012.custom.com'
        self.assert_endpoint(http_stubber.requests[0], expected_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="891" endline="904" pcid="2090">
    def test_accesspoint_fips_raise_for_cross_region(self):
        s3_accesspoint_arn = (
            'arn:aws-us-gov:s3:us-gov-east-1:123456789012:'
            'accesspoint:myendpoint'
        )
        self.client, _ = self.create_stubbed_s3_client(
            region_name='fips-us-gov-west-1',
            config=Config(s3={'use_arn_region': False})
        )
        expected_exception = UnsupportedS3AccesspointConfigurationError
        with self.assertRaisesRegex(expected_exception,
                                    'ARNs in another region are not allowed'):
            self.client.list_objects(Bucket=s3_accesspoint_arn)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="814" endline="827" pcid="2085">
    def test_s3_object_lambda_fips_raise_for_cross_region(self):
        s3_object_lambda_arn = (
            'arn:aws-us-gov:s3-object-lambda:us-gov-east-1:123456789012:'
            'accesspoint/mybanner'
        )
        self.client, _ = self.create_stubbed_s3_client(
            region_name='fips-us-gov-west-1',
            config=Config(s3={'use_arn_region': False})
        )
        expected_exception = UnsupportedS3AccesspointConfigurationError
        with self.assertRaisesRegex(expected_exception,
                                     'ARNs in another region are not allowed'):
            self.client.list_objects(Bucket=s3_object_lambda_arn)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="498" endline="510" pcid="2063">
    def test_accesspoint_arn_cross_partition_use_client_region(self):
        accesspoint_arn = (
            'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint'
        )
        self.client, _ = self.create_stubbed_s3_client(
            region_name='cn-north-1',
            config=Config(s3={'use_accelerate_endpoint': True})
        )
        with self.assertRaises(
                botocore.exceptions.
                UnsupportedS3AccesspointConfigurationError):
            self.client.list_objects(Bucket=accesspoint_arn)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="905" endline="917" pcid="2091">
    def test_accesspoint_fips_raise_if_fips_in_arn(self):
        s3_accesspoint_arn = (
            "arn:aws-us-gov:s3:fips-us-gov-west-1:123456789012:" "accesspoint:myendpoint"
        )
        self.client, _ = self.create_stubbed_s3_client(
            region_name="fips-us-gov-west-1",
        )
        expected_exception = UnsupportedS3AccesspointConfigurationError
        with self.assertRaisesRegex(
            expected_exception, "Invalid ARN, FIPS region not allowed in ARN."
        ):
            self.client.list_objects(Bucket=s3_accesspoint_arn)

</source>
</class>

<class classid="95" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="559" endline="576" pcid="2068">
    def test_copy_source_str_with_accesspoint_arn(self):
        copy_source = (
            'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint/'
            'object/myprefix/myobject'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client()
        self.add_copy_object_response(self.http_stubber)
        self.client.copy_object(
            Bucket='mybucket', Key='mykey', CopySource=copy_source
        )
        self.assert_expected_copy_source_header(
            self.http_stubber,
            expected_copy_source=(
                b'arn%3Aaws%3As3%3Aus-west-2%3A123456789012%3Aaccesspoint%3A'
                b'myendpoint/object/myprefix/myobject'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="577" endline="594" pcid="2069">
    def test_copy_source_str_with_accesspoint_arn_and_version_id(self):
        copy_source = (
            'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint/'
            'object/myprefix/myobject?versionId=myversionid'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client()
        self.add_copy_object_response(self.http_stubber)
        self.client.copy_object(
            Bucket='mybucket', Key='mykey', CopySource=copy_source
        )
        self.assert_expected_copy_source_header(
            self.http_stubber,
            expected_copy_source=(
                b'arn%3Aaws%3As3%3Aus-west-2%3A123456789012%3Aaccesspoint%3A'
                b'myendpoint/object/myprefix/myobject?versionId=myversionid'
            )
        )

</source>
</class>

<class classid="96" nclones="2" nlines="14" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="595" endline="613" pcid="2070">
    def test_copy_source_dict_with_accesspoint_arn(self):
        copy_source = {
            'Bucket':
                'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint',
            'Key': 'myprefix/myobject',
        }
        self.client, self.http_stubber = self.create_stubbed_s3_client()
        self.add_copy_object_response(self.http_stubber)
        self.client.copy_object(
            Bucket='mybucket', Key='mykey', CopySource=copy_source
        )
        self.assert_expected_copy_source_header(
            self.http_stubber,
            expected_copy_source=(
                b'arn%3Aaws%3As3%3Aus-west-2%3A123456789012%3Aaccesspoint%3A'
                b'myendpoint/object/myprefix/myobject'
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="614" endline="633" pcid="2071">
    def test_copy_source_dict_with_accesspoint_arn_and_version_id(self):
        copy_source = {
            'Bucket':
                'arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint',
            'Key': 'myprefix/myobject',
            'VersionId': 'myversionid'
        }
        self.client, self.http_stubber = self.create_stubbed_s3_client()
        self.add_copy_object_response(self.http_stubber)
        self.client.copy_object(
            Bucket='mybucket', Key='mykey', CopySource=copy_source
        )
        self.assert_expected_copy_source_header(
            self.http_stubber,
            expected_copy_source=(
                b'arn%3Aaws%3As3%3Aus-west-2%3A123456789012%3Aaccesspoint%3A'
                b'myendpoint/object/myprefix/myobject?versionId=myversionid'
            )
        )

</source>
</class>

<class classid="97" nclones="4" nlines="13" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="634" endline="651" pcid="2072">
    def test_basic_outpost_arn(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-west-2:123456789012:outpost:'
            'op-01234567890123456:accesspoint:myaccesspoint'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client(
            region_name='us-east-1')
        self.http_stubber.add_response()
        self.client.list_objects(Bucket=outpost_arn)
        request = self.http_stubber.requests[0]
        self.assert_signing_name(request, 's3-outposts')
        self.assert_signing_region(request, 'us-west-2')
        expected_endpoint = (
            'myaccesspoint-123456789012.op-01234567890123456.'
            's3-outposts.us-west-2.amazonaws.com'
        )
        self.assert_endpoint(request, expected_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="842" endline="862" pcid="2087">
    def test_s3_object_lambda_arn_with_us_east_1(self):
        # test that us-east-1 region is not resolved
        # into s3 global endpoint
        s3_object_lambda_arn = (
            'arn:aws:s3-object-lambda:us-east-1:123456789012:'
            'accesspoint/myBanner'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client(
            region_name='us-east-1',
            config=Config(s3={'use_arn_region': False})
        )
        self.http_stubber.add_response()
        self.client.list_objects(Bucket=s3_object_lambda_arn)
        request = self.http_stubber.requests[0]
        self.assert_signing_name(request, 's3-object-lambda')
        self.assert_signing_region(request, 'us-east-1')
        expected_endpoint = (
            'myBanner-123456789012.s3-object-lambda.us-east-1.amazonaws.com'
        )
        self.assert_endpoint(request, expected_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="863" endline="879" pcid="2088">
    def test_basic_s3_object_lambda_arn(self):
        s3_object_lambda_arn = (
            'arn:aws:s3-object-lambda:us-west-2:123456789012:'
            'accesspoint/myBanner'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client(
            region_name='us-east-1')
        self.http_stubber.add_response()
        self.client.list_objects(Bucket=s3_object_lambda_arn)
        request = self.http_stubber.requests[0]
        self.assert_signing_name(request, 's3-object-lambda')
        self.assert_signing_region(request, 'us-west-2')
        expected_endpoint = (
            'myBanner-123456789012.s3-object-lambda.us-west-2.amazonaws.com'
        )
        self.assert_endpoint(request, expected_endpoint)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="652" endline="669" pcid="2073">
    def test_basic_outpost_arn(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-west-2:123456789012:outpost:'
            'op-01234567890123456:accesspoint:myaccesspoint'
        )
        self.client, self.http_stubber = self.create_stubbed_s3_client(
            endpoint_url='https://custom.com',
            region_name='us-east-1')
        self.http_stubber.add_response()
        self.client.list_objects(Bucket=outpost_arn)
        request = self.http_stubber.requests[0]
        self.assert_signing_name(request, 's3-outposts')
        self.assert_signing_region(request, 'us-west-2')
        expected_endpoint = (
            'myaccesspoint-123456789012.op-01234567890123456.custom.com'
        )
        self.assert_endpoint(request, expected_endpoint)

</source>
</class>

<class classid="98" nclones="3" nlines="16" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="670" endline="691" pcid="2074">
    def test_outpost_arn_presigned_url(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-west-2:123456789012:outpost/'
            'op-01234567890123456/accesspoint/myaccesspoint'
        )
        expected_url = (
            'myaccesspoint-123456789012.op-01234567890123456.'
            's3-outposts.us-west-2.amazonaws.com'
        )
        expected_credentials = '20210827%2Fus-west-2%2Fs3-outposts%2Faws4_request'
        expected_signature = (
            'a944fbe2bfbae429f922746546d1c6f890649c88ba7826bd1d258ac13f327e09'
        )
        config = Config(signature_version='s3v4')
        presigned_url = self._get_presigned_url(
            outpost_arn, 'us-west-2', config=config
        )
        self._assert_presigned_url(
            presigned_url, expected_url,
            expected_signature, expected_credentials
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="692" endline="718" pcid="2075">
    def test_outpost_arn_presigned_url_with_use_arn_region(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-west-2:123456789012:outpost/'
            'op-01234567890123456/accesspoint/myaccesspoint'
        )
        expected_url = (
            'myaccesspoint-123456789012.op-01234567890123456.'
            's3-outposts.us-west-2.amazonaws.com'
        )
        expected_credentials = '20210827%2Fus-west-2%2Fs3-outposts%2Faws4_request'
        expected_signature = (
            'a944fbe2bfbae429f922746546d1c6f890649c88ba7826bd1d258ac13f327e09'
        )
        config = Config(
            signature_version='s3v4',
            s3={
                'use_arn_region': True,
            }
        )
        presigned_url = self._get_presigned_url(
            outpost_arn, 'us-west-2', config=config
        )
        self._assert_presigned_url(
            presigned_url, expected_url,
            expected_signature, expected_credentials
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="719" endline="745" pcid="2076">
    def test_outpost_arn_presigned_url_cross_region_arn(self):
        outpost_arn = (
            'arn:aws:s3-outposts:us-east-1:123456789012:outpost/'
            'op-01234567890123456/accesspoint/myaccesspoint'
        )
        expected_url = (
            'myaccesspoint-123456789012.op-01234567890123456.'
            's3-outposts.us-east-1.amazonaws.com'
        )
        expected_credentials = '20210827%2Fus-east-1%2Fs3-outposts%2Faws4_request'
        expected_signature = (
            '7f93df0b81f80e590d95442d579bd6cf749a35ff4bbdc6373fa669b89c7fce4e'
        )
        config = Config(
            signature_version='s3v4',
            s3={
                'use_arn_region': True,
            }
        )
        presigned_url = self._get_presigned_url(
            outpost_arn, 'us-west-2', config=config
        )
        self._assert_presigned_url(
            presigned_url, expected_url,
            expected_signature, expected_credentials
        )

</source>
</class>

<class classid="99" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1316" endline="1329" pcid="2124">
    def test_content_sha256_set_if_config_value_is_true(self):
        config = Config(signature_version='s3v4', s3={
            'payload_signing_enabled': True
        })
        self.client = self.session.create_client(
            's3', self.region, config=config)
        self.http_stubber = ClientHTTPStubber(self.client)
        self.http_stubber.add_response()
        with self.http_stubber:
            self.client.put_object(Bucket='foo', Key='bar', Body='baz')
        sent_headers = self.get_sent_headers()
        sha_header = sent_headers.get('x-amz-content-sha256')
        self.assertNotEqual(sha_header, b'UNSIGNED-PAYLOAD')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1330" endline="1343" pcid="2125">
    def test_content_sha256_not_set_if_config_value_is_false(self):
        config = Config(signature_version='s3v4', s3={
            'payload_signing_enabled': False
        })
        self.client = self.session.create_client(
            's3', self.region, config=config)
        self.http_stubber = ClientHTTPStubber(self.client)
        self.http_stubber.add_response()
        with self.http_stubber:
            self.client.put_object(Bucket='foo', Key='bar', Body='baz')
        sent_headers = self.get_sent_headers()
        sha_header = sent_headers.get('x-amz-content-sha256')
        self.assertEqual(sha_header, b'UNSIGNED-PAYLOAD')

</source>
</class>

<class classid="100" nclones="3" nlines="11" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1428" endline="1443" pcid="2129">
    def test_region_redirect(self):
        self.http_stubber.add_response(**self.redirect_response)
        self.http_stubber.add_response(**self.success_response)
        with self.http_stubber:
            response = self.client.list_objects(Bucket='foo')
        self.assertEqual(response['ResponseMetadata']['HTTPStatusCode'], 200)
        self.assertEqual(len(self.http_stubber.requests), 2)

        initial_url = ('https://s3.us-west-2.amazonaws.com/foo'
                       '?encoding-type=url')
        self.assertEqual(self.http_stubber.requests[0].url, initial_url)

        fixed_url = ('https://s3.eu-central-1.amazonaws.com/foo'
                     '?encoding-type=url')
        self.assertEqual(self.http_stubber.requests[1].url, fixed_url)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1600" endline="1613" pcid="2136">
    def test_fips_region_redirect(self):
        self.http_stubber.add_response(**self.redirect_response)
        self.http_stubber.add_response(**self.success_response)
        with self.http_stubber:
            response = self.client.list_objects(Bucket="foo")
        self.assertEqual(response["ResponseMetadata"]["HTTPStatusCode"], 200)
        self.assertEqual(len(self.http_stubber.requests), 2)

        initial_url = "https://s3-fips.us-west-2.amazonaws.com/foo" "?encoding-type=url"
        self.assertEqual(self.http_stubber.requests[0].url, initial_url)

        fixed_url = "https://s3-fips.us-west-1.amazonaws.com/foo" "?encoding-type=url"
        self.assertEqual(self.http_stubber.requests[1].url, fixed_url)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1614" endline="1633" pcid="2137">
    def test_fips_region_redirect_cache(self):
        self.http_stubber.add_response(**self.redirect_response)
        self.http_stubber.add_response(**self.success_response)
        self.http_stubber.add_response(**self.success_response)

        with self.http_stubber:
            first_response = self.client.list_objects(Bucket="foo")
            second_response = self.client.list_objects(Bucket="foo")

        self.assertEqual(first_response["ResponseMetadata"]["HTTPStatusCode"], 200)
        self.assertEqual(second_response["ResponseMetadata"]["HTTPStatusCode"], 200)

        self.assertEqual(len(self.http_stubber.requests), 3)
        initial_url = "https://s3-fips.us-west-2.amazonaws.com/foo" "?encoding-type=url"
        self.assertEqual(self.http_stubber.requests[0].url, initial_url)

        fixed_url = "https://s3-fips.us-west-1.amazonaws.com/foo" "?encoding-type=url"
        self.assertEqual(self.http_stubber.requests[1].url, fixed_url)
        self.assertEqual(self.http_stubber.requests[2].url, fixed_url)

</source>
</class>

<class classid="101" nclones="2" nlines="15" similarity="86">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1489" endline="1508" pcid="2132">
    def test_resign_request_in_us_east_1(self):
        region_headers = {'x-amz-bucket-region': 'eu-central-1'}

        # Verify that the default behavior in us-east-1 will redirect
        client = self.session.create_client('s3', 'us-east-1')
        with ClientHTTPStubber(client) as http_stubber:
            http_stubber.add_response(status=400)
            http_stubber.add_response(status=400, headers=region_headers)
            http_stubber.add_response(headers=region_headers)
            http_stubber.add_response()
            response = client.head_object(Bucket='foo', Key='bar')
            self.assertEqual(response['ResponseMetadata']['HTTPStatusCode'], 200)

            self.assertEqual(len(http_stubber.requests), 4)
            initial_url = ('https://foo.s3.us-east-1.amazonaws.com/bar')
            self.assertEqual(http_stubber.requests[0].url, initial_url)

            fixed_url = ('https://foo.s3.eu-central-1.amazonaws.com/bar')
            self.assertEqual(http_stubber.requests[-1].url, fixed_url)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1654" endline="1673" pcid="2139">
    def test_fips_resign_request_in_us_east_1(self):
        region_headers = {"x-amz-bucket-region": "us-east-2"}

        # Verify that the default behavior in us-east-1 will redirect
        client = self.session.create_client("s3", "fips-us-east-1")
        with ClientHTTPStubber(client) as http_stubber:
            http_stubber.add_response(status=400)
            http_stubber.add_response(status=400, headers=region_headers)
            http_stubber.add_response(headers=region_headers)
            http_stubber.add_response()
            response = client.head_object(Bucket="foo", Key="bar")
            self.assertEqual(response["ResponseMetadata"]["HTTPStatusCode"], 200)

            self.assertEqual(len(http_stubber.requests), 4)
            initial_url = "https://foo.s3-fips.us-east-1.amazonaws.com/bar"
            self.assertEqual(http_stubber.requests[0].url, initial_url)

            fixed_url = "https://foo.s3-fips.us-east-2.amazonaws.com/bar"
            self.assertEqual(http_stubber.requests[-1].url, fixed_url)

</source>
</class>

<class classid="102" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1509" endline="1524" pcid="2133">
    def test_resign_request_in_us_east_1_fails(self):
        region_headers = {'x-amz-bucket-region': 'eu-central-1'}

        # Verify that the final 400 response is propagated
        # back to the user.
        client = self.session.create_client('s3', 'us-east-1')
        with ClientHTTPStubber(client) as http_stubber:
            http_stubber.add_response(status=400)
            http_stubber.add_response(status=400, headers=region_headers)
            http_stubber.add_response(headers=region_headers)
            # The final request still fails with a 400.
            http_stubber.add_response(status=400)
            with self.assertRaises(ClientError) as e:
                client.head_object(Bucket='foo', Key='bar')
            self.assertEqual(len(http_stubber.requests), 4)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="1674" endline="1689" pcid="2140">
    def test_fips_resign_request_in_us_east_1_fails(self):
        region_headers = {"x-amz-bucket-region": "us-east-2"}

        # Verify that the final 400 response is propagated
        # back to the user.
        client = self.session.create_client("s3", "fips-us-east-1")
        with ClientHTTPStubber(client) as http_stubber:
            http_stubber.add_response(status=400)
            http_stubber.add_response(status=400, headers=region_headers)
            http_stubber.add_response(headers=region_headers)
            # The final request still fails with a 400.
            http_stubber.add_response(status=400)
            with self.assertRaises(ClientError):
                client.head_object(Bucket="foo", Key="bar")
            self.assertEqual(len(http_stubber.requests), 4)

</source>
</class>

<class classid="103" nclones="2" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="2790" endline="2803" pcid="2167">
    def test_escape_keys_in_xml_delete_objects(self):
        self.http_stubber.add_response()
        with self.http_stubber:
            response = self.client.delete_objects(
                Bucket='mybucket',
                Delete={
                    'Objects': [{'Key': 'some\r\n\rkey'}]
                },
            )
        request = self.http_stubber.requests[0]
        self.assertNotIn(b'\r\n\r', request.body)
        self.assertIn(b'&#xD;&#xA;&#xD;', request.body)
        self.assert_correct_content_md5(request)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_s3.py" startline="2804" endline="2819" pcid="2168">
    def test_escape_keys_in_xml_put_bucket_lifecycle_configuration(self):
        self.http_stubber.add_response()
        with self.http_stubber:
            response = self.client.put_bucket_lifecycle_configuration(
                Bucket='mybucket',
                LifecycleConfiguration={
                    'Rules': [{
                        'Prefix': 'my\r\n\rprefix',
                        'Status': 'ENABLED',
                    }]
                }
            )
        request = self.http_stubber.requests[0]
        self.assertNotIn(b'my\r\n\rprefix', request.body)
        self.assertIn(b'my&#xD;&#xA;&#xD;prefix', request.body)
        self.assert_correct_content_md5(request)
</source>
</class>

<class classid="104" nclones="2" nlines="13" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_stub.py" startline="175" endline="190" pcid="2191">

    def test_any_ignores_param_for_validation(self):
        service_response = {}
        expected_params = {'Bucket': stub.ANY}

        self.stubber.add_response(
            'list_objects', service_response, expected_params)
        self.stubber.add_response(
            'list_objects', service_response, expected_params)

        try:
            with self.stubber:
                self.client.list_objects(Bucket='foo')
                self.client.list_objects(Bucket='bar')
        except StubAssertionError:
            self.fail("stub.ANY failed to ignore parameter for validation.")
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_stub.py" startline="191" endline="206" pcid="2192">

    def test_mixed_any_and_concrete_params(self):
        service_response = {}
        expected_params = {'Bucket': stub.ANY, 'Key': 'foo.txt'}

        self.stubber.add_response(
            'head_object', service_response, expected_params)
        self.stubber.add_response(
            'head_object', service_response, expected_params)

        try:
            with self.stubber:
                self.client.head_object(Bucket='foo', Key='foo.txt')
                self.client.head_object(Bucket='bar', Key='foo.txt')
        except StubAssertionError:
            self.fail("stub.ANY failed to ignore parameter for validation.")
</source>
</class>

<class classid="105" nclones="2" nlines="12" similarity="91">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_apigateway.py" startline="26" endline="40" pcid="2249">
    def test_get_export(self):
        params = {
            'restApiId': 'foo',
            'stageName': 'bar',
            'exportType': 'swagger',
            'accepts': 'application/yaml'
        }

        self.http_stubber.add_response(body=b'{}')
        with self.http_stubber:
            self.client.get_export(**params)
            request = self.http_stubber.requests[0]
            self.assertEqual(request.method, 'GET')
            self.assertEqual(request.headers.get('Accept'), b'application/yaml')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_apigateway.py" startline="41" endline="53" pcid="2250">
    def test_defaults_accept(self):
        params = {
            'restApiId': 'foo',
            'stageName': 'bar',
            'exportType': 'swagger'
        }

        self.http_stubber.add_response(body=b'{}')
        with self.http_stubber:
            self.client.get_export(**params)
            request = self.http_stubber.requests[0]
            self.assertEqual(request.method, 'GET')
            self.assertEqual(request.headers.get('Accept'), b'application/json')
</source>
</class>

<class classid="106" nclones="2" nlines="14" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_ec2.py" startline="42" endline="58" pcid="2253">
    def test_provided_idempotency_token(self):
        expected_params = {
            'PurchaseRequests': [
                {'PurchaseToken': 'foo',
                 'InstanceCount': 123}],
            'ClientToken': ANY
        }
        self.stubber.add_response(
            self.function_name, self.service_response, expected_params)

        with self.stubber:
            self.client.purchase_scheduled_instances(
                PurchaseRequests=[{'PurchaseToken': 'foo',
                                   'InstanceCount': 123}],
                ClientToken='foobar')
            self.assertIn('ClientToken', self.params_seen)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_ec2.py" startline="59" endline="75" pcid="2254">
    def test_insert_idempotency_token(self):
        expected_params = {
            'PurchaseRequests': [
                {'PurchaseToken': 'foo',
                 'InstanceCount': 123}],
        }

        self.stubber.add_response(
            self.function_name, self.service_response, expected_params)

        with self.stubber:
            self.client.purchase_scheduled_instances(
                PurchaseRequests=[{'PurchaseToken': 'foo',
                                   'InstanceCount': 123}])
            self.assertIn('ClientToken', self.params_seen)


</source>
</class>

<class classid="107" nclones="11" nlines="15" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_rm_command.py" startline="76" endline="90" pcid="2310">
    def test_delete_using_crt_client(self):
        cmdline = [
            's3', 'rm', 's3://bucket/key'
        ]
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.DEFAULT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key',
            expected_http_method='DELETE'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1944" endline="1959" pcid="2486">
            cli_runner_result=result,
            expected_operations_to_endpoints=[
                ('ListObjectsV2',
                 self.get_virtual_s3_host('sourcebucket', source_region)),
                ('CopyObject',
                 self.get_virtual_s3_host('bucket', self.region))
            ]
        )


class TestCpWithCRTClient(BaseCRTTransferClientTest):
    def test_upload_using_crt_client(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'cp', filename, 's3://bucket/key'
        ]
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="244" endline="260" pcid="2322">


class TestMvWithCRTClient(BaseCRTTransferClientTest):
    def test_upload_move_using_crt_client(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'mv', filename, 's3://bucket/key',
        ]
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key',
            expected_send_filepath=filename,
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1984" endline="2000" pcid="2488">
            expected_path='/myfile1',
            expected_send_filepath=filename1,
        )
        self.assert_crt_make_request_call(
            crt_requests[1],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/myfile2',
            expected_send_filepath=filename2,
        )

    def test_download_using_crt_client(self):
        filename = os.path.join(self.files.rootdir, 'myfile')
        cmdline = [
            's3', 'cp', 's3://bucket/key', filename
        ]
        self.add_botocore_head_object_response()
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="400" endline="415" pcid="2345">
        )

    def test_download_sync_using_crt_client(self):
        cmdline = [
            's3', 'sync', 's3://bucket/', self.files.rootdir,
        ]
        self.add_botocore_list_objects_response(['key'])
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.GET_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key',
            expected_recv_startswith=os.path.join(self.files.rootdir, 'key'),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="383" endline="399" pcid="2344">

class TestSyncWithCRTClient(BaseCRTTransferClientTest):
    def test_upload_sync_using_crt_client(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'sync', self.files.rootdir, 's3://bucket/',
        ]
        self.add_botocore_list_objects_response([])
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/myfile',
            expected_send_filepath=filename,
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="2054" endline="2070" pcid="2493">

    def test_does_not_use_crt_client_for_streaming_download(self):
        cmdline = [
            's3', 'cp', 's3://bucket/key', '-'
        ]
        self.add_botocore_head_object_response()
        self.add_botocore_get_object_response()
        self.run_command(cmdline)
        self.assertEqual(self.get_crt_make_request_calls(), [])
        self.assert_no_remaining_botocore_responses()

    def test_respects_region_parameter(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'cp', filename, 's3://bucket/key', '--region', 'us-west-1',
        ]
        self.run_command(cmdline)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="2071" endline="2091" pcid="2494">
        self.assert_crt_client_region('us-west-1')
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket', 'us-west-1'),
            expected_path='/key',
            expected_send_filepath=filename,
        )

    def test_respects_endpoint_url_parameter(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'cp', filename, 's3://bucket/key',
            '--endpoint-url', 'https://my.endpoint.com'
        ]
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="2092" endline="2112" pcid="2495">
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host='my.endpoint.com',
            expected_path='/bucket/key',
            expected_send_filepath=filename,
        )
        self.assertEqual(
            self.mock_crt_client.call_args[1]['tls_mode'],
            S3RequestTlsMode.ENABLED
        )

    def test_can_disable_ssl_using_endpoint_url_parameter(self):
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = [
            's3', 'cp', filename, 's3://bucket/key',
            '--endpoint-url', 'http://my.endpoint.com'
        ]
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="261" endline="280" pcid="2323">
        )
        self.assertFalse(os.path.exists(filename))

    def test_download_move_using_crt_client(self):
        filename = os.path.join(self.files.rootdir, 'myfile')
        cmdline = [
            's3', 'mv', 's3://bucket/key', filename
        ]
        self.add_botocore_head_object_response()
        self.add_botocore_delete_object_response()
        result = self.cli_runner.run(cmdline)
        self.assertEqual(result.rc, 0)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.GET_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key',
            expected_recv_startswith=filename,
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="440" endline="457" pcid="2347">
        )

    def test_download_sync_with_delete_using_crt_client(self):
        self.files.create_file('delete-this', 'content')
        cmdline = [
            's3', 'sync', 's3://bucket/', self.files.rootdir, '--delete'
        ]
        self.add_botocore_list_objects_response(['key'])
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.GET_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key',
            expected_recv_startswith=os.path.join(self.files.rootdir, 'key'),
        )
</source>
</class>

<class classid="108" nclones="4" nlines="20" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_rm_command.py" startline="91" endline="112" pcid="2311">
    def test_recursive_delete_using_crt_client(self):
        cmdline = [
            's3', 'rm', 's3://bucket/', '--recursive'
        ]
        self.add_botocore_list_objects_response(['key1', 'key2'])
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 2)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.DEFAULT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key1',
            expected_http_method='DELETE'
        )
        self.assert_crt_make_request_call(
            crt_requests[1],
            expected_type=S3RequestType.DEFAULT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key2',
            expected_http_method='DELETE'
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="416" endline="439" pcid="2346">
        )

    def test_upload_sync_with_delete_using_crt_client(self):
        filename = self.files.create_file('a-file', 'mycontent')
        cmdline = [
            's3', 'sync', self.files.rootdir, 's3://bucket/', '--delete'
        ]
        self.add_botocore_list_objects_response(['delete-this'])
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 2)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/a-file',
            expected_send_filepath=filename,
        )
        self.assert_crt_make_request_call(
            crt_requests[1],
            expected_type=S3RequestType.DEFAULT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/delete-this',
            expected_http_method='DELETE'
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="2001" endline="2023" pcid="2489">
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.GET_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key',
            expected_recv_startswith=filename,
        )

    def test_recursive_download_using_crt_client(self):
        cmdline = [
            's3', 'cp', 's3://bucket/', self.files.rootdir, '--recursive'
        ]
        self.add_botocore_list_objects_response(['key1', 'key2'])
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 2)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.GET_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1960" endline="1983" pcid="2487">
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 1)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
            expected_path='/key',
            expected_send_filepath=filename,
        )

    def test_recursive_upload_using_crt_client(self):
        filename1 = self.files.create_file('myfile1', 'mycontent')
        filename2 = self.files.create_file('myfile2', 'mycontent')
        cmdline = [
            's3', 'cp', self.files.rootdir, 's3://bucket/', '--recursive'
        ]
        self.run_command(cmdline)
        crt_requests = self.get_crt_make_request_calls()
        self.assertEqual(len(crt_requests), 2)
        self.assert_crt_make_request_call(
            crt_requests[0],
            expected_type=S3RequestType.PUT_OBJECT,
            expected_host=self.get_virtual_s3_host('bucket'),
</source>
</class>

<class classid="109" nclones="3" nlines="14" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="39" endline="57" pcid="2314">
    def test_dryrun_move(self):
        self.parsed_responses = [self.head_object_response()]
        cmdline = (
            f'{self.prefix} s3://bucket/key.txt s3://bucket/key2.txt --dryrun'
        )
        stdout, _, _ = self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                ('HeadObject', {
                    'Bucket': 'bucket',
                    'Key': 'key.txt',
                })
            ]
        )
        self.assertIn(
            '(dryrun) move: s3://bucket/key.txt to s3://bucket/key2.txt',
            stdout
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="229" endline="247" pcid="2388">
            self.prefix, self.files.rootdir)
        self.run_cmd(cmdline, expected_rc=0)
        # We called ListObjectsV2 but had no objects to download, so
        # we only have a single ListObjectsV2 operation being called.
        self.assertEqual(len(self.operations_called), 1, self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')

    def test_dryrun_download(self):
        self.parsed_responses = [self.head_object_response()]
        target = self.files.full_path('file.txt')
        cmdline = f'{self.prefix} s3://bucket/key.txt {target} --dryrun'
        stdout, _, _ = self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                ('HeadObject', {
                    'Bucket': 'bucket',
                    'Key': 'key.txt',
                })
            ]
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="260" endline="278" pcid="2390">
        self.run_cmd(cmdline, expected_rc=0)
        # Make sure that the specified web address is used as opposed to the
        # contents of the web address.
        self.assertEqual(
            self.operations_called[0][1]['WebsiteRedirectLocation'],
            'http://someserver'
        )

    def test_dryrun_copy(self):
        self.parsed_responses = [self.head_object_response()]
        cmdline = (
            f'{self.prefix} s3://bucket/key.txt s3://bucket/key2.txt --dryrun'
        )
        stdout, _, _ = self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                ('HeadObject', {
                    'Bucket': 'bucket',
                    'Key': 'key.txt',
</source>
</class>

<class classid="110" nclones="4" nlines="13" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="71" endline="87" pcid="2316">

    def test_metadata_directive_copy(self):
        self.parsed_responses = [
            {"ContentLength": "100", "LastModified": "00:00:00Z"},
            {'ETag': '"foo-1"'},
            {'ETag': '"foo-2"'}
        ]
        cmdline = ('%s s3://bucket/key.txt s3://bucket/key2.txt'
                   ' --metadata-directive REPLACE' % self.prefix)
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 3,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertEqual(self.operations_called[1][0].name, 'CopyObject')
        self.assertEqual(self.operations_called[2][0].name, 'DeleteObject')
        self.assertEqual(self.operations_called[1][1]['MetadataDirective'],
                         'REPLACE')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="279" endline="293" pcid="2391">
                })
            ]
        )
        self.assertIn(
            '(dryrun) copy: s3://bucket/key.txt to s3://bucket/key2.txt',
            stdout
        )

    def test_metadata_copy(self):
        self.parsed_responses = [
            {"ContentLength": "100", "LastModified": "00:00:00Z"},
            {'ETag': '"foo-1"'},
        ]
        cmdline = ('%s s3://bucket/key.txt s3://bucket/key2.txt'
                   ' --metadata KeyName=Value' % self.prefix)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="327" endline="341" pcid="2394">
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 4,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name,
                         'CreateMultipartUpload')
        self.assertEqual(self.operations_called[0][1]['Metadata'],
                         {'KeyName': 'Value'})

    def test_metadata_directive_copy(self):
        self.parsed_responses = [
            {"ContentLength": "100", "LastModified": "00:00:00Z"},
            {'ETag': '"foo-1"'},
        ]
        cmdline = ('%s s3://bucket/key.txt s3://bucket/key2.txt'
                   ' --metadata-directive REPLACE' % self.prefix)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="294" endline="308" pcid="2392">
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 2,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertEqual(self.operations_called[1][0].name, 'CopyObject')
        self.assertEqual(self.operations_called[1][1]['Metadata'],
                         {'KeyName': 'Value'})

    def test_metadata_copy_with_put_object(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        self.parsed_responses = [
            {"ContentLength": "100", "LastModified": "00:00:00Z"},
            {'ETag': '"foo-1"'},
        ]
        cmdline = ('%s %s s3://bucket/key2.txt'
</source>
</class>

<class classid="111" nclones="3" nlines="17" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="132" endline="154" pcid="2319">
            ]
        )

    def test_copy_move_with_request_payer(self):
        cmdline = self.prefix
        cmdline += 's3://sourcebucket/sourcekey s3://mybucket/mykey'
        cmdline += ' --request-payer'

        self.parsed_responses = [
            self.head_object_response(),
            self.copy_object_response(),
            self.delete_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.head_object_request(
                    'sourcebucket', 'sourcekey', RequestPayer='requester'),
                self.copy_object_request(
                    'sourcebucket', 'sourcekey', 'mybucket', 'mykey',
                    RequestPayer='requester'),
                self.delete_object_request(
                    'sourcebucket', 'sourcekey', RequestPayer='requester')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1034" endline="1054" pcid="2430">
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.list_objects_request(
                    'mybucket', RequestPayer='requester'),
                self.get_object_request(
                    'mybucket', 'mykey', RequestPayer='requester')
            ]
        )

    def test_single_copy(self):
        cmdline = self.prefix
        cmdline += ' s3://sourcebucket/sourcekey s3://mybucket/mykey'
        cmdline += ' --request-payer'
        self.parsed_responses = [
            self.head_object_response(),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1089" endline="1108" pcid="2432">
                    CopySourceRange=mock.ANY),
                self.upload_part_copy_request(
                    'sourcebucket', 'sourcekey', 'mybucket', 'mykey',
                    upload_id, PartNumber=mock.ANY, RequestPayer='requester',
                    CopySourceRange=mock.ANY),
                self.complete_mpu_request(
                    'mybucket', 'mykey', upload_id, num_parts=2,
                    RequestPayer='requester')
            ]
        )

    def test_recursive_copy(self):
        cmdline = self.prefix
        cmdline += ' s3://sourcebucket/ s3://mybucket/'
        cmdline += ' --request-payer'
        cmdline += ' --recursive'
        self.parsed_responses = [
            self.list_objects_response(['mykey']),
            self.copy_object_response()
        ]
</source>
</class>

<class classid="112" nclones="3" nlines="34" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="155" endline="192" pcid="2320">
            ]
        )

    def test_with_copy_props(self):
        cmdline = self.prefix
        cmdline += 's3://sourcebucket/sourcekey s3://bucket/key'
        cmdline += ' --copy-props default'

        upload_id = 'upload_id'
        large_tag_set = {'tag-key': 'val' * 3000}
        metadata = {'tag-key': 'tag-value'}
        self.parsed_responses = [
            self.head_object_response(
                Metadata=metadata,
                ContentLength=8 * 1024 ** 2
            ),
            self.get_object_tagging_response(large_tag_set),
            self.create_mpu_response(upload_id),
            self.upload_part_copy_response(),
            self.complete_mpu_response(),
            self.put_object_tagging_response(),
            self.delete_object_response()
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.head_object_request('sourcebucket', 'sourcekey'),
                self.get_object_tagging_request('sourcebucket', 'sourcekey'),
                self.create_mpu_request('bucket', 'key', Metadata=metadata),
                self.upload_part_copy_request(
                    'sourcebucket', 'sourcekey', 'bucket', 'key', upload_id,
                    CopySourceRange=mock.ANY, PartNumber=1,
                ),
                self.complete_mpu_request('bucket', 'key', upload_id, 1),
                self.put_object_tagging_request(
                    'bucket', 'key', large_tag_set
                ),
                self.delete_object_request('sourcebucket', 'sourcekey')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="317" endline="356" pcid="2342">
        )

    def test_with_copy_props(self):
        cmdline = self.prefix
        cmdline += 's3://sourcebucket/ s3://bucket/'
        cmdline += ' --copy-props default'

        upload_id = 'upload_id'
        large_tag_set = {'tag-key': 'val' * 3000}
        metadata = {'tag-key': 'tag-value'}
        self.parsed_responses = [
            self.list_objects_response(keys=['key'], Size=8 * 1024 ** 2),
            self.list_objects_response(keys=[]),
            self.head_object_response(
                Metadata=metadata,
            ),
            self.get_object_tagging_response(large_tag_set),
            self.create_mpu_response(upload_id),
            self.upload_part_copy_response(),
            self.complete_mpu_response(),
            self.put_object_tagging_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.list_objects_request('sourcebucket'),
                self.list_objects_request('bucket'),
                self.head_object_request('sourcebucket', 'key'),
                self.get_object_tagging_request('sourcebucket', 'key'),
                self.create_mpu_request('bucket', 'key', Metadata=metadata),
                self.upload_part_copy_request(
                    'sourcebucket', 'key', 'bucket', 'key', upload_id,
                    CopySourceRange=mock.ANY, PartNumber=1,
                ),
                self.complete_mpu_request('bucket', 'key', upload_id, 1),
                self.put_object_tagging_request(
                    'bucket', 'key', large_tag_set
                ),
            ]
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_mv_command.py" startline="193" endline="242" pcid="2321">
            ]
        )

    def test_mv_does_not_delete_source_on_failed_put_tagging(self):
        cmdline = self.prefix
        cmdline += 's3://sourcebucket/sourcekey s3://bucket/key'
        cmdline += ' --copy-props default'

        upload_id = 'upload_id'
        large_tag_set = {'tag-key': 'val' * 3000}
        metadata = {'tag-key': 'tag-value'}
        self.parsed_responses = [
            self.head_object_response(
                Metadata=metadata,
                ContentLength=8 * 1024 ** 2
            ),
            self.get_object_tagging_response(large_tag_set),
            self.create_mpu_response(upload_id),
            self.upload_part_copy_response(),
            self.complete_mpu_response(),
            self.access_denied_error_response(),  # PutObjectTagging error
            self.delete_object_response(),
        ]
        self.set_http_status_codes(
            [
                200,  # HeadObject
                200,  # GetObjectTagging
                200,  # CreateMultipartUpload
                200,  # UploadPartCopy
                200,  # CompleteMultipartUpload
                403,  # PutObjectTagging
                200,  # DeleteObject
            ]
        )
        self.run_cmd(cmdline, expected_rc=1)
        self.assert_operations_called(
            [
                self.head_object_request('sourcebucket', 'sourcekey'),
                self.get_object_tagging_request('sourcebucket', 'sourcekey'),
                self.create_mpu_request('bucket', 'key', Metadata=metadata),
                self.upload_part_copy_request(
                    'sourcebucket', 'sourcekey', 'bucket', 'key', upload_id,
                    CopySourceRange=mock.ANY, PartNumber=1,
                ),
                self.complete_mpu_request('bucket', 'key', upload_id, 1),
                self.put_object_tagging_request(
                    'bucket', 'key', large_tag_set
                ),
                self.delete_object_request('bucket', 'key')
            ]
</source>
</class>

<class classid="113" nclones="3" nlines="17" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="102" endline="121" pcid="2330">

    def test_glacier_sync_with_force_glacier(self):
        self.parsed_responses = [
            {
                'Contents': [
                    {'Key': 'foo/bar.txt', 'ContentLength': '100',
                     'LastModified': '00:00:00Z',
                     'StorageClass': 'GLACIER',
                     'Size': 100},
                ],
                'CommonPrefixes': []
            },
            {'ETag': '"foo-1"', 'Body': six.BytesIO(b'foo')},
        ]
        cmdline = '%s s3://bucket/foo %s --force-glacier-transfer' % (
            self.prefix, self.files.rootdir)
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 2, self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
        self.assertEqual(self.operations_called[1][0].name, 'GetObject')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="377" endline="395" pcid="2398">
        cmdline = '%s s3://bucket/key.txt %s' % (self.prefix, full_path)
        self.parsed_responses = [
            {"ContentLength": "100", "LastModified": "00:00:00Z"},
            {'ETag': '"foo-1"', 'Body': six.BytesIO(b'foo')}
        ]
        with mock.patch('os.utime') as mock_utime:
            mock_utime.side_effect = OSError(1, '')
            _, err, _ = self.run_cmd(cmdline, expected_rc=2)
            self.assertIn('attempting to modify the utime', err)

    def test_recursive_glacier_download_with_force_glacier(self):
        self.parsed_responses = [
            {
                'Contents': [
                    {'Key': 'foo/bar.txt', 'ContentLength': '100',
                     'LastModified': '00:00:00Z',
                     'StorageClass': 'GLACIER',
                     'Size': 100},
                ],
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="396" endline="414" pcid="2399">
                'CommonPrefixes': []
            },
            {'ETag': '"foo-1"', 'Body': six.BytesIO(b'foo')},
        ]
        cmdline = '%s s3://bucket/foo %s --recursive --force-glacier-transfer'\
                  % (self.prefix, self.files.rootdir)
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 2, self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
        self.assertEqual(self.operations_called[1][0].name, 'GetObject')

    def test_recursive_glacier_download_without_force_glacier(self):
        self.parsed_responses = [
            {
                'Contents': [
                    {'Key': 'foo/bar.txt', 'ContentLength': '100',
                     'LastModified': '00:00:00Z',
                     'StorageClass': 'GLACIER',
                     'Size': 100},
</source>
</class>

<class classid="114" nclones="2" nlines="14" similarity="86">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="122" endline="142" pcid="2331">

    def test_handles_glacier_incompatible_operations(self):
        self.parsed_responses = [
            {'Contents': [
                {'Key': 'foo', 'Size': 100,
                 'LastModified': '00:00:00Z', 'StorageClass': 'GLACIER'},
                {'Key': 'bar', 'Size': 100,
                 'LastModified': '00:00:00Z', 'StorageClass': 'DEEP_ARCHIVE'}
            ]}
        ]
        cmdline = '%s s3://bucket/ %s' % (
            self.prefix, self.files.rootdir)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier and glacier
        # deep archive incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
        self.assertIn('GLACIER', stderr)
        self.assertIn('s3://bucket/foo', stderr)
        self.assertIn('s3://bucket/bar', stderr)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="143" endline="160" pcid="2332">

    def test_turn_off_glacier_warnings(self):
        self.parsed_responses = [
            {'Contents': [
                {'Key': 'foo', 'Size': 100,
                 'LastModified': '00:00:00Z', 'StorageClass': 'GLACIER'},
                {'Key': 'bar', 'Size': 100,
                 'LastModified': '00:00:00Z', 'StorageClass': 'DEEP_ARCHIVE'}
            ]}
        ]
        cmdline = '%s s3://bucket/ %s --ignore-glacier-warnings' % (
            self.prefix, self.files.rootdir)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=0)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
        self.assertEqual('', stderr)
</source>
</class>

<class classid="115" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="206" endline="229" pcid="2335">
    #
    # This test covers the case where a ValueError is emitted.
    def test_sync_skips_over_files_deleted_between_listing_and_transfer_valueerror(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = '%s %s s3://bucket/' % (
            self.prefix, self.files.rootdir)

        # FileGenerator.list_files should skip over files that cause an
        # IOError to be raised because they are missing when we try to
        # get their stats. This IOError is translated to a ValueError in
        # awscli.customizations.s3.utils.get_file_stat.
        def side_effect(_):
            os.remove(full_path)
            raise ValueError()
        with mock.patch(
                'awscli.customizations.s3.filegenerator.get_file_stat',
                side_effect=side_effect
                ):
            self.run_cmd(cmdline, expected_rc=2)

        # We should not call PutObject because the file was deleted
        # before we could transfer it
        self.assertEqual(len(self.operations_called), 1, self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="230" endline="251" pcid="2337">

    # This test covers the case where an OSError is emitted.
    def test_sync_skips_over_files_deleted_between_listing_and_transfer_oserror(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = '%s %s s3://bucket/' % (
            self.prefix, self.files.rootdir)

        # FileGenerator.list_files should skip over files that cause an
        # OSError to be raised because they are missing when we try to
        # get their stats.
        def side_effect(_):
            os.remove(full_path)
            raise OSError()
        with mock.patch(
                'awscli.customizations.s3.filegenerator.get_file_stat',
                side_effect=side_effect
                ):
            self.run_cmd(cmdline, expected_rc=2)

        # We should not call PutObject because the file was deleted
        # before we could transfer it
        self.assertEqual(len(self.operations_called), 1, self.operations_called)
</source>
</class>

<class classid="116" nclones="3" nlines="18" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_sync_command.py" startline="358" endline="381" pcid="2343">

class TestSyncSourceRegion(BaseS3CLIRunnerTest):
    def test_respects_source_region(self):
        source_region = 'af-south-1'
        cmdline = [
            's3', 'sync', 's3://sourcebucket/', 's3://bucket/',
            '--region', self.region, '--source-region', source_region
        ]
        self.add_botocore_list_objects_response(['key'])
        self.add_botocore_list_objects_response([])
        self.add_botocore_copy_object_response()
        result = self.run_command(cmdline)
        self.assert_no_remaining_botocore_responses()
        self.assert_operations_to_endpoints(
            cli_runner_result=result,
            expected_operations_to_endpoints=[
                ('ListObjectsV2',
                 self.get_virtual_s3_host('sourcebucket', source_region)),
                ('ListObjectsV2',
                 self.get_virtual_s3_host('bucket', self.region)),
                ('CopyObject',
                 self.get_virtual_s3_host('bucket', self.region))
            ]
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1901" endline="1920" pcid="2484">
        self.parsed_responses = [
            self.head_object_response(),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.copy_object_request(MetadataDirective='REPLACE')
        )


class TestCpSourceRegion(BaseS3CLIRunnerTest):
    def test_respects_source_region_for_single_copy(self):
        source_region = 'af-south-1'
        cmdline = [
            's3', 'cp', 's3://sourcebucket/key', 's3://bucket/',
            '--region', self.region, '--source-region', source_region
        ]
        self.add_botocore_head_object_response()
        self.add_botocore_copy_object_response()
        result = self.run_command(cmdline)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1921" endline="1942" pcid="2485">
        self.assert_no_remaining_botocore_responses()
        self.assert_operations_to_endpoints(
            cli_runner_result=result,
            expected_operations_to_endpoints=[
                ('HeadObject',
                 self.get_virtual_s3_host('sourcebucket', source_region)),
                ('CopyObject',
                 self.get_virtual_s3_host('bucket', self.region))
            ]
        )

    def test_respects_source_region_for_recursive_copy(self):
        source_region = 'af-south-1'
        cmdline = [
            's3', 'cp', 's3://sourcebucket/', 's3://bucket/',
            '--region', self.region, '--source-region', source_region,
            '--recursive'
        ]
        self.add_botocore_list_objects_response(['key'])
        self.add_botocore_copy_object_response()
        result = self.run_command(cmdline)
        self.assert_no_remaining_botocore_responses()
</source>
</class>

<class classid="117" nclones="6" nlines="17" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="85" endline="107" pcid="2354">
    def test_generates_a_url(self):
        stdout = self.get_presigned_url_for_cmd(
            self.prefix + 's3://bucket/key')

        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 'bucket.s3.us-east-1.amazonaws.com',
                'path': '/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '3600',
                    'X-Amz-Signature': (
                        '1297528058f2c8b89cfa52c6a47d6c54890700a1da2470'
                        '2b06d53e774c0acc95'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="131" endline="154" pcid="2356">
    def test_handles_expires_in(self):
        expires_in = 1000
        stdout = self.get_presigned_url_for_cmd(
            self.prefix + 's3://bucket/key --expires-in %s' % expires_in)

        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 'bucket.s3.us-east-1.amazonaws.com',
                'path': '/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '{}'.format(expires_in),
                    'X-Amz-Signature': (
                        '865fb61b021c3bf406c40d41353f584835fff1f158cf1b'
                        '3e6ec06260ecbb8937'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="180" endline="203" pcid="2358">
    def test_s3_prefix_not_needed(self):
        # Consistent with the 'ls' command.
        stdout = self.get_presigned_url_for_cmd(
            self.prefix + 'bucket/key')

        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 'bucket.s3.us-east-1.amazonaws.com',
                'path': '/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '3600',
                    'X-Amz-Signature': (
                        '1297528058f2c8b89cfa52c6a47d6c54890700a1da2470'
                        '2b06d53e774c0acc95'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="204" endline="226" pcid="2359">
    def test_can_support_addressing_mode_config(self):
        with temporary_file('w') as f:
            self.enable_addressing_mode_in_config(f, 'path')
            stdout = self.get_presigned_url_for_cmd(
                self.prefix + 's3://bucket/key')
        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 's3.us-east-1.amazonaws.com',
                'path': '/bucket/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '3600',
                    'X-Amz-Signature': (
                        'c6dab3560db76aded03e6268338ddb0a6dec00ebc82d6e'
                        '7abdc305529fcaba74'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="108" endline="130" pcid="2355">
    def test_handles_non_dns_compatible_buckets(self):
        stdout = self.get_presigned_url_for_cmd(
            self.prefix + 's3://bucket.dots/key')

        self.assert_presigned_url_matches(
            stdout, {
                'hostname': 's3.us-east-1.amazonaws.com',
                'path': '/bucket.dots/key',
                'query_params': {
                    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                    'X-Amz-Credential': (
                        'access_key%2F20160818%2Fus-east-1'
                        '%2Fs3%2Faws4_request'),
                    'X-Amz-Date': '20160818T143303Z',
                    'X-Amz-Expires': '3600',
                    'X-Amz-Signature': (
                        '5a032639cabfe3db0b4b87ba3b12c29f5e42fe74cbba8'
                        'a0eb69bfb30c6e2d277'),
                    'X-Amz-SignedHeaders': 'host',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_presign_command.py" startline="155" endline="179" pcid="2357">
    def test_handles_sigv4(self):
        with temporary_file('w') as f:
            self.enable_sigv4_from_config_file(f)
            stdout = self.get_presigned_url_for_cmd(
                self.prefix + 's3://bucket/key')

        expected = {
            'hostname': 'bucket.s3.us-east-1.amazonaws.com',
            'path': '/key',
            'query_params': {
                'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
                'X-Amz-Credential': (
                    'access_key%2F20160818%2Fus-east-1'
                    '%2Fs3%2Faws4_request'),
                'X-Amz-Date': '20160818T143303Z',
                'X-Amz-Expires': '3600',
                'X-Amz-Signature': (
                    '1297528058f2c8b89cfa52c6a47d6c548907'
                    '00a1da24702b06d53e774c0acc95'
                ),
                'X-Amz-SignedHeaders': 'host'
            }
        }
        self.assert_presigned_url_matches(stdout, expected)

</source>
</class>

<class classid="118" nclones="5" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="134" endline="147" pcid="2381">
        self.assertEqual(self.operations_called[0][1]['Expires'], '90')

    def test_upload_standard_ia(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class STANDARD_IA' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        args = self.operations_called[0][1]
        self.assertEqual(args['Key'], 'key.txt')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="176" endline="189" pcid="2384">
        args = self.operations_called[0][1]
        self.assertEqual(args['Key'], 'key.txt')
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'INTELLIGENT_TIERING')

    def test_upload_glacier(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class GLACIER' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="162" endline="175" pcid="2383">
        self.assertEqual(args['Key'], 'key.txt')
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'ONEZONE_IA')

    def test_upload_intelligent_tiering(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class INTELLIGENT_TIERING' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="190" endline="203" pcid="2385">
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        args = self.operations_called[0][1]
        self.assertEqual(args['Key'], 'key.txt')
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'GLACIER')

    def test_upload_deep_archive(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class DEEP_ARCHIVE' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="148" endline="161" pcid="2382">
        self.assertEqual(args['Bucket'], 'bucket')
        self.assertEqual(args['StorageClass'], 'STANDARD_IA')

    def test_upload_onezone_ia(self):
        full_path = self.files.create_file('foo.txt', 'mycontent')
        cmdline = ('%s %s s3://bucket/key.txt --storage-class ONEZONE_IA' %
                   (self.prefix, full_path))
        self.parsed_responses = \
            [{'ETag': '"c8afdb36c52cf4727836669019e69222"'}]
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1,
                         self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        args = self.operations_called[0][1]
</source>
</class>

<class classid="119" nclones="6" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="415" endline="427" pcid="2400">
                ],
                'CommonPrefixes': []
            }
        ]
        cmdline = '%s s3://bucket/foo %s --recursive' % (
            self.prefix, self.files.rootdir)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        self.assertEqual(len(self.operations_called), 1, self.operations_called)
        self.assertEqual(self.operations_called[0][0].name, 'ListObjectsV2')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_glacier_incompatible_operation(self):
        self.parsed_responses = [
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="456" endline="470" pcid="2403">
             'LastModified': '00:00:00Z',
             'StorageClass': 'GLACIER'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_deep_archive_incompatible_op_for_multipart_file(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
             'LastModified': '00:00:00Z',
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="428" endline="441" pcid="2401">
            {'ContentLength': '100', 'LastModified': '00:00:00Z',
             'StorageClass': 'GLACIER'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_deep_arhive_incompatible_operation(self):
        self.parsed_responses = [
            {'ContentLength': '100', 'LastModified': '00:00:00Z',
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="442" endline="455" pcid="2402">
             'StorageClass': 'DEEP_ARCHIVE'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier
        # deep archive incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_warns_on_glacier_incompatible_operation_for_multipart_file(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="471" endline="485" pcid="2404">
             'StorageClass': 'DEEP_ARCHIVE'},
        ]
        cmdline = ('%s s3://bucket/key.txt .' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=2)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier
        # deep archive incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertIn('GLACIER', stderr)

    def test_turn_off_glacier_warnings(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
             'LastModified': '00:00:00Z',
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="486" endline="500" pcid="2405">
             'StorageClass': 'GLACIER'},
        ]
        cmdline = (
            '%s s3://bucket/key.txt . --ignore-glacier-warnings' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=0)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertEqual('', stderr)

    def test_turn_off_glacier_warnings_for_deep_archive(self):
        self.parsed_responses = [
            {'ContentLength': str(20 * (1024 ** 2)),
             'LastModified': '00:00:00Z',
</source>
</class>

<class classid="120" nclones="3" nlines="13" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="501" endline="515" pcid="2406">
             'StorageClass': 'DEEP_ARCHIVE'},
        ]
        cmdline = (
                '%s s3://bucket/key.txt . --ignore-glacier-warnings' % self.prefix)
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=0)
        # There should not have been a download attempted because the
        # operation was skipped because it is glacier incompatible.
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')
        self.assertEqual('', stderr)

    def test_cp_with_sse_flag(self):
        full_path = self.files.create_file('foo.txt', 'contents')
        cmdline = (
            '%s %s s3://bucket/key.txt --sse' % (
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="614" endline="628" pcid="2410">
                'Key': 'key.txt'
            },
            'CopySourceSSECustomerAlgorithm': 'AES256',
            'CopySourceSSECustomerKey': key_contents,
        }
        self.assertDictEqual(self.operations_called[1][1], expected_args)


    # Note ideally the kms sse with a key id would be integration tests
    # However, you cannot delete kms keys so there would be no way to clean
    # up the tests
    def test_cp_upload_with_sse_kms_and_key_id(self):
        full_path = self.files.create_file('foo.txt', 'contents')
        cmdline = (
            '%s %s s3://bucket/key.txt --sse aws:kms --sse-kms-key-id foo' % (
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="516" endline="530" pcid="2407">
                self.prefix, full_path))
        self.run_cmd(cmdline, expected_rc=0)
        self.assertEqual(len(self.operations_called), 1)
        self.assertEqual(self.operations_called[0][0].name, 'PutObject')
        self.assertDictEqual(
            self.operations_called[0][1],
            {'Key': 'key.txt', 'Bucket': 'bucket',
             'ContentType': 'text/plain', 'Body': mock.ANY,
             'ServerSideEncryption': 'AES256'}
        )

    def test_cp_with_sse_c_flag(self):
        full_path = self.files.create_file('foo.txt', 'contents')
        cmdline = (
            '%s %s s3://bucket/key.txt --sse-c --sse-c-key foo' % (
</source>
</class>

<class classid="121" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="756" endline="776" pcid="2417">
        # TODO: find another method to test this behavior without patching.
        with mock.patch(
                'awscli.customizations.s3.filegenerator.get_file_stat',
                return_value=(None, None)
        ):
            _, stderr, rc = self.run_cmd(command % full_path, expected_rc=1)
        self.assertIn('upload failed', stderr)
        self.assertIn('warning: File has an invalid timestamp.', stderr)


class TestStreamingCPCommand(BaseAWSCommandParamsTest):
    def test_streaming_upload(self):
        command = "s3 cp - s3://bucket/streaming.txt"
        self.parsed_responses = [{
            'ETag': '"c8afdb36c52cf4727836669019e69222"'
        }]

        binary_stdin = BufferedBytesIO(b'foo\n')
        with mock.patch('sys.stdin', binary_stdin):
            self.run_cmd(command)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="777" endline="797" pcid="2418">
        self.assertEqual(len(self.operations_called), 1)
        model, args = self.operations_called[0]
        expected_args = {
            'Bucket': 'bucket',
            'Key': 'streaming.txt',
            'Body': mock.ANY
        }

        self.assertEqual(model.name, 'PutObject')
        self.assertEqual(args, expected_args)

    def test_streaming_upload_with_expected_size(self):
        command = "s3 cp - s3://bucket/streaming.txt --expected-size 4"
        self.parsed_responses = [{
            'ETag': '"c8afdb36c52cf4727836669019e69222"'
        }]

        binary_stdin = BufferedBytesIO(b'foo\n')
        with mock.patch('sys.stdin', binary_stdin):
            self.run_cmd(command)

</source>
</class>

<class classid="122" nclones="2" nlines="13" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="798" endline="818" pcid="2419">
        self.assertEqual(len(self.operations_called), 1)
        model, args = self.operations_called[0]
        expected_args = {
            'Bucket': 'bucket',
            'Key': 'streaming.txt',
            'Body': mock.ANY
        }

        self.assertEqual(model.name, 'PutObject')
        self.assertEqual(args, expected_args)

    def test_streaming_upload_error(self):
        command = "s3 cp - s3://bucket/streaming.txt"
        self.parsed_responses = [{
            'Error': {
                'Code': 'NoSuchBucket',
                'Message': 'The specified bucket does not exist',
                'BucketName': 'bucket'
            }
        }]
        self.http_response.status_code = 404
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="864" endline="882" pcid="2422">
        ]

        stdout, stderr, rc = self.run_cmd(command)
        self.assertEqual(stdout, 'foo\n')

        # Ensures no extra operations were called
        self.assertEqual(len(self.operations_called), 2)
        ops = [op[0].name for op in self.operations_called]
        expected_ops = ['HeadObject', 'GetObject']
        self.assertEqual(ops, expected_ops)

    def test_streaming_download_error(self):
        command = "s3 cp s3://bucket/streaming.txt -"
        self.parsed_responses = [{
            'Error': {
                'Code': 'NoSuchBucket',
                'Message': 'The specified bucket does not exist',
                'BucketName': 'bucket'
            }
</source>
</class>

<class classid="123" nclones="2" nlines="14" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="888" endline="906" pcid="2424">
            'An error occurred (NoSuchBucket) when calling '
            'the HeadObject operation: The specified bucket does not exist'
        )
        self.assertIn(error_message, stderr)


class TestCpCommandWithRequesterPayer(BaseCPCommandTest):
    def setUp(self):
        super(TestCpCommandWithRequesterPayer, self).setUp()
        self.multipart_threshold = 8 * MB

    def test_single_upload(self):
        full_path = self.files.create_file('myfile', 'mycontent')
        cmdline = (
            '%s %s s3://mybucket/mykey --request-payer' % (
                self.prefix, full_path
            )
        )
        self.run_cmd(cmdline, expected_rc=0)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="957" endline="975" pcid="2426">
                    'Key': 'mykey',
                    'RequestPayer': 'requester',
                    'UploadId': 'myid',
                    'MultipartUpload': {'Parts': [
                        {'ETag': '"myetag"', 'PartNumber': 1},
                        {'ETag': '"myetag"', 'PartNumber': 2}]
                    }
                })
            ]
        )

    def test_recursive_upload(self):
        self.files.create_file('myfile', 'mycontent')
        cmdline = (
            '%s %s s3://mybucket/ --request-payer --recursive' % (
                self.prefix, self.files.rootdir
            )
        )
        self.run_cmd(cmdline, expected_rc=0)
</source>
</class>

<class classid="124" nclones="2" nlines="14" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="976" endline="993" pcid="2427">
        self.assert_operations_called(
            [
                ('PutObject', {
                    'Bucket': 'mybucket',
                    'Key': 'myfile',
                    'RequestPayer': 'requester',
                    'Body': mock.ANY,
                })
            ]
        )

    def test_single_download(self):
        cmdline = '%s s3://mybucket/mykey %s --request-payer' % (
            self.prefix, self.files.rootdir)
        self.parsed_responses = [
            self.head_object_response(),
            self.get_object_response()
        ]
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1017" endline="1033" pcid="2429">
                self.head_object_request(
                    'mybucket', 'mykey', RequestPayer='requester'),
                self.get_object_request(
                    'mybucket', 'mykey', Range=mock.ANY,
                    RequestPayer='requester'),
                self.get_object_request(
                    'mybucket', 'mykey', Range=mock.ANY,
                    RequestPayer='requester'),
            ]
        )

    def test_recursive_download(self):
        cmdline = '%s s3://mybucket/ %s --request-payer --recursive' % (
            self.prefix, self.files.rootdir)
        self.parsed_responses = [
            self.list_objects_response(['mykey']),
            self.get_object_response()
</source>
</class>

<class classid="125" nclones="4" nlines="15" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1191" endline="1206" pcid="2438">
        cmdline = self.prefix
        cmdline += ' %s' % self.files.rootdir
        cmdline += ' s3://%s/' % self.accesspoint_arn
        cmdline += ' --recursive'
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.put_object_request(self.accesspoint_arn, 'myfile')
            ]
        )

    def test_download(self):
        cmdline = self.prefix
        cmdline += ' s3://%s/mykey' % self.accesspoint_arn
        cmdline += ' %s' % self.files.rootdir
        self.parsed_responses = [
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1207" endline="1223" pcid="2439">
            self.head_object_response(),
            self.get_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.head_object_request(self.accesspoint_arn, 'mykey'),
                self.get_object_request(self.accesspoint_arn, 'mykey'),
            ]
        )

    def test_recursive_download(self):
        cmdline = self.prefix
        cmdline += ' s3://%s' % self.accesspoint_arn
        cmdline += ' %s' % self.files.rootdir
        cmdline += ' --recursive'
        self.parsed_responses = [
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1224" endline="1242" pcid="2440">
            self.list_objects_response(['mykey']),
            self.get_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.list_objects_request(self.accesspoint_arn),
                self.get_object_request(self.accesspoint_arn, 'mykey'),
            ]
        )

    def test_copy(self):
        cmdline = self.prefix
        cmdline += ' s3://%s/mykey' % self.accesspoint_arn
        accesspoint_arn_dest = self.accesspoint_arn + '-dest'
        cmdline += ' s3://%s' % accesspoint_arn_dest
        self.parsed_responses = [
            self.head_object_response(),
            self.copy_object_response(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1243" endline="1262" pcid="2441">
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.head_object_request(self.accesspoint_arn, 'mykey'),
                self.copy_object_request(
                    self.accesspoint_arn, 'mykey', accesspoint_arn_dest,
                    'mykey'),
            ]
        )

    def test_recursive_copy(self):
        cmdline = self.prefix
        cmdline += ' s3://%s' % self.accesspoint_arn
        accesspoint_arn_dest = self.accesspoint_arn + '-dest'
        cmdline += ' s3://%s' % accesspoint_arn_dest
        cmdline += ' --recursive'
        self.parsed_responses = [
            self.list_objects_response(['mykey']),
            self.copy_object_response(),
</source>
</class>

<class classid="126" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1263" endline="1277" pcid="2442">
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.list_objects_request(self.accesspoint_arn),
                self.copy_object_request(
                    self.accesspoint_arn, 'mykey', accesspoint_arn_dest,
                    'mykey'),
            ]
        )

    def test_accepts_mrap_arns(self):
        mrap_arn = (
            'arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap'
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1278" endline="1293" pcid="2443">
        filename = self.files.create_file('myfile', 'mycontent')
        cmdline = self.prefix
        cmdline += ' %s' % filename
        cmdline += ' s3://%s/mykey' % mrap_arn
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_operations_called(
            [
                self.put_object_request(mrap_arn, 'mykey')
            ]
        )

    def test_accepts_mrap_arns_with_slash(self):
        mrap_arn = (
            'arn:aws:s3::123456789012:accesspoint/mfzwi23gnjvgw.mrap'
        )
        filename = self.files.create_file('myfile', 'mycontent')
</source>
</class>

<class classid="127" nclones="6" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1386" endline="1399" pcid="2452">
        if key is None:
            key = self.target_key
        if tags is None:
            tags = {}
        return super(
            BaseCopyPropsCpCommandTest, self).put_object_tagging_request(
                bucket=bucket, key=key, tags=tags
        )


class TestCopyPropsNoneCpCommand(BaseCopyPropsCpCommandTest):
    def test_copy_object(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='none')
        self.parsed_responses = [
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1410" endline="1422" pcid="2454">

    def test_mp_copy_object(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='none')
        self.parsed_responses = [
            self.head_object_response(ContentLength=self.multipart_threshold)
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        # The CreateMultipartRequest is where additional parameters are
        # typically added. It should have no additional parameters.
        self.assert_in_operations_called(self.create_mpu_request())

    def test_metadata_directive_disables_copy_props(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='none')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1424" endline="1436" pcid="2455">
        self.parsed_responses = [
            self.head_object_response(),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.copy_object_request(MetadataDirective='COPY')
        )


class TestCopyPropsMetadataDirectiveCpCommand(BaseCopyPropsCpCommandTest):
    def test_copy_object(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='metadata-directive')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1610" endline="1622" pcid="2466">
        self.parsed_responses = [
            self.list_objects_response(
                keys=[self.source_key],
                Size=self.multipart_threshold
            ),
            self.no_such_key_error_response()
        ]
        self.set_http_status_codes([200, 404])
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=1)
        self.assertIn('NoSuchKey', stderr)

    def test_metadata_directive_disables_copy_props(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='metadata-directive')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1887" endline="1899" pcid="2483">
        )
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=1)
        self.assertIn('AccessDenied', stderr)
        self.assert_in_operations_called(
            self.delete_object_request(
                self.target_bucket,
                self.target_key,
                RequestPayer='requester'
            )
        )

    def test_metadata_directive_disables_copy_props(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1661" endline="1672" pcid="2470">
            self.head_object_response(**self.all_metadata_directive_props()),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['ContentLanguage'] = 'content-lang-from-cmdline'
        expected_extra_args['MetadataDirective'] = 'REPLACE'
        self.assert_in_operations_called(
            self.copy_object_request(**expected_extra_args)
        )

    def test_recursive_copy_object(self):
</source>
</class>

<class classid="128" nclones="4" nlines="15" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1437" endline="1452" pcid="2456">
        self.parsed_responses = [
            self.head_object_response(),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.copy_object_request(
                TaggingDirective='REPLACE'
            )
        )

    def test_copy_object_overrides_with_cmdline_props(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='metadata-directive')
        cmdline += ' --content-type content-type-from-cmdline'
        self.parsed_responses = [
            self.head_object_response(**self.all_metadata_directive_props()),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1646" endline="1660" pcid="2469">
    def test_is_default_value(self):
        cmdline = self.get_s3_cp_copy_command(copy_props=None)
        self.parsed_responses = [
            self.head_object_response(),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        # The CopyObject should have no additional parameters other
        # than copy source, bucket, and key.
        self.assert_in_operations_called(self.copy_object_request())

    def test_copy_object_with_prop_overrides(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
        cmdline += ' --content-language content-lang-from-cmdline'
        self.parsed_responses = [
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1673" endline="1691" pcid="2471">
        cmdline = self.get_recursive_s3_copy_command(copy_props='default')
        self.parsed_responses = [
            self.list_objects_response(keys=[self.source_key]),
            self.head_object_response(**self.all_metadata_directive_props()),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.copy_object_request(key=self.source_key)
        )

    def test_recursive_copy_object_with_prop_overrides(self):
        cmdline = self.get_recursive_s3_copy_command(copy_props='default')
        cmdline += ' --content-language content-lang-from-cmdline'
        self.parsed_responses = [
            self.list_objects_response(keys=[self.source_key]),
            self.head_object_response(**self.all_metadata_directive_props()),
            self.copy_object_response(),
        ]
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1469" endline="1490" pcid="2458">
            self.copy_object_response(),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.copy_object_request(
                key=self.source_key,
                TaggingDirective='REPLACE',
            )
        )

    def test_recursive_copy_object_overrides_with_cmdline_props(self):
        cmdline = self.get_recursive_s3_copy_command(
            copy_props='metadata-directive')
        cmdline += ' --metadata key=val-from-cmdline'
        self.parsed_responses = [
            self.list_objects_response(keys=[self.source_key]),
            self.head_object_response(**self.all_metadata_directive_props()),
            self.copy_object_response(),
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
</source>
</class>

<class classid="129" nclones="3" nlines="16" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1453" endline="1468" pcid="2457">
            self.copy_object_response(),
        ]
        self.run_cmd(cmdline, expected_rc=0)
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['MetadataDirective'] = 'REPLACE'
        expected_extra_args['TaggingDirective'] = 'REPLACE'
        expected_extra_args['ContentType'] = 'content-type-from-cmdline'
        self.assert_in_operations_called(
            self.copy_object_request(**expected_extra_args)
        )

    def test_recursive_copy_object(self):
        cmdline = self.get_recursive_s3_copy_command(
            copy_props='metadata-directive')
        self.parsed_responses = [
            self.list_objects_response(keys=[self.source_key]),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1491" endline="1509" pcid="2459">
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['MetadataDirective'] = 'REPLACE'
        expected_extra_args['TaggingDirective'] = 'REPLACE'
        expected_extra_args['Metadata'] = {'key': 'val-from-cmdline'}
        self.assert_in_operations_called(
            self.copy_object_request(
                key=self.source_key,
                **expected_extra_args
            )
        )

    def test_recursive_copy_maps_additional_head_object_headers(self):
        cmdline = self.get_recursive_s3_copy_command(
            copy_props='metadata-directive')
        cmdline += ' --metadata key=val-from-cmdline'
        cmdline += ' --request-payer requester'
        self.parsed_responses = [
            self.list_objects_response(keys=[self.source_key]),
            self.head_object_response(),
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1576" endline="1595" pcid="2464">
            self.head_object_response(**self.all_metadata_directive_props()),
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['ContentType'] = 'content-type-from-cmdline'
        self.assert_in_operations_called(
            self.create_mpu_request(
                key=self.source_key, **expected_extra_args
            )
        )

    def test_recursive_mp_copy_maps_additional_head_object_headers(self):
        cmdline = self.get_recursive_s3_copy_command(
            copy_props='metadata-directive')
        cmdline += ' --request-payer requester'
        self.parsed_responses = [
            self.list_objects_response(
                keys=[self.source_key],
                Size=self.multipart_threshold
            ),
</source>
</class>

<class classid="130" nclones="5" nlines="13" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1523" endline="1538" pcid="2461">
        self.parsed_responses = [
            self.head_object_response(
                ContentLength=self.multipart_threshold,
                **self.all_metadata_directive_props()
            ),
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.create_mpu_request(**self.all_metadata_directive_props())
        )

    def test_mp_copy_object_with_prop_overrides(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='metadata-directive')
        cmdline += ' --content-type content-type-from-cmdline'
        self.parsed_responses = [
            self.head_object_response(
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1692" endline="1707" pcid="2472">
        self.run_cmd(cmdline, expected_rc=0)
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['ContentLanguage'] = 'content-lang-from-cmdline'
        expected_extra_args['MetadataDirective'] = 'REPLACE'
        self.assert_in_operations_called(
            self.copy_object_request(
                key=self.source_key,
                **expected_extra_args
            )
        )

    def test_mp_copy_object(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
        self.parsed_responses = [
            self.head_object_response(
                ContentLength=self.multipart_threshold,
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1708" endline="1725" pcid="2473">
                **self.all_metadata_directive_props()
            ),
            self.get_object_tagging_response(tags=self.tags)
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['Tagging'] = self.urlencoded_tags
        self.assert_in_operations_called(
            self.create_mpu_request(**expected_extra_args)
        )

    def test_mp_copy_object_with_prop_overrides(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
        cmdline += ' --cache-control cache-control-from-cmdline'
        self.parsed_responses = [
            self.head_object_response(
                ContentLength=self.multipart_threshold,
                **self.all_metadata_directive_props()
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1767" endline="1786" pcid="2477">
            self.get_object_tagging_response(tags=self.tags)
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['Tagging'] = self.urlencoded_tags
        self.assert_in_operations_called(
            self.create_mpu_request(
                key=self.source_key, **expected_extra_args
            )
        )

    def test_recursive_mp_copy_object_with_prop_overrides(self):
        cmdline = self.get_recursive_s3_copy_command(copy_props='default')
        cmdline += ' --cache-control cache-control-from-cmdline'
        self.parsed_responses = [
            self.list_objects_response(
                keys=[self.source_key], Size=self.multipart_threshold
            ),
            self.head_object_response(**self.all_metadata_directive_props()),
            self.get_object_tagging_response(tags=self.tags)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1749" endline="1766" pcid="2476">
            self.head_object_response(ContentLength=self.multipart_threshold),
            self.get_object_tagging_response(tags=self.tags_over_2k)
        ] + self.mp_copy_responses() + [
            self.put_object_tagging_response()
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(self.create_mpu_request())
        self.assert_in_operations_called(
            self.put_object_tagging_request(tags=self.tags_over_2k)
        )

    def test_recursive_mp_copy_object(self):
        cmdline = self.get_recursive_s3_copy_command(copy_props='default')
        self.parsed_responses = [
            self.list_objects_response(
                keys=[self.source_key], Size=self.multipart_threshold
            ),
            self.head_object_response(**self.all_metadata_directive_props()),
</source>
</class>

<class classid="131" nclones="2" nlines="16" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1539" endline="1555" pcid="2462">
                ContentLength=self.multipart_threshold,
                **self.all_metadata_directive_props()
            ),
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        expected_extra_args = self.all_metadata_directive_props()
        expected_extra_args['ContentType'] = 'content-type-from-cmdline'
        self.assert_in_operations_called(
            self.create_mpu_request(**expected_extra_args)
        )

    def test_recursive_mp_copy(self):
        cmdline = self.get_recursive_s3_copy_command(
            copy_props='metadata-directive')
        self.parsed_responses = [
            self.list_objects_response(
                keys=[self.source_key],
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1556" endline="1575" pcid="2463">
                Size=self.multipart_threshold,
            ),
            self.head_object_response(**self.all_metadata_directive_props()),
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.create_mpu_request(
                key=self.source_key, **self.all_metadata_directive_props()
            )
        )

    def test_recursive_mp_copy_object_with_prop_overrides(self):
        cmdline = self.get_recursive_s3_copy_command(
            copy_props='metadata-directive')
        cmdline += ' --content-type content-type-from-cmdline'
        self.parsed_responses = [
            self.list_objects_response(
                keys=[self.source_key],
                Size=self.multipart_threshold,
            ),
</source>
</class>

<class classid="132" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1596" endline="1609" pcid="2465">
            self.head_object_response(),
        ] + self.mp_copy_responses()
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.head_object_request(
                bucket=self.source_bucket,
                key=self.source_key,
                RequestPayer='requester',
            )
        )

    def test_fails_when_head_object_fails(self):
        cmdline = self.get_recursive_s3_copy_command(
            copy_props='metadata-directive')
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1807" endline="1819" pcid="2479">
            self.put_object_tagging_response()
        ]
        self.run_cmd(cmdline, expected_rc=0)
        self.assert_in_operations_called(
            self.create_mpu_request(key=self.source_key))
        self.assert_in_operations_called(
            self.put_object_tagging_request(
                key=self.source_key, tags=self.tags_over_2k
            )
        )

    def test_fails_when_head_object_fails(self):
        cmdline = self.get_recursive_s3_copy_command(copy_props='default')
</source>
</class>

<class classid="133" nclones="2" nlines="24" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1830" endline="1855" pcid="2481">

    def test_fails_when_get_tagging_object_fails(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
        self.parsed_responses = [
            self.head_object_response(ContentLength=self.multipart_threshold),
            self.access_denied_error_response()
        ]
        self.set_http_status_codes([200, 403])
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=1)
        self.assertIn('AccessDenied', stderr)

    def test_fails_and_cleans_up_when_put_tagging_object_fails(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
        self.parsed_responses = [
            self.head_object_response(ContentLength=self.multipart_threshold),
            self.get_object_tagging_response(self.tags_over_2k),
        ] + self.mp_copy_responses() + [
            self.access_denied_error_response(),
            self.delete_object_response()
        ]
        self.set_http_status_codes(
            [
                200,  # HeadObject
                200,  # GetObjectTagging
                200,  # CreateMultipartUpload
                200,  # UploadPartCopy
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_cp_command.py" startline="1856" endline="1886" pcid="2482">
                200,  # CompleteMultipartUpload
                403,  # PutObjectTagging
                200,  # DeleteObject
            ]
        )
        _, stderr, _ = self.run_cmd(cmdline, expected_rc=1)
        self.assertIn('AccessDenied', stderr)
        self.assert_in_operations_called(
            self.delete_object_request(self.target_bucket, self.target_key)
        )

    def test_clean_up_uses_requester_payer(self):
        cmdline = self.get_s3_cp_copy_command(copy_props='default')
        cmdline += ' --request-payer requester'
        self.parsed_responses = [
            self.head_object_response(ContentLength=self.multipart_threshold),
            self.get_object_tagging_response(self.tags_over_2k),
        ] + self.mp_copy_responses() + [
            self.access_denied_error_response(),
            self.delete_object_response()
        ]
        self.set_http_status_codes(
            [
                200,  # HeadObject
                200,  # GetObjectTagging
                200,  # CreateMultipartUpload
                200,  # UploadPartCopy
                200,  # CompleteMultipartUpload
                403,  # PutObjectTagging
                200,  # DeleteObject
            ]
</source>
</class>

<class classid="134" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_s3_object_lambda.py" startline="31" endline="43" pcid="2499">
    def test_object_lambda_arn_with_colon_raises_exception(self):
        object_lambda_arn = ('arn:aws:s3-object-lambda:us-west-2:123456789012:'
                             'accesspoint:my-accesspoint')
        object_lambda_arn_with_key = '%s/my-key' % object_lambda_arn
        for prefix in self.prefixes:
            cmdline = prefix.format(object_lambda_arn=object_lambda_arn)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)
            cmdline = prefix.format(
                object_lambda_arn=object_lambda_arn_with_key)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_s3_object_lambda.py" startline="44" endline="55" pcid="2500">
    def test_object_lambda_arn_with_slash_raises_exception(self):
        object_lambda_arn = ('arn:aws:s3-object-lambda:us-west-2:123456789012:'
                             'accesspoint/my-accesspoint')
        object_lambda_arn_with_key = '%s/my-key' % object_lambda_arn
        for prefix in self.prefixes:
            cmdline = prefix.format(object_lambda_arn=object_lambda_arn)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)
            cmdline = prefix.format(
                object_lambda_arn=object_lambda_arn_with_key)
            _, stderr, _ = self.run_cmd(cmdline, 252)
            self.assertIn('s3 commands do not support', stderr)
</source>
</class>

<class classid="135" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/__init__.py" startline="167" endline="179" pcid="2521">
    def copy_object_request(self, source_bucket, source_key, bucket, key,
                            **override_kwargs):
        params = {
            'Bucket': bucket,
            'Key': key,
            'CopySource': {
                'Bucket': source_bucket,
                'Key': source_key
            }
        }
        params.update(override_kwargs)
        return 'CopyObject', params

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/__init__.py" startline="196" endline="210" pcid="2524">
    def upload_part_copy_request(self, source_bucket, source_key, bucket, key,
                                 upload_id, **override_kwargs):
        params = {
            'Bucket': bucket,
            'Key': key,
            'CopySource': {
                'Bucket': source_bucket,
                'Key': source_key
            },
            'UploadId': upload_id,

        }
        params.update(override_kwargs)
        return 'UploadPartCopy', params

</source>
</class>

<class classid="136" nclones="3" nlines="11" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="20" endline="37" pcid="2562">
    def test_operations_used_in_recursive_list(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "foo/bar.txt", "Size": 100,
             "LastModified": time_utc}]}]
        stdout, _, _ = self.run_cmd('s3 ls s3://bucket/ --recursive', expected_rc=0)
        call_args = self.operations_called[0][1]
        # We should not be calling the args with any delimiter because we
        # want a recursive listing.
        self.assertEqual(call_args['Prefix'], '')
        self.assertEqual(call_args['Bucket'], 'bucket')
        self.assertNotIn('delimiter', call_args)
        # Time is stored in UTC timezone, but the actual time displayed
        # is specific to your tzinfo, so shift the timezone to your local's.
        time_local = parser.parse(time_utc).astimezone(tz.tzlocal())
        self.assertEqual(
            stdout, '%s        100 foo/bar.txt\n'%time_local.strftime('%Y-%m-%d %H:%M:%S'))

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="57" endline="71" pcid="2565">
    def test_operations_use_page_size_recursive(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "foo/bar.txt", "Size": 100,
             "LastModified": time_utc}]}]
        stdout, _, _ = self.run_cmd('s3 ls s3://bucket/ --page-size 8 --recursive', expected_rc=0)
        call_args = self.operations_called[0][1]
        # We should not be calling the args with any delimiter because we
        # want a recursive listing.
        self.assertEqual(call_args['Prefix'], '')
        self.assertEqual(call_args['Bucket'], 'bucket')
        # The page size gets translated to ``MaxKeys`` in the s3 model
        self.assertEqual(call_args['MaxKeys'], 8)
        self.assertNotIn('Delimiter', call_args)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="43" endline="56" pcid="2564">
    def test_operations_use_page_size(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "foo/bar.txt", "Size": 100,
             "LastModified": time_utc}]}]
        stdout, _, _ = self.run_cmd('s3 ls s3://bucket/ --page-size 8', expected_rc=0)
        call_args = self.operations_called[0][1]
        # We should not be calling the args with any delimiter because we
        # want a recursive listing.
        self.assertEqual(call_args['Prefix'], '')
        self.assertEqual(call_args['Bucket'], 'bucket')
        # The page size gets translated to ``MaxKeys`` in the s3 model
        self.assertEqual(call_args['MaxKeys'], 8)

</source>
</class>

<class classid="137" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="142" endline="159" pcid="2573">
    def test_summarize(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
            {"Key": "onekilobyte.txt", "Size": 1024, "LastModified": time_utc},
            {"Key": "onemegabyte.txt", "Size": 1024 ** 2, "LastModified": time_utc},
            {"Key": "onegigabyte.txt", "Size": 1024 ** 3, "LastModified": time_utc},
            {"Key": "oneterabyte.txt", "Size": 1024 ** 4, "LastModified": time_utc},
            {"Key": "onepetabyte.txt", "Size": 1024 ** 5, "LastModified": time_utc} ]}]
        stdout, _, _ = self.run_cmd('s3 ls s3://bucket/ --summarize', expected_rc=0)
        call_args = self.operations_called[0][1]
        # Time is stored in UTC timezone, but the actual time displayed
        # is specific to your tzinfo, so shift the timezone to your local's.
        time_local = parser.parse(time_utc).astimezone(tz.tzlocal())
        time_fmt = time_local.strftime('%Y-%m-%d %H:%M:%S')
        self.assertIn('Total Objects: 6\n', stdout)
        self.assertIn('Total Size: 1127000493261825\n', stdout)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="160" endline="177" pcid="2574">
    def test_summarize_with_human_readable(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
            {"Key": "onekilobyte.txt", "Size": 1024, "LastModified": time_utc},
            {"Key": "onemegabyte.txt", "Size": 1024 ** 2, "LastModified": time_utc},
            {"Key": "onegigabyte.txt", "Size": 1024 ** 3, "LastModified": time_utc},
            {"Key": "oneterabyte.txt", "Size": 1024 ** 4, "LastModified": time_utc},
            {"Key": "onepetabyte.txt", "Size": 1024 ** 5, "LastModified": time_utc} ]}]
        stdout, _, _ = self.run_cmd('s3 ls s3://bucket/ --human-readable --summarize', expected_rc=0)
        call_args = self.operations_called[0][1]
        # Time is stored in UTC timezone, but the actual time displayed
        # is specific to your tzinfo, so shift the timezone to your local's.
        time_local = parser.parse(time_utc).astimezone(tz.tzlocal())
        time_fmt = time_local.strftime('%Y-%m-%d %H:%M:%S')
        self.assertIn('Total Objects: 6\n', stdout)
        self.assertIn('Total Size: 1.0 PiB\n', stdout)

</source>
</class>

<class classid="138" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="178" endline="189" pcid="2575">
    def test_requester_pays(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
        ]}]
        command = 's3 ls s3://mybucket/foo/ --request-payer requester'
        self.assert_params_for_cmd(command, {
            'Bucket': 'mybucket', 'Delimiter': '/',
            'RequestPayer': 'requester', 'EncodingType': 'url',
            'Prefix': 'foo/'
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/s3/test_ls_command.py" startline="190" endline="201" pcid="2576">
    def test_requester_pays_with_no_args(self):
        time_utc = "2014-01-09T20:45:49.000Z"
        self.parsed_responses = [{"CommonPrefixes": [], "Contents": [
            {"Key": "onebyte.txt", "Size": 1, "LastModified": time_utc},
        ]}]
        command = 's3 ls s3://mybucket/foo/ --request-payer'
        self.assert_params_for_cmd(command, {
            'Bucket': 'mybucket', 'Delimiter': '/',
            'RequestPayer': 'requester', 'EncodingType': 'url',
            'Prefix': 'foo/'
        })

</source>
</class>

<class classid="139" nclones="2" nlines="16" similarity="77">
<source file="systems/aws-cli-2.4.27/tests/functional/autocomplete/test_completer.py" startline="286" endline="305" pcid="2598">
    def test_names_with_fuzzy_search(self):
        self.completer = basic.ShorthandCompleter(
            self.cli_fetcher,
            response_filter=filters.fuzzy_filter
        )
        parsed = self.parser.parse(
            'aws codebuild create-project --source buildspec=foo,at')
        suggestions = self.completer.complete(parsed)
        names = [s.name for s in suggestions]
        display_text = [s.display_text for s in suggestions]
        self.assertEqual(names, ['buildspec=foo,location=',
                                 'buildspec=foo,buildStatusConfig={',
                                 'buildspec=foo,reportBuildStatus=',
                                 'buildspec=foo,auth={'])
        self.assertEqual(display_text,
                         ['location=',
                          'buildStatusConfig={',
                          'reportBuildStatus=',
                          'auth={'])

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/autocomplete/test_completer.py" startline="306" endline="321" pcid="2599">
    def test_names_with_startswith_search(self):
        self.completer = basic.ShorthandCompleter(
            self.cli_fetcher,
            response_filter=filters.startswith_filter
        )
        parsed = self.parser.parse(
            'aws codebuild create-project --source auth={},bui')
        suggestions = self.completer.complete(parsed)
        names = [s.name for s in suggestions]
        display_text = [s.display_text for s in suggestions]
        self.assertEqual(names, ['auth={},buildspec=',
                                 'auth={},buildStatusConfig={'])
        self.assertEqual(display_text,
                         ['buildspec=',
                          'buildStatusConfig={'])

</source>
</class>

<class classid="140" nclones="2" nlines="15" similarity="86">
<source file="systems/aws-cli-2.4.27/tests/functional/autocomplete/test_completer.py" startline="351" endline="366" pcid="2603">
    def test_return_suggestions_for_list_of_enum(self):
        self.completer = basic.ShorthandCompleter(
            self.cli_fetcher,
            response_filter=filters.fuzzy_filter
        )
        parsed = self.parser.parse('aws cloudformation deploy --capabilities ')
        suggestions = self.completer.complete(parsed)
        self.assertIn(
            CompletionResult('CAPABILITY_IAM', 0,
                             False, None, None, 'CAPABILITY_IAM'),
            suggestions)
        self.assertIn(
            CompletionResult('CAPABILITY_NAMED_IAM', 0,
                             False, None, None, 'CAPABILITY_NAMED_IAM'),
            suggestions)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/autocomplete/test_completer.py" startline="367" endline="384" pcid="2604">
    def test_return_suggestions_for_list_of_enum_with_prefix(self):
        self.completer = basic.ShorthandCompleter(
            self.cli_fetcher,
            response_filter=filters.fuzzy_filter
        )
        parsed = self.parser.parse(
            'aws cloudformation deploy --capabilities ca')
        suggestions = self.completer.complete(parsed)
        self.assertIn(
            CompletionResult('CAPABILITY_IAM', 0,
                             False, None, None, 'CAPABILITY_IAM'),
            suggestions)
        self.assertIn(
            CompletionResult('CAPABILITY_NAMED_IAM', 0,
                             False, None, None, 'CAPABILITY_NAMED_IAM'),
            suggestions)


</source>
</class>

<class classid="141" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/dependencies/test_colorama.py" startline="23" endline="43" pcid="2666">
    def test_fore_attributes(self):
        self.assertEqual(Fore.BLACK, '\033[30m')
        self.assertEqual(Fore.RED, '\033[31m')
        self.assertEqual(Fore.GREEN, '\033[32m')
        self.assertEqual(Fore.YELLOW, '\033[33m')
        self.assertEqual(Fore.BLUE, '\033[34m')
        self.assertEqual(Fore.MAGENTA, '\033[35m')
        self.assertEqual(Fore.CYAN, '\033[36m')
        self.assertEqual(Fore.WHITE, '\033[37m')
        self.assertEqual(Fore.RESET, '\033[39m')

        # Check the light, extended versions.
        self.assertEqual(Fore.LIGHTBLACK_EX, '\033[90m')
        self.assertEqual(Fore.LIGHTRED_EX, '\033[91m')
        self.assertEqual(Fore.LIGHTGREEN_EX, '\033[92m')
        self.assertEqual(Fore.LIGHTYELLOW_EX, '\033[93m')
        self.assertEqual(Fore.LIGHTBLUE_EX, '\033[94m')
        self.assertEqual(Fore.LIGHTMAGENTA_EX, '\033[95m')
        self.assertEqual(Fore.LIGHTCYAN_EX, '\033[96m')
        self.assertEqual(Fore.LIGHTWHITE_EX, '\033[97m')

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/dependencies/test_colorama.py" startline="44" endline="64" pcid="2667">
    def test_back_attributes(self):
        self.assertEqual(Back.BLACK, '\033[40m')
        self.assertEqual(Back.RED, '\033[41m')
        self.assertEqual(Back.GREEN, '\033[42m')
        self.assertEqual(Back.YELLOW, '\033[43m')
        self.assertEqual(Back.BLUE, '\033[44m')
        self.assertEqual(Back.MAGENTA, '\033[45m')
        self.assertEqual(Back.CYAN, '\033[46m')
        self.assertEqual(Back.WHITE, '\033[47m')
        self.assertEqual(Back.RESET, '\033[49m')

        # Check the light, extended versions.
        self.assertEqual(Back.LIGHTBLACK_EX, '\033[100m')
        self.assertEqual(Back.LIGHTRED_EX, '\033[101m')
        self.assertEqual(Back.LIGHTGREEN_EX, '\033[102m')
        self.assertEqual(Back.LIGHTYELLOW_EX, '\033[103m')
        self.assertEqual(Back.LIGHTBLUE_EX, '\033[104m')
        self.assertEqual(Back.LIGHTMAGENTA_EX, '\033[105m')
        self.assertEqual(Back.LIGHTCYAN_EX, '\033[106m')
        self.assertEqual(Back.LIGHTWHITE_EX, '\033[107m')

</source>
</class>

<class classid="142" nclones="2" nlines="32" similarity="93">
<source file="systems/aws-cli-2.4.27/tests/functional/configservice/test_subscribe.py" startline="34" endline="73" pcid="2673">
    def test_subscribe_when_bucket_exists_and_new_sns_topic(self):
        self.prefix += ' --s3-bucket mybucket --sns-topic mytopic'
        self.prefix += ' --iam-role myrole'
        self.run_cmd(self.prefix)

        self.assertEqual(len(self.operations_called), 7)
        list_of_operation_names_called = []
        list_of_parameters_called = []
        for operation_called in self.operations_called:
            list_of_operation_names_called.append(operation_called[0].name)
            list_of_parameters_called.append(operation_called[1])

        self.assertEqual(
            list_of_operation_names_called, [
                'HeadBucket',
                'CreateTopic',
                'PutConfigurationRecorder',
                'PutDeliveryChannel',
                'StartConfigurationRecorder',
                'DescribeConfigurationRecorders',
                'DescribeDeliveryChannels'
            ]
        )
        self.assertEqual(
            list_of_parameters_called, [
                {'Bucket': 'mybucket'},  # S3 HeadBucket
                {'Name': 'mytopic'},  # SNS CreateTopic
                {'ConfigurationRecorder': {  # PutConfigurationRecorder
                    'name': 'default', 'roleARN': 'myrole'}},
                {'DeliveryChannel': {  # PutDeliveryChannel
                    'name': 'default',
                    's3BucketName': 'mybucket',
                    'snsTopicARN': 'my-topic-arn'}},
                # StartConfigurationRecorder
                {'ConfigurationRecorderName': 'default'},
                {},  # DescribeConfigurationRecorders
                {}  # DescribeDeliveryChannels
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/configservice/test_subscribe.py" startline="74" endline="112" pcid="2674">
    def test_subscribe_when_bucket_exists_and_sns_topic_arn_provided(self):
        self.parsed_responses.pop(1)
        self.prefix += ' --s3-bucket mybucket --sns-topic arn:mytopic'
        self.prefix += ' --iam-role myrole'
        self.run_cmd(self.prefix)

        self.assertEqual(len(self.operations_called), 6)
        list_of_operation_names_called = []
        list_of_parameters_called = []
        for operation_called in self.operations_called:
            list_of_operation_names_called.append(operation_called[0].name)
            list_of_parameters_called.append(operation_called[1])

        self.assertEqual(
            list_of_operation_names_called, [
                'HeadBucket',
                'PutConfigurationRecorder',
                'PutDeliveryChannel',
                'StartConfigurationRecorder',
                'DescribeConfigurationRecorders',
                'DescribeDeliveryChannels'
            ]
        )
        self.assertEqual(
            list_of_parameters_called, [
                {'Bucket': 'mybucket'},  # S3 HeadBucket
                {'ConfigurationRecorder': {  # PutConfigurationRecorder
                    'name': 'default', 'roleARN': 'myrole'}},
                {'DeliveryChannel': {  # PutDeliveryChannel
                    'name': 'default',
                    's3BucketName': 'mybucket',
                    'snsTopicARN': 'arn:mytopic'}},
                # StartConfigurationRecorder
                {'ConfigurationRecorderName': 'default'},
                {},  # DescribeConfigurationRecorders
                {}  # DescribeDeliveryChannels
            ]
        )

</source>
</class>

<class classid="143" nclones="3" nlines="13" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_configure_health_check.py" startline="21" endline="36" pcid="2726">
    def test_shorthand_basic(self):
        cmdline = self.prefix
        cmdline += ' --load-balancer-name my-lb'
        cmdline += (' --health-check Target=HTTP:80/weather/us/wa/seattle,'
                    'Interval=300,Timeout=60,UnhealthyThreshold=5,'
                    'HealthyThreshold=9')
        result = {
            'HealthCheck': {
                'HealthyThreshold': 9,
                'Interval': 300,
                'Target': 'HTTP:80/weather/us/wa/seattle',
                'Timeout': 60,
                'UnhealthyThreshold': 5},
            'LoadBalancerName': 'my-lb'}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_configure_health_check.py" startline="37" endline="52" pcid="2727">
    def test_json(self):
        cmdline = self.prefix
        cmdline += ' --load-balancer-name my-lb '
        cmdline += ('--health-check {"Target":"HTTP:80/weather/us/wa/seattle'
                    '?a=b","Interval":300,"Timeout":60,'
                    '"UnhealthyThreshold":5,"HealthyThreshold":9}')
        result = {
            'HealthCheck': {
                'HealthyThreshold': 9,
                'Interval': 300,
                'Target': 'HTTP:80/weather/us/wa/seattle?a=b',
                'Timeout': 60,
                'UnhealthyThreshold': 5},
            'LoadBalancerName': 'my-lb'}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_configure_health_check.py" startline="53" endline="69" pcid="2728">
    def test_shorthand_with_multiple_equals_for_value(self):
        cmdline = self.prefix
        cmdline += ' --load-balancer-name my-lb'
        cmdline += (
            ' --health-check Target="HTTP:80/weather/us/wa/seattle?a=b"'
            ',Interval=300,Timeout=60,UnhealthyThreshold=5,'
            'HealthyThreshold=9'
        )
        result = {
            'HealthCheck': {
                'HealthyThreshold': 9,
                'Interval': 300,
                'Target': 'HTTP:80/weather/us/wa/seattle?a=b',
                'Timeout': 60,
                'UnhealthyThreshold': 5},
            'LoadBalancerName': 'my-lb'}
        self.assert_params_for_cmd(cmdline, result)
</source>
</class>

<class classid="144" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_deregister_instances_from_load_balancer.py" startline="20" endline="31" pcid="2737">
    def test_shorthand(self):
        command = self.prefix + ' --load-balancer-name foo'
        command += ' --instances id1 id2 id3'
        expected_params = {
            'LoadBalancerName': 'foo',
            'Instances': [
                {'InstanceId': 'id1'},
                {'InstanceId': 'id2'},
                {'InstanceId': 'id3'}
            ]
        }
        self.assert_params_for_cmd(command, expected_params)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_describe_instance_health.py" startline="20" endline="31" pcid="2738">
    def test_shorthand(self):
        command = self.prefix + ' --load-balancer-name foo'
        command += ' --instances id1 id2 id3'
        expected_params = {
            'LoadBalancerName': 'foo',
            'Instances': [
                {'InstanceId': 'id1'},
                {'InstanceId': 'id2'},
                {'InstanceId': 'id3'}
            ]
        }
        self.assert_params_for_cmd(command, expected_params)
</source>
</class>

<class classid="145" nclones="3" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/test_output.py" startline="202" endline="218" pcid="2764">
    def test_yaml_stream_single_response(self):
        cmdline = 'dynamodb list-tables --output yaml-stream --no-paginate'
        self.parsed_responses = [
            {
                'TableNames': [
                    'MyTable'
                ]
            }
        ]
        stdout, _, _ = self.run_cmd(cmdline)
        self.assert_yaml_response_equal(
            stdout,
            [
                {'TableNames': ['MyTable']}
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_output.py" startline="305" endline="324" pcid="2768">
    def test_yaml_stream_uses_query(self):
        cmdline = (
            'dynamodb list-tables --output yaml-stream --no-paginate '
            '--query TableNames'
        )
        self.parsed_responses = [
            {
                'TableNames': [
                    'MyTable'
                ]
            }
        ]
        stdout, _, _ = self.run_cmd(cmdline)
        self.assert_yaml_response_equal(
            stdout,
            [
                ['MyTable']
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_output.py" startline="252" endline="269" pcid="2766">
    def test_yaml_stream_removes_response_metadata(self):
        cmdline = 'dynamodb list-tables --output yaml-stream --no-paginate'
        self.parsed_responses = [
            {
                'TableNames': [
                    'MyTable'
                ],
                'ResponseMetadata': {'RequestId': 'id'}
            }
        ]
        stdout, _, _ = self.run_cmd(cmdline)
        self.assert_yaml_response_equal(
            stdout,
            [
                {'TableNames': ['MyTable']}
            ]
        )

</source>
</class>

<class classid="146" nclones="2" nlines="24" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/functional/test_output.py" startline="219" endline="251" pcid="2765">
    def test_yaml_stream_paginated_response(self):
        cmdline = 'dynamodb list-tables --output yaml-stream'
        self.parsed_responses = [
            {
                'TableNames': [
                    'MyTable'
                ],
                'LastEvaluatedTableName': 'MyTable'
            },
            {
                'TableNames': [
                    'MyTable2'
                ]
            },
        ]
        stdout, _, _ = self.run_cmd(cmdline)
        self.assert_yaml_response_equal(
            stdout,
            [
                {
                    'TableNames': [
                        'MyTable'
                    ],
                    'LastEvaluatedTableName': 'MyTable'
                },
                {
                    'TableNames': [
                        'MyTable2'
                    ]
                },
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/test_output.py" startline="270" endline="304" pcid="2767">
    def test_yaml_stream_removes_response_metadata_for_all_responses(self):
        cmdline = 'dynamodb list-tables --output yaml-stream'
        self.parsed_responses = [
            {
                'TableNames': [
                    'MyTable'
                ],
                'LastEvaluatedTableName': 'MyTable',
                'ResponseMetadata': {'RequestId': 'id'}
            },
            {
                'TableNames': [
                    'MyTable2'
                ],
                'ResponseMetadata': {'RequestId': 'id2'}
            },
        ]
        stdout, _, _ = self.run_cmd(cmdline)
        self.assert_yaml_response_equal(
            stdout,
            [
                {
                    'TableNames': [
                        'MyTable'
                    ],
                    'LastEvaluatedTableName': 'MyTable'
                },
                {
                    'TableNames': [
                        'MyTable2'
                    ]
                },
            ]
        )

</source>
</class>

<class classid="147" nclones="9" nlines="15" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="101" endline="119" pcid="2807">
                                           cliVersion=awscli.__version__)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_region_success(
            self, mock_subprocess_run):

        cmdline = self.get_push_container_command('--region us-west-2')

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="266" endline="287" pcid="2814">
                                           readTimeout=70)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_con_timeout_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--cli-connect-timeout 80 '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="170" endline="191" pcid="2810">
                                           doNotVerifySSL=True)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_no_sign_request_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--no-sign-request '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="242" endline="263" pcid="2813">
                                           output='json')
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_read_timeout_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--cli-read-timeout 70 '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="218" endline="239" pcid="2812">
                                           paginate=False)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_output_json_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--output json'
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="194" endline="215" pcid="2811">
                                           doNotSignRequest=True)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_no_paginate_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--no-paginate '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="146" endline="167" pcid="2809">
                                           endpoint='https://test.amazon.com')
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_no_verify_ssl_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--no-verify-ssl '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="290" endline="312" pcid="2815">
                                           connectTimeout=80)
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_cabundle_ssuccess(
            self, mock_subprocess_run):

        extra_param = (
            '--ca-bundle testPEM'
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
        self.assert_expected_payload(actual_input['payload'])
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/lightsail/test_push_container_image.py" startline="122" endline="143" pcid="2808">
                                           region='us-west-2')
        self.assertEqual(response[2], 0)

    @mock.patch('awscli.customizations.lightsail.'
                'push_container_image.subprocess.run')
    def test_start_lightsailctl_with_url_success(
            self, mock_subprocess_run):

        extra_param = (
            '--endpoint-url https://test.amazon.com '
        )
        cmdline = self.get_push_container_command(extra_param)

        mock_subprocess_run.return_value = 0
        response = self.run_cmd(cmdline)

        self.assert_expected_input_options(mock_subprocess_run)

        actual_input = json.loads(
            mock_subprocess_run.call_args[1]['input'])
        self.assert_expected_input_version(actual_input['inputVersion'])
        self.assert_expected_operation(actual_input['operation'])
</source>
</class>

<class classid="148" nclones="5" nlines="15" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/autoprompt/test_prompttoolkit.py" startline="41" endline="55" pcid="2865">
    def test_get_completions(self):
        expected_completion_objects = [
            Completion('create-image', 0, 'create-image', ''),
            Completion('describe-instances', 0, 'describe-instances', '')
        ]
        self.completion_source.autocomplete.return_value = [
            CompletionResult('create-image'),
            CompletionResult('describe-instances')
        ]
        self.completer = PromptToolkitCompleter(self.completion_source)
        actual_completions = self.completer.get_completions(Document(),
                                                            CompleteEvent())
        self.assert_completions_match_expected(actual_completions,
                                               expected_completion_objects)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autoprompt/test_prompttoolkit.py" startline="63" endline="79" pcid="2867">
    def test_get_completions_sorted_by_required(self):
        expected_completion_objects = [
            Completion('--name', 0, '--name (required)', ''),
            Completion('--instance-id', 0, '--instance-id (required)', ''),
            Completion('--debug', 0, '--debug', '')
        ]
        self.completion_source.autocomplete.return_value = [
            CompletionResult('--debug', required=False),
            CompletionResult('--name', required=True),
            CompletionResult('--instance-id', required=True)
        ]
        self.completer = PromptToolkitCompleter(self.completion_source)
        actual_completions = self.completer.get_completions(Document(),
                                                            CompleteEvent())
        self.assert_completions_match_expected(actual_completions,
                                               expected_completion_objects)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autoprompt/test_prompttoolkit.py" startline="80" endline="98" pcid="2868">
    def test_get_completions_with_auto_prompt_overrides_filtered_out(self):
        expected_completion_objects = [
            Completion('--name', 0, '--name (required)', ''),
            Completion('--instance-id', 0, '--instance-id (required)', ''),
            Completion('--debug', 0, '--debug', '')
        ]
        self.completion_source.autocomplete.return_value = [
            CompletionResult('--debug', required=False),
            CompletionResult('--name', required=True),
            CompletionResult('--instance-id', required=True),
            CompletionResult('--cli-auto-prompt', required=False),
            CompletionResult('--no-cli-auto-prompt', required=False),
        ]
        self.completer = PromptToolkitCompleter(self.completion_source)
        actual_completions = self.completer.get_completions(Document(),
                                                            CompleteEvent())
        self.assert_completions_match_expected(actual_completions,
                                               expected_completion_objects)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autoprompt/test_prompttoolkit.py" startline="99" endline="117" pcid="2869">
    def test_get_completions_with_duplicates_removed(self):
        expected_completion_objects = [
            Completion('--name', 0, '--name (required)', ''),
            Completion('--instance-id', 0, '--instance-id (required)', ''),
            Completion('--debug', 0, '--debug', '')
        ]
        self.completion_source.autocomplete.return_value = [
            CompletionResult('--debug', required=False),
            CompletionResult('--debug', required=False),
            CompletionResult('--name', required=True),
            CompletionResult('--name', required=True),
            CompletionResult('--instance-id', required=True)
        ]
        self.completer = PromptToolkitCompleter(self.completion_source)
        actual_completions = self.completer.get_completions(Document(),
                                                            CompleteEvent())
        self.assert_completions_match_expected(actual_completions,
                                               expected_completion_objects)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autoprompt/test_prompttoolkit.py" startline="118" endline="138" pcid="2870">
    def test_get_completions_with_overrides_and_duplicates_removed(self):
        expected_completion_objects = [
            Completion('--name', 0, '--name (required)', ''),
            Completion('--instance-id', 0, '--instance-id (required)', ''),
            Completion('--debug', 0, '--debug', '')
        ]
        self.completion_source.autocomplete.return_value = [
            CompletionResult('--debug', required=False),
            CompletionResult('--debug', required=False),
            CompletionResult('--name', required=True),
            CompletionResult('--name', required=True),
            CompletionResult('--instance-id', required=True),
            CompletionResult('--cli-auto-prompt', required=False),
            CompletionResult('--no-cli-auto-prompt', required=False),
        ]
        self.completer = PromptToolkitCompleter(self.completion_source)
        actual_completions = self.completer.get_completions(Document(),
                                                            CompleteEvent())
        self.assert_completions_match_expected(actual_completions,
                                               expected_completion_objects)

</source>
</class>

<class classid="149" nclones="5" nlines="13" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="194" endline="212" pcid="2967">
    def test_flattens_marked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        value = ['foo', 'baz']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=True)):
            returned = self.parse_shorthand(argument, value)
        self.assertEqual(returned, [{"Bar": "foo"}, {"Bar": "baz"}])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="564" endline="584" pcid="2996">
    def test_generates_single_example_with_min_max_1(self):
        # An example of this is
        # 'workspaces rebuild-workspaces --rebuild-workspace-requests'
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'max': 1,
                'min': 1,
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=True)):
            self.assert_generated_example_is(argument, '--arg Bar1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="213" endline="231" pcid="2968">
    def test_does_not_flatten_unmarked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        value = ['Bar=foo', 'Bar=baz']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=False)):
            returned = self.parse_shorthand(argument, value)
        self.assertEqual(returned, [{"Bar": "foo"}, {"Bar": "baz"}])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="585" endline="601" pcid="2997">
    def test_does_not_flatten_unmarked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=False)):
            self.assert_generated_example_is(argument, 'Bar=string ...')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_argprocess.py" startline="547" endline="563" pcid="2995">
    def test_flattens_marked_single_member_structure_list(self):
        argument = self.create_argument({
            'Arg': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Bar': {'type': 'string'}
                    }
                }
            }
        }, 'arg')
        argument.argument_model = argument.argument_model.members['Arg']
        uses_old_list = 'awscli.argprocess.ParamShorthand._uses_old_list_case'
        with mock.patch(uses_old_list, mock.Mock(return_value=True)):
            self.assert_generated_example_is(argument, '--arg Bar1 Bar2 Bar3')

</source>
</class>

<class classid="150" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/output/test_json_output.py" startline="53" endline="73" pcid="3035">
    def setUp(self):
        super(TestListUsers, self).setUp()
        self.parsed_response = {
            'Users': [
                {
                    "UserName": "testuser-50",
                    "Path": "/",
                    "CreateDate": "2013-02-12T19:08:52Z",
                    "UserId": "EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::12345:user/testuser1"
                },
                {
                    "UserName": "testuser-51",
                    "Path": "/",
                    "CreateDate": "2012-10-14T23:53:39Z",
                    "UserId": u"EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::123456:user/testuser2"
                },
            ]
        }

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/output/test_yaml_output.py" startline="25" endline="45" pcid="3042">
    def setUp(self):
        super(TestYAMLOutput, self).setUp()
        self.parsed_response = {
            'Users': [
                {
                    "UserName": "testuser-50",
                    "Path": "/",
                    "CreateDate": "2013-02-12T19:08:52Z",
                    "UserId": "EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::12345:user/testuser1"
                },
                {
                    "UserName": "testuser-51",
                    "Path": "/",
                    "CreateDate": "2012-10-14T23:53:39Z",
                    "UserId": u"EXAMPLEUSERID",
                    "Arn": "arn:aws:iam::123456:user/testuser2"
                },
            ]
        }

</source>
</class>

<class classid="151" nclones="2" nlines="20" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidriver.py" startline="579" endline="606" pcid="3122">
    def test_custom_arg_paramfile(self, mock_handler):
        mock_paramfile = mock.Mock(autospec=True)
        mock_paramfile.return_value = None
        mock_handler.return_value = mock_paramfile

        driver = create_clidriver()
        driver.session.register(
            'building-argument-table', self.inject_new_param)

        self.patch_make_request()
        rc = driver.main(
            'ec2 describe-instances --unknown-arg file:///foo'.split())

        self.assertEqual(rc, 0)

        # Make sure uri_param was called
        mock_paramfile.assert_any_call(
            event_name='load-cli-arg.ec2.describe-instances.unknown-arg',
            operation_name='describe-instances',
            param=mock.ANY,
            service_name='ec2',
            value='file:///foo',
        )
        # Make sure it was called with our passed-in URI
        self.assertEqual(
            'file:///foo',
            mock_paramfile.call_args_list[-1][1]['value'])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidriver.py" startline="609" endline="631" pcid="3123">
    def test_custom_command_paramfile(self, mock_handler):
        mock_paramfile = mock.Mock(autospec=True)
        mock_paramfile.return_value = None
        mock_handler.return_value = mock_paramfile

        driver = create_clidriver()
        driver.session.register(
            'building-command-table', self.inject_command)

        self.patch_make_request()
        rc = driver.main(
            'ec2 foo --bar file:///foo'.split())

        self.assertEqual(rc, 0)

        mock_paramfile.assert_any_call(
            event_name='load-cli-arg.custom.foo.bar',
            operation_name='foo',
            param=mock.ANY,
            service_name='custom',
            value='file:///foo',
        )

</source>
</class>

<class classid="152" nclones="3" nlines="15" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="48" endline="66" pcid="3196">
        dedent = self.help_command.doc.style.dedent.call_count
        message = 'Imbalanced indentation: indent (%s) != dedent (%s)'
        self.assertEquals(indent, dedent, message % (indent, dedent))

    def test_handle_recursive_input(self):
        shape_map = {
            'RecursiveStruct': {
                'type': 'structure',
                'members': {
                    'A': {'shape': 'NonRecursive'},
                    'B': {'shape': 'RecursiveStruct'},
                }
            },
            'NonRecursive': {'type': 'string'}
        }
        shape = StructureShape('RecursiveStruct', shape_map['RecursiveStruct'],
                               ShapeResolver(shape_map))

        self.arg_table['arg-name'] = mock.Mock(argument_model=shape)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="87" endline="104" pcid="3198">
        self.help_command.obj = operation_model
        self.operation_handler.doc_output(self.help_command, 'event-name')
        self.assert_rendered_docs_contain('( ... recursive ... )')

    def test_handle_empty_nested_struct(self):
        shape_map = {
            'InputStruct': {
                'type': 'structure',
                'members': {
                    'A': {'shape': 'Empty'},
                }
            },
            'Empty': {'type': 'structure', 'members': {}}
        }
        shape = StructureShape('InputStruct', shape_map['InputStruct'],
                               ShapeResolver(shape_map))

        self.arg_table['arg-name'] = mock.Mock(argument_model=shape)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="67" endline="86" pcid="3197">
        self.operation_handler.doc_option_example(
            'arg-name', self.help_command, 'process-cli-arg.foo.bar')
        self.assert_rendered_docs_contain('{ ... recursive ... }')

    def test_handle_recursive_output(self):
        shape_map = {
            'RecursiveStruct': {
                'type': 'structure',
                'members': {
                    'A': {'shape': 'NonRecursive'},
                    'B': {'shape': 'RecursiveStruct'},
                }
            },
            'NonRecursive': {'type': 'string'}
        }
        shape = StructureShape('RecursiveStruct', shape_map['RecursiveStruct'],
                               ShapeResolver(shape_map))

        operation_model = mock.Mock()
        operation_model.output_shape = shape
</source>
</class>

<class classid="153" nclones="4" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="175" endline="187" pcid="3205">
        doc_handler.doc_breadcrumbs(help_cmd)
        # These should not show up in the man page
        self.assertEqual(help_cmd.doc.getvalue().decode('utf-8'), '')

    def test_breadcrumbs_html(self):
        help_cmd = ServiceHelpCommand(
            self.session, self.obj, self.command_table, self.arg_table,
            self.name, self.event_class
        )
        help_cmd.doc.target = 'html'
        doc_handler = CLIDocumentEventHandler(help_cmd)
        doc_handler.doc_breadcrumbs(help_cmd)
        self.assertEqual(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="214" endline="227" pcid="3208">
            help_cmd.doc.getvalue().decode('utf-8'),
            '[ :ref:`aws <cli:aws>` . :ref:`ec2 <cli:aws ec2>` ]'
        )

    def test_breadcrumbs_wait_command_html(self):
        help_cmd = ServiceHelpCommand(
            self.session, self.obj, self.command_table, self.arg_table,
            self.name, 's3api.wait.object-exists'
        )
        help_cmd.doc.target = 'html'
        doc_handler = CLIDocumentEventHandler(help_cmd)
        doc_handler.doc_breadcrumbs(help_cmd)
        self.assertEqual(
            help_cmd.doc.getvalue().decode('utf-8'),
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="201" endline="213" pcid="3207">
            help_cmd.doc.getvalue().decode('utf-8'),
            '[ :ref:`aws <cli:aws>` ]'
        )

    def test_breadcrumbs_operation_command_html(self):
        help_cmd = ServiceHelpCommand(
            self.session, self.obj, self.command_table, self.arg_table,
            self.name, 'ec2.run-instances'
        )
        help_cmd.doc.target = 'html'
        doc_handler = CLIDocumentEventHandler(help_cmd)
        doc_handler.doc_breadcrumbs(help_cmd)
        self.assertEqual(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="188" endline="200" pcid="3206">
            help_cmd.doc.getvalue().decode('utf-8'),
            '[ :ref:`aws <cli:aws>` ]'
        )

    def test_breadcrumbs_service_command_html(self):
        help_cmd = ServiceHelpCommand(
            self.session, self.obj, self.command_table, self.arg_table,
            self.name, 'ec2'
        )
        help_cmd.doc.target = 'html'
        doc_handler = CLIDocumentEventHandler(help_cmd)
        doc_handler.doc_breadcrumbs(help_cmd)
        self.assertEqual(
</source>
</class>

<class classid="154" nclones="3" nlines="21" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="267" endline="293" pcid="3212">
                               ShapeResolver(shape_map))
        rendered = self.get_help_docs_for_argument(shape)
        self.assertIn('( ... recursive ... )', rendered)

    def test_documents_nested_structure(self):
        shape_map = {
            'UpperStructure': {
                'type': 'structure',
                'members': {
                    'A': {'shape': 'NestedStruct'},
                    'B': {'shape': 'NestedStruct'},
                }
            },
            'NestedStruct': {
                'type': 'structure',
                'members': {
                    'Nested_A': {'shape': 'Line'},
                    'Nested_B': {'shape': 'Line'},
                }
            },
            'Line': {'type': 'string'}
        }
        shape = StructureShape('UpperStructure',
                               shape_map['UpperStructure'],
                               ShapeResolver(shape_map))
        rendered = self.get_help_docs_for_argument(shape)
        self.assertEqual(rendered.count('A -> (structure)'), 1)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="294" endline="315" pcid="3213">
        self.assertEqual(rendered.count('B -> (structure)'), 1)
        self.assertEqual(rendered.count('Nested_A -> (string)'), 2)
        self.assertEqual(rendered.count('Nested_B -> (string)'), 2)

    def test_documents_nested_list(self):
        shape_map = {
            'UpperList': {
                'type': 'list',
                'member': {'shape': 'NestedStruct'},
            },
            'NestedStruct': {
                'type': 'structure',
                'members': {
                    'Nested_A': {'shape': 'Line'},
                    'Nested_B': {'shape': 'Line'},
                }
            },
            'Line': {'type': 'string'}
        }
        shape = ListShape('UpperList', shape_map['UpperList'],
                          ShapeResolver(shape_map))
        rendered = self.get_help_docs_for_argument(shape)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="316" endline="339" pcid="3214">
        self.assertEqual(rendered.count('(structure)'), 1)
        self.assertEqual(rendered.count('Nested_A -> (string)'), 1)
        self.assertEqual(rendered.count('Nested_B -> (string)'), 1)

    def test_documents_nested_map(self):
        shape_map = {
            'UpperMap': {
                'type': 'map',
                'key': {'shape': 'NestedStruct'},
                'value': {'shape': 'NestedStruct'},
            },
            'NestedStruct': {
                'type': 'structure',
                'members': {
                    'Nested_A': {'shape': 'Line'},
                    'Nested_B': {'shape': 'Line'},
                }
            },
            'Line': {'type': 'string'}
        }
        shape = MapShape('UpperMap', shape_map['UpperMap'],
                         ShapeResolver(shape_map))
        rendered = self.get_help_docs_for_argument(shape)
        self.assertEqual(rendered.count('key -> (structure)'), 1)
</source>
</class>

<class classid="155" nclones="2" nlines="14" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="488" endline="505" pcid="3227">
            'This is the AWS CLI Topic Guide',
            self.cmd.doc.getvalue().decode('utf-8')
        )

    def test_subitems_start(self):
        ref_output = [
            '-------\nGeneral\n-------',
            ('* topic-name-1: %s\n'
             '* topic-name-3: %s\n' %
             (self.descriptions[0], self.descriptions[2])),
            '--\nS3\n--',
            '* topic-name-2: %s\n' % self.descriptions[1]
        ]

        self.doc_handler.doc_subitems_start(self.cmd)
        contents = self.cmd.doc.getvalue().decode('utf-8')

        for line in ref_output:
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_clidocs.py" startline="506" endline="527" pcid="3228">
            self.assertIn(line, contents)
        # Make sure the toctree is not in the man page
        self.assertNotIn('.. toctree::', contents)

    def test_subitems_start_html(self):
        self.cmd.doc.target = 'html'
        ref_output = [
            '-------\nGeneral\n-------',
            ('* :ref:`topic-name-1 <cli:aws help topic-name-1>`: %s\n'
             '* :ref:`topic-name-3 <cli:aws help topic-name-3>`: %s\n' %
             (self.descriptions[0], self.descriptions[2])),
            '--\nS3\n--',
            ('* :ref:`topic-name-2 <cli:aws help topic-name-2>`: %s\n' %
             self.descriptions[1])
        ]

        self.doc_handler.doc_subitems_start(self.cmd)
        contents = self.cmd.doc.getvalue().decode('utf-8')

        for line in ref_output:
            self.assertIn(line, contents)
        # Make sure the hidden toctree is in the html
</source>
</class>

<class classid="156" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="469" endline="481" pcid="3296">
    def test_read_with_amount_size(self):
        filename = os.path.join(self.tempdir, 'foo')
        with open(filename, 'wb') as f:
            f.write(b'onetwothreefourfivesixseveneightnineten')
        chunk = ReadFileChunk.from_filename(
            filename, start_byte=11, chunk_size=4
        )
        self.assertEqual(chunk.read(1), b'f')
        self.assertEqual(chunk.read(1), b'o')
        self.assertEqual(chunk.read(1), b'u')
        self.assertEqual(chunk.read(1), b'r')
        self.assertEqual(chunk.read(1), b'')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_s3transfer.py" startline="147" endline="159" pcid="3566">
    def test_read_with_amount_size(self):
        filename = os.path.join(self.tempdir, 'foo')
        with open(filename, 'wb') as f:
            f.write(b'onetwothreefourfivesixseveneightnineten')
        chunk = ReadFileChunk.from_filename(
            filename, start_byte=11, chunk_size=4
        )
        self.assertEqual(chunk.read(1), b'f')
        self.assertEqual(chunk.read(1), b'o')
        self.assertEqual(chunk.read(1), b'u')
        self.assertEqual(chunk.read(1), b'r')
        self.assertEqual(chunk.read(1), b'')

</source>
</class>

<class classid="157" nclones="3" nlines="14" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="568" endline="587" pcid="3302">
    def _assert_whence_relative_behavior(self, file_obj):
        self.assertEqual(file_obj.tell(), 0)

        file_obj.seek(2, 1)
        self.assertEqual(file_obj.tell(), 2)

        file_obj.seek(1, 1)
        self.assertEqual(file_obj.tell(), 3)
        self.assertEqual(file_obj.read(), b'45678')

        file_obj.seek(20, 1)
        self.assertEqual(file_obj.tell(), 28)

        file_obj.seek(-30, 1)
        self.assertEqual(file_obj.tell(), 0)
        self.assertEqual(file_obj.read(), b'12345678')

        file_obj.seek(-8, 1)
        self.assertEqual(file_obj.tell(), 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="588" endline="607" pcid="3303">
    def _assert_whence_end_behavior(self, file_obj):
        self.assertEqual(file_obj.tell(), 0)

        file_obj.seek(-1, 2)
        self.assertEqual(file_obj.tell(), 7)

        file_obj.seek(1, 2)
        self.assertEqual(file_obj.tell(), 9)

        file_obj.seek(3, 2)
        self.assertEqual(file_obj.tell(), 11)
        self.assertEqual(file_obj.read(), b'')

        file_obj.seek(-15, 2)
        self.assertEqual(file_obj.tell(), 0)
        self.assertEqual(file_obj.read(), b'12345678')

        file_obj.seek(-8, 2)
        self.assertEqual(file_obj.tell(), 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="608" endline="631" pcid="3304">
    def _assert_boundary_behavior(self, file_obj):
        # Verify we're at the start
        self.assertEqual(file_obj.tell(), 0)

        # Verify we can't move backwards beyond start of file
        file_obj.seek(-10, 1)
        self.assertEqual(file_obj.tell(), 0)

        # Verify we *can* move after end of file, but return nothing
        file_obj.seek(10, 2)
        self.assertEqual(file_obj.tell(), 18)
        self.assertEqual(file_obj.read(), b'')
        self.assertEqual(file_obj.read(10), b'')

        # Verify we can partially rewind
        file_obj.seek(-12, 1)
        self.assertEqual(file_obj.tell(), 6)
        self.assertEqual(file_obj.read(), b'78')
        self.assertEqual(file_obj.tell(), 8)

        # Verify we can rewind to start
        file_obj.seek(0)
        self.assertEqual(file_obj.tell(), 0)

</source>
</class>

<class classid="158" nclones="3" nlines="11" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="652" endline="663" pcid="3307">
    def test_callback_is_invoked_on_read(self):
        chunk = ReadFileChunk.from_filename(
            self.filename,
            start_byte=0,
            chunk_size=3,
            callbacks=[self.callback],
        )
        chunk.read(1)
        chunk.read(1)
        chunk.read(1)
        self.assertEqual(self.amounts_seen, [1, 1, 1])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="664" endline="677" pcid="3308">
    def test_all_callbacks_invoked_on_read(self):
        chunk = ReadFileChunk.from_filename(
            self.filename,
            start_byte=0,
            chunk_size=3,
            callbacks=[self.callback, self.callback],
        )
        chunk.read(1)
        chunk.read(1)
        chunk.read(1)
        # The list should be twice as long because there are two callbacks
        # recording the amount read.
        self.assertEqual(self.amounts_seen, [1, 1, 1, 1, 1, 1])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="691" endline="704" pcid="3310">
    def test_callback_will_also_be_triggered_by_seek(self):
        chunk = ReadFileChunk.from_filename(
            self.filename,
            start_byte=0,
            chunk_size=3,
            callbacks=[self.callback],
        )
        chunk.read(2)
        chunk.seek(0)
        chunk.read(2)
        chunk.seek(1)
        chunk.read(2)
        self.assertEqual(self.amounts_seen, [2, -2, 2, -1, 2])

</source>
</class>

<class classid="159" nclones="2" nlines="17" similarity="94">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="746" endline="767" pcid="3313">
    def _assert_out_of_bound_relative_seek(self, chunk, expected):
        # clear amounts_seen
        self.amounts_seen = []
        self.assertEqual(self.amounts_seen, [])

        # (position, change)
        chunk.seek(20, 1)  # (20, 10)
        chunk.seek(-15, 1)  # (5, -5)
        chunk.seek(15, 1)  # (20, 5)
        chunk.seek(-11, 1)  # (9, -1)
        chunk.seek(11, 1)  # (20, 1)
        chunk.seek(-9, 1)  # (11, 0)
        chunk.seek(9, 1)  # (20, 0)
        chunk.seek(-11, 1)  # (9, -1)
        chunk.seek(11, 1)  # (20, 1)
        chunk.seek(-15, 1)  # (5, -5)
        chunk.seek(15, 1)  # (20, 5)
        chunk.seek(-20, 1)  # (0, -10)
        chunk.seek(-1000, 1)  # (0, 0)

        self.assertEqual(self.amounts_seen, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="768" endline="789" pcid="3314">
    def _assert_out_of_bound_end_seek(self, chunk, expected):
        # clear amounts_seen
        self.amounts_seen = []
        self.assertEqual(self.amounts_seen, [])

        # (position, change)
        chunk.seek(10, 2)  # (20, 10)
        chunk.seek(-5, 2)  # (5, -5)
        chunk.seek(10, 2)  # (20, 5)
        chunk.seek(-1, 2)  # (9, -1)
        chunk.seek(10, 2)  # (20, 1)
        chunk.seek(1, 2)  # (11, 0)
        chunk.seek(10, 2)  # (20, 0)
        chunk.seek(-1, 2)  # (9, -1)
        chunk.seek(10, 2)  # (20, 1)
        chunk.seek(-5, 2)  # (5, -5)
        chunk.seek(10, 2)  # (20, 5)
        chunk.seek(-10, 2)  # (0, -10)
        chunk.seek(-1000, 2)  # (0, 0)

        self.assertEqual(self.amounts_seen, expected)

</source>
</class>

<class classid="160" nclones="3" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="790" endline="800" pcid="3315">
    def test_close_callbacks(self):
        with open(self.filename) as f:
            chunk = ReadFileChunk(
                f,
                chunk_size=1,
                full_file_size=3,
                close_callbacks=[self.close_callback],
            )
            chunk.close()
            self.assertEqual(self.num_close_callback_calls, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="813" endline="823" pcid="3317">
    def test_close_callbacks_when_context_handler_is_used(self):
        with open(self.filename) as f:
            with ReadFileChunk(
                f,
                chunk_size=1,
                full_file_size=3,
                close_callbacks=[self.close_callback],
            ) as chunk:
                chunk.read(1)
            self.assertEqual(self.num_close_callback_calls, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="801" endline="812" pcid="3316">
    def test_close_callbacks_when_not_enabled(self):
        with open(self.filename) as f:
            chunk = ReadFileChunk(
                f,
                chunk_size=1,
                full_file_size=3,
                enable_callbacks=False,
                close_callbacks=[self.close_callback],
            )
            chunk.close()
            self.assertEqual(self.num_close_callback_calls, 0)

</source>
</class>

<class classid="161" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="951" endline="970" pcid="3331">
    def test_counter_release_only_on_min_element(self):
        sem = SlidingWindowSemaphore(3)
        sem.acquire('a', blocking=False)
        sem.acquire('a', blocking=False)
        sem.acquire('a', blocking=False)

        # The count only increases when we free the min
        # element.  This means if we're currently failing to
        # acquire now:
        with self.assertRaises(NoResourcesAvailable):
            sem.acquire('a', blocking=False)

        # Then freeing a non-min element:
        sem.release('a', 1)

        # doesn't change anything.  We still fail to acquire.
        with self.assertRaises(NoResourcesAvailable):
            sem.acquire('a', blocking=False)
        self.assertEqual(sem.current_count(), 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="1052" endline="1064" pcid="3339">
    def test_can_check_in_partial_range(self):
        sem = SlidingWindowSemaphore(4)
        sem.acquire('a', blocking=False)
        sem.acquire('a', blocking=False)
        sem.acquire('a', blocking=False)
        sem.acquire('a', blocking=False)

        sem.release('a', 1)
        sem.release('a', 3)
        sem.release('a', 0)
        self.assertEqual(sem.current_count(), 2)


</source>
</class>

<class classid="162" nclones="9" nlines="15" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_delete.py" startline="35" endline="48" pcid="3359">
    def test_main(self):
        self.stubber.add_response(
            'delete_object',
            service_response={},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
            },
        )
        task = self.get_delete_task()
        task()

        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="57" endline="73" pcid="3512">
    def test_extra_args(self):
        self.extra_args['ACL'] = 'private'
        self.stubber.add_response(
            'copy_object',
            service_response={},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'CopySource': self.copy_source,
                'ACL': 'private',
            },
        )
        task = self.get_copy_task()
        task()

        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="42" endline="56" pcid="3511">
    def test_main(self):
        self.stubber.add_response(
            'copy_object',
            service_response={},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'CopySource': self.copy_source,
            },
        )
        task = self.get_copy_task()
        task()

        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="74" endline="92" pcid="3513">
    def test_callbacks_invoked(self):
        subscriber = RecordingSubscriber()
        self.callbacks.append(subscriber.on_progress)
        self.stubber.add_response(
            'copy_object',
            service_response={},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'CopySource': self.copy_source,
            },
        )
        task = self.get_copy_task()
        task()

        self.stubber.assert_no_pending_responses()
        self.assertEqual(subscriber.calculate_bytes_seen(), self.size)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="619" endline="635" pcid="3481">
    def test_extra_args(self):
        self.stubber.add_response(
            'get_object',
            service_response={'Body': self.stream},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'Range': 'bytes=0-',
            },
        )
        self.extra_args['Range'] = 'bytes=0-'
        task = self.get_download_task()
        task()

        self.stubber.assert_no_pending_responses()
        self.assert_io_writes([(0, self.content)])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_delete.py" startline="49" endline="67" pcid="3360">
    def test_extra_args(self):
        self.extra_args['MFA'] = 'mfa-code'
        self.extra_args['VersionId'] = '12345'
        self.stubber.add_response(
            'delete_object',
            service_response={},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                # These extra_args should be injected into the
                # expected params for the delete_object call.
                'MFA': 'mfa-code',
                'VersionId': '12345',
            },
        )
        task = self.get_delete_task()
        task()

        self.stubber.assert_no_pending_responses()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="157" endline="177" pcid="3518">
    def test_callbacks_invoked(self):
        subscriber = RecordingSubscriber()
        self.callbacks.append(subscriber.on_progress)
        self.stubber.add_response(
            'upload_part_copy',
            service_response={'CopyPartResult': {'ETag': self.result_etag}},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'CopySource': self.copy_source,
                'UploadId': self.upload_id,
                'PartNumber': self.part_number,
                'CopySourceRange': self.copy_source_range,
            },
        )
        task = self.get_copy_task()
        self.assertEqual(
            task(), {'PartNumber': self.part_number, 'ETag': self.result_etag}
        )
        self.stubber.assert_no_pending_responses()
        self.assertEqual(subscriber.calculate_bytes_seen(), self.size)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="117" endline="135" pcid="3516">
    def test_main(self):
        self.stubber.add_response(
            'upload_part_copy',
            service_response={'CopyPartResult': {'ETag': self.result_etag}},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'CopySource': self.copy_source,
                'UploadId': self.upload_id,
                'PartNumber': self.part_number,
                'CopySourceRange': self.copy_source_range,
            },
        )
        task = self.get_copy_task()
        self.assertEqual(
            task(), {'PartNumber': self.part_number, 'ETag': self.result_etag}
        )
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="136" endline="156" pcid="3517">
    def test_extra_args(self):
        self.extra_args['RequestPayer'] = 'requester'
        self.stubber.add_response(
            'upload_part_copy',
            service_response={'CopyPartResult': {'ETag': self.result_etag}},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'CopySource': self.copy_source,
                'UploadId': self.upload_id,
                'PartNumber': self.part_number,
                'CopySourceRange': self.copy_source_range,
                'RequestPayer': 'requester',
            },
        )
        task = self.get_copy_task()
        self.assertEqual(
            task(), {'PartNumber': self.part_number, 'ETag': self.result_etag}
        )
        self.stubber.assert_no_pending_responses()

</source>
</class>

<class classid="163" nclones="2" nlines="14" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="191" endline="213" pcid="3391">
    def test_calls_done_callbacks_on_exception(self):
        submission_task = self.get_task(
            ExceptionSubmissionTask, main_kwargs=self.main_kwargs
        )

        subscriber = RecordingSubscriber()
        self.call_args.subscribers.append(subscriber)

        # Add the done callback to the callbacks to be invoked when the
        # transfer is done.
        done_callbacks = get_callbacks(self.transfer_future, 'done')
        for done_callback in done_callbacks:
            self.transfer_coordinator.add_done_callback(done_callback)
        submission_task()

        # Make sure the task failed to start
        self.assertEqual(self.transfer_coordinator.status, 'failed')

        # Make sure the on_done callback of the subscriber is called.
        self.assertEqual(
            subscriber.on_done_calls, [{'future': self.transfer_future}]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="234" endline="266" pcid="3393">
    def test_cleanups_only_ran_once_on_exception(self):
        # We want to be able to handle the case where the final task completes
        # and anounces done but there is an error in the submission task
        # which will cause it to need to announce done as well. In this case,
        # we do not want the done callbacks to be invoke more than once.

        final_task = self.get_task(FailureTask, is_final=True)
        self.main_kwargs['executor'] = self.executor
        self.main_kwargs['tasks_to_submit'] = [final_task]

        submission_task = self.get_task(
            ExceptionSubmissionTask, main_kwargs=self.main_kwargs
        )

        subscriber = RecordingSubscriber()
        self.call_args.subscribers.append(subscriber)

        # Add the done callback to the callbacks to be invoked when the
        # transfer is done.
        done_callbacks = get_callbacks(self.transfer_future, 'done')
        for done_callback in done_callbacks:
            self.transfer_coordinator.add_done_callback(done_callback)

        submission_task()

        # Make sure the task failed to start
        self.assertEqual(self.transfer_coordinator.status, 'failed')

        # Make sure the on_done callback of the subscriber is called only once.
        self.assertEqual(
            subscriber.on_done_calls, [{'future': self.transfer_future}]
        )

</source>
</class>

<class classid="164" nclones="3" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="214" endline="233" pcid="3392">
    def test_calls_failure_cleanups_on_exception(self):
        submission_task = self.get_task(
            ExceptionSubmissionTask, main_kwargs=self.main_kwargs
        )

        # Add the callback to the callbacks to be invoked when the
        # transfer fails.
        invocations_of_cleanup = []
        cleanup_callback = FunctionContainer(
            invocations_of_cleanup.append, 'cleanup happened'
        )
        self.transfer_coordinator.add_failure_cleanup(cleanup_callback)
        submission_task()

        # Make sure the task failed to start
        self.assertEqual(self.transfer_coordinator.status, 'failed')

        # Make sure the cleanup was called.
        self.assertEqual(invocations_of_cleanup, ['cleanup happened'])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="384" endline="402" pcid="3397">
    def test_submission_task_announces_done_if_cancelled_before_main(self):
        invocations_of_done = []
        done_callback = FunctionContainer(
            invocations_of_done.append, 'done announced'
        )
        self.transfer_coordinator.add_done_callback(done_callback)

        self.transfer_coordinator.cancel()
        submission_task = self.get_task(
            NOOPSubmissionTask, main_kwargs=self.main_kwargs
        )
        submission_task()

        # Because the submission task was cancelled before being run
        # it did not submit any extra tasks so a result it is responsible
        # for making sure it announces done as nothing else will.
        self.assertEqual(invocations_of_done, ['done announced'])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="267" endline="295" pcid="3394">
    def test_done_callbacks_only_ran_once_on_exception(self):
        # We want to be able to handle the case where the final task completes
        # and anounces done but there is an error in the submission task
        # which will cause it to need to announce done as well. In this case,
        # we do not want the failure cleanups to be invoked more than once.

        final_task = self.get_task(FailureTask, is_final=True)
        self.main_kwargs['executor'] = self.executor
        self.main_kwargs['tasks_to_submit'] = [final_task]

        submission_task = self.get_task(
            ExceptionSubmissionTask, main_kwargs=self.main_kwargs
        )

        # Add the callback to the callbacks to be invoked when the
        # transfer fails.
        invocations_of_cleanup = []
        cleanup_callback = FunctionContainer(
            invocations_of_cleanup.append, 'cleanup happened'
        )
        self.transfer_coordinator.add_failure_cleanup(cleanup_callback)
        submission_task()

        # Make sure the task failed to start
        self.assertEqual(self.transfer_coordinator.status, 'failed')

        # Make sure the cleanup was called only once.
        self.assertEqual(invocations_of_cleanup, ['cleanup happened'])

</source>
</class>

<class classid="165" nclones="2" nlines="21" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="559" endline="587" pcid="3410">
    def test_passing_pending_kwargs_single_futures(self):
        pending_kwargs = {}
        ref_main_kwargs = {'foo': 'bar', 'baz': 'biz'}

        # Pass some tasks to an executor
        with futures.ThreadPoolExecutor(1) as executor:
            pending_kwargs['foo'] = executor.submit(
                SuccessTask(
                    self.transfer_coordinator,
                    main_kwargs={'return_value': ref_main_kwargs['foo']},
                )
            )
            pending_kwargs['baz'] = executor.submit(
                SuccessTask(
                    self.transfer_coordinator,
                    main_kwargs={'return_value': ref_main_kwargs['baz']},
                )
            )

        # Create a task that depends on the tasks passed to the executor
        ReturnKwargsTask(
            self.transfer_coordinator,
            pending_main_kwargs=pending_kwargs,
            is_final=True,
        )()
        # The result should have the pending keyword arg values flushed
        # out.
        self.assertEqual(self.transfer_coordinator.result(), ref_main_kwargs)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="588" endline="618" pcid="3411">
    def test_passing_pending_kwargs_list_of_futures(self):
        pending_kwargs = {}
        ref_main_kwargs = {'foo': ['first', 'second']}

        # Pass some tasks to an executor
        with futures.ThreadPoolExecutor(1) as executor:
            first_future = executor.submit(
                SuccessTask(
                    self.transfer_coordinator,
                    main_kwargs={'return_value': ref_main_kwargs['foo'][0]},
                )
            )
            second_future = executor.submit(
                SuccessTask(
                    self.transfer_coordinator,
                    main_kwargs={'return_value': ref_main_kwargs['foo'][1]},
                )
            )
            # Make the pending keyword arg value a list
            pending_kwargs['foo'] = [first_future, second_future]

        # Create a task that depends on the tasks passed to the executor
        ReturnKwargsTask(
            self.transfer_coordinator,
            pending_main_kwargs=pending_kwargs,
            is_final=True,
        )()
        # The result should have the pending keyword arg values flushed
        # out in the expected order.
        self.assertEqual(self.transfer_coordinator.result(), ref_main_kwargs)

</source>
</class>

<class classid="166" nclones="2" nlines="18" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="670" endline="696" pcid="3413">
    def test_single_failed_pending_future(self):
        pending_kwargs = {}

        # Pass some tasks to an executor. Make one successful and the other
        # a failure.
        with futures.ThreadPoolExecutor(1) as executor:
            pending_kwargs['foo'] = executor.submit(
                SuccessTask(
                    self.transfer_coordinator,
                    main_kwargs={'return_value': 'bar'},
                )
            )
            pending_kwargs['baz'] = executor.submit(
                FailureTask(self.transfer_coordinator)
            )

        # Create a task that depends on the tasks passed to the executor
        ReturnKwargsTask(
            self.transfer_coordinator,
            pending_main_kwargs=pending_kwargs,
            is_final=True,
        )()
        # The end result should raise the exception from the initial
        # pending future value
        with self.assertRaises(TaskFailureException):
            self.transfer_coordinator.result()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="697" endline="726" pcid="3414">
    def test_single_failed_pending_future_in_list(self):
        pending_kwargs = {}

        # Pass some tasks to an executor. Make one successful and the other
        # a failure.
        with futures.ThreadPoolExecutor(1) as executor:
            first_future = executor.submit(
                SuccessTask(
                    self.transfer_coordinator,
                    main_kwargs={'return_value': 'bar'},
                )
            )
            second_future = executor.submit(
                FailureTask(self.transfer_coordinator)
            )

            pending_kwargs['pending_list'] = [first_future, second_future]

        # Create a task that depends on the tasks passed to the executor
        ReturnKwargsTask(
            self.transfer_coordinator,
            pending_main_kwargs=pending_kwargs,
            is_final=True,
        )()
        # The end result should raise the exception from the initial
        # pending future value in the list
        with self.assertRaises(TaskFailureException):
            self.transfer_coordinator.result()


</source>
</class>

<class classid="167" nclones="3" nlines="26" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="780" endline="806" pcid="3417">
    def test_main(self):
        upload_id = 'my-id'
        parts = [{'ETag': 'etag', 'PartNumber': 0}]
        task = self.get_task(
            CompleteMultipartUploadTask,
            main_kwargs={
                'client': self.client,
                'bucket': self.bucket,
                'key': self.key,
                'upload_id': upload_id,
                'parts': parts,
                'extra_args': {},
            },
        )
        self.stubber.add_response(
            method='complete_multipart_upload',
            service_response={},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'UploadId': upload_id,
                'MultipartUpload': {'Parts': parts},
            },
        )
        task()
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_upload.py" startline="632" endline="659" pcid="3671">
    def test_main(self):
        extra_args = {'Metadata': {'foo': 'bar'}}
        with open(self.filename, 'rb') as fileobj:
            task = self.get_task(
                PutObjectTask,
                main_kwargs={
                    'client': self.client,
                    'fileobj': fileobj,
                    'bucket': self.bucket,
                    'key': self.key,
                    'extra_args': extra_args,
                },
            )
            self.stubber.add_response(
                method='put_object',
                service_response={},
                expected_params={
                    'Body': ANY,
                    'Bucket': self.bucket,
                    'Key': self.key,
                    'Metadata': {'foo': 'bar'},
                },
            )
            task()
            self.stubber.assert_no_pending_responses()
            self.assertEqual(self.sent_bodies, [self.content])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_tasks.py" startline="807" endline="833" pcid="3418">
    def test_includes_extra_args(self):
        upload_id = 'my-id'
        parts = [{'ETag': 'etag', 'PartNumber': 0}]
        task = self.get_task(
            CompleteMultipartUploadTask,
            main_kwargs={
                'client': self.client,
                'bucket': self.bucket,
                'key': self.key,
                'upload_id': upload_id,
                'parts': parts,
                'extra_args': {'RequestPayer': 'requester'},
            },
        )
        self.stubber.add_response(
            method='complete_multipart_upload',
            service_response={},
            expected_params={
                'Bucket': self.bucket,
                'Key': self.key,
                'UploadId': upload_id,
                'MultipartUpload': {'Parts': parts},
                'RequestPayer': 'requester',
            },
        )
        task()
        self.stubber.assert_no_pending_responses()
</source>
</class>

<class classid="168" nclones="6" nlines="11" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="425" endline="435" pcid="3462">
    def get_call_args(self, **kwargs):
        default_call_args = {
            'fileobj': self.filename,
            'bucket': self.bucket,
            'key': self.key,
            'extra_args': self.extra_args,
            'subscribers': self.subscribers,
        }
        default_call_args.update(kwargs)
        return CallArgs(**default_call_args)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="29" endline="41" pcid="3510">
    def get_copy_task(self, **kwargs):
        default_kwargs = {
            'client': self.client,
            'copy_source': self.copy_source,
            'bucket': self.bucket,
            'key': self.key,
            'extra_args': self.extra_args,
            'callbacks': self.callbacks,
            'size': self.size,
        }
        default_kwargs.update(kwargs)
        return self.get_task(CopyObjectTask, main_kwargs=default_kwargs)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_upload.py" startline="490" endline="500" pcid="3660">
    def get_call_args(self, **kwargs):
        default_call_args = {
            'fileobj': self.filename,
            'bucket': self.bucket,
            'key': self.key,
            'extra_args': self.extra_args,
            'subscribers': self.subscribers,
        }
        default_call_args.update(kwargs)
        return CallArgs(**default_call_args)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1976" endline="1986" pcid="4937">
    def get_s3_accesspoint_context(self, **overrides):
        accesspoint_context = {
            'name': self.accesspoint_name,
            'account': self.account,
            'region': self.region_name,
            'partition': self.partition,
            'service': self.service,
        }
        accesspoint_context.update(overrides)
        return accesspoint_context

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="585" endline="600" pcid="3478">
    def get_download_task(self, **kwargs):
        default_kwargs = {
            'client': self.client,
            'bucket': self.bucket,
            'key': self.key,
            'fileobj': self.fileobj,
            'extra_args': self.extra_args,
            'callbacks': self.callbacks,
            'max_attempts': self.max_attempts,
            'download_output_manager': self.download_output_manager,
            'io_chunksize': self.io_chunksize,
        }
        default_kwargs.update(kwargs)
        self.transfer_coordinator.set_status_to_queued()
        return self.get_task(self.task_cls, main_kwargs=default_kwargs)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_copies.py" startline="102" endline="116" pcid="3515">
    def get_copy_task(self, **kwargs):
        default_kwargs = {
            'client': self.client,
            'copy_source': self.copy_source,
            'bucket': self.bucket,
            'key': self.key,
            'upload_id': self.upload_id,
            'part_number': self.part_number,
            'extra_args': self.extra_args,
            'callbacks': self.callbacks,
            'size': self.size,
        }
        default_kwargs.update(kwargs)
        return self.get_task(CopyPartTask, main_kwargs=default_kwargs)

</source>
</class>

<class classid="169" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="521" endline="535" pcid="3474">
    def test_submits_no_tag_for_ranged_get_object_fileobj(self):
        self.wrap_executor_in_recorder()
        self.configure_for_ranged_get()
        self.add_head_object_response()
        self.add_get_responses()

        with open(self.filename, 'wb') as f:
            self.use_fileobj_in_call_args(f)
            self.submission_task = self.get_download_submission_task()
            self.wait_and_assert_completed_successfully(self.submission_task)

        # Make sure no tag to limit that task specifically was not associated
        # to that task submission.
        self.assert_tag_for_get_object(None)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="550" endline="565" pcid="3476">
    def tests_submits_tag_for_ranged_get_object_nonseekable_fileobj(self):
        self.wrap_executor_in_recorder()
        self.configure_for_ranged_get()
        self.add_head_object_response()
        self.add_get_responses()

        with open(self.filename, 'wb') as f:
            self.use_fileobj_in_call_args(NonSeekableWriter(f))
            self.submission_task = self.get_download_submission_task()
            self.wait_and_assert_completed_successfully(self.submission_task)

        # Make sure no tag to limit that task specifically was not associated
        # to that task submission.
        self.assert_tag_for_get_object(IN_MEMORY_DOWNLOAD_TAG)


</source>
</class>

<class classid="170" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="607" endline="618" pcid="3480">
    def test_main(self):
        self.stubber.add_response(
            'get_object',
            service_response={'Body': self.stream},
            expected_params={'Bucket': self.bucket, 'Key': self.key},
        )
        task = self.get_download_task()
        task()

        self.stubber.assert_no_pending_responses()
        self.assert_io_writes([(0, self.content)])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="652" endline="663" pcid="3483">
    def test_start_index(self):
        self.stubber.add_response(
            'get_object',
            service_response={'Body': self.stream},
            expected_params={'Bucket': self.bucket, 'Key': self.key},
        )
        task = self.get_download_task(start_index=5)
        task()

        self.stubber.assert_no_pending_responses()
        self.assert_io_writes([(5, self.content)])

</source>
</class>

<class classid="171" nclones="2" nlines="14" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="818" endline="835" pcid="3494">
    def test_main(self):
        with open(self.temp_filename, 'wb') as f:
            task = self.get_task(
                IOStreamingWriteTask,
                main_kwargs={'fileobj': f, 'data': b'foobar'},
            )
            task()
            task2 = self.get_task(
                IOStreamingWriteTask,
                main_kwargs={'fileobj': f, 'data': b'baz'},
            )
            task2()
        with open(self.temp_filename, 'rb') as f:
            # We should just have written to the file in the order
            # the tasks were executed.
            self.assertEqual(f.read(), b'foobarbaz')


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="837" endline="856" pcid="3495">
    def test_main(self):
        with open(self.temp_filename, 'wb') as f:
            # Write once to the file
            task = self.get_task(
                IOWriteTask,
                main_kwargs={'fileobj': f, 'data': b'foo', 'offset': 0},
            )
            task()

            # Write again to the file
            task = self.get_task(
                IOWriteTask,
                main_kwargs={'fileobj': f, 'data': b'bar', 'offset': 3},
            )
            task()

        with open(self.temp_filename, 'rb') as f:
            self.assertEqual(f.read(), b'foobar')


</source>
</class>

<class classid="172" nclones="4" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="914" endline="931" pcid="3503">
    def test_writes_returned_in_order(self):
        self.assertEqual(self.q.request_writes(offset=3, data='d'), [])
        self.assertEqual(self.q.request_writes(offset=2, data='c'), [])
        self.assertEqual(self.q.request_writes(offset=1, data='b'), [])

        # Everything at this point has been deferred, but as soon as we
        # send offset=0, that will unlock offsets 0-3.
        writes = self.q.request_writes(offset=0, data='a')
        self.assertEqual(
            writes,
            [
                {'offset': 0, 'data': 'a'},
                {'offset': 1, 'data': 'b'},
                {'offset': 2, 'data': 'c'},
                {'offset': 3, 'data': 'd'},
            ],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="981" endline="999" pcid="3508">
    def test_duplicate_writes_are_ignored(self):
        self.q.request_writes(offset=2, data='c')
        self.q.request_writes(offset=1, data='b')

        # We're still waiting for offset=0, but if
        # a duplicate write comes in for offset=2/offset=1
        # it's ignored.  This gives "first one wins" behavior.
        self.assertEqual(self.q.request_writes(offset=2, data='X'), [])
        self.assertEqual(self.q.request_writes(offset=1, data='Y'), [])

        self.assertEqual(
            self.q.request_writes(offset=0, data='a'),
            [
                {'offset': 0, 'data': 'a'},
                # Note we're seeing 'b' 'c', and not 'X', 'Y'.
                {'offset': 1, 'data': 'b'},
                {'offset': 2, 'data': 'c'},
            ],
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="932" endline="945" pcid="3504">
    def test_unlocks_partial_range(self):
        self.assertEqual(self.q.request_writes(offset=5, data='f'), [])
        self.assertEqual(self.q.request_writes(offset=1, data='b'), [])

        # offset=0 unlocks 0-1, but offset=5 still needs to see 2-4 first.
        writes = self.q.request_writes(offset=0, data='a')
        self.assertEqual(
            writes,
            [
                {'offset': 0, 'data': 'a'},
                {'offset': 1, 'data': 'b'},
            ],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="946" endline="956" pcid="3505">
    def test_data_can_be_any_size(self):
        self.q.request_writes(offset=5, data='hello world')
        writes = self.q.request_writes(offset=0, data='abcde')
        self.assertEqual(
            writes,
            [
                {'offset': 0, 'data': 'abcde'},
                {'offset': 5, 'data': 'hello world'},
            ],
        )

</source>
</class>

<class classid="173" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_crt.py" startline="49" endline="68" pcid="3533">
    def test_upload_request(self):
        callargs = CallArgs(
            bucket=self.bucket,
            key=self.key,
            fileobj=self.filename,
            extra_args={},
            subscribers=[],
        )
        coordinator = s3transfer.crt.CRTTransferCoordinator()
        future = s3transfer.crt.CRTTransferFuture(
            s3transfer.crt.CRTTransferMeta(call_args=callargs), coordinator
        )
        crt_request = self.request_serializer.serialize_http_request(
            "put_object", future
        )
        self.assertEqual("PUT", crt_request.method)
        self.assertEqual(self.expected_path, crt_request.path)
        self.assertEqual(self.expected_host, crt_request.headers.get("host"))
        self.assertIsNone(crt_request.headers.get("Authorization"))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_crt.py" startline="69" endline="88" pcid="3534">
    def test_download_request(self):
        callargs = CallArgs(
            bucket=self.bucket,
            key=self.key,
            fileobj=self.filename,
            extra_args={},
            subscribers=[],
        )
        coordinator = s3transfer.crt.CRTTransferCoordinator()
        future = s3transfer.crt.CRTTransferFuture(
            s3transfer.crt.CRTTransferMeta(call_args=callargs), coordinator
        )
        crt_request = self.request_serializer.serialize_http_request(
            "get_object", future
        )
        self.assertEqual("GET", crt_request.method)
        self.assertEqual(self.expected_path, crt_request.path)
        self.assertEqual(self.expected_host, crt_request.headers.get("host"))
        self.assertIsNone(crt_request.headers.get("Authorization"))

</source>
</class>

<class classid="174" nclones="2" nlines="21" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_s3transfer.py" startline="399" endline="430" pcid="3584">
    def test_multipart_download_with_multiple_parts(self):
        client = mock.Mock()
        response_body = b'foobarbaz'
        client.get_object.return_value = {'Body': BytesIO(response_body)}
        # For testing purposes, we're testing with a multipart threshold
        # of 4 bytes and a chunksize of 4 bytes.  Given b'foobarbaz',
        # this should result in 3 calls.  In python slices this would be:
        # r[0:4], r[4:8], r[8:9].  But the Range param will be slightly
        # different because they use inclusive ranges.
        config = TransferConfig(multipart_threshold=4, multipart_chunksize=4)

        downloader = MultipartDownloader(
            client, config, InMemoryOSLayer({}), SequentialExecutor
        )
        downloader.download_file(
            'bucket', 'key', 'filename', len(response_body), {}
        )

        # We're storing these in **extra because the assertEqual
        # below is really about verifying we have the correct value
        # for the Range param.
        extra = {'Bucket': 'bucket', 'Key': 'key'}
        self.assertEqual(
            client.get_object.call_args_list,
            # Note these are inclusive ranges.
            [
                mock.call(Range='bytes=0-3', **extra),
                mock.call(Range='bytes=4-7', **extra),
                mock.call(Range='bytes=8-', **extra),
            ],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_s3transfer.py" startline="431" endline="468" pcid="3585">
    def test_retry_on_failures_from_stream_reads(self):
        # If we get an exception during a call to the response body's .read()
        # method, we should retry the request.
        client = mock.Mock()
        response_body = b'foobarbaz'
        stream_with_errors = mock.Mock()
        stream_with_errors.read.side_effect = [
            socket.error("fake error"),
            response_body,
        ]
        client.get_object.return_value = {'Body': stream_with_errors}
        config = TransferConfig(multipart_threshold=4, multipart_chunksize=4)

        downloader = MultipartDownloader(
            client, config, InMemoryOSLayer({}), SequentialExecutor
        )
        downloader.download_file(
            'bucket', 'key', 'filename', len(response_body), {}
        )

        # We're storing these in **extra because the assertEqual
        # below is really about verifying we have the correct value
        # for the Range param.
        extra = {'Bucket': 'bucket', 'Key': 'key'}
        self.assertEqual(
            client.get_object.call_args_list,
            # The first call to range=0-3 fails because of the
            # side_effect above where we make the .read() raise a
            # socket.error.
            # The second call to range=0-3 then succeeds.
            [
                mock.call(Range='bytes=0-3', **extra),
                mock.call(Range='bytes=0-3', **extra),
                mock.call(Range='bytes=4-7', **extra),
                mock.call(Range='bytes=8-', **extra),
            ],
        )

</source>
</class>

<class classid="175" nclones="3" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_upload.py" startline="574" endline="591" pcid="3668">
    def test_submits_no_tag_for_multipart_filename(self):
        self.wrap_executor_in_recorder()

        # Set up for a multipart upload.
        self.add_multipart_upload_stubbed_responses()
        self.config.multipart_threshold = 1

        self.submission_task = self.get_task(
            UploadSubmissionTask, main_kwargs=self.submission_main_kwargs
        )
        self.submission_task()
        self.transfer_future.result()
        self.stubber.assert_no_pending_responses()

        # Make sure no tag to limit any of the upload part tasks were
        # were associated when submitted to the executor
        self.assert_tag_value_for_upload_parts(None)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_upload.py" startline="609" endline="630" pcid="3670">
    def test_submits_tag_for_multipart_fileobj(self):
        self.wrap_executor_in_recorder()

        # Set up for a multipart upload.
        self.add_multipart_upload_stubbed_responses()
        self.config.multipart_threshold = 1

        with open(self.filename, 'rb') as f:
            self.use_fileobj_in_call_args(f)
            self.submission_task = self.get_task(
                UploadSubmissionTask, main_kwargs=self.submission_main_kwargs
            )
            self.submission_task()
            self.transfer_future.result()
            self.stubber.assert_no_pending_responses()

        # Make sure tags to limit all of the upload part tasks were
        # were associated when submitted to the executor as these tasks will
        # have chunks of data stored with them in memory.
        self.assert_tag_value_for_upload_parts(IN_MEMORY_UPLOAD_TAG)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_upload.py" startline="592" endline="608" pcid="3669">
    def test_submits_no_tag_for_put_object_fileobj(self):
        self.wrap_executor_in_recorder()
        self.stubber.add_response('put_object', {})

        with open(self.filename, 'rb') as f:
            self.use_fileobj_in_call_args(f)
            self.submission_task = self.get_task(
                UploadSubmissionTask, main_kwargs=self.submission_main_kwargs
            )
            self.submission_task()
            self.transfer_future.result()
            self.stubber.assert_no_pending_responses()

        # Make sure no tag to limit that task specifically was not associated
        # to that task submission.
        self.assert_tag_value_for_put_object(None)

</source>
</class>

<class classid="176" nclones="7" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="277" endline="289" pcid="3862">
    def test_alias_with_operation_command(self):
        alias_value = 'myservice myoperation'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        parsed_globals = FakeParsedArgs(command=self.alias_name)
        alias_cmd([], parsed_globals)
        command_table['myservice'].assert_called_with(
            ['myoperation'], FakeParsedArgs(command='myservice'))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="290" endline="302" pcid="3863">
    def test_alias_then_help_command(self):
        alias_value = 'myservice myoperation'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        parsed_globals = FakeParsedArgs(command=self.alias_name)
        alias_cmd(['help'], parsed_globals)
        command_table['myservice'].assert_called_with(
            ['myoperation', 'help'], FakeParsedArgs(command='myservice'))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="318" endline="331" pcid="3865">
    def test_alias_with_operation_and_parameters(self):
        alias_value = 'myservice myoperation --my-parameter val'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation', '--my-parameter', 'val'],
            FakeParsedArgs(command='myservice')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="303" endline="317" pcid="3864">
    def test_alias_then_additional_parameters(self):
        alias_value = 'myservice myoperation'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        parsed_globals = FakeParsedArgs(command=self.alias_name)
        alias_cmd(['--parameter', 'val'], parsed_globals)
        command_table['myservice'].assert_called_with(
            ['myoperation', '--parameter', 'val'],
            FakeParsedArgs(command='myservice')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="439" endline="454" pcid="3873">
    def test_properly_preserves_quoted_values(self):
        alias_value = (
            'myservice myoperation --my-parameter \' \n$""\''
        )

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation', '--my-parameter', ' \n$""'],
            FakeParsedArgs(command='myservice')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="422" endline="438" pcid="3872">
    def test_properly_parses_aliases_broken_by_multiple_lines(self):
        alias_value = (
            'myservice myoperation \\'
            '\n--my-parameter val'
        )

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation', '--my-parameter', 'val'],
            FakeParsedArgs(command='myservice')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="406" endline="421" pcid="3871">
    def test_properly_handles_multiple_spaces(self):
        alias_value = (
            'myservice myoperation    --my-parameter val'
        )

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation', '--my-parameter', 'val'],
            FakeParsedArgs(command='myservice')
        )

</source>
</class>

<class classid="177" nclones="3" nlines="10" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="332" endline="346" pcid="3866">
    def test_alias_with_operation_and_global_parameters(self):
        alias_value = 'myservice myoperation --global-param val'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(
            command_table, extra_params=['global-param'])
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation'],
            FakeParsedArgs(command='myservice', global_param='val')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="470" endline="485" pcid="3875">
    def test_errors_when_no_service_command(self):
        alias_value = '--global-param=val'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(
            command_table, extra_params=['global-param'])
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        with self.assertRaises(ArgParseException):
            # Even though we catch the system exit, a message will always
            # be forced to screen because it happened at system exit.
            # The patch is to ensure it does not get displayed.
            with mock.patch('sys.stderr'):
                alias_cmd([], FakeParsedArgs(command=self.alias_name))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="501" endline="516" pcid="3877">
    def test_errors_when_unsupported_global_parameter_in_alias(self):
        # Unsupported global parameters are: --profile and --debug
        alias_value = (
            'myservice myoperation --profile value'
        )

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(
            command_table, extra_params=['profile'])
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        with self.assertRaises(InvalidAliasException):
            alias_cmd([], FakeParsedArgs(command=self.alias_name))


</source>
</class>

<class classid="178" nclones="2" nlines="14" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="347" endline="365" pcid="3867">
    def test_maintains_global_defaults_when_missing_from_alias(self):
        alias_value = 'myservice myoperation'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        parser.add_argument('--global-with-default', default='default')
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)
        alias_cmd(
            [],
            FakeParsedArgs(
                command=self.alias_name, global_with_default='default')
        )
        command_table['myservice'].assert_called_with(
            ['myoperation'],
            FakeParsedArgs(
                command='myservice', global_with_default='default')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_alias.py" startline="366" endline="381" pcid="3868">
    def test_sets_global_parameters_when_differs_from_defaults(self):
        alias_value = 'myservice myoperation --global-with-default non-default'

        command_table = self.create_command_table(['myservice'])
        parser = self.create_parser(command_table)
        parser.add_argument('--global-with-default', default='default')
        alias_cmd = ServiceAliasCommand(
            self.alias_name, alias_value, self.session, command_table, parser)

        alias_cmd([], FakeParsedArgs(command=self.alias_name))
        command_table['myservice'].assert_called_with(
            ['myoperation'],
            FakeParsedArgs(
                command='myservice', global_with_default='non-default')
        )

</source>
</class>

<class classid="179" nclones="2" nlines="14" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/test_shorthand.py" startline="178" endline="194" pcid="3886">
    def test_dont_promote_list_if_none_value(self):
        m = model.DenormalizedStructureBuilder().with_members({
            'A': {
                'type': 'list',
                'member': {
                    'type': 'structure',
                    'members': {
                        'Single': {'type': 'string'}
                    },
                },
            },
        }).build_model()
        b = shorthand.BackCompatVisitor()
        params = {}
        b.visit(params, m)
        self.assertEqual(params, {})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_shorthand.py" startline="223" endline="237" pcid="3889">
    def test_can_convert_list_of_integers(self):
        m = model.DenormalizedStructureBuilder().with_members({
            'A': {
                'type': 'list',
                'member': {
                    'type': 'integer',
                },
            },
        }).build_model()
        b = shorthand.BackCompatVisitor()
        params = {'A': ['1', '2']}
        b.visit(params, m)
        # We should have converted each list element to an integer
        # because the type of the list member is integer.
        self.assertEqual(params, {'A': [1, 2]})
</source>
</class>

<class classid="180" nclones="3" nlines="12" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="139" endline="151" pcid="3959">
    def test_presigned_url_already_present_ec2(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopySnapshot'
        params = {'body': {'PresignedUrl': 'https://foo'}}
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('ec2'), 'us-east-1', 'ec2', 'v4',
            credentials, event_emitter)
        handlers.inject_presigned_url_ec2(
            params, request_signer, operation_model)
        self.assertEqual(params['body']['PresignedUrl'], 'https://foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="171" endline="183" pcid="3961">
    def test_presigned_url_already_present_rds(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        params = {'body': {'PreSignedUrl': 'https://foo'}}
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        handlers.inject_presigned_url_rds(
            params, request_signer, operation_model)
        self.assertEqual(params['body']['PreSignedUrl'], 'https://foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="386" endline="401" pcid="3970">
    def test_presigned_url_already_present_for_rds(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        params = {'body': {'PresignedUrl': 'https://foo'}}
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        handlers.inject_presigned_url_rds(
            params=params,
            request_signer=request_signer,
            model=operation_model
        )
        self.assertEqual(params['body']['PresignedUrl'], 'https://foo')

</source>
</class>

<class classid="181" nclones="2" nlines="16" similarity="93">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="152" endline="170" pcid="3960">
    def test_presigned_url_with_source_region_ec2(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopySnapshot'
        params = {
            'body': {
                'PresignedUrl': 'https://foo',
                'SourceRegion': 'us-east-1'
            }
        }
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('ec2'), 'us-east-1', 'ec2', 'v4', credentials,
            event_emitter)
        handlers.inject_presigned_url_ec2(
            params, request_signer, operation_model)
        self.assertEqual(params['body']['PresignedUrl'], 'https://foo')
        self.assertEqual(params['body']['SourceRegion'], 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="184" endline="202" pcid="3962">
    def test_presigned_url_with_source_region_rds(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        params = {
            'body': {
                'PreSignedUrl': 'https://foo',
                'SourceRegion': 'us-east-1'
            }
        }
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        handlers.inject_presigned_url_rds(
            params, request_signer, operation_model)
        self.assertEqual(params['body']['PreSignedUrl'], 'https://foo')
        self.assertNotIn('SourceRegion', params['body'])

</source>
</class>

<class classid="182" nclones="7" nlines="22" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="203" endline="230" pcid="3963">
    def test_inject_presigned_url_ec2(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopySnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('ec2'), 'us-east-1', 'ec2', 'v4', credentials,
            event_emitter)
        request_dict = {}
        params = {'SourceRegion': 'us-west-2'}
        request_dict['body'] = params
        request_dict['url'] = 'https://ec2.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_ec2(
            request_dict, request_signer, operation_model)

        self.assertIn('https://ec2.us-west-2.amazonaws.com?',
                      params['PresignedUrl'])
        self.assertIn('X-Amz-Signature',
                      params['PresignedUrl'])
        self.assertIn('DestinationRegion', params['PresignedUrl'])
        # We should also populate the DestinationRegion with the
        # region_name of the endpoint object.
        self.assertEqual(params['DestinationRegion'], 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="286" endline="312" pcid="3966">
    def test_inject_presigned_url_rds(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        request_dict = {}
        params = {'SourceRegion': 'us-west-2'}
        request_dict['body'] = params
        request_dict['url'] = 'https://rds.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_rds(
            request_dict, request_signer, operation_model)

        self.assertIn('https://rds.us-west-2.amazonaws.com?',
                      params['PreSignedUrl'])
        self.assertIn('X-Amz-Signature',
                      params['PreSignedUrl'])
        self.assertIn('DestinationRegion', params['PreSignedUrl'])
        # We should not populate the destination region for rds
        self.assertNotIn('DestinationRegion', params)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="251" endline="285" pcid="3965">
    def test_destination_region_always_changed(self):
        # If the user provides a destination region, we will still
        # override the DesinationRegion with the region_name from
        # the endpoint object.
        actual_region = 'us-west-1'
        operation_model = mock.Mock()
        operation_model.name = 'CopySnapshot'

        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('ec2'), actual_region, 'ec2', 'v4', credentials,
            event_emitter)
        request_dict = {}
        params = {
            'SourceRegion': 'us-west-2',
            'DestinationRegion': 'us-east-1'}
        request_dict['body'] = params
        request_dict['url'] = 'https://ec2.us-west-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        # The user provides us-east-1, but we will override this to
        # endpoint.region_name, of 'us-west-1' in this case.
        handlers.inject_presigned_url_ec2(
            request_dict, request_signer, operation_model)

        self.assertIn('https://ec2.us-west-2.amazonaws.com?',
                      params['PresignedUrl'])

        # Always use the DestinationRegion from the endpoint, regardless of
        # whatever value the user provides.
        self.assertEqual(params['DestinationRegion'], actual_region)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="402" endline="428" pcid="3971">
    def test_presigned_url_casing_changed_for_rds(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        request_dict = {}
        params = {'SourceRegion': 'us-west-2'}
        request_dict['body'] = params
        request_dict['url'] = 'https://rds.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_rds(
            params=request_dict,
            request_signer=request_signer,
            model=operation_model
        )

        self.assertNotIn('PresignedUrl', params)
        self.assertIn('https://rds.us-west-2.amazonaws.com?',
                      params['PreSignedUrl'])
        self.assertIn('X-Amz-Signature', params['PreSignedUrl'])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="313" endline="337" pcid="3967">
    def test_source_region_removed(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter
        )
        request_dict = {}
        params = {'SourceRegion': 'us-west-2'}
        request_dict['body'] = params
        request_dict['url'] = 'https://rds.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_rds(
            params=request_dict,
            request_signer=request_signer,
            model=operation_model
        )

        self.assertNotIn('SourceRegion', params)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="362" endline="385" pcid="3969">
    def test_dest_region_removed(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        request_dict = {}
        params = {'SourceRegion': 'us-west-2'}
        request_dict['body'] = params
        request_dict['url'] = 'https://rds.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_rds(
            params=request_dict,
            request_signer=request_signer,
            model=operation_model
        )

        self.assertNotIn('DestinationRegion', params)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="338" endline="361" pcid="3968">
    def test_source_region_removed_when_presigned_url_provided_for_rds(self):
        operation_model = mock.Mock()
        operation_model.name = 'CopyDBSnapshot'
        credentials = Credentials('key', 'secret')
        event_emitter = HierarchicalEmitter()
        request_signer = RequestSigner(
            ServiceId('rds'), 'us-east-1', 'rds', 'v4', credentials,
            event_emitter)
        request_dict = {}
        params = {'SourceRegion': 'us-west-2', 'PreSignedUrl': 'https://foo'}
        request_dict['body'] = params
        request_dict['url'] = 'https://rds.us-east-1.amazonaws.com'
        request_dict['method'] = 'POST'
        request_dict['headers'] = {}
        request_dict['context'] = {}

        handlers.inject_presigned_url_rds(
            params=request_dict,
            request_signer=request_signer,
            model=operation_model
        )

        self.assertNotIn('SourceRegion', params)

</source>
</class>

<class classid="183" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="529" endline="540" pcid="3977">
    def test_run_instances_userdata(self):
        user_data = 'This is a test'
        b64_user_data = base64.b64encode(six.b(user_data)).decode('utf-8')
        params = dict(ImageId='img-12345678',
                      MinCount=1, MaxCount=5, UserData=user_data)
        handlers.base64_encode_user_data(params=params)
        result = {'ImageId': 'img-12345678',
                  'MinCount': 1,
                  'MaxCount': 5,
                  'UserData': b64_user_data}
        self.assertEqual(params, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="541" endline="555" pcid="3978">
    def test_run_instances_userdata_blob(self):
        # Ensure that binary can be passed in as user data.
        # This is valid because you can send gzip compressed files as
        # user data.
        user_data = b'\xc7\xa9This is a test'
        b64_user_data = base64.b64encode(user_data).decode('utf-8')
        params = dict(ImageId='img-12345678',
                      MinCount=1, MaxCount=5, UserData=user_data)
        handlers.base64_encode_user_data(params=params)
        result = {'ImageId': 'img-12345678',
                  'MinCount': 1,
                  'MaxCount': 5,
                  'UserData': b64_user_data}
        self.assertEqual(params, result)

</source>
</class>

<class classid="184" nclones="2" nlines="14" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="655" endline="671" pcid="3987">
    def test_glacier_checksums_added(self):
        request_dict = {
            'headers': {},
            'body': six.BytesIO(b'hello world'),
        }
        handlers.add_glacier_checksums(request_dict)
        self.assertIn('x-amz-content-sha256', request_dict['headers'])
        self.assertIn('x-amz-sha256-tree-hash', request_dict['headers'])
        self.assertEqual(
            request_dict['headers']['x-amz-content-sha256'],
            'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9')
        self.assertEqual(
            request_dict['headers']['x-amz-sha256-tree-hash'],
            'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9')
        # And verify that the body can still be read.
        self.assertEqual(request_dict['body'].read(), b'hello world')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="694" endline="706" pcid="3990">
    def test_glacier_checksums_support_raw_bytes(self):
        request_dict = {
            'headers': {},
            'body': b'hello world',
        }
        handlers.add_glacier_checksums(request_dict)
        self.assertEqual(
            request_dict['headers']['x-amz-content-sha256'],
            'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9')
        self.assertEqual(
            request_dict['headers']['x-amz-sha256-tree-hash'],
            'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9')

</source>
</class>

<class classid="185" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="672" endline="682" pcid="3988">
    def test_tree_hash_added_only_if_not_exists(self):
        request_dict = {
            'headers': {
                'x-amz-sha256-tree-hash': 'pre-exists',
            },
            'body': six.BytesIO(b'hello world'),
        }
        handlers.add_glacier_checksums(request_dict)
        self.assertEqual(request_dict['headers']['x-amz-sha256-tree-hash'],
                         'pre-exists')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="683" endline="693" pcid="3989">
    def test_checksum_added_only_if_not_exists(self):
        request_dict = {
            'headers': {
                'x-amz-content-sha256': 'pre-exists',
            },
            'body': six.BytesIO(b'hello world'),
        }
        handlers.add_glacier_checksums(request_dict)
        self.assertEqual(request_dict['headers']['x-amz-content-sha256'],
                         'pre-exists')

</source>
</class>

<class classid="186" nclones="5" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="1128" endline="1140" pcid="4044">

    def test_adds_md5_when_v4(self):
        credentials = Credentials('key', 'secret')
        request_signer = RequestSigner(
            ServiceId('s3'), 'us-east-1', 's3', 'v4', credentials, mock.Mock())
        request_dict = {'body': b'bar',
                        'url': 'https://s3.us-east-1.amazonaws.com',
                        'method': 'PUT',
                        'headers': {}}
        context = self.get_context()
        conditionally_calculate_md5(
            request_dict, request_signer=request_signer, context=context)
        self.assertTrue('Content-MD5' in request_dict['headers'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="1155" endline="1170" pcid="4046">

    def test_conditional_does_not_add_when_md5_unavailable(self):
        credentials = Credentials('key', 'secret')
        request_signer = RequestSigner(
            's3', 'us-east-1', 's3', 's3', credentials, mock.Mock())
        request_dict = {'body': b'bar',
                        'url': 'https://s3.us-east-1.amazonaws.com',
                        'method': 'PUT',
                        'headers': {}}

        context = self.get_context()
        self.set_md5_available(False)
        with mock.patch('botocore.utils.MD5_AVAILABLE', False):
            conditionally_calculate_md5(
                request_dict, request_signer=request_signer, context=context)
            self.assertFalse('Content-MD5' in request_dict['headers'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="1141" endline="1154" pcid="4045">

    def test_adds_md5_when_s3v4(self):
        credentials = Credentials('key', 'secret')
        request_signer = RequestSigner(
            ServiceId('s3'), 'us-east-1', 's3', 's3v4', credentials,
            mock.Mock())
        request_dict = {'body': b'bar',
                        'url': 'https://s3.us-east-1.amazonaws.com',
                        'method': 'PUT',
                        'headers': {}}
        context = self.get_context({'payload_signing_enabled': False})
        conditionally_calculate_md5(
            request_dict, request_signer=request_signer, context=context)
        self.assertTrue('Content-MD5' in request_dict['headers'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="1185" endline="1197" pcid="4048">

    def test_adds_md5_when_s3v2(self):
        credentials = Credentials('key', 'secret')
        request_signer = RequestSigner(
            ServiceId('s3'), 'us-east-1', 's3', 's3', credentials, mock.Mock())
        request_dict = {'body': b'bar',
                        'url': 'https://s3.us-east-1.amazonaws.com',
                        'method': 'PUT',
                        'headers': {}}
        context = self.get_context()
        conditionally_calculate_md5(
            request_dict, request_signer=request_signer, context=context)
        self.assertTrue('Content-MD5' in request_dict['headers'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_handlers.py" startline="1171" endline="1184" pcid="4047">

    def test_add_md5_raises_error_when_md5_unavailable(self):
        credentials = Credentials('key', 'secret')
        request_signer = RequestSigner(
            ServiceId('s3'), 'us-east-1', 's3', 's3', credentials, mock.Mock())
        request_dict = {'body': b'bar',
                        'url': 'https://s3.us-east-1.amazonaws.com',
                        'method': 'PUT',
                        'headers': {}}

        self.set_md5_available(False)
        with self.assertRaises(MD5UnavailableError):
            conditionally_calculate_md5(
                request_dict, request_signer=request_signer)
</source>
</class>

<class classid="187" nclones="2" nlines="13" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_exceptions.py" startline="106" endline="119" pcid="4080">
    def test_client_error(self):
        exception = botocore.exceptions.ClientError(
            error_response={
                'Error': {'Code': 'MyCode', 'Message': 'MyMessage'}},
            operation_name='myoperation'
        )
        unpickled_exception = pickle.loads(pickle.dumps(exception))
        self.assertIsInstance(
            unpickled_exception, botocore.exceptions.ClientError)
        self.assertEqual(str(unpickled_exception), str(exception))
        self.assertEqual(
            unpickled_exception.operation_name, exception.operation_name)
        self.assertEqual(unpickled_exception.response, exception.response)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_exceptions.py" startline="120" endline="135" pcid="4081">
    def test_dynamic_client_error(self):
        session = botocore.session.Session()
        client = session.create_client('s3', 'us-west-2')
        exception = client.exceptions.NoSuchKey(
            error_response={
                'Error': {'Code': 'NoSuchKey', 'Message': 'Not Found'}},
            operation_name='myoperation'
        )
        unpickled_exception = pickle.loads(pickle.dumps(exception))
        self.assertIsInstance(
            unpickled_exception, botocore.exceptions.ClientError)
        self.assertEqual(str(unpickled_exception), str(exception))
        self.assertEqual(
            unpickled_exception.operation_name, exception.operation_name)
        self.assertEqual(unpickled_exception.response, exception.response)

</source>
</class>

<class classid="188" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="88" endline="98" pcid="4101">
    def setUp(self):
        super(TestTraverseAndDocumentShape, self).setUp()
        self.add_shape_to_params('Foo', 'String', 'This describes foo.')
        self.event_emitter = mock.Mock()
        self.request_example = RequestExampleDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)
        self.response_example = ResponseExampleDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="57" endline="67" pcid="4177">
    def setUp(self):
        super(TestTraverseAndDocumentShape, self).setUp()
        self.add_shape_to_params('Foo', 'String', 'This describes foo.')
        self.event_emitter = mock.Mock()
        self.request_params = RequestParamsDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)
        self.response_params = ResponseParamsDocumenter(
            service_id='myservice', operation_name='SampleOperation',
            event_emitter=self.event_emitter)

</source>
</class>

<class classid="189" nclones="2" nlines="12" similarity="91">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="99" endline="114" pcid="4102">
    def test_events_emitted_response_example(self):
        self.response_example.traverse_and_document_shape(
            section=self.doc_structure,
            shape=self.operation_model.input_shape, history=[]
        )
        structure_section = self.doc_structure.get_section('structure-value')
        print(self.event_emitter.emit.call_args_list[0][1]['section'].name)
        self.assertEqual(
            self.event_emitter.emit.call_args_list,
            [mock.call('docs.response-example.myservice.SampleOperation.Foo',
                       section=structure_section.get_section(
                           'Foo').get_section('member-value')),
             mock.call(('docs.response-example.myservice.SampleOperation'
                        '.complete-section'), section=self.doc_structure)]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="115" endline="130" pcid="4103">
    def test_events_emitted_request_example(self):
        self.request_example.traverse_and_document_shape(
            section=self.doc_structure,
            shape=self.operation_model.input_shape, history=[]
        )
        structure_section = self.doc_structure.get_section('structure-value')
        self.assertEqual(
            self.event_emitter.emit.call_args_list,
            [mock.call('docs.request-example.myservice.SampleOperation.Foo',
                       section=structure_section.get_section(
                           'Foo').get_section('member-value')),
             mock.call(('docs.request-example.myservice.SampleOperation'
                        '.complete-section'), section=self.doc_structure)]
        )


</source>
</class>

<class classid="190" nclones="16" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="176" endline="188" pcid="4108">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call'
        )
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo=\'string\',',
            '      Bar=\'string\'',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="263" endline="276" pcid="4115">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            exclude=self.exclude_params
        )
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Bar\': \'string\'',
            '  }'
        ])
        self.assert_not_contains_line('\'Foo\': \'string\',')


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="300" endline="312" pcid="4118">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': [',
            '          \'string\',',
            '      ]',
            '  }'
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="227" endline="240" pcid="4112">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            include=self.include_params
        )
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': \'string\',',
            '      \'Baz\': 123',
            '  }'
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="336" endline="348" pcid="4121">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': {',
            '          \'string\': \'string\'',
            '      }',
            '  }'
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="249" endline="262" pcid="4114">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call',
            exclude=self.exclude_params
        )
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Bar=\'string\'',
            '  )'
        ])
        self.assert_not_contains_line('      Foo=\'string\'')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="323" endline="335" pcid="4120">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo={',
            '          \'string\': \'string\'',
            '      }',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="189" endline="201" pcid="4109">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
        )
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': \'string\',',
            '      \'Bar\': \'string\'',
            '  }'
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="413" endline="423" pcid="4127">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': {',
            '          \'Foo\': {\'... recursive ...\'}',
            '      }',
            '  }'
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="374" endline="386" pcid="4124">
    def test_response_example(self):
        self.response_example.document_example(
            self.doc_structure, self.operation_model.input_shape)
        self.assert_contains_lines_in_order([
            '::',
            '  {',
            '      \'Foo\': {',
            '          \'Member\': \'string\'',
            '      }',
            '  }'
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="361" endline="373" pcid="4123">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo={',
            '          \'Member\': \'string\'',
            '      }',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="165" endline="177" pcid="4187">
    def test_request_params(self):
        self.request_params.document_params(
            self.doc_structure, self.operation_model.input_shape,
            exclude=self.exclude_params)
        self.assert_contains_lines_in_order([
            ':type Bar: string',
            ':param Bar: **[REQUIRED]** This describes bar.'
        ])
        self.assert_not_contains_lines([
            ':type Foo: string',
            ':param Foo: This describes foo.'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="213" endline="226" pcid="4111">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call',
            include=self.include_params
        )
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo=\'string\',',
            '      Baz=123',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="400" endline="412" pcid="4126">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo={',
            '          \'Foo\': {\'... recursive ...\'}',
            '      }',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="287" endline="299" pcid="4117">
    def test_request_example(self):
        self.request_example.document_example(
            self.doc_structure, self.operation_model.input_shape,
            prefix='response = myclient.call')
        self.assert_contains_lines_in_order([
            '::',
            '  response = myclient.call(',
            '      Foo=[',
            '          \'string\',',
            '      ]',
            '  )'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_client.py" startline="82" endline="92" pcid="4171">
    def test_no_modeled_exceptions(self):
        self.setup_documenter()
        self.exceptions_documenter.document_exceptions(self.doc_structure)
        self.assert_contains_lines_in_order([
            '=================',
            'Client Exceptions',
            '=================',
            'Client exceptions are available',
            'This client has no modeled exception classes.',
        ])

</source>
</class>

<class classid="191" nclones="5" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="350" endline="360" pcid="4122">
    def setUp(self):
        super(TestDocumentStructure, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Member': {'shape': 'String',
                               'documentation': 'This is its member.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="285" endline="296" pcid="4198">
    def setUp(self):
        super(TestDocumentRecursiveShape, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Foo': {
                        'shape': 'Structure',
                        'documentation': 'This is a recursive structure.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="191" endline="201" pcid="4189">
    def setUp(self):
        super(TestDocumentList, self).setUp()
        self.add_shape(
            {'List': {
                'type': 'list',
                'member': {'shape': 'String',
                           'documentation': 'A string element'}}})
        self.add_shape_to_params(
            'Foo', 'List',
            'This describes the list. Each element of this list is a string.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="388" endline="399" pcid="4125">
    def setUp(self):
        super(TestDocumentRecursiveShape, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Foo': {
                        'shape': 'Structure',
                        'documentation': 'This is a recursive structure.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="254" endline="264" pcid="4195">
    def setUp(self):
        super(TestDocumentStructure, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Member': {'shape': 'String',
                               'documentation': 'This is its member.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
</class>

<class classid="192" nclones="11" nlines="33" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_waiter.py" startline="27" endline="60" pcid="4129">
    def test_document_waiters(self):
        self.waiter_documenter.document_waiters(
            self.doc_structure)
        self.assert_contains_lines_in_order([
            '=======',
            'Waiters',
            '=======',
            'The available waiters are:',
            '* :py:class:`MyService.Waiter.SampleOperationComplete`',
            '.. py:class:: MyService.Waiter.SampleOperationComplete',
            '  ::',
            '    waiter = client.get_waiter(\'sample_operation_complete\')',
            '  .. py:method:: wait(**kwargs)',
            ('    Polls :py:meth:`MyService.Client.sample_operation` '
             'every 15 seconds until a successful state is reached. An error '
             'is returned after 40 failed checks.'),
            '    **Request Syntax**',
            '    ::',
            '      waiter.wait(',
            '          Biz=\'string\'',
            '      )',
            '    :type Biz: string',
            '    :param Biz:',
            '    :type WaiterConfig: dict',
            '    :param WaiterConfig:',
            ('A dictionary that provides parameters to control waiting '
             'behavior.'),
            '     - **Delay** *(integer) --*',
            ('        The amount of time in seconds to wait between attempts. '
             'Default: 15'),
            '      - **MaxAttempts** *(integer) --*',
            '        The maximum number of attempts to be made. Default: 40',
            '    :returns: None'
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_method.py" startline="112" endline="146" pcid="4334">
    def test_default(self):
        document_model_driven_method(
            self.doc_structure, 'foo', self.operation_model,
            event_emitter=self.event_emitter,
            method_description='This describes the foo method.',
            example_prefix='response = client.foo'
        )
        cross_ref_link = (
            'See also: `AWS API Documentation '
            '<https://docs.aws.amazon.com/goto/WebAPI'
            '/myservice-2014-01-01/SampleOperation>'
        )
        self.assert_contains_lines_in_order([
            '.. py:method:: foo(**kwargs)',
            '  This describes the foo method.',
            cross_ref_link,
            '  **Request Syntax**',
            '  ::',
            '    response = client.foo(',
            '        Bar=\'string\'',
            '    )',
            '  :type Bar: string',
            '  :param Bar:',
            '  :rtype: dict',
            '  :returns:',
            '    **Response Syntax**',
            '    ::',
            '      {',
            '          \'Bar\': \'string\'',
            '      }',
            '    **Response Structure**',
            '    - *(dict) --*',
            '      - **Bar** *(string) --*'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="70" endline="100" pcid="4205">

    def test_default(self):
        document_shared_examples(
            self.doc_structure, self.operation_model,
            'response = client.foo', self._examples)
        self.assert_contains_lines_in_order([
            "**Examples**",
            "Sample Description.",
            "::",
            "  response = client.foo(",
            "      # mahalo",
            "      aloha=[",
            "          'other',",
            "          {",
            "              'nested': 'fun!',",
            "          },",
            "      ],",
            "      foo='bar',",
            "  )",
            "  print(response)",
            "Expected Output:",
            "::",
            "  {",
            "      # Sample Comment",
            "      'foo': 'baz',",
            "      'ResponseMetadata': {",
            "          '...': '...',",
            "      },",
            "  }",
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_method.py" startline="165" endline="201" pcid="4336">
    def test_include_input(self):
        include_params = [
            DocumentedShape(
                name='Biz', type_name='string', documentation='biz docs')
        ]
        document_model_driven_method(
            self.doc_structure, 'foo', self.operation_model,
            event_emitter=self.event_emitter,
            method_description='This describes the foo method.',
            example_prefix='response = client.foo',
            include_input=include_params
        )
        self.assert_contains_lines_in_order([
            '.. py:method:: foo(**kwargs)',
            '  This describes the foo method.',
            '  **Request Syntax**',
            '  ::',
            '    response = client.foo(',
            '        Bar=\'string\',',
            '        Biz=\'string\'',
            '    )',
            '  :type Bar: string',
            '  :param Bar:',
            '  :type Biz: string',
            '  :param Biz: biz docs',
            '  :rtype: dict',
            '  :returns:',
            '    **Response Syntax**',
            '    ::',
            '      {',
            '          \'Bar\': \'string\'',
            '      }',
            '    **Response Structure**',
            '    - *(dict) --*',
            '      - **Bar** *(string) --*'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_method.py" startline="202" endline="237" pcid="4337">
    def test_include_output(self):
        include_params = [
            DocumentedShape(
                name='Biz', type_name='string', documentation='biz docs')
        ]
        document_model_driven_method(
            self.doc_structure, 'foo', self.operation_model,
            event_emitter=self.event_emitter,
            method_description='This describes the foo method.',
            example_prefix='response = client.foo',
            include_output=include_params
        )
        self.assert_contains_lines_in_order([
            '.. py:method:: foo(**kwargs)',
            '  This describes the foo method.',
            '  **Request Syntax**',
            '  ::',
            '    response = client.foo(',
            '        Bar=\'string\'',
            '    )',
            '  :type Bar: string',
            '  :param Bar:',
            '  :rtype: dict',
            '  :returns:',
            '    **Response Syntax**',
            '    ::',
            '      {',
            '          \'Bar\': \'string\'',
            '          \'Biz\': \'string\'',
            '      }',
            '    **Response Structure**',
            '    - *(dict) --*',
            '      - **Bar** *(string) --*',
            '      - **Biz** *(string) --*'
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_method.py" startline="238" endline="274" pcid="4338">
    def test_exclude_input(self):
        self.add_shape_to_params('Biz', 'String')
        document_model_driven_method(
            self.doc_structure, 'foo', self.operation_model,
            event_emitter=self.event_emitter,
            method_description='This describes the foo method.',
            example_prefix='response = client.foo',
            exclude_input=['Bar']
        )
        self.assert_contains_lines_in_order([
            '.. py:method:: foo(**kwargs)',
            '  This describes the foo method.',
            '  **Request Syntax**',
            '  ::',
            '    response = client.foo(',
            '        Biz=\'string\'',
            '    )',
            '  :type Biz: string',
            '  :param Biz:',
            '  :rtype: dict',
            '  :returns:',
            '    **Response Syntax**',
            '    ::',
            '      {',
            '          \'Bar\': \'string\'',
            '          \'Biz\': \'string\'',
            '      }',
            '    **Response Structure**',
            '    - *(dict) --*',
            '      - **Bar** *(string) --*',
            '      - **Biz** *(string) --*'
        ])
        self.assert_not_contains_lines([
            ':param Bar: string',
            'Bar=\'string\''
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_method.py" startline="275" endline="310" pcid="4339">
    def test_exclude_output(self):
        self.add_shape_to_params('Biz', 'String')
        document_model_driven_method(
            self.doc_structure, 'foo', self.operation_model,
            event_emitter=self.event_emitter,
            method_description='This describes the foo method.',
            example_prefix='response = client.foo',
            exclude_output=['Bar']
        )
        self.assert_contains_lines_in_order([
            '.. py:method:: foo(**kwargs)',
            '  This describes the foo method.',
            '  **Request Syntax**',
            '  ::',
            '    response = client.foo(',
            '        Bar=\'string\'',
            '        Biz=\'string\'',
            '    )',
            '  :type Biz: string',
            '  :param Biz:',
            '  :rtype: dict',
            '  :returns:',
            '    **Response Syntax**',
            '    ::',
            '      {',
            '          \'Biz\': \'string\'',
            '      }',
            '    **Response Structure**',
            '    - *(dict) --*',
            '      - **Biz** *(string) --*'
        ])
        self.assert_not_contains_lines([
            '\'Bar\': \'string\'',
            '- **Bar** *(string) --*',
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_client.py" startline="93" endline="131" pcid="4172">
    def test_modeled_exceptions(self):
        exception_shape = {
            'SomeException': {
                'exception': True,
                'type': 'structure',
                'members': {
                    'Message': {'shape': 'String'}
                },
            }
        }
        self.add_shape(exception_shape)
        self.setup_documenter()
        self.exceptions_documenter.document_exceptions(self.doc_structure)
        self.assert_contains_lines_in_order([
            '=================',
            'Client Exceptions',
            '=================',
            'Client exceptions are available',
            'The available client exceptions are:',
            '* :py:class:`MyService.Client.exceptions.SomeException`',
            '.. py:class:: MyService.Client.exceptions.SomeException',
            '**Example** ::',
            'except client.exceptions.SomeException as e:',
            '.. py:attribute:: response',
            '**Syntax**',
            '{',
            "'Message': 'string',",
            "'Error': {",
            "'Code': 'string',",
            "'Message': 'string'",
            '}',
            '}',
            '**Structure**',
            '- *(dict) --*',
            '- **Message** *(string) --* ',
            '- **Error** *(dict) --* ',
            '- **Code** *(string) --* ',
            '- **Message** *(string) --* ',
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_client.py" startline="36" endline="76" pcid="4169">
    def test_document_client(self):
        self.client_documenter.document_client(self.doc_structure)
        self.assert_contains_lines_in_order([
            '======',
            'Client',
            '======',
            '.. py:class:: MyService.Client',
            '  A low-level client representing AWS MyService',
            '  AWS MyService Description',
            '    client = session.create_client(\'myservice\')',
            '  These are the available methods:',
            '  *   :py:meth:`~MyService.Client.can_paginate`',
            '  *   :py:meth:`~MyService.Client.get_paginator`',
            '  *   :py:meth:`~MyService.Client.get_waiter`',
            '  *   :py:meth:`~MyService.Client.sample_operation`',
            '  .. py:method:: can_paginate(operation_name)',
            '  .. py:method:: get_paginator(operation_name)',
            '  .. py:method:: get_waiter(waiter_name)',
            '  .. py:method:: sample_operation(**kwargs)',
            '    **Request Syntax**',
            '    ::',
            '      response = client.sample_operation(',
            '          Biz=\'string\'',
            '      )',
            '    :type Biz: string',
            '    :param Biz:',
            '    :rtype: dict',
            '    :returns:',
            '      **Response Syntax**',
            '      ::',
            '        {',
            '            \'Biz\': \'string\'',
            '        }',
            '      **Response Structure**',
            '      - *(dict) --*',
            '        - **Biz** *(string) --*',
            '**Exceptions**',
            '*     :py:class:`MyService.Client.exceptions.SomeException`',
        ])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_service.py" startline="33" endline="74" pcid="4218">
    def test_document_service(self):
        # Note that not everything will be included as it is just
        # a smoke test to make sure all of the main parts are inluded.
        contents = self.service_documenter.document_service().decode('utf-8')
        lines = [
            '*********',
            'MyService',
            '*********',
            '.. contents:: Table of Contents',
            '   :depth: 2',
            '======',
            'Client',
            '======',
            '.. py:class:: MyService.Client',
            '  A low-level client representing AWS MyService',
            '  AWS MyService Description',
            '    client = session.create_client(\'myservice\')',
            '  These are the available methods:',
            '  *   :py:meth:`~MyService.Client.sample_operation`',
            '  .. py:method:: sample_operation(**kwargs)',
            '    **Examples** ',
            '    Sample Description.',
            '    ::',
            '      response = client.sample_operation(',
            '=================',
            'Client Exceptions',
            '=================',
            'Client exceptions are available',
            '==========',
            'Paginators',
            '==========',
            '.. py:class:: MyService.Paginator.SampleOperation',
            '  .. py:method:: paginate(**kwargs)',
            '=======',
            'Waiters',
            '=======',
            '.. py:class:: MyService.Waiter.SampleOperationComplete',
            '  .. py:method:: wait(**kwargs)'
        ]
        for line in lines:
            self.assertIn(line, contents)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_paginator.py" startline="30" endline="77" pcid="4223">
    def test_document_paginators(self):
        self.paginator_documenter.document_paginators(
            self.doc_structure)
        self.assert_contains_lines_in_order([
            '==========',
            'Paginators',
            '==========',
            'The available paginators are:',
            '* :py:class:`MyService.Paginator.SampleOperation`',
            '.. py:class:: MyService.Paginator.SampleOperation',
            '  ::',
            '    paginator = client.get_paginator(\'sample_operation\')',
            '  .. py:method:: paginate(**kwargs)',
            ('    Creates an iterator that will paginate through responses'
             ' from :py:meth:`MyService.Client.sample_operation`.'),
            '    **Request Syntax**',
            '    ::',
            '      response_iterator = paginator.paginate(',
            '          Biz=\'string\',',
            '          PaginationConfig={',
            '              \'MaxItems\': 123,',
            '              \'PageSize\': 123,',
            '              \'StartingToken\': \'string\'',
            '          }',
            '      )',
            '    :type Biz: string',
            '    :param Biz:',
            '    :type PaginationConfig: dict',
            '    :param PaginationConfig:',
            ('      A dictionary that provides parameters to '
             'control pagination.'),
            '      - **MaxItems** *(integer) --*',
            '      - **PageSize** *(integer) --*',
            '      - **StartingToken** *(string) --*',
            '    :rtype: dict',
            '    :returns:',
            '      **Response Syntax**',
            '      ::',
            '        {',
            '            \'Biz\': \'string\',',
            '            \'NextToken\': \'string\'',
            '        }',
            '      **Response Structure**',
            '      - *(dict) --*',
            '        - **Biz** *(string) --*',
            '        - **NextToken** *(string) --*'
        ])

</source>
</class>

<class classid="193" nclones="6" nlines="13" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="106" endline="123" pcid="4207">

    def test_is_input(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': 'bar'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo='bar'",
            ")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="284" endline="301" pcid="4215">

    def test_unicode_exammple(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': u'\u2713'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            u"foo.bar(",
            u"    foo='\u2713'",
            u")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="260" endline="283" pcid="4214">

    def test_add_comment(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': 'bar'
                },
                'comments': {
                    'input': {
                        'foo': 'baz'
                    }
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    # baz",
            "    foo='bar',",
            ")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="191" endline="208" pcid="4211">

    def test_unicode_string_example(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': u'bar'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo='bar'",
            ")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="302" endline="319" pcid="4216">

    def test_escape_character_example(self):
        self.add_shape_to_params('foo', 'String')
        self.documenter.document_shared_example(
            example={
                'output': {
                    'foo': 'good\n\rintentions!\n\r'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "Expected Output:",
            "  {",
            "      'foo': 'good\\n\\rintentions!\\n\\r',",
            "  }",
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="209" endline="229" pcid="4212">

    def test_timestamp_example(self):
        self.add_shape({
            'foo': {'type': 'timestamp'}
        })
        self.add_shape_to_params('foo', 'foo')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': 'Fri, 20 Nov 2015 21:13:12 GMT'
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo=datetime(2015, 11, 20, 21, 13, 12, 4, 324, 0)",
            ")"
        ])
</source>
</class>

<class classid="194" nclones="3" nlines="20" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="124" endline="151" pcid="4208">

    def test_dict_example(self):
        self.add_shape({
            'bar': {
                "type": "structure",
                "members": {
                    "bar": {"shape": "String"}
                }
            }
        })
        self.add_shape_to_params('foo', 'bar')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': {'bar': 'baz'}
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo={",
            "        'bar': 'baz',",
            "    },",
            ")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="152" endline="177" pcid="4209">

    def test_list_example(self):
        self.add_shape({
            "foo": {
                "type": "list",
                "member": {"shape": "String"}
            }
        })
        self.add_shape_to_params('foo', 'foo')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': ['bar']
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo=[",
            "        'bar',",
            "    ],",
            ")"
        ])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_sharedexample.py" startline="230" endline="259" pcid="4213">

    def test_map_example(self):
        self.add_shape({
            "baz": {"type": "string"}
        })
        self.add_shape({
            'bar': {
                "type": "map",
                "key": {"shape": "baz"},
                "value": {"shape": "baz"}
            }
        })
        self.add_shape_to_params('foo', 'bar')
        self.documenter.document_shared_example(
            example={
                'input': {
                    'foo': {'bar': 'baz'}
                }
            },
            prefix='foo.bar',
            section=self.doc_structure,
            operation_model=self.operation_model
        )
        self.assert_contains_lines_in_order([
            "foo.bar(",
            "    foo={",
            "        'bar': 'baz',",
            "    },",
            ")"
        ])
</source>
</class>

<class classid="195" nclones="4" nlines="10" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_docstringparser.py" startline="187" endline="198" pcid="4248">
    def test_write_strips_nested_white_space(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)
        self.doc.handle_data.assert_called_once_with('foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_docstringparser.py" startline="187" endline="198" pcid="9181">
    def test_write_strips_nested_white_space(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)
        self.doc.handle_data.assert_called_once_with('foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_docstringparser.py" startline="199" endline="212" pcid="9182">
    def test_write_only_strips_until_text_is_found(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child_2.add_child(parser.DataNode(' '))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)

        calls = [mock.call('foo'), mock.call(' ')]
        self.doc.handle_data.assert_has_calls(calls)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_docstringparser.py" startline="199" endline="212" pcid="4249">
    def test_write_only_strips_until_text_is_found(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child_2.add_child(parser.DataNode(' '))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)

        calls = [mock.call('foo'), mock.call(' ')]
        self.doc.handle_data.assert_has_calls(calls)
</source>
</class>

<class classid="196" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_style.py" startline="31" endline="44" pcid="4250">
    def test_spaces(self):
        style = ReSTStyle(None, 4)
        self.assertEqual(style.spaces(), '')
        style.indent()
        self.assertEqual(style.spaces(), '    ')
        style.indent()
        self.assertEqual(style.spaces(), '        ')
        style.dedent()
        self.assertEqual(style.spaces(), '    ')
        style.dedent()
        self.assertEqual(style.spaces(), '')
        style.dedent()
        self.assertEqual(style.spaces(), '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_style.py" startline="30" endline="43" pcid="9183">
    def test_spaces(self):
        style = ReSTStyle(None, 4)
        self.assertEqual(style.spaces(), '')
        style.indent()
        self.assertEqual(style.spaces(), '    ')
        style.indent()
        self.assertEqual(style.spaces(), '        ')
        style.dedent()
        self.assertEqual(style.spaces(), '    ')
        style.dedent()
        self.assertEqual(style.spaces(), '')
        style.dedent()
        self.assertEqual(style.spaces(), '')

</source>
</class>

<class classid="197" nclones="2" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_style.py" startline="307" endline="330" pcid="4288">
    def test_non_top_level_lists_are_indented(self):
        style = ReSTStyle(ReSTDocument())

        # Start the top level list
        style.start_ul()

        # Write one list element
        style.start_li()
        style.doc.handle_data('foo')
        style.end_li()

        self.assertEqual(style.doc.getvalue(), six.b("\n\n\n* foo\n"))

        # Start the nested list
        style.start_ul()

        # Write an element to the nested list
        style.start_li()
        style.doc.handle_data('bar')
        style.end_li()

        self.assertEqual(style.doc.getvalue(),
                         six.b("\n\n\n* foo\n\n\n  \n  * bar\n  "))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_style.py" startline="314" endline="337" pcid="9221">
    def test_non_top_level_lists_are_indented(self):
        style = ReSTStyle(ReSTDocument())

        # Start the top level list
        style.start_ul()

        # Write one list element
        style.start_li()
        style.doc.handle_data('foo')
        style.end_li()

        self.assertEqual(style.doc.getvalue(), b"\n\n\n* foo\n")

        # Start the nested list
        style.start_ul()

        # Write an element to the nested list
        style.start_li()
        style.doc.handle_data('bar')
        style.end_li()

        self.assertEqual(style.doc.getvalue(),
                         b"\n\n\n* foo\n\n\n  \n  * bar\n  ")

</source>
</class>

<class classid="198" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_document.py" startline="72" endline="93" pcid="4301">
    def test_add_new_section(self):
        section = self.doc_structure.add_new_section('mysection')

        # Ensure the name of the section is correct
        self.assertEqual(section.name, 'mysection')

        # Ensure we can get the section.
        self.assertEqual(
            self.doc_structure.get_section('mysection'), section)

        # Ensure the path is correct
        self.assertEqual(section.path, ['mydoc', 'mysection'])

        # Ensure some of the necessary attributes are passed to the
        # the section.
        self.assertEqual(section.style.indentation,
                         self.doc_structure.style.indentation)
        self.assertEqual(section.translation_map,
                         self.doc_structure.translation_map)
        self.assertEqual(section.hrefs,
                         self.doc_structure.hrefs)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_document.py" startline="71" endline="92" pcid="9234">
    def test_add_new_section(self):
        section = self.doc_structure.add_new_section('mysection')

        # Ensure the name of the section is correct
        self.assertEqual(section.name, 'mysection')

        # Ensure we can get the section.
        self.assertEqual(
            self.doc_structure.get_section('mysection'), section)

        # Ensure the path is correct
        self.assertEqual(section.path, ['mydoc', 'mysection'])

        # Ensure some of the necessary attributes are passed to the
        # the section.
        self.assertEqual(section.style.indentation,
                         self.doc_structure.style.indentation)
        self.assertEqual(section.translation_map,
                         self.doc_structure.translation_map)
        self.assertEqual(section.hrefs,
                         self.doc_structure.hrefs)

</source>
</class>

<class classid="199" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_document.py" startline="111" endline="123" pcid="4304">
    def test_flush_structure(self):
        section = self.doc_structure.add_new_section('mysection')
        subsection = section.add_new_section('mysubsection')
        self.doc_structure.writeln('1')
        section.writeln('2')
        subsection.writeln('3')
        second_section = self.doc_structure.add_new_section('mysection2')
        second_section.writeln('4')
        contents = self.doc_structure.flush_structure()

        # Ensure the contents were flushed out correctly
        self.assertEqual(contents, six.b('1\n2\n3\n4\n'))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_document.py" startline="110" endline="122" pcid="9237">
    def test_flush_structure(self):
        section = self.doc_structure.add_new_section('mysection')
        subsection = section.add_new_section('mysubsection')
        self.doc_structure.writeln('1')
        section.writeln('2')
        subsection.writeln('3')
        second_section = self.doc_structure.add_new_section('mysection2')
        second_section.writeln('4')
        contents = self.doc_structure.flush_structure()

        # Ensure the contents were flushed out correctly
        self.assertEqual(contents, b'1\n2\n3\n4\n')

</source>
</class>

<class classid="200" nclones="2" nlines="12" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_method.py" startline="311" endline="322" pcid="4340">
    def test_streaming_body_in_output(self):
        self.add_shape_to_params('Body', 'Blob')
        self.json_model['shapes']['Blob'] = {'type': 'blob'}
        self.json_model['shapes']['SampleOperationInputOutput']['payload'] = \
            'Body'
        document_model_driven_method(
            self.doc_structure, 'foo', self.operation_model,
            event_emitter=self.event_emitter,
            method_description='This describes the foo method.',
            example_prefix='response = client.foo'
        )
        self.assert_contains_line('**Body** (:class:`.StreamingBody`)')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_method.py" startline="366" endline="382" pcid="4342">
        ])

    def test_streaming_body_in_input(self):
        del self.json_model['operations']['SampleOperation']['output']
        self.add_shape_to_params('Body', 'Blob')
        self.json_model['shapes']['Blob'] = {'type': 'blob'}
        self.json_model['shapes']['SampleOperationInputOutput']['payload'] = \
            'Body'
        document_model_driven_method(
            self.doc_structure, 'foo', self.operation_model,
            event_emitter=self.event_emitter,
            method_description='This describes the foo method.',
            example_prefix='response = client.foo'
        )
        # The line in the example
        self.assert_contains_line('Body=b\'bytes\'|file')
        # The line in the parameter description
</source>
</class>

<class classid="201" nclones="2" nlines="22" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_response.py" startline="218" endline="242" pcid="4377">
    def test_get_response_streaming_ng(self):
        headers = {
            'content-type': 'application/xml',
            'date': 'Sat, 08 Mar 2014 12:05:44 GMT',
            'server': 'AmazonS3',
            'transfer-encoding': 'chunked',
            'x-amz-id-2': 'AAAAAAAAAAAAAAAAAAA',
            'x-amz-request-id': 'XXXXXXXXXXXXXXXX'}
        raw = FakeRawResponse(XMLBODY1)
        http_response = AWSResponse(None, 403, headers, raw)

        session = botocore.session.get_session()
        service_model = session.get_service_model('s3')
        operation_model = service_model.operation_model('GetObject')

        self.assert_response_with_subset_metadata(
            response.get_response(operation_model, http_response)[1],
            {'Error': {'Message': 'Access Denied',
                       'Code': 'AccessDenied'},
             'ResponseMetadata': {'HostId': 'AAAAAAAAAAAAAAAAAAA',
                                  'RequestId': 'XXXXXXXXXXXXXXXX',
                                  'HTTPStatusCode': 403},
             }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_response.py" startline="243" endline="271" pcid="4378">
    def test_get_response_nonstreaming_ok(self):
        headers = {
            'content-type': 'application/xml',
            'date': 'Sun, 09 Mar 2014 02:55:43 GMT',
            'server': 'AmazonS3',
            'transfer-encoding': 'chunked',
            'x-amz-id-2': 'AAAAAAAAAAAAAAAAAAA',
            'x-amz-request-id': 'XXXXXXXXXXXXXXXX'}
        raw = FakeRawResponse(XMLBODY1)
        http_response = AWSResponse(None, 403, headers, raw)

        session = botocore.session.get_session()
        service_model = session.get_service_model('s3')
        operation_model = service_model.operation_model('ListObjects')

        self.assert_response_with_subset_metadata(
            response.get_response(operation_model, http_response)[1],
            {
                'ResponseMetadata': {
                    'RequestId': 'XXXXXXXXXXXXXXXX',
                    'HostId': 'AAAAAAAAAAAAAAAAAAA',
                    'HTTPStatusCode': 403
                },
                'Error': {
                    'Message': 'Access Denied',
                    'Code': 'AccessDenied'
                }
            })

</source>
</class>

<class classid="202" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/response_parsing/test_response_parsing.py" startline="92" endline="108" pcid="4381">
def _convert_bytes_to_str(parsed):
    if isinstance(parsed, dict):
        new_dict = {}
        for key, value in parsed.items():
            new_dict[key] = _convert_bytes_to_str(value)
        return new_dict
    elif isinstance(parsed, bytes):
        return parsed.decode('utf-8')
    elif isinstance(parsed, list):
        new_list = []
        for item in parsed:
            new_list.append(_convert_bytes_to_str(item))
        return new_list
    else:
        return parsed


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_protocols.py" startline="269" endline="285" pcid="6188">


def _convert_bytes_to_str(parsed):
    if isinstance(parsed, dict):
        new_dict = {}
        for key, value in parsed.items():
            new_dict[key] = _convert_bytes_to_str(value)
        return new_dict
    elif isinstance(parsed, bytes):
        return parsed.decode('utf-8')
    elif isinstance(parsed, list):
        new_list = []
        for item in parsed:
            new_list.append(_convert_bytes_to_str(item))
        return new_list
    else:
        return parsed
</source>
</class>

<class classid="203" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="72" endline="85" pcid="4394">
    def test_fields(self):
        request = AWSRequest()
        request.url = '/'
        request.method = 'POST'
        request.data = {'Foo': u'\u2713'}
        self.signer.add_auth(request)
        self.assertEqual(request.data['AWSAccessKeyId'], 'foo')
        self.assertEqual(request.data['Foo'], u'\u2713')
        self.assertEqual(request.data['Timestamp'], '2014-06-20T08:40:23Z')
        self.assertEqual(request.data['Signature'],
                         u'Tiecw+t51tok4dTT8B4bg47zxHEM/KcD55f2/x6K22o=')
        self.assertEqual(request.data['SignatureMethod'], 'HmacSHA256')
        self.assertEqual(request.data['SignatureVersion'], '2')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="100" endline="114" pcid="4396">
    def test_get(self):
        request = AWSRequest()
        request.url = '/'
        request.method = 'GET'
        request.params = {'Foo': u'\u2713'}
        self.signer.add_auth(request)
        self.assertEqual(request.params['AWSAccessKeyId'], 'foo')
        self.assertEqual(request.params['Foo'], u'\u2713')
        self.assertEqual(request.params['Timestamp'], '2014-06-20T08:40:23Z')
        self.assertEqual(request.params['Signature'],
                         u'Un97klqZCONP65bA1+Iv4H3AcB2I40I4DBvw5ZERFPw=')
        self.assertEqual(request.params['SignatureMethod'], 'HmacSHA256')
        self.assertEqual(request.params['SignatureVersion'], '2')


</source>
</class>

<class classid="204" nclones="2" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="190" endline="200" pcid="4403">
    def test_signature_is_not_normalized(self):
        request = AWSRequest()
        request.url = 'https://s3.amazonaws.com/bucket/foo/./bar/../bar'
        request.method = 'GET'
        credentials = botocore.credentials.Credentials('access_key',
                                                       'secret_key')
        auth = self.AuthClass(credentials, 's3', 'us-east-1')
        auth.add_auth(request)
        self.assertTrue(
            request.headers['Authorization'].startswith('AWS4-HMAC-SHA256'))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="220" endline="230" pcid="4405">
    def _test_blacklist_header(self, header, value):
        request = AWSRequest()
        request.url = 'https://s3.amazonaws.com/bucket/foo'
        request.method = 'PUT'
        request.headers[header] = value
        credentials = botocore.credentials.Credentials('access_key',
                                                       'secret_key')
        auth = self.AuthClass(credentials, 's3', 'us-east-1')
        auth.add_auth(request)
        self.assertNotIn(header, request.headers['Authorization'])

</source>
</class>

<class classid="205" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="635" endline="655" pcid="4446">
    def test_presign_where_body_is_json_bytes(self):
        request = AWSRequest()
        request.method = 'GET'
        request.url = 'https://myservice.us-east-1.amazonaws.com/'
        request.data = b'{"Param": "value"}'
        self.auth.add_auth(request)
        query_string = self.get_parsed_query_string(request)
        expected_query_string = {
            'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
            'X-Amz-Credential': (
                'access_key/20140101/myregion/myservice/aws4_request'),
            'X-Amz-Expires': '60',
            'X-Amz-Date': '20140101T000000Z',
            'X-Amz-Signature': (
                '8e1d372d168d532313ce6df8f64a7dc51d'
                'e6f312a9cfba6e5b345d8a771e839c'),
            'X-Amz-SignedHeaders': 'host',
            'Param': 'value'
        }
        self.assertEqual(query_string, expected_query_string)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="656" endline="676" pcid="4447">
    def test_presign_where_body_is_json_string(self):
        request = AWSRequest()
        request.method = 'GET'
        request.url = 'https://myservice.us-east-1.amazonaws.com/'
        request.data = '{"Param": "value"}'
        self.auth.add_auth(request)
        query_string = self.get_parsed_query_string(request)
        expected_query_string = {
            'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
            'X-Amz-Credential': (
                'access_key/20140101/myregion/myservice/aws4_request'),
            'X-Amz-Expires': '60',
            'X-Amz-Date': '20140101T000000Z',
            'X-Amz-Signature': (
                '8e1d372d168d532313ce6df8f64a7dc51d'
                'e6f312a9cfba6e5b345d8a771e839c'),
            'X-Amz-SignedHeaders': 'host',
            'Param': 'value'
        }
        self.assertEqual(query_string, expected_query_string)

</source>
</class>

<class classid="206" nclones="2" nlines="23" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="739" endline="763" pcid="4452">
    def test_presign_post(self):
        self.auth.add_auth(self.request)
        result_fields = self.request.context['s3-presign-post-fields']
        self.assertEqual(result_fields['x-amz-algorithm'], 'AWS4-HMAC-SHA256')
        self.assertEqual(
            result_fields['x-amz-credential'],
            'access_key/20140101/myregion/myservice/aws4_request')
        self.assertEqual(
            result_fields['x-amz-date'],
            '20140101T000000Z')

        result_policy = json.loads(base64.b64decode(
            result_fields['policy']).decode('utf-8'))
        self.assertEqual(result_policy['expiration'],
                         '2007-12-01T12:00:00.000Z')
        self.assertEqual(
            result_policy['conditions'],
            [{"acl": "public-read"}, {"bucket": "mybucket"},
             ["starts-with", "$key", "mykey"],
             {"x-amz-algorithm": "AWS4-HMAC-SHA256"},
             {"x-amz-credential":
              "access_key/20140101/myregion/myservice/aws4_request"},
             {"x-amz-date": "20140101T000000Z"}])
        self.assertIn('x-amz-signature', result_fields)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/auth/test_signers.py" startline="772" endline="795" pcid="4454">
    def test_empty_fields_and_policy(self):
        self.request = AWSRequest()
        self.request.url = 'https://s3.amazonaws.com/%s' % self.bucket
        self.request.method = 'POST'
        self.auth.add_auth(self.request)

        result_fields = self.request.context['s3-presign-post-fields']
        self.assertEqual(result_fields['x-amz-algorithm'], 'AWS4-HMAC-SHA256')
        self.assertEqual(
            result_fields['x-amz-credential'],
            'access_key/20140101/myregion/myservice/aws4_request')
        self.assertEqual(
            result_fields['x-amz-date'],
            '20140101T000000Z')

        result_policy = json.loads(base64.b64decode(
            result_fields['policy']).decode('utf-8'))
        self.assertEqual(
            result_policy['conditions'],
            [{"x-amz-algorithm": "AWS4-HMAC-SHA256"},
             {"x-amz-credential":
              "access_key/20140101/myregion/myservice/aws4_request"},
             {"x-amz-date": "20140101T000000Z"}])
        self.assertIn('x-amz-signature', result_fields)
</source>
</class>

<class classid="207" nclones="7" nlines="10" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="203" endline="214" pcid="4505">
    def test_apply_request_checksum_handles_invalid_context(self):
        request = self._build_request(b"")
        request["context"]["checksum"] = {
            "request_algorithm": {
                "in": "http-trailer",
                "algorithm": "crc32",
                "name": "x-amz-checksum-crc32",
            }
        }
        with self.assertRaises(FlexibleChecksumError):
            apply_request_checksum(request)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="235" endline="246" pcid="4508">
    def test_apply_request_checksum_flex_header_readable(self):
        request = self._build_request(BytesIO(b""))
        request["context"]["checksum"] = {
            "request_algorithm": {
                "in": "header",
                "algorithm": "crc32",
                "name": "x-amz-checksum-crc32",
            }
        }
        apply_request_checksum(request)
        self.assertIn("x-amz-checksum-crc32", request["headers"])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="247" endline="260" pcid="4509">
    def test_apply_request_checksum_flex_header_explicit_digest(self):
        request = self._build_request(b"")
        request["context"]["checksum"] = {
            "request_algorithm": {
                "in": "header",
                "algorithm": "crc32",
                "name": "x-amz-checksum-crc32",
            }
        }
        request["headers"]["x-amz-checksum-crc32"] = "foo"
        apply_request_checksum(request)
        # The checksum should not have been modified
        self.assertEqual(request["headers"]["x-amz-checksum-crc32"], "foo")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="223" endline="234" pcid="4507">
    def test_apply_request_checksum_flex_header_bytes(self):
        request = self._build_request(b"")
        request["context"]["checksum"] = {
            "request_algorithm": {
                "in": "header",
                "algorithm": "crc32",
                "name": "x-amz-checksum-crc32",
            }
        }
        apply_request_checksum(request)
        self.assertIn("x-amz-checksum-crc32", request["headers"])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="261" endline="273" pcid="4510">
    def test_apply_request_checksum_flex_trailer_bytes(self):
        request = self._build_request(b"")
        request["context"]["checksum"] = {
            "request_algorithm": {
                "in": "trailer",
                "algorithm": "crc32",
                "name": "x-amz-checksum-crc32",
            }
        }
        apply_request_checksum(request)
        self.assertNotIn("x-amz-checksum-crc32", request["headers"])
        self.assertIsInstance(request["body"], AwsChunkedWrapper)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="274" endline="286" pcid="4511">
    def test_apply_request_checksum_flex_trailer_readable(self):
        request = self._build_request(BytesIO(b""))
        request["context"]["checksum"] = {
            "request_algorithm": {
                "in": "trailer",
                "algorithm": "crc32",
                "name": "x-amz-checksum-crc32",
            }
        }
        apply_request_checksum(request)
        self.assertNotIn("x-amz-checksum-crc32", request["headers"])
        self.assertIsInstance(request["body"], AwsChunkedWrapper)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="287" endline="302" pcid="4512">
    def test_apply_request_checksum_flex_header_trailer_explicit_digest(self):
        request = self._build_request(b"")
        request["context"]["checksum"] = {
            "request_algorithm": {
                "in": "trailer",
                "algorithm": "crc32",
                "name": "x-amz-checksum-crc32",
            }
        }
        request["headers"]["x-amz-checksum-crc32"] = "foo"
        apply_request_checksum(request)
        # The checksum should not have been modified
        self.assertEqual(request["headers"]["x-amz-checksum-crc32"], "foo")
        # The body should not have been wrapped
        self.assertIsInstance(request["body"], bytes)

</source>
</class>

<class classid="208" nclones="2" nlines="34" similarity="74">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="339" endline="376" pcid="4515">
    def test_handle_checksum_body_checksum(self):
        context = {"checksum": {"response_algorithms": ["sha1", "crc32"]}}
        headers = {"x-amz-checksum-crc32": "DUoRhQ=="}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context,
        )
        operation_model = self._make_operation_model()
        handle_checksum_body(
            http_response, response_dict, context, operation_model,
        )
        body = response_dict["body"]
        self.assertEqual(body, b"hello world")
        algorithm = response_dict["context"]["checksum"]["response_algorithm"]
        self.assertEqual(algorithm, "crc32")

        headers = {"x-amz-checksum-crc32": "WrOonG=="}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context,
        )
        with self.assertRaises(FlexibleChecksumError):
            handle_checksum_body(
                http_response, response_dict, context, operation_model,
            )

        # This header should not be checked, we won't calculate a checksum
        # but a proper body should still come out at the end
        headers = {"x-amz-checksum-foo": "FOO=="}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context,
        )
        handle_checksum_body(
            http_response, response_dict, context, operation_model,
        )
        body = response_dict["body"]
        self.assertEqual(body, b"hello world")
        algorithm = response_dict["context"]["checksum"]["response_algorithm"]
        self.assertEqual(algorithm, "crc32")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="377" endline="416" pcid="4516">
    def test_handle_checksum_body_checksum_streaming(self):
        context = {"checksum": {"response_algorithms": ["sha1", "crc32"]}}
        headers = {"x-amz-checksum-crc32": "DUoRhQ=="}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context, streaming=True,
        )
        operation_model = self._make_operation_model(streaming_output=True)
        handle_checksum_body(
            http_response, response_dict, context, operation_model,
        )
        body = response_dict["body"]
        self.assertEqual(body.read(), b"hello world")
        algorithm = response_dict["context"]["checksum"]["response_algorithm"]
        self.assertEqual(algorithm, "crc32")

        headers = {"x-amz-checksum-crc32": "WrOonG=="}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context, streaming=True,
        )
        handle_checksum_body(
            http_response, response_dict, context, operation_model,
        )
        body = response_dict["body"]
        with self.assertRaises(FlexibleChecksumError):
            body.read()

        # This header should not be checked, we won't calculate a checksum
        # but a proper body should still come out at the end
        headers = {"x-amz-checksum-foo": "FOOO=="}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context, streaming=True,
        )
        handle_checksum_body(
            http_response, response_dict, context, operation_model,
        )
        body = response_dict["body"]
        self.assertEqual(body.read(), b"hello world")
        algorithm = response_dict["context"]["checksum"]["response_algorithm"]
        self.assertEqual(algorithm, "crc32")

</source>
</class>

<class classid="209" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="417" endline="432" pcid="4517">
    def test_handle_checksum_body_checksum_skip_non_streaming(self):
        context = {"checksum": {"response_algorithms": ["sha1", "crc32"]}}
        # S3 will return checksums over the checksums of parts which are a
        # special case that end with -#. These cannot be validated and are
        # instead skipped
        headers = {"x-amz-checksum-crc32": "FOOO==-123"}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context,
        )
        operation_model = self._make_operation_model()
        handle_checksum_body(
            http_response, response_dict, context, operation_model,
        )
        body = response_dict["body"]
        self.assertEqual(body, b"hello world")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="433" endline="449" pcid="4518">
    def test_handle_checksum_body_checksum_skip_streaming(self):
        context = {"checksum": {"response_algorithms": ["sha1", "crc32"]}}
        # S3 will return checksums over the checksums of parts which are a
        # special case that end with -#. These cannot be validated and are
        # instead skipped
        headers = {"x-amz-checksum-crc32": "FOOO==-123"}
        http_response, response_dict = self._make_http_response(
            b"hello world", headers=headers, context=context, streaming=True,
        )
        operation_model = self._make_operation_model(streaming_output=True)
        handle_checksum_body(
            http_response, response_dict, context, operation_model,
        )
        body = response_dict["body"]
        self.assertEqual(body.read(), b"hello world")


</source>
</class>

<class classid="210" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="499" endline="510" pcid="4523">
    def test_single_chunk_body_with_checksum(self):
        wrapper = AwsChunkedWrapper(
            BytesIO(b"hello world"),
            checksum_cls=Crc32Checksum,
            checksum_name="checksum",
        )
        body = wrapper.read()
        expected = (
            b"b\r\n" b"hello world\r\n" b"0\r\n" b"checksum:DUoRhQ==\r\n\r\n"
        )
        self.assertEqual(body, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_httpchecksum.py" startline="511" endline="530" pcid="4524">
    def test_multi_chunk_body_with_checksum(self):
        wrapper = AwsChunkedWrapper(
            BytesIO(b"hello world"),
            chunk_size=5,
            checksum_cls=Crc32Checksum,
            checksum_name="checksum",
        )
        body = wrapper.read()
        expected = (
            b"5\r\n"
            b"hello\r\n"
            b"5\r\n"
            b" worl\r\n"
            b"1\r\n"
            b"d\r\n"
            b"0\r\n"
            b"checksum:DUoRhQ==\r\n\r\n"
        )
        self.assertEqual(body, expected)

</source>
</class>

<class classid="211" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="20" endline="31" pcid="4563">
    def test_only_retries_error_for_sts(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('s3'),
            parsed_response={
                'Error': {'Code': 'IDPCommunicationError',
                          'Message': 'message'}},
            http_response=AWSResponse(
                status_code=400, raw=None, headers={},
                url='https://foo'),
            caught_exception=None, )
        self.assertFalse(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="32" endline="43" pcid="4564">
    def test_can_retry_idp_communication_error(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('sts'),
            parsed_response={
                'Error': {'Code': 'IDPCommunicationError',
                          'Message': 'message'}},
            http_response=AWSResponse(
                status_code=400, raw=None, headers={},
                url='https://foo'),
            caught_exception=None, )
        self.assertTrue(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="44" endline="56" pcid="4565">
    def test_not_idp_communication_error(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('sts'),
            parsed_response={
                'Error': {'Code': 'NotIDPCommunicationError',
                          'Message': 'message'}},
            http_response=AWSResponse(
                status_code=400, raw=None, headers={},
                url='https://foo'),
            caught_exception=None, )
        self.assertFalse(self.checker.is_retryable(context))


</source>
</class>

<class classid="212" nclones="4" nlines="13" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="66" endline="79" pcid="4568">
    def test_checksum_not_in_header(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('dynamodb'),
            parsed_response={
                'Anything': ["foo"],
            },
            http_response=AWSResponse(
                status_code=200, raw=self.raw_stream(b'foo'),
                headers={},
                url='https://foo'),
            caught_exception=None,
        )
        self.assertFalse(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="108" endline="120" pcid="4571">
    def test_checksum_check_only_for_dynamodb(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('s3'),
            parsed_response={
                'Anything': ["foo"],
            },
            http_response=AWSResponse(
                status_code=200, raw=self.raw_stream(b'foo'),
                headers={'x-amz-crc32': '2356372768'},
                url='https://foo'),
            caught_exception=None
        )
        self.assertFalse(self.checker.is_retryable(context))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="94" endline="107" pcid="4570">
    def test_checksum_not_matches(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('dynamodb'),
            parsed_response={
                'Anything': ["foo"],
            },
            http_response=AWSResponse(
                status_code=200, raw=self.raw_stream(b'foo'),
                headers={'x-amz-crc32': '2356372768'},
                url='https://foo'),
            caught_exception=None
        )
        self.assertTrue(self.checker.is_retryable(context))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/retries/test_special.py" startline="80" endline="93" pcid="4569">
    def test_checksum_matches(self):
        context = standard.RetryContext(
            attempt_number=1, operation_model=create_fake_op_model('dynamodb'),
            parsed_response={
                'Anything': ["foo"],
            },
            http_response=AWSResponse(
                status_code=200, raw=self.raw_stream(b'foo'),
                headers={'x-amz-crc32': '2356372769'},
                url='https://foo'),
            caught_exception=None
        )
        self.assertFalse(self.checker.is_retryable(context))

</source>
</class>

<class classid="213" nclones="3" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_s3_addressing.py" startline="96" endline="113" pcid="4658">
    def test_put_object_dns_name_non_classic(self):
        self.region_name = 'us-west-2'
        file_path = os.path.join(os.path.dirname(__file__),
                                 'put_object_data')
        with open(file_path, 'rb') as fp:
            params = {
                'Bucket': 'my.valid.name',
                'Key': 'mykeyname',
                'Body': fp,
                'ACL': 'public-read',
                'ContentLanguage': 'piglatin',
                'ContentType': 'text/plain'
            }
            prepared_request = self.get_prepared_request('put_object', params)
            self.assertEqual(
                prepared_request.url,
                'https://s3.us-west-2.amazonaws.com/my.valid.name/mykeyname')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_s3_addressing.py" startline="114" endline="131" pcid="4659">
    def test_put_object_dns_name_classic(self):
        self.region_name = 'us-east-1'
        file_path = os.path.join(os.path.dirname(__file__),
                                 'put_object_data')
        with open(file_path, 'rb') as fp:
            params = {
                'Bucket': 'my.valid.name',
                'Key': 'mykeyname',
                'Body': fp,
                'ACL': 'public-read',
                'ContentLanguage': 'piglatin',
                'ContentType': 'text/plain'
            }
            prepared_request = self.get_prepared_request('put_object', params)
            self.assertEqual(
                prepared_request.url,
                'https://s3.us-east-1.amazonaws.com/my.valid.name/mykeyname')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_s3_addressing.py" startline="132" endline="149" pcid="4660">
    def test_put_object_dns_name_single_letter_non_classic(self):
        self.region_name = 'us-west-2'
        file_path = os.path.join(os.path.dirname(__file__),
                                 'put_object_data')
        with open(file_path, 'rb') as fp:
            params = {
                'Bucket': 'a.valid.name',
                'Key': 'mykeyname',
                'Body': fp,
                'ACL': 'public-read',
                'ContentLanguage': 'piglatin',
                'ContentType': 'text/plain'
            }
            prepared_request = self.get_prepared_request('put_object', params)
            self.assertEqual(
                prepared_request.url,
                'https://s3.us-west-2.amazonaws.com/a.valid.name/mykeyname')

</source>
</class>

<class classid="214" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="40" endline="55" pcid="4688">
    def test_validate_required_params(self):
        self.assert_has_validation_errors(
            given_shapes={
                'Input': {
                    'type': 'structure',
                    'required': ['A', 'B'],
                    'members': {
                        'A': {'shape': 'StringType'},
                        'B': {'shape': 'StringType'}
                    }
                },
                'StringType': {'type': 'string'}
            },
            input_params={'A': 'foo'},
            errors=['Missing required parameter'])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="80" endline="95" pcid="4690">
    def test_validate_unknown_param(self):
        self.assert_has_validation_errors(
            given_shapes={
                'Input': {
                    'type': 'structure',
                    'required': ['A'],
                    'members': {
                        'A': {'shape': 'StringType'},
                    }
                },
                'StringType': {'type': 'string'}
            },
            input_params={'A': 'foo', 'B': 'bar'},
            errors=['Unknown parameter'])


</source>
</class>

<class classid="215" nclones="2" nlines="17" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="97" endline="119" pcid="4691">
    def test_accepts_jsonvalue_string(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'json': {
                        'shape': 'StrType',
                        'jsonvalue': True,
                        'location': 'header',
                        'locationName': 'header-name'
                    }
                }
            },
            'StrType': {'type': 'string'}
        }
        errors = self.get_validation_error_message(
            given_shapes=self.shapes,
            input_params={
                'json': {'data': [1, 2.3, '3'], 'unicode': u'\u2713'}
            })
        error_msg = errors.generate_report()
        self.assertEqual(error_msg, '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="120" endline="145" pcid="4692">
    def test_validate_jsonvalue_string(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'json': {
                        'shape': 'StrType',
                        'jsonvalue': True,
                        'location': 'header',
                        'locationName': 'header-name'
                    }
                }
            },
            'StrType': {'type': 'string'}
        }

        self.assert_has_validation_errors(
            given_shapes=self.shapes,
            input_params={
                'json': {'date': datetime(2017, 4, 27, 0, 0)}
            },
            errors=[
                ('Invalid parameter json must be json serializable: ')
            ])


</source>
</class>

<class classid="216" nclones="4" nlines="22" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="209" endline="238" pcid="4695">
    def test_accepts_one_member(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'taggedUnion': {
                        'shape': 'TaggedUnionType',
                    }
                }
            },
            'TaggedUnionType': {
                'type': 'structure',
                'union': True,
                'members': {
                    'Foo': {'shape': 'StringType'},
                    'Bar': {'shape': 'StringType'},
                }
            },
            'StringType': {'type': 'string'}
        }
        errors = self.get_validation_error_message(
            given_shapes=self.shapes,
            input_params={
                'taggedUnion': {'Foo': "mystring"}
            }
        )
        error_msg = errors.generate_report()
        self.assertEqual(error_msg, '')


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="302" endline="331" pcid="4698">
    def test_validate_structure_is_not_empty(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'taggedUnion': {
                        'shape': 'TaggedUnionType',
                    }
                }
            },
            'TaggedUnionType': {
                'type': 'structure',
                'union': True,
                'members': {
                    'Foo': {'shape': 'StringType'},
                    'Bar': {'shape': 'StringType'},
                }
            },
            'StringType': {'type': 'string'}
        }
        errors = self.get_validation_error_message(
            given_shapes=self.shapes,
            input_params={
                'taggedUnion': {}
            }
        )
        error_msg = errors.generate_report()
        self.assertIn('Must set one of the following keys', error_msg)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="273" endline="301" pcid="4697">
    def test_validate_known_member_is_set(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'taggedUnion': {
                        'shape': 'TaggedUnionType',
                    }
                }
            },
            'TaggedUnionType': {
                'type': 'structure',
                'union': True,
                'members': {
                    'Foo': {'shape': 'StringType'},
                    'Bar': {'shape': 'StringType'},
                }
            },
            'StringType': {'type': 'string'}
        }
        errors = self.get_validation_error_message(
            given_shapes=self.shapes,
            input_params={
                'taggedUnion': {'unknown': "mystring"}
            }
        )
        error_msg = errors.generate_report()
        self.assertIn('Unknown parameter in taggedUnion', error_msg)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="239" endline="272" pcid="4696">
    def test_validate_one_member_is_set(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'taggedUnion': {
                        'shape': 'TaggedUnionType',
                    }
                }
            },
            'TaggedUnionType': {
                'type': 'structure',
                'union': True,
                'members': {
                    'Foo': {'shape': 'StringType'},
                    'Bar': {'shape': 'StringType'},
                }
            },
            'StringType': {'type': 'string'}
        }
        errors = self.get_validation_error_message(
            given_shapes=self.shapes,
            input_params={
                'taggedUnion': {'Foo': "mystring",
                                'Bar': "mystring2"
                                }
            }
        )
        error_msg = errors.generate_report()
        self.assertIn(
            'Invalid number of parameters set for tagged union structure',
            error_msg
        )

</source>
</class>

<class classid="217" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="590" endline="604" pcid="4716">
    def setUp(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'Float': {'shape': 'FloatType'},
                }
            },
            'FloatType': {
                'type': 'float',
                'min': 2,
                'max': 5,
            },
        }

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_validate.py" startline="636" endline="650" pcid="4720">
    def setUp(self):
        self.shapes = {
            'Input': {
                'type': 'structure',
                'members': {
                    'Blob': {'shape': 'BlobType'},
                }
            },
            'BlobType': {
                'type': 'blob',
                'min': 2,
                'max': 5,
            },
        }

</source>
</class>

<class classid="218" nclones="2" nlines="17" similarity="77">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="553" endline="572" pcid="4808">
    def test_generate_scalars(self):
        self.assert_skeleton_from_model_is(
            model={
                'A': {'type': 'string'},
                'B': {'type': 'integer'},
                'C': {'type': 'float'},
                'D': {'type': 'boolean'},
                'E': {'type': 'timestamp'},
                'F': {'type': 'double'},
            },
            generated_skeleton={
                'A': '',
                'B': 0,
                'C': 0.0,
                'D': True,
                'E': datetime.datetime(1970, 1, 1, 0, 0, 0),
                'F': 0.0,
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="573" endline="589" pcid="4809">
    def test_will_use_member_names_for_string_values(self):
        self.arg_generator = ArgumentGenerator(use_member_names=True)
        self.assert_skeleton_from_model_is(
            model={
                'A': {'type': 'string'},
                'B': {'type': 'integer'},
                'C': {'type': 'float'},
                'D': {'type': 'boolean'},
            },
            generated_skeleton={
                'A': 'A',
                'B': 0,
                'C': 0.0,
                'D': True,
            }
        )

</source>
</class>

<class classid="219" nclones="10" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="794" endline="807" pcid="4834">
    def test_fix_s3_host_initial(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://s3-us-west-2.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.s3-us-west-2.amazonaws.com/key.txt')
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="876" endline="889" pcid="4839">
    def test_switch_to_virtual_host_style(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.foo.amazonaws.com/key.txt')
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="916" endline="936" pcid="4842">
    def test_fix_s3_host_only_applied_once(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # Calling the handler again should not affect the end result:
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.foo.amazonaws.com/key.txt')
        # This was a bug previously.  We want to make sure that
        # calling fix_s3_host() again does not alter the auth_path.
        # Otherwise we'll get signature errors.
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="858" endline="874" pcid="4838">
    def test_no_endpoint_url_uses_request_url(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://s3-us-west-2.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name,
            # A value of None means use the url in the current request.
            default_endpoint_url=None,
        )
        self.assertEqual(request.url,
                         'https://bucket.s3-us-west-2.amazonaws.com/key.txt')


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="890" endline="903" pcid="4840">
    def test_uses_default_endpoint(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name, default_endpoint_url='s3.amazonaws.com')
        self.assertEqual(request.url,
                         'https://bucket.s3.amazonaws.com/key.txt')
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="904" endline="915" pcid="4841">
    def test_throws_invalid_dns_name_error(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/mybucket.foo/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        with self.assertRaises(InvalidDNSNameError):
            switch_to_virtual_host_style(
                request=request, signature_version=signature_version,
                region_name=region_name)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="844" endline="857" pcid="4837">
    def test_can_provide_default_endpoint_url(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://s3-us-west-2.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name,
            default_endpoint_url='foo.s3.amazonaws.com')
        self.assertEqual(request.url,
                         'https://bucket.foo.s3.amazonaws.com/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="937" endline="949" pcid="4843">
    def test_virtual_host_style_for_make_bucket(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/bucket'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.foo.amazonaws.com/')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="808" endline="828" pcid="4835">
    def test_fix_s3_host_only_applied_once(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://s3.us-west-2.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # Calling the handler again should not affect the end result:
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        self.assertEqual(request.url,
                         'https://bucket.s3.us-west-2.amazonaws.com/key.txt')
        # This was a bug previously.  We want to make sure that
        # calling fix_s3_host() again does not alter the auth_path.
        # Otherwise we'll get signature errors.
        self.assertEqual(request.auth_path, '/bucket/key.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="980" endline="993" pcid="4846">
    def test_is_unaffected_by_sigv4(self):
        request = AWSRequest(
            method='PUT', headers={},
            url='https://foo.amazonaws.com/bucket/key.txt'
        )
        region_name = 'us-west-2'
        signature_version = 's3v4'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name, default_endpoint_url='s3.amazonaws.com')
        self.assertEqual(request.url,
                         'https://bucket.s3.amazonaws.com/key.txt')


</source>
</class>

<class classid="220" nclones="3" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="829" endline="843" pcid="4836">
    def test_dns_style_not_used_for_get_bucket_location(self):
        original_url = 'https://s3-us-west-2.amazonaws.com/bucket?location'
        request = AWSRequest(
            method='GET', headers={},
            url=original_url,
        )
        signature_version = 's3'
        region_name = 'us-west-2'
        fix_s3_host(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # The request url should not have been modified because this is
        # a request for GetBucketLocation.
        self.assertEqual(request.url, original_url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="950" endline="964" pcid="4844">
    def test_virtual_host_style_not_used_for_get_bucket_location(self):
        original_url = 'https://foo.amazonaws.com/bucket?location'
        request = AWSRequest(
            method='GET', headers={},
            url=original_url,
        )
        signature_version = 's3'
        region_name = 'us-west-2'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # The request url should not have been modified because this is
        # a request for GetBucketLocation.
        self.assertEqual(request.url, original_url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="965" endline="979" pcid="4845">
    def test_virtual_host_style_not_used_for_list_buckets(self):
        original_url = 'https://foo.amazonaws.com/'
        request = AWSRequest(
            method='GET', headers={},
            url=original_url,
        )
        signature_version = 's3'
        region_name = 'us-west-2'
        switch_to_virtual_host_style(
            request=request, signature_version=signature_version,
            region_name=region_name)
        # The request url should not have been modified because this is
        # a request for GetBucketLocation.
        self.assertEqual(request.url, original_url)

</source>
</class>

<class classid="221" nclones="2" nlines="16" similarity="82">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1560" endline="1582" pcid="4906">
    def test_redirects_301(self):
        request_dict = {'url': 'https://us-west-2.amazonaws.com/foo',
                        'context': {'signing': {'bucket': 'foo'}}}
        response = (None, {
            'Error': {
                'Code': '301',
                'Message': 'Moved Permanently'
            },
            'ResponseMetadata': {
                'HTTPHeaders': {'x-amz-bucket-region': 'eu-central-1'}
            }
        })

        self.operation.name = 'HeadObject'
        redirect_response = self.redirector.redirect_from_error(
            request_dict, response, self.operation)
        self.assertEqual(redirect_response, 0)

        self.operation.name = 'ListObjects'
        redirect_response = self.redirector.redirect_from_error(
            request_dict, response, self.operation)
        self.assertIsNone(redirect_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1583" endline="1602" pcid="4907">
    def test_redirects_400_head_bucket(self):
        request_dict = {'url': 'https://us-west-2.amazonaws.com/foo',
                        'context': {'signing': {'bucket': 'foo'}}}
        response = (None, {
            'Error': {'Code': '400', 'Message': 'Bad Request'},
            'ResponseMetadata': {
                'HTTPHeaders': {'x-amz-bucket-region': 'eu-central-1'}
            }
        })

        self.operation.name = 'HeadObject'
        redirect_response = self.redirector.redirect_from_error(
            request_dict, response, self.operation)
        self.assertEqual(redirect_response, 0)

        self.operation.name = 'ListObjects'
        redirect_response = self.redirector.redirect_from_error(
            request_dict, response, self.operation)
        self.assertIsNone(redirect_response)

</source>
</class>

<class classid="222" nclones="3" nlines="11" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1631" endline="1644" pcid="4910">
    def test_get_region_from_response(self):
        response = (None, {
            'Error': {
                'Code': 'PermanentRedirect',
                'Endpoint': 'foo.eu-central-1.amazonaws.com',
                'Bucket': 'foo'
            },
            'ResponseMetadata': {
                'HTTPHeaders': {'x-amz-bucket-region': 'eu-central-1'}
            }
        })
        region = self.redirector.get_bucket_region('foo', response)
        self.assertEqual(region, 'eu-central-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1645" endline="1659" pcid="4911">
    def test_get_region_from_response_error_body(self):
        response = (None, {
            'Error': {
                'Code': 'PermanentRedirect',
                'Endpoint': 'foo.eu-central-1.amazonaws.com',
                'Bucket': 'foo',
                'Region': 'eu-central-1'
            },
            'ResponseMetadata': {
                'HTTPHeaders': {}
            }
        })
        region = self.redirector.get_bucket_region('foo', response)
        self.assertEqual(region, 'eu-central-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1660" endline="1675" pcid="4912">
    def test_get_region_from_head_bucket_error(self):
        self.set_client_response_headers(
            {'x-amz-bucket-region': 'eu-central-1'})
        response = (None, {
            'Error': {
                'Code': 'PermanentRedirect',
                'Endpoint': 'foo.eu-central-1.amazonaws.com',
                'Bucket': 'foo',
            },
            'ResponseMetadata': {
                'HTTPHeaders': {}
            }
        })
        region = self.redirector.get_bucket_region('foo', response)
        self.assertEqual(region, 'eu-central-1')

</source>
</class>

<class classid="223" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1733" endline="1745" pcid="4917">
    def test_parse(self):
        arn = 'arn:aws:s3:us-west-2:1023456789012:myresource'
        self.assertEqual(
            self.parser.parse_arn(arn),
            {
                'partition': 'aws',
                'service': 's3',
                'region': 'us-west-2',
                'account': '1023456789012',
                'resource': 'myresource',
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1763" endline="1776" pcid="4920">
    def test_parse_arn_with_empty_elements(self):
        arn = 'arn:aws:s3:::mybucket'
        self.assertEqual(
            self.parser.parse_arn(arn),
            {
                'partition': 'aws',
                'service': 's3',
                'region': '',
                'account': '',
                'resource': 'mybucket',
            }
        )


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1750" endline="1762" pcid="4919">
    def test_parse_arn_with_resource_type(self):
        arn = 'arn:aws:s3:us-west-2:1023456789012:bucket_name:mybucket'
        self.assertEqual(
            self.parser.parse_arn(arn),
            {
                'partition': 'aws',
                'service': 's3',
                'region': 'us-west-2',
                'account': '1023456789012',
                'resource': 'bucket_name:mybucket',
            }
        )

</source>
</class>

<class classid="224" nclones="4" nlines="16" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1789" endline="1808" pcid="4923">
    def test_accesspoint_arn(self):
        params = {
            'Bucket': 'arn:aws:s3:us-west-2:123456789012:accesspoint/endpoint'
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'endpoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'endpoint',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1809" endline="1828" pcid="4924">
    def test_accesspoint_arn_with_colon(self):
        params = {
            'Bucket': 'arn:aws:s3:us-west-2:123456789012:accesspoint:endpoint'
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'endpoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'endpoint',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1837" endline="1860" pcid="4926">
    def test_outpost_arn_with_colon(self):
        params = {
            'Bucket': (
                'arn:aws:s3-outposts:us-west-2:123456789012:outpost:'
                'op-01234567890123456:accesspoint:myaccesspoint'
            )
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'myaccesspoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'myaccesspoint',
                    'outpost_name': 'op-01234567890123456',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3-outposts',
                }
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="1861" endline="1884" pcid="4927">
    def test_outpost_arn_with_slash(self):
        params = {
            'Bucket': (
                'arn:aws:s3-outposts:us-west-2:123456789012:outpost/'
                'op-01234567890123456/accesspoint/myaccesspoint'
            )
        }
        context = {}
        self.arn_handler.handle_arn(params, self.model, context)
        self.assertEqual(params, {'Bucket': 'myaccesspoint'})
        self.assertEqual(
            context,
            {
                's3_accesspoint': {
                    'name': 'myaccesspoint',
                    'outpost_name': 'op-01234567890123456',
                    'account': '123456789012',
                    'region': 'us-west-2',
                    'partition': 'aws',
                    'service': 's3-outposts',
                }
            }
        )

</source>
</class>

<class classid="225" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2267" endline="2278" pcid="4966">
    def test_error_raised_on_non_200_response(self):
        self.set_http_responses_to(
            self.fake_response(status_code=404, body=b'Error not found'),
            self.fake_response(status_code=404, body=b'Error not found'),
            self.fake_response(status_code=404, body=b'Error not found'),
        )
        fetcher = self.create_fetcher()
        with self.assertRaises(MetadataRetrievalError):
            fetcher.retrieve_uri('/foo?id=1')
        # Should have tried up to RETRY_ATTEMPTS.
        self.assertEqual(self.http.send.call_count, fetcher.RETRY_ATTEMPTS)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2279" endline="2294" pcid="4967">
    def test_error_raised_on_no_json_response(self):
        # If the service returns a sucess response but with a body that
        # does not contain JSON, we should still retry up to RETRY_ATTEMPTS,
        # but after exhausting retries we propagate the exception.
        self.set_http_responses_to(
            self.fake_response(status_code=200, body=b'Not JSON'),
            self.fake_response(status_code=200, body=b'Not JSON'),
            self.fake_response(status_code=200, body=b'Not JSON'),
        )
        fetcher = self.create_fetcher()
        with self.assertRaises(MetadataRetrievalError) as e:
            fetcher.retrieve_uri('/foo?id=1')
        self.assertNotIn('Not JSON', str(e.exception))
        # Should have tried up to RETRY_ATTEMPTS.
        self.assertEqual(self.http.send.call_count, fetcher.RETRY_ATTEMPTS)

</source>
</class>

<class classid="226" nclones="5" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2629" endline="2641" pcid="5014">
    def test_metadata_token_not_supported_404(self):
        user_agent = 'my-user-agent'
        self.add_imds_response(b'', status_code=404)
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2668" endline="2680" pcid="5017">
    def test_metadata_token_not_supported_timeout(self):
        user_agent = 'my-user-agent'
        self.add_imds_connection_error(ReadTimeoutError(endpoint_url='url'))
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2681" endline="2693" pcid="5018">
    def test_token_not_supported_exhaust_retries(self):
        user_agent = 'my-user-agent'
        self.add_imds_connection_error(ConnectTimeoutError(endpoint_url='url'))
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2642" endline="2654" pcid="5015">
    def test_metadata_token_not_supported_403(self):
        user_agent = 'my-user-agent'
        self.add_imds_response(b'', status_code=403)
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2655" endline="2667" pcid="5016">
    def test_metadata_token_not_supported_405(self):
        user_agent = 'my-user-agent'
        self.add_imds_response(b'', status_code=405)
        self.add_get_role_name_imds_response()
        self.add_get_credentials_imds_response()

        result = InstanceMetadataFetcher(
            user_agent=user_agent).retrieve_iam_role_credentials()

        for call in self._send.call_args_list[1:]:
            self.assertNotIn('x-aws-ec2-metadata-token', call[0][0].headers)
        self.assertEqual(result, self._expected_creds)

</source>
</class>

<class classid="227" nclones="2" nlines="14" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2854" endline="2870" pcid="5029">
    def test_fetch_token_respects_cached_token(self):
        expected_token = {
            'region': self.sso_region,
            'startUrl': self.start_url,
            'accessToken': 'bar.token.string',
            'expiresAt': self._expires_at(28800),
        }
        self.cache[self.token_cache_key] = expected_token

        with self.stubber:
            token = self.sso_token_fetcher.fetch_token(self.start_url)
        self.assertEqual(token.get('accessToken'), 'bar.token.string')
        self.stubber.assert_no_pending_responses()

        # Ensure the cached token hasn't changed
        self.assertEqual(self.cache[self.token_cache_key], expected_token)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2954" endline="2970" pcid="5034">
    def test_fetch_token_force_refresh(self):
        expected_token = {
            'region': self.sso_region,
            'startUrl': self.start_url,
            'accessToken': 'bar.token.string',
            'expiresAt': self._expires_at(28800),
        }
        self.cache[self.token_cache_key] = expected_token

        self._add_basic_device_auth_flow_responses()
        with self.stubber:
            fetcher = self.sso_token_fetcher
            token = fetcher.fetch_token(self.start_url, force_refresh=True)
        # Ensure we get a new token even though the old one was still valid
        self.assertEqual(token.get('accessToken'), 'foo.token.string')
        self.stubber.assert_no_pending_responses()

</source>
</class>

<class classid="228" nclones="4" nlines="13" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2905" endline="2919" pcid="5031">
    def test_fetch_token_respects_authorization_pending(self):
        self._add_register_client_response()
        self._add_start_device_authorization_response()
        self.stubber.add_client_error(
            'create_token',
            service_error_code='AuthorizationPendingException',
            expected_params=self.token_expected_params,
        )
        self._add_create_token_response()

        with self.stubber:
            token = self.sso_token_fetcher.fetch_token(self.start_url)
        self.assertEqual(token.get('accessToken'), 'foo.token.string')
        self.stubber.assert_no_pending_responses()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2994" endline="3007" pcid="5036">
    def test_fetch_token_authorization_expires(self):
        self._add_register_client_response()
        self._add_start_device_authorization_response()
        self.stubber.add_client_error(
            'create_token',
            service_error_code='ExpiredTokenException',
            expected_params=self.token_expected_params,
        )
        with self.stubber:
            with self.assertRaises(PendingAuthorizationExpiredError):
                self.sso_token_fetcher.fetch_token(self.start_url)
        self.stubber.assert_no_pending_responses()


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2920" endline="2937" pcid="5032">
    def test_fetch_token_respects_slow_down(self):
        self._add_register_client_response()
        self._add_start_device_authorization_response()
        self.stubber.add_client_error(
            'create_token',
            service_error_code='SlowDownException',
            expected_params=self.token_expected_params,
        )
        self._add_create_token_response()

        with self.stubber:
            token = self.sso_token_fetcher.fetch_token(self.start_url)
        self.assertEqual(token.get('accessToken'), 'foo.token.string')
        self.stubber.assert_no_pending_responses()
        # We should have slept for longer due to the slow down exception
        # The base delay is 1, plus 5 for the slow down exception
        self.mock_sleep.assert_called_with(6)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_utils.py" startline="2938" endline="2953" pcid="5033">
    def test_fetch_token_default_interval(self):
        del self.authorization_response['interval']
        self._add_register_client_response()
        self._add_start_device_authorization_response()
        self.stubber.add_client_error(
            'create_token',
            service_error_code='AuthorizationPendingException',
            expected_params=self.token_expected_params,
        )
        self._add_create_token_response()
        with self.stubber:
            token = self.sso_token_fetcher.fetch_token(self.start_url)
        self.assertEqual(token.get('accessToken'), 'foo.token.string')
        self.stubber.assert_no_pending_responses()
        self.mock_sleep.assert_called_with(5)

</source>
</class>

<class classid="229" nclones="3" nlines="19" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="211" endline="230" pcid="5069">

    def test_client_method_docstring(self):
        creator = self.create_client_creator()
        service_client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)
        method_docstring = str(service_client.test_operation.__doc__)
        ref_docstring_lines = [
            'Documents TestOperation',
            '**Request Syntax**',
            '  response = client.test_operation(',
            '      Bar=\'string\'',
            '      Foo=\'string\'',
            '  )',
            ':type Bar: string',
            ':param Bar: Documents Bar',
            ':type Foo: string',
            ':param Foo: **[REQUIRED]** Documents Foo'
        ]
        for line in ref_docstring_lines:
            self.assertIn(line, method_docstring)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="231" endline="252" pcid="5070">

    def test_client_method_help(self):
        creator = self.create_client_creator()
        service_client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)
        with mock.patch('sys.stdout', six.StringIO()) as mock_stdout:
            help(service_client.test_operation)
        method_docstring = mock_stdout.getvalue()
        ref_docstring_lines = [
            'Documents TestOperation',
            '**Request Syntax**',
            '  response = client.test_operation(',
            '      Bar=\'string\'',
            '      Foo=\'string\'',
            '  )',
            ':type Bar: string',
            ':param Bar: Documents Bar',
            ':type Foo: string',
            ':param Foo: **[REQUIRED]** Documents Foo'
        ]
        for line in ref_docstring_lines:
            self.assertIn(line, method_docstring)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="640" endline="663" pcid="6150">
    def test_waiter_help_documentation(self):
        waiter_name = 'WaiterName'
        waiter = create_waiter_with_client(
            waiter_name, self.waiter_model, self.client)
        with mock.patch('sys.stdout', six.StringIO()) as mock_stdout:
            help(waiter.wait)
        content = mock_stdout.getvalue()
        lines = [
            ('    Polls :py:meth:`MyService.Client.foo` every 1 '
             'seconds until a successful state is reached. An error '
             'is returned after 1 failed checks.'),
            '    **Request Syntax** ',
            '    ::',
            '      waiter.wait(',
            "          bar='string'",
            '      )',
            '    :type bar: string',
            '    :param bar: Documents bar',
            '    :returns: None',
        ]
        for line in lines:
            self.assertIn(line, content)


</source>
</class>

<class classid="230" nclones="5" nlines="16" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="322" endline="338" pcid="5080">

    def test_signing_region_does_not_change_client_region(self):
        with mock.patch('botocore.args.RequestSigner') as mock_signer:
            credential_scope_region = 'us-east-1'
            self.resolver.construct_endpoint.return_value = {
                'partition': 'aws',
                'hostname': 'endpoint.url',
                'endpointName': 'us-west-2',
                'signatureVersions': ['v4'],
                'credentialScope': {'region': credential_scope_region,}
            }
            creator = self.create_client_creator()
            service_client = creator.create_client(
                'myservice', 'us-west-2', credentials=self.credentials)
            self.assertEqual(service_client.meta.region_name, 'us-west-2')
            call_args = mock_signer.call_args
            self.assertEqual(credential_scope_region, call_args[0][1])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="377" endline="394" pcid="5083">

    def test_client_uses_given_region_name_and_endpoint_url_when_present(self):
        with mock.patch('botocore.args.RequestSigner') as mock_signer:
            credential_scope_region = 'us-east-1'
            self.resolver.construct_endpoint.return_value = {
                'partition': 'aws',
                'endpointName': 'us-west-2',
                'hostname': 'endpoint.url',
                'signatureVersions': ['v4'],
                'credentialScope': {'region': credential_scope_region}
            }
            creator = self.create_client_creator()
            service_client = creator.create_client(
                service_name='myservice', region_name='us-west-2',
                credentials=self.credentials, endpoint_url='https://foo')
            self.assertEqual(service_client.meta.region_name, 'us-west-2')
            call_args = mock_signer.call_args
            self.assertEqual('us-west-2', call_args[0][1])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="339" endline="359" pcid="5081">

    def test_client_uses_signing_region_from_credential_scope(self):
        with mock.patch('botocore.args.RequestSigner') as mock_signer:
            credential_scope_region = 'us-east-1'
            self.resolver.construct_endpoint.return_value = {
                'partition': 'aws',
                'endpointName': 'us-west-2',
                'hostname': 'endpoint.url',
                'signatureVersions': ['v4'],
                'credentialScope': {'region': credential_scope_region}
            }
            creator = self.create_client_creator()
            service_client = creator.create_client(
                service_name='myservice', region_name='us-west-2',
                credentials=self.credentials)
            # Use the resolved region as the region value.
            self.assertEqual(service_client.meta.region_name, 'us-west-2')
            # Ensure that we use the credential scope region for signing,
            # and not the resolved region name.
            call_args = mock_signer.call_args
            self.assertEqual(credential_scope_region, call_args[0][1])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="360" endline="376" pcid="5082">

    def test_client_uses_signing_name_from_credential_scope(self):
        with mock.patch('botocore.args.RequestSigner') as mock_signer:
            self.resolver.construct_endpoint.return_value = {
                'partition': 'aws',
                'endpointName': 'us-west-2',
                'hostname': 'endpoint.url',
                'signatureVersions': ['v4'],
                'credentialScope': {'service': 'override'}
            }
            creator = self.create_client_creator()
            service_client = creator.create_client(
                service_name='myservice', region_name='us-west-2',
                credentials=self.credentials)
            call_args = mock_signer.call_args
            self.assertEqual('MyService', call_args[0][0])
            self.assertEqual('override', call_args[0][2])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="395" endline="411" pcid="5084">

    def test_client_uses_signing_name_from_model_if_present_if_resolved(self):
        self.service_description['metadata']['signingName'] = 'otherName'
        with mock.patch('botocore.args.RequestSigner') as mock_signer:
            self.resolver.construct_endpoint.return_value = {
                'partition': 'aws',
                'endpointName': 'us-west-2',
                'hostname': 'endpoint.url',
                'signatureVersions': ['v4'],
            }
            creator = self.create_client_creator()
            service_client = creator.create_client(
                service_name='myservice', region_name='us-west-2',
                credentials=self.credentials, endpoint_url='https://foo')
            self.assertEqual(service_client.meta.region_name, 'us-west-2')
            call_args = mock_signer.call_args[0]
            self.assertEqual('otherName', call_args[2])
</source>
</class>

<class classid="231" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="461" endline="479" pcid="5090">

    def test_anonymous_client_request(self):
        creator = self.create_client_creator()
        config = botocore.config.Config(signature_version=botocore.UNSIGNED)
        service_client = creator.create_client(
            'myservice', 'us-west-2', client_config=config)

        service_client.test_operation(Foo='one')

        # Make sure a request has been attempted
        self.assertTrue(self.endpoint.make_request.called)

        # Make sure the request parameters do NOT include auth
        # information. The service defined above for these tests
        # uses sigv4 by default (which we disable).
        params = dict((k.lower(), v) for k, v in
                      self.endpoint.make_request.call_args[0][1].items())
        self.assertNotIn('authorization', params)
        self.assertNotIn('x-amz-signature', params)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="492" endline="504" pcid="5092">

    def test_client_custom_user_agent_in_request(self):
        creator = self.create_client_creator()
        config = botocore.config.Config(user_agent='baz')
        service_client = creator.create_client(
            'myservice', 'us-west-2', client_config=config)

        service_client.test_operation(Foo='one')

        self.assertTrue(self.endpoint.make_request.called)
        params = dict((k.lower(), v) for k, v in
                      self.endpoint.make_request.call_args[0][1].items())
        self.assertEqual(params['headers']['User-Agent'], 'baz')
</source>
</class>

<class classid="232" nclones="4" nlines="15" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="664" endline="684" pcid="5111">

    def test_operation_cannot_paginate(self):
        pagination_config = {
            'pagination': {
                # Note that there's no pagination config for
                # 'TestOperation', indicating that TestOperation
                # is not pageable.
                'SomeOtherOperation': {
                    "input_token": "Marker",
                    "output_token": "Marker",
                    "more_results": "IsTruncated",
                    "limit_key": "MaxItems",
                    "result_key": "Users"
                }
            }
        }
        self.loader.load_service_model.side_effect = [
            self.service_description, pagination_config]
        creator = self.create_client_creator()
        service_client = creator.create_client('myservice', 'us-west-2')
        self.assertFalse(service_client.can_paginate('test_operation'))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="685" endline="705" pcid="5112">

    def test_operation_can_paginate(self):
        pagination_config = {
            'pagination': {
                'TestOperation': {
                    "input_token": "Marker",
                    "output_token": "Marker",
                    "more_results": "IsTruncated",
                    "limit_key": "MaxItems",
                    "result_key": "Users"
                }
            }
        }
        self.loader.load_service_model.side_effect = [
            self.service_description, pagination_config]
        creator = self.create_client_creator()
        service_client = creator.create_client('myservice', 'us-west-2')
        self.assertTrue(service_client.can_paginate('test_operation'))
        # Also, the config is cached, but we want to make sure we get
        # the same answer when we ask again.
        self.assertTrue(service_client.can_paginate('test_operation'))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="841" endline="863" pcid="5123">

    def test_successful_pagination_object_created(self):
        pagination_config = {
            'pagination': {
                'TestOperation': {
                    "input_token": "Marker",
                    "output_token": "Marker",
                    "more_results": "IsTruncated",
                    "limit_key": "MaxItems",
                    "result_key": "Users"
                }
            }
        }
        self.loader.load_service_model.side_effect = [
            self.service_description,
            pagination_config
        ]
        creator = self.create_client_creator()
        service_client = creator.create_client('myservice', 'us-west-2')
        paginator = service_client.get_paginator('test_operation')
        # The pagination logic itself is tested elsewhere (test_paginate.py),
        # but we can at least make sure it looks like a paginator.
        self.assertTrue(hasattr(paginator, 'paginate'))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="864" endline="886" pcid="5124">

    def test_paginator_class_name_from_client(self):
        pagination_config = {
            'pagination': {
                'TestOperation': {
                    "input_token": "Marker",
                    "output_token": "Marker",
                    "more_results": "IsTruncated",
                    "limit_key": "MaxItems",
                    "result_key": "Users"
                }
            }
        }
        self.loader.load_service_model.side_effect = [
            self.service_description,
            pagination_config
        ]
        creator = self.create_client_creator()
        service_client = creator.create_client('myservice', 'us-west-2')
        paginator = service_client.get_paginator('test_operation')
        self.assertEqual(
            paginator.__class__.__name__,
            'MyService.Paginator.TestOperation')
</source>
</class>

<class classid="233" nclones="3" nlines="10" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="958" endline="970" pcid="5127">

    def test_event_emitted_when_invoked(self):
        event_emitter = hooks.HierarchicalEmitter()
        creator = self.create_client_creator(event_emitter=event_emitter)

        calls = []
        handler = lambda **kwargs: calls.append(kwargs)
        event_emitter.register('before-call', handler)

        service_client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)
        service_client.test_operation(Foo='one', Bar='two')
        self.assertEqual(len(calls), 1)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1032" endline="1051" pcid="5130">

    def test_clients_inherit_only_at_create_time(self):
        # If event handlers are added to the copied event emitter
        # _after_ a client is created, we don't pick those up.
        event_emitter = hooks.HierarchicalEmitter()
        creator = self.create_client_creator(event_emitter=event_emitter)

        # 1. Create a client.
        first_client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)

        # 2. Now register an event handler from the originating event emitter.
        base_calls = []
        base_handler = lambda **kwargs: base_calls.append(kwargs)
        event_emitter.register('before-call', base_handler)

        # 3. The client will _not_ see this because it already has its
        #    own copy of the event handlers.
        first_client.test_operation(Foo='one', Bar='two')
        self.assertEqual(len(base_calls), 0)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1005" endline="1031" pcid="5129">

    def test_clients_inherit_handlers_from_session(self):
        # Even though clients get their own event emitters, they still
        # inherit any handlers that were registered on the event emitter
        # at the time the client was created.
        event_emitter = hooks.HierarchicalEmitter()
        creator = self.create_client_creator(event_emitter=event_emitter)

        # So if an event handler is registered before any clients are created:

        base_calls = []
        base_handler = lambda **kwargs: base_calls.append(kwargs)
        event_emitter.register('before-call', base_handler)

        # Then any client created from this point forward from the
        # event_emitter passed into the ClientCreator will have this
        # handler.
        first_client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)
        first_client.test_operation(Foo='one', Bar='two')
        self.assertEqual(len(base_calls), 1)

        # Same thing if we create another client.
        second_client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)
        second_client.test_operation(Foo='one', Bar='two')
        self.assertEqual(len(base_calls), 2)
</source>
</class>

<class classid="234" nclones="5" nlines="10" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1343" endline="1357" pcid="5160">

    def test_error_with_no_wire_code(self):
        creator = self.create_client_creator()
        client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)

        with Stubber(client) as stub:
            stub.add_client_error('test_operation', '404', 'Not Found')
            try:
                client.test_operation(Foo='one', Bar='two')
            except client.exceptions.ClientError as e:
                # This is needed becasue the error could be a subclass of
                # ClientError.
                # We explicitly want it to be a generic ClientError though
                self.assertEqual(e.__class__, exceptions.ClientError)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1419" endline="1437" pcid="5165">

    def test_error_with_empty_contents(self):
        error_response = {'Error': {}}
        # The stubber is not being used because it will always populate the
        # the message and code.
        self.endpoint.make_request.return_value = (
            mock.Mock(status_code=400), error_response)

        creator = self.create_client_creator()
        client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)

        try:
            client.test_operation(Foo='one', Bar='two')
        except client.exceptions.ClientError as e:
            # This is needed becasue the error could be a subclass of
            # ClientError.
            # We explicitly want it to be a generic ClientError though
            self.assertEqual(e.__class__, exceptions.ClientError)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1400" endline="1418" pcid="5164">

    def test_error_with_missing_code(self):
        error_response = {'Error': {'Message': 'error occurred'}}
        # The stubber is not being used because it will always populate the
        # the message and code.
        self.endpoint.make_request.return_value = (
            mock.Mock(status_code=400), error_response)

        creator = self.create_client_creator()
        client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)

        try:
            client.test_operation(Foo='one', Bar='two')
        except client.exceptions.ClientError as e:
            # This is needed becasue the error could be a subclass of
            # ClientError.
            # We explicitly want it to be a generic ClientError though
            self.assertEqual(e.__class__, exceptions.ClientError)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1385" endline="1399" pcid="5163">

    def test_error_with_empty_code(self):
        creator = self.create_client_creator()
        client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)

        with Stubber(client) as stub:
            stub.add_client_error('test_operation')
            try:
                client.test_operation(Foo='one', Bar='two')
            except client.exceptions.ClientError as e:
                # This is needed becasue the error could be a subclass of
                # ClientError.
                # We explicitly want it to be a generic ClientError though
                self.assertEqual(e.__class__, exceptions.ClientError)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1358" endline="1373" pcid="5161">

    def test_error_with_dot_separated_code(self):
        creator = self.create_client_creator()
        client = creator.create_client(
            'myservice', 'us-west-2', credentials=self.credentials)

        with Stubber(client) as stub:
            stub.add_client_error(
                'test_operation', 'InvalidAddress.NotFound', 'Not Found')
            try:
                client.test_operation(Foo='one', Bar='two')
            except client.exceptions.ClientError as e:
                # This is needed becasue the error could be a subclass of
                # ClientError.
                # We explicitly want it to be a generic ClientError though
                self.assertEqual(e.__class__, exceptions.ClientError)
</source>
</class>

<class classid="235" nclones="5" nlines="11" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1554" endline="1565" pcid="5183">
class TestClientEndpointBridge(unittest.TestCase):
    def setUp(self):
        self.resolver = mock.Mock()
        self.boilerplate_response = {
            'endpointName': 'us-east-1',
            'hostname': 's3.amazonaws.com',
            'partition': 'aws',
            'protocols': ['http', 'https'],
            'dnsSuffix': 'amazonaws.com',
            'signatureVersions': ['s3', 's3v4']
        }
        self.resolver.construct_endpoint.return_value = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="346" endline="357" pcid="5239">
    def setUp(self):
        self.method = mock.Mock()
        self.model = mock.Mock()
        self.paginate_config = {
            "output_token": "Marker",
            "input_token": "Marker",
            "result_key": ["Users", "Groups"],
            'limit_key': 'MaxKeys',
        }
        self.paginator = Paginator(self.method, self.paginate_config, self.model)
        self.endpoint = mock.Mock()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="599" endline="610" pcid="5255">
    def setUp(self):
        self.method = mock.Mock()
        self.model = mock.Mock()
        # This is something we'd see in s3 pagination.
        self.paginate_config = {
            "output_token": ["ListBucketResults.NextKeyMarker",
                             "ListBucketResults.NextUploadIdMarker"],
            "input_token": ["key_marker", "upload_id_marker"],
            "result_key": 'Foo',
        }
        self.paginator = Paginator(self.method, self.paginate_config, self.model)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="387" endline="398" pcid="5243">
    def setUp(self):
        self.method = mock.Mock()
        self.model = mock.Mock()
        # This is something we'd see in s3 pagination.
        self.paginate_config = {
            'output_token': [
                'NextMarker || ListBucketResult.Contents[-1].Key'],
            'input_token': 'next_marker',
            'result_key': 'Contents',
        }
        self.paginator = Paginator(self.method, self.paginate_config, self.model)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="1109" endline="1119" pcid="5289">
    maxDiff = None

    def setUp(self):
        self.method = mock.Mock()
        self.model = mock.Mock()
        self.paginate_config = {
            'output_token': 'NextToken',
            'input_token': 'NextToken',
            'result_key': 'ResultKey',
            'non_aggregate_keys': ['NotResultKey'],
        }
</source>
</class>

<class classid="236" nclones="6" nlines="12" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1627" endline="1642" pcid="5189">
        self.assertEqual('v2', resolved['signature_version'])

    def test_dont_use_ssl_common_name_over_hostname_if_present(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws',
            'hostname': 'expected-host-name',
            'signatureVersions': ['v4'],
            'sslCommonName': 'ssl-common-name-do-not-use',
            'endpointName': 'us-west-2', 'protocols': ['https']
        }
        bridge = ClientEndpointBridge(resolver)
        resolved = bridge.resolve('myservice', 'us-west-2')
        self.assertEqual('us-west-2', resolved['region_name'])
        self.assertEqual('us-west-2', resolved['signing_region'])
        self.assertEqual('https://expected-host-name',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1663" endline="1676" pcid="5192">
        self.assertEqual('http://host.com', resolved['endpoint_url'])

    def test_credential_scope_overrides_signing_region(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws',
            'hostname': 'host.com',
            'endpointName': 'us-foo-baz',
            'signatureVersions': ['v4'],
            'credentialScope': {'region': 'override'}
        }
        bridge = ClientEndpointBridge(resolver)
        resolved = bridge.resolve('myservice', 'us-foo-baz')
        self.assertEqual('us-foo-baz', resolved['region_name'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1693" endline="1707" pcid="5194">
        self.assertEqual('https://override.com', resolved['endpoint_url'])

    def test_resolved_region_overrides_region_when_no_endpoint_url(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws',
            'hostname': 'host.com',
            'signatureVersions': ['v4'],
            'endpointName': 'override',
            'protocols': ['https'],
        }
        bridge = ClientEndpointBridge(resolver)
        resolved = bridge.resolve('myservice', 'will-not-be-there')
        self.assertEqual('override', resolved['region_name'])
        self.assertEqual('override', resolved['signing_region'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1708" endline="1722" pcid="5195">
        self.assertEqual('https://host.com', resolved['endpoint_url'])

    def test_does_not_use_https_if_not_available(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws',
            'hostname': 'host.com',
            'signatureVersions': ['v4'],
            'endpointName': 'foo',
            # Note: http, not https
            'protocols': ['http'],
        }
        bridge = ClientEndpointBridge(resolver)
        resolved = bridge.resolve('myservice')
        # We should resolve to http://, not https://
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1677" endline="1692" pcid="5193">
        self.assertEqual('override', resolved['signing_region'])

    def test_cred_scope_does_not_override_signing_region_if_endpoint_url(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws',
            'hostname': 'will-not-use.com',
            'endpointName': 'us-foo-baz',
            'signatureVersions': ['v4'],
            'credentialScope': {'region': 'override'}
        }
        bridge = ClientEndpointBridge(resolver)
        resolved = bridge.resolve('myservice', 'us-foo-baz',
                                  endpoint_url='https://override.com')
        self.assertEqual('us-foo-baz', resolved['region_name'])
        self.assertEqual('us-foo-baz', resolved['signing_region'])
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1829" endline="1841" pcid="5207">
        self.assertEqual('test', resolved['signing_name'])

    def test_uses_credential_scope_signing_name(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws',
            'hostname': 'test',
            'endpointName': 'us-west-2',
            'signatureVersions': ['v4'],
            'credentialScope': {'service': 'override'}
        }
        bridge = ClientEndpointBridge(resolver)
        resolved = bridge.resolve('test', 'us-west-2')
</source>
</class>

<class classid="237" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1723" endline="1733" pcid="5196">
        self.assertEqual('http://host.com', resolved['endpoint_url'])

    def test_uses_signature_version_from_client_config(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws', 'hostname': 'test.com',
            'endpointName': 'us-west-2', 'signatureVersions': ['v2']}
        client_config = mock.Mock()
        client_config.signature_version = 's3'
        bridge = ClientEndpointBridge(resolver, client_config=client_config)
        resolved = bridge.resolve('test', 'us-west-2')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1743" endline="1753" pcid="5198">
        self.assertEqual('s3v4', resolved['signature_version'])

    def test_uses_signature_version_from_scoped_config(self):
        resolver = mock.Mock()
        resolver.construct_endpoint.return_value = {
            'partition': 'aws', 'hostname': 'test.com',
            'endpointName': 'us-west-2', 'signatureVersions': ['v2']}
        scoped_config = mock.Mock()
        scoped_config.get.return_value = {'signature_version': 's3'}
        bridge = ClientEndpointBridge(resolver, scoped_config)
        resolved = bridge.resolve('test', 'us-west-2')
</source>
</class>

<class classid="238" nclones="3" nlines="10" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1862" endline="1872" pcid="5210">
            'https://s3.amazonaws.com')

    def test_use_dualstack_endpoint(self):
        config = botocore.config.Config(use_dualstack_endpoint=True)
        bridge = ClientEndpointBridge(self.resolver, client_config=config)
        bridge.resolve('ec2', 'us-west-2')
        self.resolver.construct_endpoint.assert_called_with(
            'ec2',
            'us-west-2',
            use_dualstack_endpoint=True,
            use_fips_endpoint=False,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1884" endline="1895" pcid="5212">
        )

    def test_use_dualstack_endpoint_omits_s3(self):
        config = botocore.config.Config(use_dualstack_endpoint=True,
                                        s3={'use_dualstack_endpoint': False})
        bridge = ClientEndpointBridge(self.resolver, client_config=config)
        bridge.resolve('s3', 'us-west-2')
        self.resolver.construct_endpoint.assert_called_with(
            's3',
            'us-west-2',
            use_dualstack_endpoint=False,
            use_fips_endpoint=False,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_client.py" startline="1873" endline="1883" pcid="5211">
        )

    def test_use_fips_endpoint(self):
        config = botocore.config.Config(use_fips_endpoint=True)
        bridge = ClientEndpointBridge(self.resolver, client_config=config)
        bridge.resolve('ec2', 'us-west-2')
        self.resolver.construct_endpoint.assert_called_with(
            'ec2',
            'us-west-2',
            use_dualstack_endpoint=False,
            use_fips_endpoint=True,
</source>
</class>

<class classid="239" nclones="2" nlines="17" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="132" endline="150" pcid="5229">
    def test_next_token_is_string(self):
        self.paginate_config = {
            "output_token": "Marker",
            "input_token": "Marker",
            "result_key": "Users",
            "limit_key": "MaxKeys",
        }
        self.paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]}
        ]
        self.method.side_effect = responses
        result = self.paginator.paginate(PaginationConfig={'MaxItems': 1})
        result = result.build_full_result()
        token = result.get('NextToken')
        self.assertIsInstance(token, six.string_types)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="283" endline="300" pcid="5237">
    def test_build_full_result_with_single_key(self):
        self.paginate_config = {
            "output_token": "Marker",
            "input_token": "Marker",
            "result_key": "Users",
            "limit_key": "MaxKeys",
        }
        self.paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]}
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate()
        complete = pages.build_full_result()
        self.assertEqual(complete, {'Users': ['User1', 'User2', 'User3']})

</source>
</class>

<class classid="240" nclones="3" nlines="20" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="172" endline="198" pcid="5232">
    def test_next_token_with_or_expression(self):
        self.pagination_config = {
            'output_token': 'NextToken || NextToken2',
            'input_token': 'NextToken',
            'result_key': 'Foo',
        }
        self.paginator = Paginator(self.method, self.pagination_config, self.model)
        # Verify that despite varying between NextToken and NextToken2
        # we still can extract the right next tokens.
        responses = [
            {'NextToken': 'token1'},
            {'NextToken2': 'token2'},
            # The first match found wins, so because NextToken is
            # listed before NextToken2 in the 'output_tokens' config,
            # 'token3' is chosen over 'token4'.
            {'NextToken': 'token3', 'NextToken2': 'token4'},
            {'not_next_token': 'foo'},
        ]
        self.method.side_effect = responses
        list(self.paginator.paginate())
        self.assertEqual(
            self.method.call_args_list,
            [mock.call(),
             mock.call(NextToken='token1'),
             mock.call(NextToken='token2'),
             mock.call(NextToken='token3')])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="223" endline="241" pcid="5234">
    def test_more_tokens_is_path_expression(self):
        self.paginate_config = {
            'more_results': 'Foo.IsTruncated',
            'output_token': 'NextToken',
            'input_token': 'NextToken',
            'result_key': 'Bar',
        }
        self.paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {'Foo': {'IsTruncated': True}, 'NextToken': 'token1'},
            {'Foo': {'IsTruncated': False}, 'NextToken': 'token2'},
        ]
        self.method.side_effect = responses
        list(self.paginator.paginate())
        self.assertEqual(
            self.method.call_args_list,
            [mock.call(),
             mock.call(NextToken='token1')])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="199" endline="222" pcid="5233">
    def test_more_tokens(self):
        # Some pagination configs have a 'more_token' key that
        # indicate whether or not the results are being paginated.
        self.paginate_config = {
            'more_results': 'IsTruncated',
            'output_token': 'NextToken',
            'input_token': 'NextToken',
            'result_key': 'Foo',
        }
        self.paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {'Foo': [1], 'IsTruncated': True, 'NextToken': 'token1'},
            {'Foo': [2], 'IsTruncated': True, 'NextToken': 'token2'},
            {'Foo': [3], 'IsTruncated': False, 'NextToken': 'token3'},
            {'Foo': [4], 'not_next_token': 'foo'},
        ]
        self.method.side_effect = responses
        list(self.paginator.paginate())
        self.assertEqual(
            self.method.call_args_list,
            [mock.call(),
             mock.call(NextToken='token1'),
             mock.call(NextToken='token2')])

</source>
</class>

<class classid="241" nclones="2" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="399" endline="411" pcid="5244">
    def test_s3_list_objects(self):
        responses = [
            {'NextMarker': 'token1'},
            {'NextMarker': 'token2'},
            {'not_next_token': 'foo'}]
        self.method.side_effect = responses
        list(self.paginator.paginate())
        self.assertEqual(
            self.method.call_args_list,
            [mock.call(),
             mock.call(next_marker='token1'),
             mock.call(next_marker='token2')])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="412" endline="426" pcid="5245">
    def test_s3_list_object_complex(self):
        responses = [
            {'NextMarker': 'token1'},
            {'ListBucketResult': {
                'Contents': [{"Key": "first"}, {"Key": "Last"}]}},
            {'not_next_token': 'foo'}]
        self.method.side_effect = responses
        list(self.paginator.paginate())
        self.assertEqual(
            self.method.call_args_list,
            [mock.call(),
             mock.call(next_marker='token1'),
             mock.call(next_marker='Last')])


</source>
</class>

<class classid="242" nclones="3" nlines="15" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="438" endline="455" pcid="5247">
    def test_build_full_result_with_bytes(self):
        responses = [
            {"Users": ["User1", "User2"], "Marker": b'\xff'},
            {"Users": ["User3", "User4"], "Marker": b'\xfe'},
            {"Users": ["User5"]}
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate(PaginationConfig={'MaxItems': 3})
        complete = pages.build_full_result()
        expected_token = encode_token({
            "Marker": b'\xff', "boto_truncate_amount": 1,
        })
        expected_response = {
            "Users": ["User1", "User2", "User3"],
            "NextToken": expected_token
        }
        self.assertEqual(complete, expected_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="474" endline="491" pcid="5249">
    def test_build_full_result_with_listed_bytes(self):
        responses = [
            {"Users": ["User1", "User2"], "Marker": {'key': ['foo', b'\xff']}},
            {"Users": ["User3", "User4"], "Marker": {'key': ['foo', b'\xfe']}},
            {"Users": ["User5"]}
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate(PaginationConfig={'MaxItems': 3})
        complete = pages.build_full_result()
        expected_token = encode_token({
            "Marker": {'key': ['foo', b'\xff']}, "boto_truncate_amount": 1,
        })
        expected_response = {
            "Users": ["User1", "User2", "User3"],
            "NextToken": expected_token
        }
        self.assertEqual(complete, expected_response)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="456" endline="473" pcid="5248">
    def test_build_full_result_with_nested_bytes(self):
        responses = [
            {"Users": ["User1", "User2"], "Marker": {'key': b'\xff'}},
            {"Users": ["User3", "User4"], "Marker": {'key': b'\xfe'}},
            {"Users": ["User5"]}
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate(PaginationConfig={'MaxItems': 3})
        complete = pages.build_full_result()
        expected_token = encode_token({
            "Marker": {'key': b'\xff'}, "boto_truncate_amount": 1,
        })
        expected_response = {
            "Users": ["User1", "User2", "User3"],
            "NextToken": expected_token
        }
        self.assertEqual(complete, expected_response)

</source>
</class>

<class classid="243" nclones="3" nlines="15" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="519" endline="536" pcid="5251">
    def test_resume_with_bytes(self):
        responses = [
            {"Users": ["User3", "User4"], "Marker": b'\xfe'},
            {"Users": ["User5"]}
        ]
        self.method.side_effect = responses
        starting_token = encode_token({
            "Marker": b'\xff', "boto_truncate_amount": 1,
        })
        pages = self.paginator.paginate(
            PaginationConfig={'StartingToken': starting_token})
        complete = pages.build_full_result()
        expected_response = {
            "Users": ["User4", "User5"]
        }
        self.assertEqual(complete, expected_response)
        self.method.assert_any_call(Marker=b'\xff')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="555" endline="572" pcid="5253">
    def test_resume_with_listed_bytes(self):
        responses = [
            {"Users": ["User3", "User4"], "Marker": {'key': ['bar', b'\xfe']}},
            {"Users": ["User5"]}
        ]
        self.method.side_effect = responses
        starting_token = encode_token({
            "Marker": {'key': ['foo', b'\xff']}, "boto_truncate_amount": 1,
        })
        pages = self.paginator.paginate(
            PaginationConfig={'StartingToken': starting_token})
        complete = pages.build_full_result()
        expected_response = {
            "Users": ["User4", "User5"]
        }
        self.assertEqual(complete, expected_response)
        self.method.assert_any_call(Marker={'key': ['foo', b'\xff']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="537" endline="554" pcid="5252">
    def test_resume_with_nested_bytes(self):
        responses = [
            {"Users": ["User3", "User4"], "Marker": {'key': b'\xfe'}},
            {"Users": ["User5"]}
        ]
        self.method.side_effect = responses
        starting_token = encode_token({
            "Marker": {'key': b'\xff'}, "boto_truncate_amount": 1,
        })
        pages = self.paginator.paginate(
            PaginationConfig={'StartingToken': starting_token})
        complete = pages.build_full_result()
        expected_response = {
            "Users": ["User4", "User5"]
        }
        self.assertEqual(complete, expected_response)
        self.method.assert_any_call(Marker={'key': b'\xff'})

</source>
</class>

<class classid="244" nclones="5" nlines="11" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="693" endline="705" pcid="5260">
    def test_result_key_iters(self):
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate()
        iterators = pages.result_key_iters()
        self.assertEqual(len(iterators), 1)
        self.assertEqual(list(iterators[0]),
                         ["User1", "User2", "User3"])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="706" endline="716" pcid="5261">
    def test_build_full_result_with_single_key(self):
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate()
        complete = pages.build_full_result()
        self.assertEqual(complete, {'Users': ['User1', 'User2', 'User3']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="1252" endline="1262" pcid="5301">
            self.fail("Deprecated paginator failed.")

    def test_deprecated_starting_token(self):
        responses = [
            {"Users": ["User1"], "Marker": "m2"},
            {"Users": ["User2"], "Marker": "m3"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        pagination_config = {'StartingToken': 'm1___0'}
        expected = {'Users': ['User1', 'User2', 'User3']}
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="1333" endline="1349" pcid="5305">
            expected, pagination_config, multiple_tokens=True)

    def test_deprecated_starting_token_rejects_too_many_input_tokens(self):
        responses = [
            {"Users": ["User1"], "Marker": "m2"},
            {"Users": ["User2"], "Marker": "m3"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        pagination_config = {'StartingToken': 'm1___m4___0'}
        expected = {'Users': ['User1', 'User2', 'User3']}

        paginator = self.create_paginator()
        with self.assertRaises(ValueError):
            actual = paginator.paginate(
                PaginationConfig=pagination_config).build_full_result()
            self.assertEqual(actual, expected)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="819" endline="831" pcid="5268">
    def test_bad_input_tokens(self):
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        with self.assertRaisesRegex(ValueError, 'Bad starting token'):
            pagination_config = {'StartingToken': 'does___not___work'}
            self.paginator.paginate(
                PaginationConfig=pagination_config).build_full_result()


</source>
</class>

<class classid="245" nclones="4" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="717" endline="730" pcid="5262">
    def test_max_items_can_be_specified(self):
        paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        expected_token = encode_token({"Marker": "m1"})
        self.assertEqual(
            paginator.paginate(
                PaginationConfig={'MaxItems': 1}).build_full_result(),
            {'Users': ['User1'], 'NextToken': expected_token})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="731" endline="747" pcid="5263">
    def test_max_items_as_strings(self):
        # Some services (route53) model MaxItems as a string type.
        # We need to be able to handle this case.
        paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        expected_token = encode_token({"Marker": "m1"})
        self.assertEqual(
            # Note MaxItems is a string here.
            paginator.paginate(
                PaginationConfig={'MaxItems': '1'}).build_full_result(),
            {'Users': ['User1'], 'NextToken': expected_token})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="804" endline="818" pcid="5267">
    def test_max_items_exceeds_actual_amount(self):
        # Because MaxItems=10 > number of users (3), we should just return
        # all of the users.
        paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        self.assertEqual(
            paginator.paginate(
                PaginationConfig={'MaxItems': 10}).build_full_result(),
            {'Users': ['User1', 'User2', 'User3']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="748" endline="761" pcid="5264">
    def test_next_token_on_page_boundary(self):
        paginator = Paginator(self.method, self.paginate_config, self.model)
        responses = [
            {"Users": ["User1"], "Marker": "m1"},
            {"Users": ["User2"], "Marker": "m2"},
            {"Users": ["User3"]},
        ]
        self.method.side_effect = responses
        expected_token = encode_token({"Marker": "m2"})
        self.assertEqual(
            paginator.paginate(
                PaginationConfig={'MaxItems': 2}).build_full_result(),
            {'Users': ['User1', 'User2'], 'NextToken': expected_token})

</source>
</class>

<class classid="246" nclones="3" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="844" endline="856" pcid="5270">
    def test_build_full_result_with_multiple_result_keys(self):
        responses = [
            {"Users": ["User1"], "Groups": ["Group1"], "Marker": "m1"},
            {"Users": ["User2"], "Groups": ["Group2"], "Marker": "m2"},
            {"Users": ["User3"], "Groups": ["Group3"]},
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate()
        complete = pages.build_full_result()
        self.assertEqual(complete,
                         {"Users": ['User1', 'User2', 'User3'],
                          "Groups": ['Group1', 'Group2', 'Group3']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="857" endline="870" pcid="5271">
    def test_build_full_result_with_different_length_result_keys(self):
        responses = [
            {"Users": ["User1"], "Groups": ["Group1"], "Marker": "m1"},
            # Then we stop getting "Users" output, but we get more "Groups"
            {"Users": [], "Groups": ["Group2"], "Marker": "m2"},
            {"Users": [], "Groups": ["Group3"]},
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate()
        complete = pages.build_full_result()
        self.assertEqual(complete,
                         {"Users": ['User1'],
                          "Groups": ['Group1', 'Group2', 'Group3']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="871" endline="886" pcid="5272">
    def test_build_full_result_with_zero_length_result_key(self):
        responses = [
            # In this case the 'Users' key is always empty but we should
            # have a 'Users' key in the output, it should just have an
            # empty list for a value.
            {"Users": [], "Groups": ["Group1"], "Marker": "m1"},
            {"Users": [], "Groups": ["Group2"], "Marker": "m2"},
            {"Users": [], "Groups": ["Group3"]},
        ]
        self.method.side_effect = responses
        pages = self.paginator.paginate()
        complete = pages.build_full_result()
        self.assertEqual(complete,
                         {"Users": [],
                          "Groups": ['Group1', 'Group2', 'Group3']})

</source>
</class>

<class classid="247" nclones="2" nlines="22" similarity="95">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="1263" endline="1290" pcid="5302">
        self.assert_pagination_result(expected, pagination_config)

    def test_deprecated_multiple_starting_token(self):
        responses = [
            {
                "Users": ["User1", "User2"],
                "Groups": ["Group1"],
                "Marker1": "m1",
                "Marker2": "m2"
            },
            {
                "Users": ["User3", "User4"],
                "Groups": ["Group2"],
                "Marker1": "m3",
                "Marker2": "m4"
            },
            {
                "Users": ["User5"],
                "Groups": ["Group3"]
            }
        ]
        self.method.side_effect = responses
        pagination_config = {'StartingToken': 'm0___m0___1'}
        expected = {
            'Groups': ['Group2', 'Group3'],
            'Users': ['User2', 'User3', 'User4', 'User5']
        }
        self.assert_pagination_result(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_paginate.py" startline="1305" endline="1332" pcid="5304">
        self.assert_pagination_result(expected, pagination_config)

    def test_deprecated_starting_token_without_all_input_set_to_none(self):
        responses = [
            {
                "Users": ["User1", "User2"],
                "Groups": ["Group1"],
                "Marker1": "m1",
                "Marker2": "m2"
            },
            {
                "Users": ["User3", "User4"],
                "Groups": ["Group2"],
                "Marker1": "m3",
                "Marker2": "m4"
            },
            {
                "Users": ["User5"],
                "Groups": ["Group3"]
            }
        ]
        self.method.side_effect = responses
        pagination_config = {'StartingToken': 'm0'}
        expected = {
            'Groups': ['Group2', 'Group3'],
            'Users': ['User1', 'User2', 'User3', 'User4', 'User5']
        }
        self.assert_pagination_result(
</source>
</class>

<class classid="248" nclones="2" nlines="12" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="200" endline="218" pcid="5333">
    def test_multiple_wildcard_events(self):
        self.emitter.register('foo.*.*.baz', self.hook)
        self.assert_hook_is_called_given_event('foo.bar.baz.baz')
        self.assert_hook_is_called_given_event('foo.ANY.THING.baz')
        self.assert_hook_is_called_given_event('foo.AT.ALL.baz')

        # More specific than what we registered for.
        self.assert_hook_is_called_given_event('foo.bar.baz.baz.extra')
        self.assert_hook_is_called_given_event('foo.bar.baz.baz.extra.stuff')

        # Too short:
        self.assert_hook_is_not_called_given_event('foo')
        self.assert_hook_is_not_called_given_event('foo.bar')
        self.assert_hook_is_not_called_given_event('foo.bar.baz')

        # Bad ending segment.
        self.assert_hook_is_not_called_given_event('foo.ANY.THING.notbaz')
        self.assert_hook_is_not_called_given_event('foo.ANY.THING.stillnotbaz')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="219" endline="234" pcid="5334">
    def test_can_unregister_for_wildcard_events(self):
        self.emitter.register('foo.*.*.baz', self.hook)
        # Call multiple times to verify caching behavior.
        self.assert_hook_is_called_given_event('foo.bar.baz.baz')
        self.assert_hook_is_called_given_event('foo.bar.baz.baz')
        self.assert_hook_is_called_given_event('foo.bar.baz.baz')

        self.emitter.unregister('foo.*.*.baz', self.hook)
        self.assert_hook_is_not_called_given_event('foo.bar.baz.baz')
        self.assert_hook_is_not_called_given_event('foo.bar.baz.baz')
        self.assert_hook_is_not_called_given_event('foo.bar.baz.baz')

        self.emitter.register('foo.*.*.baz', self.hook)
        self.assert_hook_is_called_given_event('foo.bar.baz.baz')
        self.assert_hook_is_called_given_event('foo.bar.baz.baz')

</source>
</class>

<class classid="249" nclones="4" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="390" endline="408" pcid="5348">
    def test_handler_call_order_with_hierarchy(self):
        def handler(call_number, **kwargs):
            kwargs['call_number'] = call_number
            self.hook_calls.append(kwargs)

        # We go from most specific to least specific, and each level is called
        # in the order they were registered for that particular hierarchy
        # level.
        self.emitter.register('foo.bar.baz', partial(handler, call_number=1))
        self.emitter.register('foo.bar', partial(handler, call_number=3))
        self.emitter.register('foo', partial(handler, call_number=5))
        self.emitter.register('foo.bar.baz', partial(handler, call_number=2))
        self.emitter.register('foo.bar', partial(handler, call_number=4))
        self.emitter.register('foo', partial(handler, call_number=6))

        self.emitter.emit('foo.bar.baz')
        self.assertEqual([k['call_number'] for k in self.hook_calls],
                         [1, 2, 3, 4, 5, 6])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="426" endline="443" pcid="5352">
    def test_register_first_hierarchy(self):
        def handler(call_number, **kwargs):
            kwargs['call_number'] = call_number
            self.hook_calls.append(kwargs)

        self.emitter.register('foo', partial(handler, call_number=5))
        self.emitter.register('foo.bar', partial(handler, call_number=2))

        self.emitter.register_first('foo', partial(handler, call_number=4))
        self.emitter.register_first('foo.bar', partial(handler, call_number=1))

        self.emitter.register('foo', partial(handler, call_number=6))
        self.emitter.register('foo.bar', partial(handler, call_number=3))

        self.emitter.emit('foo.bar')
        self.assertEqual([k['call_number'] for k in self.hook_calls],
                         [1, 2, 3, 4, 5, 6])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="409" endline="425" pcid="5350">
    def test_register_first_single_level(self):
        def handler(call_number, **kwargs):
            kwargs['call_number'] = call_number
            self.hook_calls.append(kwargs)

        # Handlers registered through register_first() are always called
        # before handlers registered with register().
        self.emitter.register('foo', partial(handler, call_number=3))
        self.emitter.register('foo', partial(handler, call_number=4))
        self.emitter.register_first('foo', partial(handler, call_number=1))
        self.emitter.register_first('foo', partial(handler, call_number=2))
        self.emitter.register('foo', partial(handler, call_number=5))

        self.emitter.emit('foo')
        self.assertEqual([k['call_number'] for k in self.hook_calls],
                         [1, 2, 3, 4, 5])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="444" endline="455" pcid="5354">
    def test_register_last_hierarchy(self):
        def handler(call_number, **kwargs):
            kwargs['call_number'] = call_number
            self.hook_calls.append(kwargs)

        self.emitter.register_last('foo', partial(handler, call_number=3))
        self.emitter.register('foo', partial(handler, call_number=2))
        self.emitter.register_first('foo', partial(handler, call_number=1))
        self.emitter.emit('foo')
        self.assertEqual([k['call_number'] for k in self.hook_calls],
                         [1, 2, 3])

</source>
</class>

<class classid="250" nclones="2" nlines="24" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="468" endline="509" pcid="5357">
    def test_copy_emitter(self):
        # Here we're not testing copy directly, we're testing
        # the observable behavior from copying an event emitter.
        first = []
        def first_handler(id_name, **kwargs):
            first.append(id_name)

        second = []
        def second_handler(id_name, **kwargs):
            second.append(id_name)

        self.emitter.register('foo.bar.baz', first_handler)
        # First time we emit, only the first handler should be called.
        self.emitter.emit('foo.bar.baz', id_name='first-time')
        self.assertEqual(first, ['first-time'])
        self.assertEqual(second, [])

        copied_emitter = copy.copy(self.emitter)
        # If we emit from the copied emitter, we should still
        # only see the first handler called.
        copied_emitter.emit('foo.bar.baz', id_name='second-time')
        self.assertEqual(first, ['first-time', 'second-time'])
        self.assertEqual(second, [])

        # However, if we register an event handler with the copied
        # emitter, the first emitter will not see this.
        copied_emitter.register('foo.bar.baz', second_handler)

        copied_emitter.emit('foo.bar.baz', id_name='third-time')
        self.assertEqual(first, ['first-time', 'second-time', 'third-time'])
        # And now the second handler is called.
        self.assertEqual(second, ['third-time'])

        # And vice-versa, emitting from the original emitter
        # will not trigger the second_handler.
        # We'll double check this by unregistering/re-registering
        # the event handler.
        self.emitter.unregister('foo.bar.baz', first_handler)
        self.emitter.register('foo.bar.baz', first_handler)
        self.emitter.emit('foo.bar.baz', id_name='last-time')
        self.assertEqual(second, ['third-time'])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_hooks.py" startline="510" endline="549" pcid="5360">
    def test_copy_emitter_with_unique_id_event(self):
        # Here we're not testing copy directly, we're testing
        # the observable behavior from copying an event emitter.
        first = []
        def first_handler(id_name, **kwargs):
            first.append(id_name)

        second = []
        def second_handler(id_name, **kwargs):
            second.append(id_name)

        self.emitter.register('foo', first_handler, 'bar')
        self.emitter.emit('foo', id_name='first-time')
        self.assertEqual(first, ['first-time'])
        self.assertEqual(second, [])

        copied_emitter = copy.copy(self.emitter)

        # If we register an event handler with the copied
        # emitter, the event should not get registered again
        # because the unique id was already used.
        copied_emitter.register('foo', second_handler, 'bar')
        copied_emitter.emit('foo', id_name='second-time')
        self.assertEqual(first, ['first-time', 'second-time'])
        self.assertEqual(second, [])

        # If we unregister the first event from the copied emitter,
        # We should be able to register the second handler.
        copied_emitter.unregister('foo', first_handler, 'bar')
        copied_emitter.register('foo', second_handler, 'bar')
        copied_emitter.emit('foo', id_name='third-time')
        self.assertEqual(first, ['first-time', 'second-time'])
        self.assertEqual(second, ['third-time'])

        # The original event emitter should have the unique id event still
        # registered though.
        self.emitter.emit('foo', id_name='fourth-time')
        self.assertEqual(first, ['first-time', 'second-time', 'fourth-time'])
        self.assertEqual(second, ['third-time'])

</source>
</class>

<class classid="251" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="70" endline="81" pcid="5372">
    def test_get_auth(self):
        auth_cls = mock.Mock()
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS,
                             {'v4': auth_cls}):
            auth = self.signer.get_auth('service_name', 'region_name')

            self.assertEqual(auth, auth_cls.return_value)
            auth_cls.assert_called_with(
                credentials=self.fixed_credentials,
                service_name='service_name',
                region_name='region_name')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="82" endline="94" pcid="5373">
    def test_get_auth_signature_override(self):
        auth_cls = mock.Mock()
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS,
                             {'v4-custom': auth_cls}):
            auth = self.signer.get_auth(
                'service_name', 'region_name', signature_version='v4-custom')

            self.assertEqual(auth, auth_cls.return_value)
            auth_cls.assert_called_with(
                credentials=self.fixed_credentials,
                service_name='service_name',
                region_name='region_name')

</source>
</class>

<class classid="252" nclones="4" nlines="19" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="213" endline="233" pcid="5383">
    def test_generate_presigned_url(self):
        auth = mock.Mock()
        auth.REQUIRES_REGION = True

        request_dict = {
            'headers': {},
            'url': 'https://foo.com',
            'body': b'',
            'url_path': '/',
            'method': 'GET',
            'context': {}
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS,
                             {'v4-query': auth}):
            presigned_url = self.signer.generate_presigned_url(
                request_dict, operation_name='operation_name')
        auth.assert_called_with(
            credentials=self.fixed_credentials, region_name='region_name',
            service_name='signing_name', expires=3600)
        self.assertEqual(presigned_url, 'https://foo.com')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="479" endline="501" pcid="5399">
    def test_presign_with_custom_signing_name(self):
        auth = mock.Mock()
        auth.REQUIRES_REGION = True

        request_dict = {
            'headers': {},
            'url': 'https://foo.com',
            'body': b'',
            'url_path': '/',
            'method': 'GET',
            'context': {}
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS,
                             {'v4-query': auth}):
            presigned_url = self.signer.generate_presigned_url(
                request_dict, operation_name='operation_name',
                signing_name='foo')
        auth.assert_called_with(
            credentials=self.fixed_credentials,
            region_name='region_name',
            expires=3600, service_name='foo')
        self.assertEqual(presigned_url, 'https://foo.com')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="234" endline="255" pcid="5384">
    def test_generate_presigned_url_with_region_override(self):
        auth = mock.Mock()
        auth.REQUIRES_REGION = True

        request_dict = {
            'headers': {},
            'url': 'https://foo.com',
            'body': b'',
            'url_path': '/',
            'method': 'GET',
            'context': {}
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS,
                             {'v4-query': auth}):
            presigned_url = self.signer.generate_presigned_url(
                request_dict, operation_name='operation_name',
                region_name='us-west-2')
        auth.assert_called_with(
            credentials=self.fixed_credentials, region_name='us-west-2',
            service_name='signing_name', expires=3600)
        self.assertEqual(presigned_url, 'https://foo.com')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="256" endline="277" pcid="5385">
    def test_generate_presigned_url_with_exipres_in(self):
        auth = mock.Mock()
        auth.REQUIRES_REGION = True

        request_dict = {
            'headers': {},
            'url': 'https://foo.com',
            'body': b'',
            'url_path': '/',
            'method': 'GET',
            'context': {}
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS,
                             {'v4-query': auth}):
            presigned_url = self.signer.generate_presigned_url(
                request_dict, operation_name='operation_name', expires_in=900)
        auth.assert_called_with(
            credentials=self.fixed_credentials,
            region_name='region_name',
            expires=900, service_name='signing_name')
        self.assertEqual(presigned_url, 'https://foo.com')

</source>
</class>

<class classid="253" nclones="2" nlines="14" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="278" endline="293" pcid="5386">
    def test_presigned_url_throws_unsupported_signature_error(self):
        request_dict = {
            'headers': {},
            'url': 'https://s3.amazonaws.com/mybucket/myobject',
            'body': b'',
            'url_path': '/',
            'method': 'GET',
            'context': {}
        }
        self.signer = RequestSigner(
            ServiceId('service_name'), 'region_name', 'signing_name',
            'foo', self.credentials, self.emitter)
        with self.assertRaises(UnsupportedSignatureVersionError):
            self.signer.generate_presigned_url(
                request_dict, operation_name='foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="722" endline="738" pcid="5417">
    def test_presigned_post_throws_unsupported_signature_error(self):
        request_dict = {
            'headers': {},
            'url': 'https://s3.amazonaws.com/mybucket/myobject',
            'body': b'',
            'url_path': '/',
            'method': 'POST',
            'context': {}
        }
        self.request_signer = RequestSigner(
            ServiceId('service_name'), 'region_name', 'signing_name',
            'foo', self.credentials, self.emitter)
        self.signer = S3PostPresigner(self.request_signer)
        with self.assertRaises(UnsupportedSignatureVersionError):
            self.signer.generate_presigned_post(request_dict)


</source>
</class>

<class classid="254" nclones="3" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="335" endline="354" pcid="5390">
    def test_sign_with_signing_type_standard(self):
        auth = mock.Mock()
        post_auth = mock.Mock()
        query_auth = mock.Mock()
        auth_types = {
            'v4-presign-post': post_auth,
            'v4-query': query_auth,
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             signing_type='standard')
        self.assertFalse(post_auth.called)
        self.assertFalse(query_auth.called)
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='region_name'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="375" endline="394" pcid="5392">
    def test_sign_with_signing_type_presign_post(self):
        auth = mock.Mock()
        post_auth = mock.Mock()
        query_auth = mock.Mock()
        auth_types = {
            'v4-presign-post': post_auth,
            'v4-query': query_auth,
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             signing_type='presign-post')
        self.assertFalse(auth.called)
        self.assertFalse(query_auth.called)
        post_auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='region_name'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="355" endline="374" pcid="5391">
    def test_sign_with_signing_type_presign_url(self):
        auth = mock.Mock()
        post_auth = mock.Mock()
        query_auth = mock.Mock()
        auth_types = {
            'v4-presign-post': post_auth,
            'v4-query': query_auth,
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             signing_type='presign-url')
        self.assertFalse(post_auth.called)
        self.assertFalse(auth.called)
        query_auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='region_name'
        )

</source>
</class>

<class classid="255" nclones="6" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="395" endline="407" pcid="5393">
    def test_sign_with_region_name(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request, region_name='foo')
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='foo'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="465" endline="478" pcid="5398">
    def test_sign_with_custom_signing_name(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             signing_name='foo')
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='foo',
            region_name='region_name'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="451" endline="464" pcid="5397">
    def test_sign_with_expires_in(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request, expires_in=2)
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='region_name',
            expires=2
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="422" endline="436" pcid="5395">
    def test_sign_with_region_name_overrides_context(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        self.request.context = {'signing': {'region': 'context-override'}}
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request,
                             region_name='param-override')
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='param-override'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="408" endline="421" pcid="5394">
    def test_sign_override_region_from_context(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        self.request.context = {'signing': {'region': 'my-override-region'}}
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request)
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='signing_name',
            region_name='my-override-region'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="437" endline="450" pcid="5396">
    def test_sign_override_signing_name_from_context(self):
        auth = mock.Mock()
        auth_types = {
            'v4': auth
        }
        self.request.context = {'signing': {'signing_name': 'override_name'}}
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.sign('operation_name', self.request)
        auth.assert_called_with(
            credentials=ReadOnlyCredentials('key', 'secret', None),
            service_name='override_name',
            region_name='region_name'
        )

</source>
</class>

<class classid="256" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="648" endline="660" pcid="5411">
    def test_generate_presigned_post_choose_signer_override(self):
        auth = mock.Mock()
        self.emitter.emit_until_response.return_value = (None, 'custom')
        auth_types = {
            's3v4-presign-post': self.auth,
            'custom-presign-post': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.generate_presigned_post(self.request_dict)
        auth.assert_called_with(
            credentials=self.fixed_credentials, region_name='region_name',
            service_name='signing_name')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="661" endline="674" pcid="5412">
    def test_generate_presigne_post_choose_signer_override_known(self):
        auth = mock.Mock()
        self.emitter.emit_until_response.return_value = (
            None, 's3v4-presign-post')
        auth_types = {
            's3v4-presign-post': self.auth,
            'custom-presign-post': auth
        }
        with mock.patch.dict(botocore.auth.AUTH_TYPE_MAPS, auth_types):
            self.signer.generate_presigned_post(self.request_dict)
        self.auth.assert_called_with(
            credentials=self.fixed_credentials, region_name='region_name',
            service_name='signing_name')

</source>
</class>

<class classid="257" nclones="3" nlines="15" similarity="86">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="753" endline="772" pcid="5420">
    def test_generate_presigned_url(self):
        self.client.generate_presigned_url(
            'get_object', Params={'Bucket': self.bucket, 'Key': self.key})

        ref_request_dict = {
            'body': b'',
            'url': u'https://s3.us-east-1.amazonaws.com/mybucket/mykey',
            'headers': {},
            'query_string': {},
            'url_path': u'/mybucket/mykey',
            'method': u'GET',
            # mock.ANY is used because client parameter related events
            # inject values into the context. So using the context's exact
            # value for these tests will be a maintenance burden if
            # anymore customizations are added that inject into the context.
            'context': mock.ANY}
        self.generate_url_mock.assert_called_with(
            request_dict=ref_request_dict, expires_in=3600,
            operation_name='GetObject')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="818" endline="833" pcid="5425">
    def test_generate_presigned_url_override_http_method(self):
        self.client.generate_presigned_url(
            'get_object', Params={'Bucket': self.bucket, 'Key': self.key},
            HttpMethod='PUT')
        ref_request_dict = {
            'body': b'',
            'url': u'https://s3.us-east-1.amazonaws.com/mybucket/mykey',
            'headers': {},
            'query_string': {},
            'url_path': u'/mybucket/mykey',
            'method': u'PUT',
            'context': mock.ANY}
        self.generate_url_mock.assert_called_with(
            request_dict=ref_request_dict, expires_in=3600,
            operation_name='GetObject')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="802" endline="817" pcid="5424">
    def test_generate_presigned_url_expires(self):
        self.client.generate_presigned_url(
            'get_object', Params={'Bucket': self.bucket, 'Key': self.key},
            ExpiresIn=20)
        ref_request_dict = {
            'body': b'',
            'url': u'https://s3.us-east-1.amazonaws.com/mybucket/mykey',
            'headers': {},
            'query_string': {},
            'url_path': u'/mybucket/mykey',
            'method': u'GET',
            'context': mock.ANY}
        self.generate_url_mock.assert_called_with(
            request_dict=ref_request_dict, expires_in=20,
            operation_name='GetObject')

</source>
</class>

<class classid="258" nclones="3" nlines="16" similarity="87">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="881" endline="897" pcid="5430">
    def test_generate_presigned_post(self):
        self.client.generate_presigned_post(self.bucket, self.key)

        _, post_kwargs = self.presign_post_mock.call_args
        request_dict = post_kwargs['request_dict']
        fields = post_kwargs['fields']
        conditions = post_kwargs['conditions']
        self.assertEqual(
            request_dict['url'], 'https://s3.us-east-1.amazonaws.com/mybucket')
        self.assertEqual(post_kwargs['expires_in'], 3600)
        self.assertEqual(
            conditions,
            [{'bucket': 'mybucket'}, {'key': 'mykey'}])
        self.assertEqual(
            fields,
            {'key': 'mykey'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="916" endline="932" pcid="5432">
    def test_generate_presigned_post_expires(self):
        self.client.generate_presigned_post(
            self.bucket, self.key, ExpiresIn=50)
        _, post_kwargs = self.presign_post_mock.call_args
        request_dict = post_kwargs['request_dict']
        fields = post_kwargs['fields']
        conditions = post_kwargs['conditions']
        self.assertEqual(
            request_dict['url'], 'https://s3.us-east-1.amazonaws.com/mybucket')
        self.assertEqual(post_kwargs['expires_in'], 50)
        self.assertEqual(
            conditions,
            [{'bucket': 'mybucket'}, {'key': 'mykey'}])
        self.assertEqual(
            fields,
            {'key': 'mykey'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_signers.py" startline="898" endline="915" pcid="5431">
    def test_generate_presigned_post_with_filename(self):
        self.key = 'myprefix/${filename}'
        self.client.generate_presigned_post(self.bucket, self.key)

        _, post_kwargs = self.presign_post_mock.call_args
        request_dict = post_kwargs['request_dict']
        fields = post_kwargs['fields']
        conditions = post_kwargs['conditions']
        self.assertEqual(
            request_dict['url'], 'https://s3.us-east-1.amazonaws.com/mybucket')
        self.assertEqual(post_kwargs['expires_in'], 3600)
        self.assertEqual(
            conditions,
            [{'bucket': 'mybucket'}, ['starts-with', '$key', 'myprefix/']])
        self.assertEqual(
            fields,
            {'key': 'myprefix/${filename}'})

</source>
</class>

<class classid="259" nclones="20" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="44" endline="54" pcid="5439">
    def test_chain_builder_can_provide_instance(self):
        self.assert_chain_does_provide(
            instance_map={'instance_var': 'from-instance'},
            environ_map={},
            scoped_config_map={},
            create_config_chain_args={
                'instance_name': 'instance_var',
            },
            expected_value='from-instance',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="155" endline="165" pcid="5449">
    def test_chain_builder_can_provide_nested_config_var(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={'config_var': {'nested-key': 'nested-val'}},
            create_config_chain_args={
                'config_property_names': ('config_var', 'nested-key'),
            },
            expected_value='nested-val',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="67" endline="77" pcid="5441">
    def test_chain_builder_can_provide_env_var(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={'ENV_VAR': 'from-env'},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': 'ENV_VAR',
            },
            expected_value='from-env',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="177" endline="187" pcid="5451">
    def test_provide_value_from_config_list_looks_for_non_none_vals(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={'non_none_var': 'non_none_val'},
            create_config_chain_args={
                'config_property_names': ['none_var', 'non_none_var'],
            },
            expected_value='non_none_val',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="213" endline="223" pcid="5454">
    def test_provide_value_from_list_with_nested_var(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={'section': {'nested_var': 'nested_val'}},
            create_config_chain_args={
                'config_property_names': [('section', 'nested_var')],
            },
            expected_value='nested_val',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="202" endline="212" pcid="5453">
    def test_provide_value_from_config_list_if_all_vars_are_none(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={},
            create_config_chain_args={
                'config_property_names': ['config1', 'config2'],
            },
            expected_value=None,
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="89" endline="99" pcid="5443">
    def test_does_provide_value_if_variable_exists_in_env_var_list(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={'FOO': 'bar'},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO'],
            },
            expected_value='bar',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="100" endline="110" pcid="5444">
    def test_does_provide_first_non_none_value_first_in_env_var_list(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={'FOO': 'baz'},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO', 'BAR'],
            },
            expected_value='baz',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="78" endline="88" pcid="5442">
    def test_does_provide_none_if_no_variable_exists_in_env_var_list(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO'],
            },
            expected_value=None,
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="166" endline="176" pcid="5450">
    def test_provide_value_from_config_list(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={'var': 'val'},
            create_config_chain_args={
                'config_property_names': ['var'],
            },
            expected_value='val',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="144" endline="154" pcid="5448">
    def test_chain_builder_can_provide_config_var(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={'config_var': 'from-config'},
            create_config_chain_args={
                'config_property_names': 'config_var',
            },
            expected_value='from-config',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="133" endline="143" pcid="5447">
    def test_does_provide_first_value_when_both_env_vars_exist(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={'FOO': 'baz', 'BAR': 'buz'},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO', 'BAR'],
            },
            expected_value='baz',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="122" endline="132" pcid="5446">
    def test_does_provide_none_if_all_list_env_vars_are_none(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO', 'BAR'],
            },
            expected_value=None,
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="188" endline="201" pcid="5452">
    def test_provide_value_from_config_list_retrieves_first_non_none_val(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={},
            scoped_config_map={
                'first': 'first_val',
                'second': 'second_val'
            },
            create_config_chain_args={
                'config_property_names': ['first', 'second'],
            },
            expected_value='first_val',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="111" endline="121" pcid="5445">
    def test_does_provide_first_non_none_value_second_in_env_var_list(self):
        self.assert_chain_does_provide(
            instance_map={},
            environ_map={'BAR': 'baz'},
            scoped_config_map={},
            create_config_chain_args={
                'env_var_names': ['FOO', 'BAR'],
            },
            expected_value='baz',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="55" endline="66" pcid="5440">
    def test_chain_builder_can_skip_instance(self):
        self.assert_chain_does_provide(
            instance_map={'wrong_instance_var': 'instance'},
            environ_map={'ENV_VAR': 'env'},
            scoped_config_map={},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
            },
            expected_value='env',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="235" endline="248" pcid="5456">
    def test_chain_provider_does_follow_priority_instance_var(self):
        self.assert_chain_does_provide(
            instance_map={'instance_var': 'from-instance'},
            environ_map={'ENV_VAR': 'from-env'},
            scoped_config_map={'config_var': 'from-config'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-instance',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="263" endline="276" pcid="5458">
    def test_chain_provider_does_follow_priority_config(self):
        self.assert_chain_does_provide(
            instance_map={'wrong_instance_var': 'from-instance'},
            environ_map={'WRONG_ENV_VAR': 'from-env'},
            scoped_config_map={'config_var': 'from-config'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-config',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="249" endline="262" pcid="5457">
    def test_chain_provider_does_follow_priority_env_var(self):
        self.assert_chain_does_provide(
            instance_map={'wrong_instance_var': 'from-instance'},
            environ_map={'ENV_VAR': 'from-env'},
            scoped_config_map={'config_var': 'from-confi'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-env',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="277" endline="291" pcid="5459">
    def test_chain_provider_does_follow_priority_default(self):
        self.assert_chain_does_provide(
            instance_map={'wrong_instance_var': 'from-instance'},
            environ_map={'WRONG_ENV_VAR': 'from-env'},
            scoped_config_map={'wrong_config_var': 'from-config'},
            create_config_chain_args={
                'instance_name': 'instance_var',
                'env_var_names': 'ENV_VAR',
                'config_property_names': 'config_var',
                'default': 'from-default',
            },
            expected_value='from-default',
        )


</source>
</class>

<class classid="260" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="382" endline="392" pcid="5470">
    def assert_provides_value(self, config_file_values, config_var_name,
                              expected_value):
        fake_session = mock.Mock(spec=session.Session)
        fake_session.get_scoped_config.return_value = config_file_values
        property_provider = ScopedConfigProvider(
            config_var_name=config_var_name,
            session=fake_session,
        )
        value = property_provider.provide()
        self.assertEqual(value, expected_value)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_config_provider.py" startline="497" endline="508" pcid="5481">
    def assert_provides_value(self, config_file_values, section_name,
                              expected_value, override_providers=None):
        fake_session = mock.Mock(spec=session.Session)
        fake_session.get_scoped_config.return_value = config_file_values
        provider = SectionConfigProvider(
            section_name=section_name,
            session=fake_session,
            override_providers=override_providers
        )
        value = provider.provide()
        self.assertEqual(value, expected_value)

</source>
</class>

<class classid="261" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="104" endline="118" pcid="5490">
    def close_log_file_handler(self, tempdir, filename):
        logger = logging.getLogger('botocore')
        handlers = logger.handlers
        for handler in handlers[:]:
            if hasattr(handler, 'stream') and handler.stream.name == filename:
                handler.stream.close()
                logger.removeHandler(handler)
                os.remove(filename)
                # logging has an atexit handler that will try to flush/close
                # the file.  By setting this flag to False, we'll prevent it
                # from raising an exception, which is fine because we're
                # handling the closing of the file ourself.
                logging.raiseExceptions = False
        shutil.rmtree(tempdir)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="68" endline="82" pcid="5955">
    def close_log_file_handler(self, tempdir, filename):
        logger = logging.getLogger('botocore')
        handlers = logger.handlers
        for handler in handlers[:]:
            if hasattr(handler, 'stream') and handler.stream.name == filename:
                handler.stream.close()
                logger.removeHandler(handler)
                os.remove(filename)
                # logging has an atexit handler that will try to flush/close
                # the file.  By setting this flag to False, we'll prevent it
                # from raising an exception, which is fine because we're
                # handling the closing of the file ourself.
                logging.raiseExceptions = False
        shutil.rmtree(tempdir)

</source>
</class>

<class classid="262" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="193" endline="203" pcid="5501">
    def test_file_logger(self):
        tempdir = tempfile.mkdtemp()
        temp_file = os.path.join(tempdir, 'file_logger')
        self.session.set_file_logger(logging.DEBUG, temp_file)
        self.addCleanup(self.close_log_file_handler, tempdir, temp_file)
        self.session.get_credentials()
        self.assertTrue(os.path.isfile(temp_file))
        with open(temp_file) as logfile:
            s = logfile.read()
        self.assertTrue('Looking for credentials' in s)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="179" endline="189" pcid="5967">
    def test_file_logger(self):
        tempdir = tempfile.mkdtemp()
        temp_file = os.path.join(tempdir, 'file_logger')
        self.session.set_file_logger(logging.DEBUG, temp_file)
        self.addCleanup(self.close_log_file_handler, tempdir, temp_file)
        self.session.get_credentials()
        self.assertTrue(os.path.isfile(temp_file))
        with open(temp_file) as logfile:
            s = logfile.read()
        self.assertTrue('Looking for credentials' in s)

</source>
</class>

<class classid="263" nclones="4" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="209" endline="221" pcid="5503">
    def test_full_config_merges_creds_file_data(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            full_config = self.session.full_config
            self.assertEqual(full_config['profiles']['newprofile'],
                             {'aws_access_key_id': 'FROM_CREDS_FILE_1',
                              'aws_secret_access_key': 'FROM_CREDS_FILE_2'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="195" endline="207" pcid="5969">
    def test_full_config_merges_creds_file_data(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            full_config = self.session.full_config
            self.assertEqual(full_config['profiles']['newprofile'],
                             {'aws_access_key_id': 'FROM_CREDS_FILE_1',
                              'aws_secret_access_key': 'FROM_CREDS_FILE_2'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="222" endline="234" pcid="5504">
    def test_path_not_in_available_profiles(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            profiles = self.session.available_profiles
            self.assertEqual(
                set(profiles),
                set(['foo', 'default', 'newprofile']))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="208" endline="220" pcid="5970">
    def test_path_not_in_available_profiles(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            profiles = self.session.available_profiles
            self.assertEqual(
                set(profiles),
                set(['foo', 'default', 'newprofile']))

</source>
</class>

<class classid="264" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="279" endline="290" pcid="5510">
    def test_register_with_unique_id(self):
        calls = []
        handler = lambda **kwargs: calls.append(kwargs)
        self.session.register('foo', handler, unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls[0]['event_name'], 'foo')
        calls = []
        self.session.unregister('foo', unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls, [])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="267" endline="278" pcid="5976">
    def test_register_with_unique_id(self):
        calls = []
        handler = lambda **kwargs: calls.append(kwargs)
        self.session.register('foo', handler, unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls[0]['event_name'], 'foo')
        calls = []
        self.session.unregister('foo', unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls, [])


</source>
</class>

<class classid="265" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="418" endline="431" pcid="5528">
    def test_config_loader_delegation(self):
        session = create_session(profile='credfile-profile')
        with temporary_file('w') as f:
            f.write('[credfile-profile]\naws_access_key_id=a\n')
            f.write('aws_secret_access_key=b\n')
            f.flush()
            session.set_config_variable('credentials_file', f.name)
            # Now trying to retrieve the scoped config should pull in
            # values from the shared credentials file.
            self.assertEqual(session.get_scoped_config(),
                             {'aws_access_key_id': 'a',
                              'aws_secret_access_key': 'b'})


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="414" endline="428" pcid="5993">
    def test_config_loader_delegation(self):
        session = create_session(session_vars=self.env_vars,
                                 profile='credfile-profile')
        with temporary_file('w') as f:
            f.write('[credfile-profile]\naws_access_key_id=a\n')
            f.write('aws_secret_access_key=b\n')
            f.flush()
            session.set_config_variable('credentials_file', f.name)
            # Now trying to retrieve the scoped config should pull in
            # values from the shared credentials file.
            self.assertEqual(session.get_scoped_config(),
                             {'aws_access_key_id': 'a',
                              'aws_secret_access_key': 'b'})


</source>
</class>

<class classid="266" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="480" endline="493" pcid="5533">
    def test_credential_provider_not_called_when_creds_provided(self):
        cred_provider = mock.Mock()
        self.session.register_component(
            'credential_provider', cred_provider)
        self.session.create_client(
            'sts', 'us-west-2',
            aws_access_key_id='foo',
            aws_secret_access_key='bar',
            aws_session_token='baz')
        self.assertFalse(cred_provider.load_credentials.called,
                         "Credential provider was called even though "
                         "explicit credentials were provided to the "
                         "create_client call.")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="477" endline="490" pcid="5998">
    def test_credential_provider_not_called_when_creds_provided(self):
        cred_provider = mock.Mock()
        self.session.register_component(
            'credential_provider', cred_provider)
        self.session.create_client(
            'sts', 'us-west-2',
            aws_access_key_id='foo',
            aws_secret_access_key='bar',
            aws_session_token='baz')
        self.assertFalse(cred_provider.load_credentials.called,
                         "Credential provider was called even though "
                         "explicit credentials were provided to the "
                         "create_client call.")

</source>
</class>

<class classid="267" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="494" endline="507" pcid="5534">
    def test_cred_provider_called_when_partial_creds_provided(self):
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id='foo',
                aws_secret_access_key=None
            )
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id=None,
                aws_secret_access_key='foo',
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="491" endline="504" pcid="5999">
    def test_cred_provider_called_when_partial_creds_provided(self):
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id='foo',
                aws_secret_access_key=None
            )
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id=None,
                aws_secret_access_key='foo',
            )

</source>
</class>

<class classid="268" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="542" endline="558" pcid="5538">
    def test_create_client_with_merging_client_configs(self, client_creator):
        config = botocore.config.Config(region_name='us-west-2')
        other_config = botocore.config.Config(region_name='us-east-1')
        self.session.set_default_client_config(config)
        self.session.create_client('sts', config=other_config)

        # Grab the client config used in creating the client
        used_client_config = (
            client_creator.return_value.create_client.call_args[1][
                'client_config'])
        # Check that the client configs were merged
        self.assertEqual(used_client_config.region_name, 'us-east-1')
        # Make sure that the client config used is not the default client
        # config or the one passed in. It should be a new config.
        self.assertIsNot(used_client_config, config)
        self.assertIsNot(used_client_config, other_config)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="531" endline="547" pcid="6002">
    def test_create_client_with_merging_client_configs(self, client_creator):
        config = botocore.config.Config(region_name='us-west-2')
        other_config = botocore.config.Config(region_name='us-east-1')
        self.session.set_default_client_config(config)
        self.session.create_client('sts', config=other_config)

        # Grab the client config used in creating the client
        used_client_config = (
            client_creator.return_value.create_client.call_args[1][
                'client_config'])
        # Check that the client configs were merged
        self.assertEqual(used_client_config.region_name, 'us-east-1')
        # Make sure that the client config used is not the default client
        # config or the one passed in. It should be a new config.
        self.assertIsNot(used_client_config, config)
        self.assertIsNot(used_client_config, other_config)

</source>
</class>

<class classid="269" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="564" endline="580" pcid="5540">
    def test_create_client_with_region_and_client_config(self):
        config = botocore.config.Config()
        # Use a client config with no region configured.
        ec2_client = self.session.create_client(
            'ec2', region_name='us-west-2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # If the region name is changed, it should not change the
        # region of the client
        config.region_name = 'us-east-1'
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # Now make a new client with the updated client config.
        ec2_client = self.session.create_client(
            'ec2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="553" endline="569" pcid="6004">
    def test_create_client_with_region_and_client_config(self):
        config = botocore.config.Config()
        # Use a client config with no region configured.
        ec2_client = self.session.create_client(
            'ec2', region_name='us-west-2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # If the region name is changed, it should not change the
        # region of the client
        config.region_name = 'us-east-1'
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # Now make a new client with the updated client config.
        ec2_client = self.session.create_client(
            'ec2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-east-1')

</source>
</class>

<class classid="270" nclones="4" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="586" endline="597" pcid="5542">
    def test_create_client_with_ca_bundle_from_config(self, client_creator):
        with temporary_file('w') as f:
            del self.environ['FOO_PROFILE']
            self.environ['FOO_CONFIG_FILE'] = f.name
            f.write('[default]\n')
            f.write('foo_ca_bundle=config-certs.pem\n')
            f.flush()

            self.session.create_client('ec2', 'us-west-2')
            call_kwargs = client_creator.return_value.\
                create_client.call_args[1]
            self.assertEqual(call_kwargs['verify'], 'config-certs.pem')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="613" endline="633" pcid="5545">
    @mock.patch('botocore.client.ClientCreator')
    def test_create_client_verify_param_overrides_all(self, client_creator):
        with temporary_file('w') as f:
            # Set the ca cert using the config file
            del self.environ['FOO_PROFILE']
            self.environ['FOO_CONFIG_FILE'] = f.name
            f.write('[default]\n')
            f.write('foo_ca_bundle=config-certs.pem\n')
            f.flush()

            # Set the ca cert with an environment variable
            self.environ['FOO_AWS_CA_BUNDLE'] = 'env-certs.pem'

            # Set the ca cert using the verify parameter
            self.session.create_client(
                'ec2', 'us-west-2', verify='verify-certs.pem')
            call_kwargs = client_creator.return_value.\
                create_client.call_args[1]
            # The verify parameter should override all the other
            # configurations
            self.assertEqual(call_kwargs['verify'], 'verify-certs.pem')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="575" endline="587" pcid="6006">
    def test_create_client_with_ca_bundle_from_config(self, client_creator):
        with temporary_file('w') as f:
            del self.environ['FOO_PROFILE']
            self.environ['FOO_CONFIG_FILE'] = f.name
            self.session = create_session(session_vars=self.env_vars)
            f.write('[default]\n')
            f.write('foo_ca_bundle=config-certs.pem\n')
            f.flush()

            self.session.create_client('ec2', 'us-west-2')
            call_kwargs = client_creator.return_value.\
                create_client.call_args[1]
            self.assertEqual(call_kwargs['verify'], 'config-certs.pem')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="603" endline="624" pcid="6009">
    @mock.patch('botocore.client.ClientCreator')
    def test_create_client_verify_param_overrides_all(self, client_creator):
        with temporary_file('w') as f:
            # Set the ca cert using the config file
            del self.environ['FOO_PROFILE']
            self.environ['FOO_CONFIG_FILE'] = f.name
            self.session = create_session(session_vars=self.env_vars)
            f.write('[default]\n')
            f.write('foo_ca_bundle=config-certs.pem\n')
            f.flush()

            # Set the ca cert with an environment variable
            self.environ['FOO_AWS_CA_BUNDLE'] = 'env-certs.pem'

            # Set the ca cert using the verify parameter
            self.session.create_client(
                'ec2', 'us-west-2', verify='verify-certs.pem')
            call_kwargs = client_creator.return_value.\
                create_client.call_args[1]
            # The verify parameter should override all the other
            # configurations
            self.assertEqual(call_kwargs['verify'], 'verify-certs.pem')
</source>
</class>

<class classid="271" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="777" endline="794" pcid="5566">
        self.assertIs(self.components.get_component('foo'), second)

    def test_lazy_registration_factory_does_not_remove_from_list_on_error(self):
        class ArbitraryError(Exception):
            pass

        def bad_factory():
            raise ArbitraryError("Factory raises an exception.")

        self.components.lazy_register_component('foo', bad_factory)

        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')

        # Trying again should raise the same exception,
        # not an ValueError("Unknown component")
        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="699" endline="716" pcid="6020">
        self.assertIs(self.components.get_component('foo'), second)

    def test_lazy_registration_factory_does_not_remove_from_list_on_error(self):
        class ArbitraryError(Exception):
            pass

        def bad_factory():
            raise ArbitraryError("Factory raises an exception.")

        self.components.lazy_register_component('foo', bad_factory)

        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')

        # Trying again should raise the same exception,
        # not an ValueError("Unknown component")
        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')
</source>
</class>

<class classid="272" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_discovery.py" startline="316" endline="330" pcid="5592">
    def test_describe_endpoint_optional_fails_stale_cache(self):
        key = ()
        cache = {
            key: [{'Address': 'old.com', 'Expiration': 0}]
        }
        side_effect = [ConnectionError(error=None)] * 2
        self.construct_manager(cache=cache, side_effect=side_effect)
        kwargs = {'Operation': 'TestDiscoveryOptional'}
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        # This second call shouldn't go through as we just failed
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        self.client.describe_endpoints.call_args_list == [call()]

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_discovery.py" startline="343" endline="357" pcid="5594">
    def test_describe_endpoint_required_fails_stale_cache(self):
        key = ()
        cache = {
            key: [{'Address': 'old.com', 'Expiration': 0}]
        }
        side_effect = [ConnectionError(error=None)] * 2
        self.construct_manager(cache=cache, side_effect=side_effect)
        kwargs = {'Operation': 'TestDiscoveryRequired'}
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        # We have a stale endpoint, so this shouldn't fail or force a refresh
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'old.com')
        self.client.describe_endpoints.call_args_list == [call()]

</source>
</class>

<class classid="273" nclones="2" nlines="16" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_discovery.py" startline="358" endline="375" pcid="5595">
    def test_describe_endpoint_required_force_refresh_success(self):
        side_effect = [
            ConnectionError(error=None),
            {'Endpoints': [{
                'Address': 'new.com',
                'CachePeriodInMinutes': 2,
            }]},
        ]
        self.construct_manager(side_effect=side_effect)
        kwargs = {'Operation': 'TestDiscoveryRequired'}
        # First call will fail
        with self.assertRaises(EndpointDiscoveryRefreshFailed):
            self.manager.describe_endpoint(**kwargs)
        self.client.describe_endpoints.call_args_list == [call()]
        # Force a refresh if the cache is empty but discovery is required
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'new.com')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_discovery.py" startline="376" endline="395" pcid="5596">
    def test_describe_endpoint_retries_after_failing(self):
        fake_time = Mock()
        fake_time.side_effect = [0, 100, 200]
        side_effect = [
            ConnectionError(error=None),
            {'Endpoints': [{
                'Address': 'new.com',
                'CachePeriodInMinutes': 2,
            }]},
        ]
        self.construct_manager(side_effect=side_effect, time=fake_time)
        kwargs = {'Operation': 'TestDiscoveryOptional'}
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertIsNone(endpoint)
        self.client.describe_endpoints.call_args_list == [call()]
        # Second time should try again as enough time has elapsed
        endpoint = self.manager.describe_endpoint(**kwargs)
        self.assertEqual(endpoint, 'new.com')


</source>
</class>

<class classid="274" nclones="2" nlines="32" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="52" endline="93" pcid="5619">
    def test_response_metadata_parsed_for_query_service(self):
        parser = parsers.QueryParser()
        response = (
            '<OperationNameResponse>'
            '  <OperationNameResult><Str>myname</Str></OperationNameResult>'
            '  <ResponseMetadata>'
            '    <RequestId>request-id</RequestId>'
            '  </ResponseMetadata>'
            '</OperationNameResponse>').encode('utf-8')
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'resultWrapper': 'OperationNameResult',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    },
                    'Num': {
                        'shape': 'IntegerType',
                    }
                }
            },
            model.ShapeResolver({
                'StringType': {
                    'type': 'string',
                },
                'IntegerType': {
                    'type': 'integer',
                }
            })
        )
        parsed = parser.parse(
            {'body': response,
             'headers': {},
             'status_code': 200}, output_shape)
        self.assertEqual(
            parsed, {'Str': 'myname',
                     'ResponseMetadata': {'RequestId': 'request-id',
                                          'HTTPStatusCode': 200,
                                          'HTTPHeaders': {}}})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="94" endline="137" pcid="5620">
    def test_metadata_always_exists_for_query(self):
        # ResponseMetadata is used for more than just the request id. It
        # should always get populated, even if the request doesn't seem to
        # have an id.
        parser = parsers.QueryParser()
        response = (
            '<OperationNameResponse>'
            '  <OperationNameResult><Str>myname</Str></OperationNameResult>'
            '</OperationNameResponse>').encode('utf-8')
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'resultWrapper': 'OperationNameResult',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    },
                    'Num': {
                        'shape': 'IntegerType',
                    }
                }
            },
            model.ShapeResolver({
                'StringType': {
                    'type': 'string',
                },
                'IntegerType': {
                    'type': 'integer',
                }
            })
        )
        parsed = parser.parse(
            {'body': response, 'headers': {}, 'status_code': 200},
            output_shape)
        expected = {
            'Str': 'myname',
            'ResponseMetadata': {
                'HTTPStatusCode': 200,
                'HTTPHeaders': {}
            }
        }
        self.assertEqual(parsed, expected)

</source>
</class>

<class classid="275" nclones="3" nlines="21" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="138" endline="167" pcid="5621">
    def test_response_metadata_parsed_for_ec2(self):
        parser = parsers.EC2QueryParser()
        response = (
            '<OperationNameResponse>'
            '  <Str>myname</Str>'
            '  <requestId>request-id</requestId>'
            '</OperationNameResponse>').encode('utf-8')
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse({'headers': {},
                               'body': response,
                               'status_code': 200}, output_shape)
        # Note that the response metadata is normalized to match the query
        # protocol, even though this is not how it appears in the output.
        self.assertEqual(
            parsed, {'Str': 'myname',
                     'ResponseMetadata': {'RequestId': 'request-id',
                                          'HTTPStatusCode': 200,
                                          'HTTPHeaders': {}}})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="288" endline="313" pcid="5626">
    def test_response_metadata_on_rest_json_response(self):
        parser = parsers.RestJSONParser()
        response = b'{"Str": "mystring"}'
        headers = {'x-amzn-requestid': 'request-id'}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse({'body': response, 'headers': headers,
                               'status_code': 200}, output_shape)
        # Note that the response metadata is normalized to match the query
        # protocol, even though this is not how it appears in the output.
        self.assertEqual(
            parsed, {'Str': 'mystring',
                     'ResponseMetadata': {'RequestId': 'request-id',
                                          'HTTPStatusCode': 200,
                                          'HTTPHeaders': headers}})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="202" endline="227" pcid="5623">
    def test_response_metadata_on_json_request(self):
        parser = parsers.JSONParser()
        response = b'{"Str": "mystring"}'
        headers = {'x-amzn-requestid': 'request-id'}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse({'body': response, 'headers': headers,
                               'status_code': 200}, output_shape)
        # Note that the response metadata is normalized to match the query
        # protocol, even though this is not how it appears in the output.
        self.assertEqual(
            parsed, {'Str': 'mystring',
                     'ResponseMetadata': {'RequestId': 'request-id',
                                          'HTTPStatusCode': 200,
                                          'HTTPHeaders': headers}})

</source>
</class>

<class classid="276" nclones="3" nlines="23" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="168" endline="201" pcid="5622">
    def test_metadata_always_exists_for_ec2(self):
        # ResponseMetadata is used for more than just the request id. It
        # should always get populated, even if the request doesn't seem to
        # have an id.
        parser = parsers.EC2QueryParser()
        response = (
            '<OperationNameResponse>'
            '  <Str>myname</Str>'
            '</OperationNameResponse>').encode('utf-8')
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse(
            {'headers': {}, 'body': response, 'status_code': 200},
            output_shape)
        expected = {
            'Str': 'myname',
            'ResponseMetadata': {
                'HTTPStatusCode': 200,
                'HTTPHeaders': {}
            }
        }
        self.assertEqual(
            parsed, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="257" endline="287" pcid="5625">
    def test_metadata_always_exists_for_json(self):
        # ResponseMetadata is used for more than just the request id. It
        # should always get populated, even if the request doesn't seem to
        # have an id.
        parser = parsers.JSONParser()
        response = b'{"Str": "mystring"}'
        headers = {}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse(
            {'body': response, 'headers': headers, 'status_code': 200},
            output_shape)
        expected = {
            'Str': 'mystring',
            'ResponseMetadata': {
                'HTTPStatusCode': 200,
                'HTTPHeaders': headers
            }
        }
        self.assertEqual(parsed, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="314" endline="344" pcid="5627">
    def test_metadata_always_exists_on_rest_json_response(self):
        # ResponseMetadata is used for more than just the request id. It
        # should always get populated, even if the request doesn't seem to
        # have an id.
        parser = parsers.RestJSONParser()
        response = b'{"Str": "mystring"}'
        headers = {}
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        parsed = parser.parse(
            {'body': response, 'headers': headers, 'status_code': 200},
            output_shape)
        expected = {
            'Str': 'mystring',
            'ResponseMetadata': {
                'HTTPStatusCode': 200,
                'HTTPHeaders': headers
            }
        }
        self.assertEqual(parsed, expected)

</source>
</class>

<class classid="277" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="527" endline="541" pcid="5636">
    def create_arbitary_output_shape(self):
        output_shape = model.StructureShape(
            'OutputShape',
            {
                'type': 'structure',
                'members': {
                    'Str': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )
        return output_shape

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1008" endline="1022" pcid="5664">
    def setUp(self):
        self.error_shape = model.StructureShape(
            'ErrorShape',
            {
                'type': 'structure',
                'exception': True,
                'members': {
                    'ModeledField': {
                        'shape': 'StringType',
                    }
                }
            },
            model.ShapeResolver({'StringType': {'type': 'string'}})
        )

</source>
</class>

<class classid="278" nclones="3" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="623" endline="634" pcid="5645">
    def test_normal_blob_parsing(self):
        output_shape = model.Shape(shape_name='BlobType',
                                   shape_model={'type': 'blob'})
        parser = self.factory.create_parser('json')

        hello_world_b64 = b'"aGVsbG8gd29ybGQ="'
        expected_parsed = b'hello world'
        parsed = parser.parse(
            self.create_request_dict(with_body=hello_world_b64),
            output_shape)
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="635" endline="650" pcid="5646">
    def test_can_decorate_scalar_parsing(self):
        output_shape = model.Shape(shape_name='BlobType',
                                   shape_model={'type': 'blob'})
        # Here we're overriding the blob parser so that
        # we can change it to a noop parser.
        self.factory.set_parser_defaults(
            blob_parser=lambda x: x)
        parser = self.factory.create_parser('json')

        hello_world_b64 = b'"aGVsbG8gd29ybGQ="'
        expected_parsed = "aGVsbG8gd29ybGQ="
        parsed = parser.parse(
            self.create_request_dict(with_body=hello_world_b64),
            output_shape)
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="651" endline="668" pcid="5647">
    def test_can_decorate_timestamp_parser(self):
        output_shape = model.Shape(shape_name='datetime',
                                   shape_model={'type': 'timestamp'})
        # Here we're overriding the timestamp parser so that
        # we can change it to just convert a string to an integer
        # instead of converting to a datetime.
        self.factory.set_parser_defaults(
            timestamp_parser=lambda x: int(x))
        parser = self.factory.create_parser('json')

        timestamp_as_int = b'1407538750'
        expected_parsed = int(timestamp_as_int)
        parsed = parser.parse(
            self.create_request_dict(with_body=timestamp_as_int),
            output_shape)
        self.assertEqual(parsed, expected_parsed)


</source>
</class>

<class classid="279" nclones="3" nlines="12" similarity="91">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="672" endline="684" pcid="5648">
    def test_empty_rest_json_response(self):
        headers = {'x-amzn-requestid': 'request-id'}
        parser = parsers.RestJSONParser()
        output_shape = None
        parsed = parser.parse(
            {'body': b'', 'headers': headers, 'status_code': 200},
            output_shape)
        self.assertEqual(
            parsed,
            {'ResponseMetadata': {'RequestId': 'request-id',
                                  'HTTPStatusCode': 200,
                                  'HTTPHeaders': headers}})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="718" endline="732" pcid="5651">
    def test_empty_json_response(self):
        headers = {'x-amzn-requestid': 'request-id'}
        # Output shape of None represents no output shape in the model.
        output_shape = None
        parser = parsers.JSONParser()
        parsed = parser.parse(
            {'body': b'', 'headers': headers, 'status_code': 200},
            output_shape)
        self.assertEqual(
            parsed,
            {'ResponseMetadata': {'RequestId': 'request-id',
                                  'HTTPStatusCode': 200,
                                  'HTTPHeaders': headers}})


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="685" endline="698" pcid="5649">
    def test_empty_rest_xml_response(self):
        # This is the format used by cloudfront, route53.
        headers = {'x-amzn-requestid': 'request-id'}
        parser = parsers.RestXMLParser()
        output_shape = None
        parsed = parser.parse(
            {'body': b'', 'headers': headers, 'status_code': 200},
            output_shape)
        self.assertEqual(
            parsed,
            {'ResponseMetadata': {'RequestId': 'request-id',
                                  'HTTPStatusCode': 200,
                                  'HTTPHeaders': headers}})

</source>
</class>

<class classid="280" nclones="2" nlines="14" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="878" endline="900" pcid="5656">
    def test_parses_event_xml(self):
        headers = {
            'Header': 123,
            ':event-type': 'EventA'
        }
        body = (
            b'<Stats xmlns="">'
            b'  <StringField>abcde</StringField>'
            b'  <IntField>1234</IntField>'
            b'</Stats>'
        )
        parsed = self.parse_event(headers, body)
        expected = {
            'EventA': {
                'Header': 123,
                'Stats': {
                    'StringField': 'abcde',
                    'IntField': 1234
                }
            }
        }
        self.assertEqual(parsed, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="927" endline="947" pcid="5660">
    def test_parses_payload_implicit(self):
        headers = {
            'Header': 123,
            ':event-type': 'EventD'
        }
        body = (
            b'<EventD xmlns="">'
            b'  <StringField>abcde</StringField>'
            b'  <IntField>1234</IntField>'
            b'</EventD>'
        )
        parsed = self.parse_event(headers, body)
        expected = {
            'EventD': {
                'Header': 123,
                'StringField': 'abcde',
                'IntField': 1234
            }
        }
        self.assertEqual(parsed, expected)

</source>
</class>

<class classid="281" nclones="2" nlines="14" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="948" endline="965" pcid="5661">
    def test_parses_error_event(self):
        error_code = 'client/SomeError'
        error_message = 'You did something wrong'
        headers = {
            ':message-type': 'error',
            ':error-code': error_code,
            ':error-message': error_message
        }
        body = b''
        parsed = self.parse_event(headers, body, status_code=400)
        expected = {
            'Error': {
                'Code': error_code,
                'Message': error_message
            }
        }
        self.assertEqual(parsed, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="966" endline="982" pcid="5662">
    def test_parses_exception_event(self):
        self.parser = parsers.EventStreamJSONParser()
        error_code = 'EventException'
        headers = {
            ':message-type': 'exception',
            ':exception-type': error_code,
        }
        body = b'{"message": "You did something wrong"}'
        parsed = self.parse_event(headers, body, status_code=400)
        expected = {
            'Error': {
                'Code': error_code,
                'Message': 'You did something wrong'
            }
        }
        self.assertEqual(parsed, expected)

</source>
</class>

<class classid="282" nclones="2" nlines="12" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1023" endline="1044" pcid="5665">
    def test_response_metadata_errors_for_json_protocol(self):
        parser = parsers.JSONParser()
        response = {
            "body": b"""
                {"__type":"amazon.foo.validate#ValidationException",
                 "message":"this is a message"}
                """,
            "status_code": 400,
            "headers": {
                "x-amzn-requestid": "request-id"
            }
        }
        parsed = parser.parse(response, None)
        # Even (especially) on an error condition, the
        # ResponseMetadata should be populated.
        self.assertIn('ResponseMetadata', parsed)
        self.assertEqual(parsed['ResponseMetadata']['RequestId'], 'request-id')

        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error']['Message'], 'this is a message')
        self.assertEqual(parsed['Error']['Code'], 'ValidationException')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1045" endline="1063" pcid="5666">
    def test_response_metadata_errors_alternate_form_json_protocol(self):
        # Sometimes there is no '#' in the __type.  We need to be
        # able to parse this error message as well.
        parser = parsers.JSONParser()
        response = {
            "body": b"""
                {"__type":"ValidationException",
                 "message":"this is a message"}
                """,
            "status_code": 400,
            "headers": {
                "x-amzn-requestid": "request-id"
            }
        }
        parsed = parser.parse(response, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error']['Message'], 'this is a message')
        self.assertEqual(parsed['Error']['Code'], 'ValidationException')

</source>
</class>

<class classid="283" nclones="5" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1064" endline="1084" pcid="5667">
    def test_parse_error_response_for_query_protocol(self):
        body = (
            '<ErrorResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">'
            '  <Error>'
            '    <Type>Sender</Type>'
            '    <Code>InvalidInput</Code>'
            '    <Message>ARN asdf is not valid.</Message>'
            '  </Error>'
            '  <RequestId>request-id</RequestId>'
            '</ErrorResponse>'
        ).encode('utf-8')
        parser = parsers.QueryParser()
        parsed = parser.parse({
            'body': body, 'headers': {}, 'status_code': 400}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': 'InvalidInput',
            'Message': 'ARN asdf is not valid.',
            'Type': 'Sender',
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1153" endline="1169" pcid="5671">
    def test_can_parse_rest_json_errors(self):
        body = (
            '{"Message":"Function not found: foo","Type":"User"}'
        ).encode('utf-8')
        headers = {
            'x-amzn-requestid': 'request-id',
            'x-amzn-errortype': 'ResourceNotFoundException:http://url/',
        }
        parser = parsers.RestJSONParser()
        parsed = parser.parse({
            'body': body, 'headers': headers, 'status_code': 400}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': 'ResourceNotFoundException',
            'Message': 'Function not found: foo',
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1111" endline="1131" pcid="5669">
    def test_can_parser_ec2_errors(self):
        body = (
            '<Response>'
            '  <Errors>'
            '    <Error>'
            '      <Code>InvalidInstanceID.NotFound</Code>'
            '      <Message>The instance ID i-12345 does not exist</Message>'
            '    </Error>'
            '  </Errors>'
            '  <RequestID>06f382b0-d521-4bb6-988c-ca49d5ae6070</RequestID>'
            '</Response>'
        ).encode('utf-8')
        parser = parsers.EC2QueryParser()
        parsed = parser.parse({
            'body': body, 'headers': {}, 'status_code': 400}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': 'InvalidInstanceID.NotFound',
            'Message': 'The instance ID i-12345 does not exist',
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1132" endline="1152" pcid="5670">
    def test_can_parse_rest_xml_errors(self):
        body = (
            '<ErrorResponse xmlns="https://route53.amazonaws.com/doc/2013-04-01/">'
            '  <Error>'
            '    <Type>Sender</Type>'
            '    <Code>NoSuchHostedZone</Code>'
            '    <Message>No hosted zone found with ID: foobar</Message>'
            '  </Error>'
            '  <RequestId>bc269cf3-d44f-11e5-8779-2d21c30eb3f1</RequestId>'
            '</ErrorResponse>'
        ).encode('utf-8')
        parser = parsers.RestXMLParser()
        parsed = parser.parse({
            'body': body, 'headers': {}, 'status_code': 400}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': 'NoSuchHostedZone',
            'Message': 'No hosted zone found with ID: foobar',
            'Type': 'Sender',
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1085" endline="1110" pcid="5668">
    def test_can_parse_sdb_error_response_query_protocol(self):
        body = (
            '<OperationNameResponse>'
            '    <Errors>'
            '        <Error>'
            '            <Code>1</Code>'
            '            <Message>msg</Message>'
            '        </Error>'
            '    </Errors>'
            '    <RequestId>abc-123</RequestId>'
            '</OperationNameResponse>'
        ).encode('utf-8')
        parser = parsers.QueryParser()
        parsed = parser.parse({
            'body': body, 'headers': {}, 'status_code': 500}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': '1',
            'Message': 'msg'
        })
        self.assertEqual(parsed['ResponseMetadata'], {
            'RequestId': 'abc-123',
            'HTTPStatusCode': 500,
            'HTTPHeaders': {}
        })

</source>
</class>

<class classid="284" nclones="3" nlines="14" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1170" endline="1187" pcid="5672">
    def test_error_response_with_no_body_rest_json(self):
        parser = parsers.RestJSONParser()
        response = b''
        headers = {'content-length': '0', 'connection': 'keep-alive'}
        output_shape = None
        parsed = parser.parse({'body': response, 'headers': headers,
                               'status_code': 504}, output_shape)

        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': '504',
            'Message': 'Gateway Timeout'
        })
        self.assertEqual(parsed['ResponseMetadata'], {
            'HTTPStatusCode': 504,
            'HTTPHeaders': headers
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1206" endline="1227" pcid="5674">
    def test_error_response_with_xml_body_rest_json(self):
        parser = parsers.RestJSONParser()
        response = (
            '<AccessDeniedException>'
            '   <Message>Unable to determine service/operation name to be authorized</Message>'
            '</AccessDeniedException>'
        ).encode('utf-8')
        headers = {'content-length': '0', 'connection': 'keep-alive'}
        output_shape = None
        parsed = parser.parse({'body': response, 'headers': headers,
                               'status_code': 403}, output_shape)

        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': '403',
            'Message': response.decode('utf-8')
        })
        self.assertEqual(parsed['ResponseMetadata'], {
            'HTTPStatusCode': 403,
            'HTTPHeaders': headers
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1188" endline="1205" pcid="5673">
    def test_error_response_with_string_body_rest_json(self):
        parser = parsers.RestJSONParser()
        response = b'HTTP content length exceeded 1049600 bytes.'
        headers = {'content-length': '0', 'connection': 'keep-alive'}
        output_shape = None
        parsed = parser.parse({'body': response, 'headers': headers,
                               'status_code': 413}, output_shape)

        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': '413',
            'Message': response.decode('utf-8')
        })
        self.assertEqual(parsed['ResponseMetadata'], {
            'HTTPStatusCode': 413,
            'HTTPHeaders': headers
        })

</source>
</class>

<class classid="285" nclones="2" nlines="19" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1228" endline="1259" pcid="5675">
    def test_s3_error_response(self):
        body = (
            '<Error>'
            '  <Code>NoSuchBucket</Code>'
            '  <Message>error message</Message>'
            '  <BucketName>asdf</BucketName>'
            '  <RequestId>EF1EF43A74415102</RequestId>'
            '  <HostId>hostid</HostId>'
            '</Error>'
        ).encode('utf-8')
        headers = {
            'x-amz-id-2': 'second-id',
            'x-amz-request-id': 'request-id'
        }
        parser = parsers.RestXMLParser()
        parsed = parser.parse(
            {'body': body, 'headers': headers, 'status_code': 400}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': 'NoSuchBucket',
            'Message': 'error message',
            'BucketName': 'asdf',
            # We don't want the RequestId/HostId because they're already
            # present in the ResponseMetadata key.
        })
        self.assertEqual(parsed['ResponseMetadata'], {
            'RequestId': 'request-id',
            'HostId': 'second-id',
            'HTTPStatusCode': 400,
            'HTTPHeaders': headers
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1260" endline="1284" pcid="5676">
    def test_s3_error_response_with_no_body(self):
        # If you try to HeadObject a key that does not exist,
        # you will get an empty body.  When this happens
        # we expect that we will use Code/Message from the
        # HTTP status code.
        body = ''
        headers = {
            'x-amz-id-2': 'second-id',
            'x-amz-request-id': 'request-id'
        }
        parser = parsers.RestXMLParser()
        parsed = parser.parse(
            {'body': body, 'headers': headers, 'status_code': 404}, None)
        self.assertIn('Error', parsed)
        self.assertEqual(parsed['Error'], {
            'Code': '404',
            'Message': 'Not Found',
        })
        self.assertEqual(parsed['ResponseMetadata'], {
            'RequestId': 'request-id',
            'HostId': 'second-id',
            'HTTPStatusCode': 404,
            'HTTPHeaders': headers
        })

</source>
</class>

<class classid="286" nclones="5" nlines="14" similarity="91">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1326" endline="1342" pcid="5680">
    def test_can_parse_rest_json_modeled_fields(self):
        body = (
            b'{"ModeledField":"Some modeled field",'
            b'"Message":"Some message"}'
        )
        parser = parsers.RestJSONParser()
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1343" endline="1363" pcid="5681">
    def test_can_parse_rest_xml_modeled_fields(self):
        parser = parsers.RestXMLParser()
        body = (
            b'<?xml version="1.0"?>\n<ErrorResponse xmlns="http://foo.bar">'
            b'<Error><Type>Sender</Type><Code>NoSuchDistribution</Code>'
            b'<Message>The specified distribution does not exist.</Message>'
            b'<ModeledField>Some modeled field</ModeledField>'
            b'</Error>'
            b'</ErrorResponse>'
        )
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1384" endline="1404" pcid="5683">
    def test_can_parse_query_modeled_fields(self):
        parser = parsers.QueryParser()
        body = (
            b'<?xml version="1.0"?>\n<ErrorResponse xmlns="http://foo.bar">'
            b'<Error><Type>Sender</Type><Code>SomeCode</Code>'
            b'<Message>A message</Message>'
            b'<ModeledField>Some modeled field</ModeledField>'
            b'</Error>'
            b'</ErrorResponse>'
        )
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1405" endline="1422" pcid="5684">
    def test_can_parse_json_modeled_fields(self):
        body = (
            b'{"ModeledField":"Some modeled field",'
            b'"Message":"Some message",'
            b'"__type": "Prefix#SomeError"}'
        )
        parser = parsers.JSONParser()
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_parsers.py" startline="1364" endline="1383" pcid="5682">
    def test_can_parse_ec2_modeled_fields(self):
        body = (
            b'<Response><Errors><Error>'
            b'<Code>ExceptionShape</Code>'
            b'<Message>Foo message</Message>'
            b'<ModeledField>Some modeled field</ModeledField>'
            b'</Error></Errors></Response>'
        )
        parser = parsers.EC2QueryParser()
        response_dict = {
            'status_code': 400,
            'headers': {},
            'body': body,
        }
        parsed = parser.parse(response_dict, self.error_shape)
        expected_parsed = {
            'ModeledField': 'Some modeled field',
        }
        self.assertEqual(parsed, expected_parsed)

</source>
</class>

<class classid="287" nclones="3" nlines="14" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="249" endline="267" pcid="5707">

    def test_no_cache(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn
        )

        expected_response = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="268" endline="291" pcid="5708">

    def test_expiration_in_datetime_format(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                # Note the lack of isoformat(), we're using
                # a datetime.datetime type.  This will ensure
                # we test both parsing as well as serializing
                # from a given datetime because the credentials
                # are immediately expired.
                'Expiration': self.some_future_time()
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn
        )

        expected_response = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="686" endline="703" pcid="5726">

    def test_no_cache(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        refresher = credentials.AssumeRoleWithWebIdentityCredentialFetcher(
            client_creator, self.load_token, self.role_arn
        )
        expected_response = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
</source>
</class>

<class classid="288" nclones="4" nlines="21" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="292" endline="320" pcid="5709">

    def test_retrieves_from_cache(self):
        date_in_future = datetime.utcnow() + timedelta(seconds=1000)
        utc_timestamp = date_in_future.isoformat() + 'Z'
        cache_key = (
            '793d6e2f27667ab2da104824407e486bfec24a47'
        )
        cache = {
            cache_key: {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': utc_timestamp,
                }
            }
        }
        client_creator = mock.Mock()
        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn, cache=cache
        )

        expected_response = self.get_expected_creds_from_response(
            cache[cache_key]
        )
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
        client_creator.assert_not_called()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="704" endline="731" pcid="5727">

    def test_retrieves_from_cache(self):
        date_in_future = datetime.utcnow() + timedelta(seconds=1000)
        utc_timestamp = date_in_future.isoformat() + 'Z'
        cache_key = (
            '793d6e2f27667ab2da104824407e486bfec24a47'
        )
        cache = {
            cache_key: {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': utc_timestamp,
                }
            }
        }
        client_creator = mock.Mock()
        refresher = credentials.AssumeRoleWithWebIdentityCredentialFetcher(
            client_creator, self.load_token, self.role_arn, cache=cache
        )
        expected_response = self.get_expected_creds_from_response(
            cache[cache_key]
        )
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected_response)
        client_creator.assert_not_called()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1960" endline="1987" pcid="5815">
        expiry_time = refresh()['expiry_time']
        self.assertEqual(expiry_time, '2016-11-06T01:30:00UTC')

    def test_assume_role_retrieves_from_cache(self):
        date_in_future = datetime.utcnow() + timedelta(seconds=1000)
        utc_timestamp = date_in_future.isoformat() + 'Z'
        self.fake_config['profiles']['development']['role_arn'] = 'myrole'

        cache_key = (
            '793d6e2f27667ab2da104824407e486bfec24a47'
        )
        cache = {
            cache_key: {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': utc_timestamp,
                }
            }
        }
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(), mock.Mock(),
            cache=cache, profile_name='development')

        creds = provider.load()

        self.assertEqual(creds.access_key, 'foo-cached')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1988" endline="2022" pcid="5816">
        self.assertEqual(creds.secret_key, 'bar-cached')
        self.assertEqual(creds.token, 'baz-cached')

    def test_chain_prefers_cache(self):
        date_in_future = datetime.utcnow() + timedelta(seconds=1000)
        utc_timestamp = date_in_future.isoformat() + 'Z'

        # The profile we will be using has a cache entry, but the profile it
        # is sourcing from does not. This should result in the cached
        # credentials being used, and the source profile not being called.
        cache_key = (
            '3d440bf424caf7a5ee664fbf89139a84409f95c2'
        )
        cache = {
            cache_key: {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': utc_timestamp,
                }
            }
        }

        client_creator = self.create_client_creator([
            Exception("Attempted to call assume role when not needed.")
        ])

        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(), client_creator,
            cache=cache, profile_name='chained')

        creds = provider.load()

        self.assertEqual(creds.access_key, 'foo-cached')
</source>
</class>

<class classid="289" nclones="15" nlines="20" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="321" endline="347" pcid="5710">

    def test_cache_key_is_windows_safe(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        cache = {}
        client_creator = self.create_client_creator(with_response=response)

        role_arn = 'arn:aws:iam::role/foo-role'
        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, role_arn, cache=cache
        )

        refresher.fetch_credentials()

        # On windows, you cannot use a a ':' in the filename, so
        # we need to make sure that it doesn't make it into the cache key.
        cache_key = (
            '75c539f0711ba78c5b9e488d0add95f178a54d74'
        )
        self.assertIn(cache_key, cache)
        self.assertEqual(cache[cache_key], response)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2023" endline="2049" pcid="5817">
        self.assertEqual(creds.secret_key, 'bar-cached')
        self.assertEqual(creds.token, 'baz-cached')

    def test_cache_key_is_windows_safe(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        cache = {}
        self.fake_config['profiles']['development']['role_arn'] = (
            'arn:aws:iam::foo-role')

        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(),
            client_creator, cache=cache, profile_name='development')

        provider.load().get_frozen_credentials()
        # On windows, you cannot use a a ':' in the filename, so
        # we need to make sure it doesn't come up in the cache key.
        cache_key = (
            '3f8e35c8dca6211d496e830a2de723b2387921e3'
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="348" endline="373" pcid="5711">

    def test_cache_key_with_role_session_name(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        cache = {}
        client_creator = self.create_client_creator(with_response=response)
        role_session_name = 'my_session_name'

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn, cache=cache,
            extra_args={'RoleSessionName': role_session_name}
        )
        refresher.fetch_credentials()

        # This is the sha256 hex digest of the expected assume role args.
        cache_key = (
            '2964201f5648c8be5b9460a9cf842d73a266daf2'
        )
        self.assertIn(cache_key, cache)
        self.assertEqual(cache[cache_key], response)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2050" endline="2078" pcid="5818">
        self.assertIn(cache_key, cache)
        self.assertEqual(cache[cache_key], response)

    def test_cache_key_with_role_session_name(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        cache = {}
        self.fake_config['profiles']['development']['role_arn'] = (
            'arn:aws:iam::foo-role')
        self.fake_config['profiles']['development']['role_session_name'] = (
            'foo_role_session_name')

        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(),
            client_creator, cache=cache, profile_name='development')

        # The credentials won't actually be assumed until they're requested.
        provider.load().get_frozen_credentials()

        cache_key = (
            '5e75ce21b6a64ab183b29c4a159b6f0248121d51'
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="374" endline="408" pcid="5712">

    def test_cache_key_with_policy(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        cache = {}
        client_creator = self.create_client_creator(with_response=response)
        policy = json.dumps({
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": "*",
                    "Resource": "*"
                }
            ]
        })

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn, cache=cache,
            extra_args={'Policy': policy}
        )
        refresher.fetch_credentials()

        # This is the sha256 hex digest of the expected assume role args.
        cache_key = (
            '176f223d915e82456c253545e192aa21d68f5ab8'
        )
        self.assertIn(cache_key, cache)
        self.assertEqual(cache[cache_key], response)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="483" endline="514" pcid="5716">

    def test_policy_can_be_provided(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        policy = json.dumps({
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": "*",
                    "Resource": "*"
                }
            ]
        })

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn,
            extra_args={'Policy': policy}
        )
        refresher.fetch_credentials()

        client = client_creator.return_value
        client.assume_role.assert_called_with(
            RoleArn=self.role_arn, Policy=policy,
            RoleSessionName=mock.ANY)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="460" endline="482" pcid="5715">

    def test_external_id_can_be_provided(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        external_id = 'my_external_id'

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn,
            extra_args={'ExternalId': external_id}
        )
        refresher.fetch_credentials()

        client = client_creator.return_value
        client.assume_role.assert_called_with(
            RoleArn=self.role_arn, ExternalId=external_id,
            RoleSessionName=mock.ANY)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="515" endline="537" pcid="5717">

    def test_duration_seconds_can_be_provided(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        duration = 1234

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn,
            extra_args={'DurationSeconds': duration}
        )
        refresher.fetch_credentials()

        client = client_creator.return_value
        client.assume_role.assert_called_with(
            RoleArn=self.role_arn, DurationSeconds=duration,
            RoleSessionName=mock.ANY)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="438" endline="459" pcid="5714">

    def test_role_session_name_can_be_provided(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        role_session_name = 'myname'

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn,
            extra_args={'RoleSessionName': role_session_name}
        )
        refresher.fetch_credentials()

        client = client_creator.return_value
        client.assume_role.assert_called_with(
            RoleArn=self.role_arn, RoleSessionName=role_session_name)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="538" endline="565" pcid="5718">

    def test_mfa(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        prompter = mock.Mock(return_value='token-code')
        mfa_serial = 'mfa'

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn,
            extra_args={'SerialNumber': mfa_serial}, mfa_prompter=prompter
        )
        refresher.fetch_credentials()

        client = client_creator.return_value
        # In addition to the normal assume role args, we should also
        # inject the serial number from the config as well as the
        # token code that comes from prompting the user (the prompter
        # object).
        client.assume_role.assert_called_with(
            RoleArn='myrole', RoleSessionName=mock.ANY, SerialNumber='mfa',
            TokenCode='token-code')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2134" endline="2155" pcid="5821">
        client.assume_role.assert_called_with(
            RoleArn='myrole', RoleSessionName='myname')

    def test_external_id_provided(self):
        self.fake_config['profiles']['development']['external_id'] = 'myid'
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(),
            client_creator, cache={}, profile_name='development')

        # The credentials won't actually be assumed until they're requested.
        provider.load().get_frozen_credentials()

        client = client_creator.return_value
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2179" endline="2200" pcid="5823">
            RoleArn='myrole', RoleSessionName=mock.ANY,
            DurationSeconds=7200)

    def test_assume_role_with_bad_duration(self):
        self.fake_config['profiles']['development']['duration_seconds'] = 'garbage value'
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(), client_creator,
            cache={}, profile_name='development')

        # The credentials won't actually be assumed until they're requested.
        provider.load().get_frozen_credentials()

        client = client_creator.return_value
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2201" endline="2228" pcid="5824">
        client.assume_role.assert_called_with(
            RoleArn='myrole', RoleSessionName=mock.ANY)

    def test_assume_role_with_mfa(self):
        self.fake_config['profiles']['development']['mfa_serial'] = 'mfa'
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        prompter = mock.Mock(return_value='token-code')
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(), client_creator,
            cache={}, profile_name='development', prompter=prompter)

        # The credentials won't actually be assumed until they're requested.
        provider.load().get_frozen_credentials()

        client = client_creator.return_value
        # In addition to the normal assume role args, we should also
        # inject the serial number from the config as well as the
        # token code that comes from prompting the user (the prompter
        # object).
        client.assume_role.assert_called_with(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2156" endline="2178" pcid="5822">
        client.assume_role.assert_called_with(
            RoleArn='myrole', ExternalId='myid', RoleSessionName=mock.ANY)

    def test_assume_role_with_duration(self):
        self.fake_config['profiles']['development']['duration_seconds'] = 7200
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(), client_creator,
            cache={}, profile_name='development')

        # The credentials won't actually be assumed until they're requested.
        provider.load().get_frozen_credentials()

        client = client_creator.return_value
        client.assume_role.assert_called_with(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2111" endline="2133" pcid="5820">
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')

    def test_role_session_name_provided(self):
        dev_profile = self.fake_config['profiles']['development']
        dev_profile['role_session_name'] = 'myname'
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(),
            client_creator, cache={}, profile_name='development')

        # The credentials won't actually be assumed until they're requested.
        provider.load().get_frozen_credentials()

        client = client_creator.return_value
</source>
</class>

<class classid="290" nclones="2" nlines="23" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="409" endline="437" pcid="5713">

    def test_assume_role_in_cache_but_expired(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        cache = {
            'development--myrole': {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': datetime.now(tzlocal()),
                }
            }
        }

        refresher = credentials.AssumeRoleCredentialFetcher(
            client_creator, self.source_creds, self.role_arn, cache=cache
        )
        expected = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="732" endline="761" pcid="5728">

    def test_assume_role_in_cache_but_expired(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat(),
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        cache = {
            'development--myrole': {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': datetime.now(tzlocal()),
                }
            }
        }

        refresher = credentials.AssumeRoleWithWebIdentityCredentialFetcher(
            client_creator, self.load_token, self.role_arn, cache=cache
        )
        expected = self.get_expected_creds_from_response(response)
        response = refresher.fetch_credentials()

        self.assertEqual(response, expected)

</source>
</class>

<class classid="291" nclones="2" nlines="30" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="858" endline="895" pcid="5736">

    def test_assume_role_in_cache_but_expired(self):
        expired_creds = datetime.now(tzlocal())
        valid_creds = expired_creds + timedelta(hours=1)
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': valid_creds,
            },
        }
        cache = {
            'development--myrole': {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': expired_creds,
                }
            }
        }
        client_creator = self.create_client_creator(with_response=response)
        mock_loader_cls = self._mock_loader_cls('totally.a.token')
        provider = credentials.AssumeRoleWithWebIdentityProvider(
            load_config=self._load_config,
            client_creator=client_creator,
            cache=cache,
            profile_name=self.profile_name,
            token_loader_cls=mock_loader_cls,
        )

        creds = provider.load()

        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
        mock_loader_cls.assert_called_with('/some/path/token.jwt')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2079" endline="2110" pcid="5819">
        self.assertIn(cache_key, cache)
        self.assertEqual(cache[cache_key], response)

    def test_assume_role_in_cache_but_expired(self):
        expired_creds = datetime.now(tzlocal())
        valid_creds = expired_creds + timedelta(hours=1)
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': valid_creds,
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        cache = {
            'development--myrole': {
                'Credentials': {
                    'AccessKeyId': 'foo-cached',
                    'SecretAccessKey': 'bar-cached',
                    'SessionToken': 'baz-cached',
                    'Expiration': expired_creds,
                }
            }
        }
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(), client_creator,
            cache=cache, profile_name='development')

        creds = provider.load()

        self.assertEqual(creds.access_key, 'foo')
</source>
</class>

<class classid="292" nclones="5" nlines="12" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="941" endline="952" pcid="5739">

    def test_envvars_are_found_no_token(self):
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.method, 'env')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="953" endline="966" pcid="5740">

    def test_envvars_found_with_security_token(self):
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SECURITY_TOKEN': 'baz',
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
        self.assertEqual(creds.method, 'env')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1049" endline="1066" pcid="5747">

    def test_can_override_partial_env_var_mapping(self):
        # Only changing the access key mapping.
        # The other 2 use the default values of
        # AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN
        # use our specified env var names.
        environ = {
            'FOO_ACCESS_KEY': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SESSION_TOKEN': 'baz',
        }
        provider = credentials.EnvProvider(
            environ, {'access_key': 'FOO_ACCESS_KEY'}
        )
        creds = provider.load()
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="996" endline="1012" pcid="5744">

    def test_expiry_omitted_if_envvar_empty(self):
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SESSION_TOKEN': 'baz',
            'AWS_CREDENTIAL_EXPIRATION': '',
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        # Because we treat empty env vars the same as not being provided,
        # we should return static credentials and not a refreshable
        # credential.
        self.assertNotIsInstance(creds, credentials.RefreshableCredentials)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="967" endline="980" pcid="5741">

    def test_envvars_found_with_session_token(self):
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SESSION_TOKEN': 'baz',
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
        self.assertEqual(creds.method, 'env')
</source>
</class>

<class classid="293" nclones="3" nlines="12" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1013" endline="1027" pcid="5745">

    def test_error_when_expiry_required_but_empty(self):
        expiry_time = datetime.now(tzlocal()) - timedelta(hours=1)
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()

        del environ['AWS_CREDENTIAL_EXPIRATION']

        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            creds.get_frozen_credentials()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1239" endline="1254" pcid="5756">

    def test_credentials_throw_error_if_expiry_goes_away(self):
        expiry_time = datetime.now(tzlocal()) - timedelta(hours=1)
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()

        del environ['AWS_CREDENTIAL_EXPIRATION']

        with self.assertRaises(credentials.PartialCredentialsError):
            creds.get_frozen_credentials()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1114" endline="1131" pcid="5751">

    def test_missing_access_key_id_raises_error(self):
        expiry_time = datetime.now(tzlocal()) - timedelta(hours=1)
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()

        del environ['AWS_ACCESS_KEY_ID']

        # Since the credentials are expired, we'll trigger a refresh
        # whenever we try to access them. At that refresh time, the relevant
        # environment variables are incomplete, so an error will be raised.
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            creds.get_frozen_credentials()
</source>
</class>

<class classid="294" nclones="3" nlines="23" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1132" endline="1170" pcid="5752">

    def test_credentials_refresh(self):
        # First initialize the credentials with an expired credential set.
        expiry_time = datetime.now(tzlocal()) - timedelta(hours=1)
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SESSION_TOKEN': 'baz',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        self.assertIsInstance(creds, credentials.RefreshableCredentials)

        # Since the credentials are expired, we'll trigger a refresh whenever
        # we try to access them. But at this point the environment hasn't been
        # updated, so when it refreshes it will trigger an exception because
        # the new creds are still expired.
        error_message = (
            "Credentials were refreshed, but the refreshed credentials are "
            "still expired."
        )
        with self.assertRaisesRegex(RuntimeError, error_message):
            creds.get_frozen_credentials()

        # Now we update the environment with non-expired credentials,
        # so when we access the creds it will refresh and grab the new ones.
        expiry_time = datetime.now(tzlocal()) + timedelta(hours=1)
        environ.update({
            'AWS_ACCESS_KEY_ID': 'bin',
            'AWS_SECRET_ACCESS_KEY': 'bam',
            'AWS_SESSION_TOKEN': 'biz',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        })

        frozen = creds.get_frozen_credentials()
        self.assertEqual(frozen.access_key, 'bin')
        self.assertEqual(frozen.secret_key, 'bam')
        self.assertEqual(frozen.token, 'biz')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1171" endline="1200" pcid="5753">

    def test_credentials_only_refresh_when_needed(self):
        expiry_time = datetime.now(tzlocal()) + timedelta(hours=2)
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SESSION_TOKEN': 'baz',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        }
        provider = credentials.EnvProvider(environ)

        # Perform the initial credential load
        creds = provider.load()

        # Now that the initial load has been performed, we go ahead and
        # change the environment. If the credentials were expired,
        # they would immediately refresh upon access and we'd get the new
        # ones. Since they've got plenty of time, they shouldn't refresh.
        expiry_time = datetime.now(tzlocal()) + timedelta(hours=3)
        environ.update({
            'AWS_ACCESS_KEY_ID': 'bin',
            'AWS_SECRET_ACCESS_KEY': 'bam',
            'AWS_SESSION_TOKEN': 'biz',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        })

        frozen = creds.get_frozen_credentials()
        self.assertEqual(frozen.access_key, 'foo')
        self.assertEqual(frozen.secret_key, 'bar')
        self.assertEqual(frozen.token, 'baz')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1212" endline="1238" pcid="5755">

    def test_credentials_do_not_become_refreshable(self):
        environ = {
            'AWS_ACCESS_KEY_ID': 'foo',
            'AWS_SECRET_ACCESS_KEY': 'bar',
            'AWS_SESSION_TOKEN': 'baz',
        }
        provider = credentials.EnvProvider(environ)
        creds = provider.load()
        frozen = creds.get_frozen_credentials()
        self.assertEqual(frozen.access_key, 'foo')
        self.assertEqual(frozen.secret_key, 'bar')
        self.assertEqual(frozen.token, 'baz')

        expiry_time = datetime.now(tzlocal()) - timedelta(hours=1)
        environ.update({
            'AWS_ACCESS_KEY_ID': 'bin',
            'AWS_SECRET_ACCESS_KEY': 'bam',
            'AWS_SESSION_TOKEN': 'biz',
            'AWS_CREDENTIAL_EXPIRATION': expiry_time.isoformat(),
        })

        frozen = creds.get_frozen_credentials()
        self.assertEqual(frozen.access_key, 'foo')
        self.assertEqual(frozen.secret_key, 'bar')
        self.assertEqual(frozen.token, 'baz')
        self.assertNotIsInstance(creds, credentials.RefreshableCredentials)
</source>
</class>

<class classid="295" nclones="5" nlines="16" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1260" endline="1276" pcid="5758">

    def test_credential_file_exists_default_profile(self):
        self.ini_parser.return_value = {
            'default': {
                'aws_access_key_id': 'foo',
                'aws_secret_access_key': 'bar',
            }
        }
        provider = credentials.SharedCredentialProvider(
            creds_filename='~/.aws/creds', profile_name='default',
            ini_parser=self.ini_parser)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertIsNone(creds.token)
        self.assertEqual(creds.method, 'shared-credentials-file')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1428" endline="1452" pcid="5770">

    def test_env_var_set_for_boto_location(self):
        environ = {
            'BOTO_CONFIG': 'alternate-config.cfg'
        }
        self.ini_parser.return_value = {
            'Credentials': {
                # boto's config file does not support a session token
                # so we only test for access_key/secret_key.
                'aws_access_key_id': 'a',
                'aws_secret_access_key': 'b',
            }
        }
        provider = credentials.BotoProvider(environ=environ,
                                            ini_parser=self.ini_parser)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'a')
        self.assertEqual(creds.secret_key, 'b')
        self.assertIsNone(creds.token)
        self.assertEqual(creds.method, 'boto-config')

        # Assert that the parser was called with the filename specified
        # in the env var.
        self.ini_parser.assert_called_with('alternate-config.cfg')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1290" endline="1307" pcid="5760">

    def test_credentials_file_exists_with_session_token(self):
        self.ini_parser.return_value = {
            'default': {
                'aws_access_key_id': 'foo',
                'aws_secret_access_key': 'bar',
                'aws_session_token': 'baz',
            }
        }
        provider = credentials.SharedCredentialProvider(
            creds_filename='~/.aws/creds', profile_name='default',
            ini_parser=self.ini_parser)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
        self.assertEqual(creds.method, 'shared-credentials-file')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1409" endline="1427" pcid="5769">

    def test_boto_config_file_exists_in_home_dir(self):
        environ = {}
        self.ini_parser.return_value = {
            'Credentials': {
                # boto's config file does not support a session token
                # so we only test for access_key/secret_key.
                'aws_access_key_id': 'a',
                'aws_secret_access_key': 'b',
            }
        }
        provider = credentials.BotoProvider(environ=environ,
                                            ini_parser=self.ini_parser)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'a')
        self.assertEqual(creds.secret_key, 'b')
        self.assertIsNone(creds.token)
        self.assertEqual(creds.method, 'boto-config')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1308" endline="1332" pcid="5761">

    def test_credentials_file_with_multiple_profiles(self):
        self.ini_parser.return_value = {
            # Here the user has a 'default' and a 'dev' profile.
            'default': {
                'aws_access_key_id': 'a',
                'aws_secret_access_key': 'b',
                'aws_session_token': 'c',
            },
            'dev': {
                'aws_access_key_id': 'd',
                'aws_secret_access_key': 'e',
                'aws_session_token': 'f',
            },
        }
        # And we specify a profile_name of 'dev'.
        provider = credentials.SharedCredentialProvider(
            creds_filename='~/.aws/creds', profile_name='dev',
            ini_parser=self.ini_parser)
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'd')
        self.assertEqual(creds.secret_key, 'e')
        self.assertEqual(creds.token, 'f')
        self.assertEqual(creds.method, 'shared-credentials-file')
</source>
</class>

<class classid="296" nclones="2" nlines="15" similarity="93">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1750" endline="1772" pcid="5800">
        with self.assertRaises(botocore.exceptions.UnknownCredentialError):
            provider.source_credentials('CustomUnknown')

    def _assert_assume_role_creds_returned_with_shared_file(self, provider):
        assume_role_provider = mock.Mock(spec=AssumeRoleProvider)
        assume_role_provider.METHOD = 'assume-role'
        assume_role_provider.CANONICAL_NAME = None

        source = credentials.CanonicalNameCredentialSourcer(providers=[
            assume_role_provider, provider
        ])

        # If the assume role provider returns credentials, those should be
        # what is returned.
        assume_role_provider.load.return_value = self.fake_creds
        provider.load.return_value = credentials.Credentials(
            'd', 'e', 'f'
        )

        creds = source.source_credentials(provider.CANONICAL_NAME)
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'a')
        self.assertEqual(creds.secret_key, 'b')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1773" endline="1795" pcid="5801">
        self.assertEqual(creds.token, 'c')
        self.assertFalse(provider.load.called)

    def _assert_returns_creds_if_assume_role_not_used(self, provider):
        assume_role_provider = mock.Mock(spec=AssumeRoleProvider)
        assume_role_provider.METHOD = 'assume-role'
        assume_role_provider.CANONICAL_NAME = None

        source = credentials.CanonicalNameCredentialSourcer(providers=[
            assume_role_provider, provider
        ])

        # If the assume role provider returns nothing, then whatever is in
        # the config provider should be returned.
        assume_role_provider.load.return_value = None
        provider.load.return_value = credentials.Credentials(
            'd', 'e', 'f'
        )

        creds = source.source_credentials(provider.CANONICAL_NAME)
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'd')
        self.assertEqual(creds.secret_key, 'e')
</source>
</class>

<class classid="297" nclones="2" nlines="16" similarity="93">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1898" endline="1917" pcid="5812">
        timeobj = datetime.now(tzlocal())
        return timeobj + timedelta(hours=24)

    def test_assume_role_with_no_cache(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                'Expiration': self.some_future_time().isoformat()
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(),
            client_creator, cache={}, profile_name='development')

        creds = provider.load()

        self.assertEqual(creds.access_key, 'foo')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="1918" endline="1942" pcid="5813">
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')

    def test_assume_role_with_datetime(self):
        response = {
            'Credentials': {
                'AccessKeyId': 'foo',
                'SecretAccessKey': 'bar',
                'SessionToken': 'baz',
                # Note the lack of isoformat(), we're using
                # a datetime.datetime type.  This will ensure
                # we test both parsing as well as serializing
                # from a given datetime because the credentials
                # are immediately expired.
                'Expiration': datetime.now(tzlocal()) + timedelta(hours=20)
            },
        }
        client_creator = self.create_client_creator(with_response=response)
        provider = credentials.AssumeRoleProvider(
            self.create_config_loader(),
            client_creator, cache={}, profile_name='development')

        creds = provider.load()

        self.assertEqual(creds.access_key, 'foo')
</source>
</class>

<class classid="298" nclones="3" nlines="20" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2821" endline="2843" pcid="5867">
        fetcher.full_url = self.full_url
        return fetcher

    def test_retrieve_from_provider_if_env_var_present(self):
        environ = {
            'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI': '/latest/credentials?id=foo'
        }
        fetcher = self.create_fetcher()
        timeobj = datetime.now(tzlocal())
        timestamp = (timeobj + timedelta(hours=24)).isoformat()
        fetcher.retrieve_full_uri.return_value = {
            "AccessKeyId" : "access_key",
            "SecretAccessKey" : "secret_key",
            "Token" : "token",
            "Expiration" : timestamp,
        }
        provider = credentials.ContainerProvider(environ, fetcher)
        creds = provider.load()

        fetcher.retrieve_full_uri.assert_called_with(
            self.full_url('/latest/credentials?id=foo'), headers=None)
        self.assertEqual(creds.access_key, 'access_key')
        self.assertEqual(creds.secret_key, 'secret_key')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2938" endline="2962" pcid="5872">
        self.assertEqual(creds.token, 'token')
        self.assertEqual(creds.method, 'container-role')

    def test_can_pass_basic_auth_token(self):
        environ = {
            'AWS_CONTAINER_CREDENTIALS_FULL_URI': 'http://localhost/foo',
            'AWS_CONTAINER_AUTHORIZATION_TOKEN': 'Basic auth-token',
        }
        fetcher = self.create_fetcher()
        timeobj = datetime.now(tzlocal())
        timestamp = (timeobj + timedelta(hours=24)).isoformat()
        fetcher.retrieve_full_uri.return_value = {
            "AccessKeyId" : "access_key",
            "SecretAccessKey" : "secret_key",
            "Token" : "token",
            "Expiration" : timestamp,
        }
        provider = credentials.ContainerProvider(environ, fetcher)
        creds = provider.load()

        fetcher.retrieve_full_uri.assert_called_with(
            'http://localhost/foo', headers={'Authorization': 'Basic auth-token'})
        self.assertEqual(creds.access_key, 'access_key')
        self.assertEqual(creds.secret_key, 'secret_key')
        self.assertEqual(creds.token, 'token')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2915" endline="2937" pcid="5871">
        with self.assertRaises(raised_exception):
            frozen_creds = creds.get_frozen_credentials()

    def test_can_use_full_url(self):
        environ = {
            'AWS_CONTAINER_CREDENTIALS_FULL_URI': 'http://localhost/foo'
        }
        fetcher = self.create_fetcher()
        timeobj = datetime.now(tzlocal())
        timestamp = (timeobj + timedelta(hours=24)).isoformat()
        fetcher.retrieve_full_uri.return_value = {
            "AccessKeyId" : "access_key",
            "SecretAccessKey" : "secret_key",
            "Token" : "token",
            "Expiration" : timestamp,
        }
        provider = credentials.ContainerProvider(environ, fetcher)
        creds = provider.load()

        fetcher.retrieve_full_uri.assert_called_with('http://localhost/foo',
                                                     headers=None)
        self.assertEqual(creds.access_key, 'access_key')
        self.assertEqual(creds.secret_key, 'secret_key')
</source>
</class>

<class classid="299" nclones="5" nlines="18" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="2997" endline="3020" pcid="5879">
        provider = self.create_process_provider()
        self.assertIsNone(provider.load())

    def test_can_retrieve_via_process(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            'AccessKeyId': 'foo',
            'SecretAccessKey': 'bar',
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertEqual(creds.token, 'baz')
        self.assertEqual(creds.method, 'custom-process')
        self.popen_mock.assert_called_with(
            ['my-process'],
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3021" endline="3042" pcid="5880">
            stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )

    def test_can_pass_arguments_through(self):
        self.loaded_config['profiles'] = {
            'default': {
                'credential_process': 'my-process --foo --bar "one two"'
            }
        }
        self._set_process_return_value({
            'Version': 1,
            'AccessKeyId': 'foo',
            'SecretAccessKey': 'bar',
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.popen_mock.assert_called_with(
            ['my-process', '--foo', '--bar', 'one two'],
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3158" endline="3177" pcid="5887">
        with self.assertRaisesRegex(exception, 'Missing required key'):
            provider.load()

    def test_missing_session_token(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            'AccessKeyId': 'foo',
            'SecretAccessKey': 'bar',
            # Missing session token.
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3178" endline="3197" pcid="5888">
        self.assertIsNone(creds.token)
        self.assertEqual(creds.method, 'custom-process')

    def test_missing_expiration(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            'AccessKeyId': 'foo',
            'SecretAccessKey': 'bar',
            'SessionToken': 'baz',
            # Missing expiration.
        })

        provider = self.create_process_provider()
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3198" endline="3217" pcid="5889">
        self.assertEqual(creds.token, 'baz')
        self.assertEqual(creds.method, 'custom-process')

    def test_missing_expiration_and_session_token(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            'AccessKeyId': 'foo',
            'SecretAccessKey': 'bar',
            # Missing session token and expiration
        })

        provider = self.create_process_provider()
        creds = provider.load()
        self.assertIsNotNone(creds)
        self.assertEqual(creds.access_key, 'foo')
        self.assertEqual(creds.secret_key, 'bar')
        self.assertIsNone(creds.token)
</source>
</class>

<class classid="300" nclones="4" nlines="14" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3089" endline="3106" pcid="5883">
        with self.assertRaisesRegex(exception, 'Error Message'):
            provider.load()

    def test_unsupported_version_raises_mismatch(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        bad_version = 100
        self._set_process_return_value({
            'Version': bad_version,
            'AccessKeyId': 'foo',
            'SecretAccessKey': 'bar',
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        exception = botocore.exceptions.CredentialRetrievalError
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3141" endline="3157" pcid="5886">
        with self.assertRaisesRegex(exception, 'Missing required key'):
            provider.load()

    def test_missing_secret_key_raises_exception(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            'AccessKeyId': 'foo',
            # Missing secret key.
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        exception = botocore.exceptions.CredentialRetrievalError
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3107" endline="3123" pcid="5884">
        with self.assertRaisesRegex(exception, 'Unsupported version'):
            provider.load()

    def test_missing_version_in_payload_returned_raises_exception(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            # Let's say they forget a 'Version' key.
            'AccessKeyId': 'foo',
            'SecretAccessKey': 'bar',
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        exception = botocore.exceptions.CredentialRetrievalError
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3124" endline="3140" pcid="5885">
        with self.assertRaisesRegex(exception, 'Unsupported version'):
            provider.load()

    def test_missing_access_key_raises_exception(self):
        self.loaded_config['profiles'] = {
            'default': {'credential_process': 'my-process'}
        }
        self._set_process_return_value({
            'Version': 1,
            # Missing access key.
            'SecretAccessKey': 'bar',
            'SessionToken': 'baz',
            'Expiration': '2999-01-01T00:00:00Z',
        })

        provider = self.create_process_provider()
        exception = botocore.exceptions.CredentialRetrievalError
</source>
</class>

<class classid="301" nclones="2" nlines="14" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3392" endline="3406" pcid="5899">
            self.assertEqual(credentials.secret_key, 'bar')
            self.assertEqual(credentials.token, 'baz')

    def test_load_sso_credentials_with_cache(self):
        cached_creds = {
            'Credentials': {
                'AccessKeyId': 'cached-akid',
                'SecretAccessKey': 'cached-sak',
                'SessionToken': 'cached-st',
                'Expiration': self.expires_at.strftime('%Y-%m-%dT%H:%M:%S%Z'),
            }
        }
        self.cache[self.cached_creds_key] = cached_creds
        credentials = self.provider.load()
        self.assertEqual(credentials.access_key, 'cached-akid')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_credentials.py" startline="3407" endline="3424" pcid="5900">
        self.assertEqual(credentials.secret_key, 'cached-sak')
        self.assertEqual(credentials.token, 'cached-st')

    def test_load_sso_credentials_with_cache_expired(self):
        cached_creds = {
            'Credentials': {
                'AccessKeyId': 'expired-akid',
                'SecretAccessKey': 'expired-sak',
                'SessionToken': 'expired-st',
                'Expiration': '2002-10-22T20:52:11UTC',
            }
        }
        self.cache[self.cached_creds_key] = cached_creds

        self._add_get_role_credentials_response()
        with self.stubber:
            credentials = self.provider.load()
            self.assertEqual(credentials.access_key, 'foo')
</source>
</class>

<class classid="302" nclones="2" nlines="21" similarity="95">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_compat.py" startline="107" endline="132" pcid="5914">
def get_windows_test_cases():
    windows_cases = {
        r'': [],
        r'spam \\': [r'spam', '\\\\'],
        r'spam ': [r'spam'],
        r' spam': [r'spam'],
        'spam eggs': [r'spam', r'eggs'],
        'spam\teggs': [r'spam', r'eggs'],
        'spam\neggs': ['spam\neggs'],
        '""': [''],
        '" "': [' '],
        '"\t"': ['\t'],
        '\\\\': ['\\\\'],
        '\\\\ ': ['\\\\'],
        '\\\\\t': ['\\\\'],
        r'\"': ['"'],
        # The following four test cases are official test cases given in
        # Microsoft's documentation.
        r'"abc" d e': [r'abc', r'd', r'e'],
        r'a\\b d"e f"g h': [r'a\\b', r'de fg', r'h'],
        r'a\\\"b c d': [r'a\"b', r'c', r'd'],
        r'a\\\\"b c" d e': [r'a\\b c', r'd', r'e']
    }
    return windows_cases.items()


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_compat.py" startline="144" endline="169" pcid="5917">
def get_unix_test_cases():
    unix_cases = {
        r'': [],
        r'spam \\': [r'spam', '\\'],
        r'spam ': [r'spam'],
        r' spam': [r'spam'],
        'spam eggs': [r'spam', r'eggs'],
        'spam\teggs': [r'spam', r'eggs'],
        'spam\neggs': ['spam', 'eggs'],
        '""': [''],
        '" "': [' '],
        '"\t"': ['\t'],
        '\\\\': ['\\'],
        '\\\\ ': ['\\'],
        '\\\\\t': ['\\'],
        r'\"': ['"'],
        # The following four test cases are official test cases given in
        # Microsoft's documentation, but adapted to unix shell splitting.
        r'"abc" d e': [r'abc', r'd', r'e'],
        r'a\\b d"e f"g h': [r'a\b', r'de fg', r'h'],
        r'a\\\"b c d': [r'a\"b', r'c', r'd'],
        r'a\\\\"b c" d e': [r'a\\b c', r'd', r'e']
    }
    return unix_cases.items()


</source>
</class>

<class classid="303" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_loaders.py" startline="131" endline="144" pcid="6038">
    def test_load_service_model(self):
        class FakeLoader(object):
            def load_file(self, name):
                return ['loaded data']

        loader = Loader(extra_search_paths=['foo'],
                        file_loader=FakeLoader(),
                        include_default_search_paths=False,
                        include_default_extras=False)
        loader.determine_latest_version = mock.Mock(return_value='2015-03-01')
        loader.list_available_services = mock.Mock(return_value=['baz'])
        loaded = loader.load_service_model('baz', type_name='service-2')
        self.assertEqual(loaded, ['loaded data'])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_loaders.py" startline="146" endline="162" pcid="6040">
    def test_load_service_model_enforces_case(self):
        class FakeLoader(object):
            def load_file(self, name):
                return ['loaded data']

        loader = Loader(extra_search_paths=['foo'],
                        file_loader=FakeLoader(),
                        include_default_search_paths=False)
        loader.determine_latest_version = mock.Mock(return_value='2015-03-01')
        loader.list_available_services = mock.Mock(return_value=['baz'])

        # Should have a) the unknown service name and b) list of valid
        # service names.
        with self.assertRaisesRegex(UnknownServiceError,
                                    'Unknown service.*BAZ.*baz'):
            loader.load_service_model('BAZ', type_name='service-2')

</source>
</class>

<class classid="304" nclones="2" nlines="21" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="144" endline="166" pcid="6082">
    def test_proxies_config_settings(self):
        proxies = {'http': 'http://proxy.com'}
        proxies_config = {
            'proxy_ca_bundle': 'path/to/bundle',
            'proxy_client_cert': ('path/to/cert', 'path/to/key'),
            'proxy_use_forwarding_for_https': False,
        }
        use_forwarding = proxies_config['proxy_use_forwarding_for_https']
        with patch('botocore.httpsession.create_urllib3_context'):
            session = URLLib3Session(
                proxies=proxies,
                proxies_config=proxies_config
            )
            self.request.url = 'http://example.com/'
            session.send(self.request.prepare())
            self.assert_proxy_manager_call(
                proxies['http'],
                proxy_headers={},
                proxy_ssl_context=ANY,
                use_forwarding_for_https=use_forwarding
            )
        self.assert_request_sent(url=self.request.url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="167" endline="192" pcid="6083">
    def test_proxies_config_settings_unknown_config(self):
        proxies = {'http': 'http://proxy.com'}
        proxies_config = {
            'proxy_ca_bundle': None,
            'proxy_client_cert': None,
            'proxy_use_forwarding_for_https': True,
            'proxy_not_a_real_arg': 'do not pass'
        }
        use_forwarding = proxies_config['proxy_use_forwarding_for_https']
        session = URLLib3Session(
            proxies=proxies,
            proxies_config=proxies_config
        )
        self.request.url = 'http://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['http'],
            proxy_headers={},
            use_forwarding_for_https=use_forwarding
        )
        self.assertNotIn(
            'proxy_not_a_real_arg',
            self.proxy_manager_fun.call_args
        )
        self.assert_request_sent(url=self.request.url)

</source>
</class>

<class classid="305" nclones="6" nlines="10" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="193" endline="203" pcid="6084">
    def test_http_proxy_scheme_with_http_url(self):
        proxies = {'http': 'http://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'http://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['http'],
            proxy_headers={},
        )
        self.assert_request_sent(url=self.request.url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="226" endline="236" pcid="6087">
    def test_https_proxy_scheme_tls_in_tls(self):
        proxies = {'https': 'https://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'https://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['https'],
            proxy_headers={},
        )
        self.assert_request_sent()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="204" endline="214" pcid="6085">
    def test_http_proxy_scheme_with_https_url(self):
        proxies = {'https': 'http://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'https://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['https'],
            proxy_headers={},
        )
        self.assert_request_sent()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="237" endline="249" pcid="6088">
    def test_https_proxy_scheme_forwarding_https_url(self):
        proxies = {'https': 'https://proxy.com'}
        proxies_config = {"proxy_use_forwarding_for_https":  True}
        session = URLLib3Session(proxies=proxies, proxies_config=proxies_config)
        self.request.url = 'https://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['https'],
            proxy_headers={},
            use_forwarding_for_https=True,
        )
        self.assert_request_sent(url=self.request.url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="215" endline="225" pcid="6086">
    def test_https_proxy_scheme_with_http_url(self):
        proxies = {'http': 'https://proxy.com'}
        session = URLLib3Session(proxies=proxies)
        self.request.url = 'http://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['http'],
            proxy_headers={},
        )
        self.assert_request_sent(url=self.request.url)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_http_session.py" startline="250" endline="262" pcid="6089">
    def test_basic_https_proxy_with_client_cert(self):
        proxies = {'https': 'http://proxy.com'}
        session = URLLib3Session(proxies=proxies, client_cert='/some/cert')
        self.request.url = 'https://example.com/'
        session.send(self.request.prepare())
        self.assert_proxy_manager_call(
            proxies['https'],
            proxy_headers={},
            cert_file='/some/cert',
            key_file=None,
        )
        self.assert_request_sent()

</source>
</class>

<class classid="306" nclones="3" nlines="13" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="139" endline="155" pcid="6119">
    def test_single_waiter_acceptor_matches_jmespath(self):
        single_waiter = {
            'acceptors': [
                {'state': 'success', 'matcher': 'path',
                 'argument': 'Table.TableStatus', 'expected': 'ACCEPTED'},
            ],
        }
        single_waiter.update(self.boiler_plate_config)
        config = SingleWaiterConfig(single_waiter)
        success_acceptor = config.acceptors[0].matcher_func
        # success_acceptor is a callable that takes a response dict and returns
        # True or False.
        self.assertTrue(
            success_acceptor({'Table': {'TableStatus': 'ACCEPTED'}}))
        self.assertFalse(
            success_acceptor({'Table': {'TableStatus': 'CREATING'}}))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="171" endline="185" pcid="6121">
    def test_single_waiter_supports_error(self):
        single_waiter = {
            'acceptors': [
                {'state': 'success', 'matcher': 'error',
                 'expected': 'DoesNotExistError'}
            ],
        }
        single_waiter.update(self.boiler_plate_config)
        config = SingleWaiterConfig(single_waiter)
        success_acceptor = config.acceptors[0].matcher_func
        self.assertTrue(
            success_acceptor({'Error': {'Code': 'DoesNotExistError'}}))
        self.assertFalse(
            success_acceptor({'Error': {'Code': 'DoesNotExistErorr'}}))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="156" endline="170" pcid="6120">
    def test_single_waiter_supports_status_code(self):
        single_waiter = {
            'acceptors': [
                {'state': 'success', 'matcher': 'status',
                 'expected': 200}
            ],
        }
        single_waiter.update(self.boiler_plate_config)
        config = SingleWaiterConfig(single_waiter)
        success_acceptor = config.acceptors[0].matcher_func
        self.assertTrue(
            success_acceptor({'ResponseMetadata': {'HTTPStatusCode': 200}}))
        self.assertFalse(
            success_acceptor({'ResponseMetadata': {'HTTPStatusCode': 404}}))

</source>
</class>

<class classid="307" nclones="2" nlines="13" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="313" endline="331" pcid="6133">
    def test_waiter_waits_until_acceptor_matches(self):
        config = self.create_waiter_config(
            max_attempts=3,
            acceptors=[{'state': 'success', 'matcher': 'path',
                        'argument': 'Foo', 'expected': 'SUCCESS'}])
        # Simulate the client having two calls that don't
        # match followed by a third call that matches the
        # acceptor.
        operation_method = mock.Mock()
        waiter = Waiter('MyWaiter', config, operation_method)
        self.client_responses_are(
            {'Foo': 'FAILURE'},
            {'Foo': 'FAILURE'},
            {'Foo': 'SUCCESS'},
            for_operation=operation_method
        )
        waiter.wait()
        self.assertEqual(operation_method.call_count, 3)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="332" endline="347" pcid="6134">
    def test_waiter_matches_with_invalid_error_response(self):
        # Verify that the call will not raise WaiterError
        # because of 'Error' key in success response.
        config = self.create_waiter_config(
            max_attempts=3,
            acceptors=[{'state': 'success', 'matcher': 'path',
                        'argument': 'Foo', 'expected': 'SUCCESS'}])
        operation_method = mock.Mock()
        waiter = Waiter('MyWaiter', config, operation_method)
        self.client_responses_are(
            {'Foo': 'SUCCESS', 'Error': 'foo'},
            for_operation=operation_method
        )
        waiter.wait()
        self.assertEqual(operation_method.call_count, 1)

</source>
</class>

<class classid="308" nclones="2" nlines="17" similarity="77">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="461" endline="484" pcid="6141">
    def test_waiter_transitions_to_failure_state(self):
        acceptors = [
            # A success state that will never be hit.
            {'state': 'success', 'matcher': 'status', 'expected': 1000},
            {'state': 'failure', 'matcher': 'error', 'expected': 'FailError'},
        ]
        config = self.create_waiter_config(acceptors=acceptors)
        operation_method = mock.Mock()
        self.client_responses_are(
            {'Nothing': 'foo'},
            # And on the second attempt, a FailError is seen, which
            # causes the waiter to fail fast.
            {'Error': {'Code': 'FailError', 'Message': 'foo'}},
            {'WillNeverGetCalled': True},
            for_operation=operation_method
        )
        waiter = Waiter('MyWaiter', config, operation_method)
        with self.assertRaises(WaiterError):
            waiter.wait()
        # Not only should we raise an exception, but we should have
        # only called the operation_method twice because the second
        # response triggered a fast fail.
        self.assertEqual(operation_method.call_count, 2)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="485" endline="504" pcid="6142">
    def test_waiter_handles_retry_state(self):
        acceptor_with_retry_state = [
            {'state': 'success', 'matcher': 'status', 'expected': 200},
            {'state': 'retry', 'matcher': 'error', 'expected': 'RetryMe'},
        ]
        config = self.create_waiter_config(
            acceptors=acceptor_with_retry_state)
        operation_method = mock.Mock()
        self.client_responses_are(
            {'Nothing': 'foo'},
            {'Error': {'Code': 'RetryMe', 'Message': 'foo'}},
            {'Success': True,
             'ResponseMetadata': {'HTTPStatusCode': 200}},
            {'NeverCalled': True},
            for_operation=operation_method
        )
        waiter = Waiter('MyWaiter', config, operation_method)
        waiter.wait()
        self.assertEqual(operation_method.call_count, 3)

</source>
</class>

<class classid="309" nclones="3" nlines="13" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="521" endline="543" pcid="6144">
    def test_waiter_honors_delay_time_between_retries(self, sleep_mock):
        delay_time = 5
        config = self.create_waiter_config(delay=delay_time)
        operation_method = mock.Mock()
        self.client_responses_are(
            # This is an unknown error that's not called out
            # in any of the waiter config, so when the
            # waiter encounters this response it will transition
            # to the failure state.
            {'Success': False},
            {'Success': False},
            {'Success': False},
            for_operation=operation_method
        )
        waiter = Waiter('MyWaiter', config, operation_method)
        with self.assertRaises(WaiterError):
            waiter.wait()

        # We attempt three times, which means we need to sleep
        # twice, once before each subsequent request.
        self.assertEqual(sleep_mock.call_count, 2)
        sleep_mock.assert_called_with(delay_time)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="545" endline="563" pcid="6145">
    def test_waiter_invocation_config_honors_delay(self, sleep_mock):
        config = self.create_waiter_config()
        operation_method = mock.Mock()
        self.client_responses_are(
            {'Success': False},
            {'Success': False},
            {'Success': False},
            for_operation=operation_method
        )
        waiter = Waiter('MyWaiter', config, operation_method)
        custom_delay = 3
        with self.assertRaises(WaiterError):
            waiter.wait(WaiterConfig={'Delay': custom_delay})

        # We attempt three times, which means we need to sleep
        # twice, once before each subsequent request.
        self.assertEqual(sleep_mock.call_count, 2)
        sleep_mock.assert_called_with(custom_delay)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="564" endline="579" pcid="6146">
    def test_waiter_invocation_config_honors_max_attempts(self):
        config = self.create_waiter_config()
        operation_method = mock.Mock()
        self.client_responses_are(
            {'Success': False},
            {'Success': False},
            for_operation=operation_method
        )
        waiter = Waiter('MyWaiter', config, operation_method)
        custom_max = 2
        with self.assertRaises(WaiterError):
            waiter.wait(WaiterConfig={'MaxAttempts': custom_max})

        self.assertEqual(operation_method.call_count, 2)


</source>
</class>

<class classid="310" nclones="3" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="722" endline="734" pcid="6157">
    def assert_distribution_deployed_call_count(self):
        waiter_name = 'DistributionDeployed'
        waiter_model = self.get_waiter_model(self.service)
        self.client.meta.service_model = self.get_service_model(
            self.service)
        self.client.get_distribution.side_effect = [
            {'Distribution': {'Status': 'Deployed'}}
        ]
        waiter = create_waiter_with_client(waiter_name, waiter_model,
                                           self.client)
        waiter.wait()
        self.assertEqual(self.client.get_distribution.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="735" endline="747" pcid="6158">
    def assert_invalidation_completed_call_count(self):
        waiter_name = 'InvalidationCompleted'
        waiter_model = self.get_waiter_model(self.service)
        self.client.meta.service_model = self.get_service_model(
            self.service)
        self.client.get_invalidation.side_effect = [
            {'Invalidation': {'Status': 'Completed'}}
        ]
        waiter = create_waiter_with_client(waiter_name, waiter_model,
                                           self.client)
        waiter.wait()
        self.assertEqual(self.client.get_invalidation.call_count, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_waiters.py" startline="748" endline="760" pcid="6159">
    def assert_streaming_distribution_deployed_call_count(self):
        waiter_name = 'StreamingDistributionDeployed'
        waiter_model = self.get_waiter_model(self.service)
        self.client.meta.service_model = self.get_service_model(
            self.service)
        self.client.get_streaming_distribution.side_effect = [
            {'StreamingDistribution': {'Status': 'Deployed'}}
        ]
        waiter = create_waiter_with_client(waiter_name, waiter_model,
                                           self.client)
        waiter.wait()
        self.assertEqual(self.client.get_streaming_distribution.call_count, 1)

</source>
</class>

<class classid="311" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_stub.py" startline="162" endline="177" pcid="6176">
    def test_get_client_error_with_extra_error_meta(self):
        error_code = "foo"
        error_message = "bar"
        error_meta = {
            "Endpoint": "https://foo.bar.baz",
        }
        self.stubber.add_client_error(
            'foo', error_code, error_message,
            http_status_code=301,
            service_error_meta=error_meta)
        with self.stubber:
            response = self.emit_get_response_event()
        error = response[1]['Error']
        self.assertIn('Endpoint', error)
        self.assertEqual(error['Endpoint'], "https://foo.bar.baz")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_stub.py" startline="178" endline="194" pcid="6177">
    def test_get_client_error_with_extra_response_meta(self):
        error_code = "foo"
        error_message = "bar"
        stub_response_meta = {
            "RequestId": "79104EXAMPLEB723",
        }
        self.stubber.add_client_error(
            'foo', error_code, error_message,
            http_status_code=301,
            response_meta=stub_response_meta)
        with self.stubber:
            response = self.emit_get_response_event()
        actual_response_meta = response[1]['ResponseMetadata']
        self.assertIn('RequestId', actual_response_meta)
        self.assertEqual(actual_response_meta['RequestId'], "79104EXAMPLEB723")


</source>
</class>

<class classid="312" nclones="4" nlines="14" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_model.py" startline="693" endline="710" pcid="6260">
class TestShapeResolver(unittest.TestCase):
    def test_get_shape_by_name(self):
        shape_map = {
            'Foo': {
                'type': 'structure',
                'members': {
                    'Bar': {'shape': 'StringType'},
                    'Baz': {'shape': 'StringType'},
                }
            },
            "StringType": {
                "type": "string"
            }
        }
        resolver = model.ShapeResolver(shape_map)
        shape = resolver.get_shape_by_name('Foo')
        self.assertEqual(shape.name, 'Foo')
        self.assertEqual(shape.type_name, 'structure')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_model.py" startline="729" endline="747" pcid="6262">

    def test_resolve_shape_references_with_member_traits(self):
        shape_map = {
            'Foo': {
                'type': 'structure',
                'members': {
                    'Bar': {'shape': 'StringType'},
                    'Baz': {'shape': 'StringType', 'locationName': 'other'},
                }
            },
            "StringType": {
                "type": "string"
            }
        }
        resolver = model.ShapeResolver(shape_map)
        shape = resolver.resolve_shape_ref({'shape': 'StringType',
                                            'locationName': 'other'})
        self.assertEqual(shape.serialization['name'], 'other')
        self.assertEqual(shape.name, 'StringType')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_model.py" startline="711" endline="728" pcid="6261">

    def test_resolve_shape_reference(self):
        shape_map = {
            'Foo': {
                'type': 'structure',
                'members': {
                    'Bar': {'shape': 'StringType'},
                    'Baz': {'shape': 'StringType'},
                }
            },
            "StringType": {
                "type": "string"
            }
        }
        resolver = model.ShapeResolver(shape_map)
        shape = resolver.resolve_shape_ref({'shape': 'StringType'})
        self.assertEqual(shape.name, 'StringType')
        self.assertEqual(shape.type_name, 'string')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_model.py" startline="748" endline="769" pcid="6263">

    def test_serialization_cache(self):
        shape_map = {
            'Foo': {
                'type': 'structure',
                'members': {
                    'Baz': {'shape': 'StringType', 'locationName': 'other'},
                }
            },
            "StringType": {
                "type": "string"
            }
        }
        resolver = model.ShapeResolver(shape_map)
        shape = resolver.resolve_shape_ref({'shape': 'StringType',
                                            'locationName': 'other'})
        self.assertEqual(shape.serialization['name'], 'other')
        # serialization is computed on demand, and a cache is kept.
        # This is just verifying that trying to access serialization again
        # gives the same result.  We don't actually care that it's cached,
        # we just care that the cache doesn't mess with correctness.
        self.assertEqual(shape.serialization['name'], 'other')
</source>
</class>

<class classid="313" nclones="7" nlines="24" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_serialize.py" startline="29" endline="55" pcid="6285">
    def setUp(self):
        self.model = {
            'metadata': {'protocol': 'query', 'apiVersion': '2014-01-01'},
            'documentation': '',
            'operations': {
                'TestOperation': {
                    'name': 'TestOperation',
                    'http': {
                        'method': 'POST',
                        'requestUri': '/',
                    },
                    'input': {'shape': 'InputShape'},
                }
            },
            'shapes': {
                'InputShape': {
                    'type': 'structure',
                    'members': {
                        'Blob': {'shape': 'BlobType'},
                    }
                },
                'BlobType': {
                    'type': 'blob',
                }
            }
        }

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_serialize.py" startline="344" endline="372" pcid="6316">
    def setUp(self):
        self.model = {
            'metadata': {'protocol': 'query', 'apiVersion': '2014-01-01'},
            'documentation': '',
            'operations': {
                'TestOperation': {
                    'name': 'TestOperation',
                    'http': {
                        'method': 'POST',
                        'requestUri': '/',
                    },
                    'input': {'shape': 'InputShape'},
                }
            },
            'shapes': {
                'InputShape': {
                    'type': 'structure',
                    'members': {
                        'Timestamp': {'shape': 'StringTestType'},
                    }
                },
                'StringTestType': {
                    'type': 'string',
                    'min': 15
                }
            }
        }
        self.service_model = ServiceModel(self.model)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_serialize.py" startline="148" endline="179" pcid="6297">
    def setUp(self):
        self.model = {
            'metadata': {'protocol': 'rest-xml', 'apiVersion': '2014-01-01'},
            'documentation': '',
            'operations': {
                'TestOperation': {
                    'name': 'TestOperation',
                    'http': {
                        'method': 'POST',
                        'requestUri': '/',
                    },
                    'input': {'shape': 'InputShape'},
                }
            },
            'shapes': {
                'InputShape': {
                    'type': 'structure',
                    'members': {
                        'TimestampHeader': {
                            'shape': 'TimestampType',
                            'location': 'header',
                            'locationName': 'x-timestamp'
                        },
                    }
                },
                'TimestampType': {
                    'type': 'timestamp',
                }
            }
        }
        self.service_model = ServiceModel(self.model)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_serialize.py" startline="420" endline="451" pcid="6321">
    def setUp(self):
        self.model = {
            'metadata': {'protocol': 'rest-xml', 'apiVersion': '2014-01-01'},
            'documentation': '',
            'operations': {
                'TestOperation': {
                    'name': 'TestOperation',
                    'http': {
                        'method': 'POST',
                        'requestUri': '/',
                    },
                    'input': {'shape': 'InputShape'},
                }
            },
            'shapes': {
                'InputShape': {
                    'type': 'structure',
                    'members': {
                        'ContentLength': {
                            'shape': 'Integer',
                            'location': 'header',
                            'locationName': 'Content-Length'
                        },
                    }
                },
                'Integer': {
                    'type': 'integer'
                },
            }
        }
        self.service_model = ServiceModel(self.model)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_serialize.py" startline="220" endline="247" pcid="6304">
    def setUp(self):
        self.model = {
            'metadata': {'protocol': 'query', 'apiVersion': '2014-01-01'},
            'documentation': '',
            'operations': {
                'TestOperation': {
                    'name': 'TestOperation',
                    'http': {
                        'method': 'POST',
                        'requestUri': '/',
                    },
                    'input': {'shape': 'InputShape'},
                }
            },
            'shapes': {
                'InputShape': {
                    'type': 'structure',
                    'members': {
                        'Timestamp': {'shape': 'TimestampType'},
                    }
                },
                'TimestampType': {
                    'type': 'timestamp',
                }
            }
        }
        self.service_model = ServiceModel(self.model)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_serialize.py" startline="287" endline="315" pcid="6311">
    def setUp(self):
        self.model = {
            'metadata': {'protocol': 'json', 'apiVersion': '2014-01-01',
                         'jsonVersion': '1.1', 'targetPrefix': 'foo'},
            'documentation': '',
            'operations': {
                'TestOperation': {
                    'name': 'TestOperation',
                    'http': {
                        'method': 'POST',
                        'requestUri': '/',
                    },
                    'input': {'shape': 'InputShape'},
                }
            },
            'shapes': {
                'InputShape': {
                    'type': 'structure',
                    'members': {
                        'Timestamp': {'shape': 'TimestampType'},
                    }
                },
                'TimestampType': {
                    'type': 'timestamp',
                }
            }
        }
        self.service_model = ServiceModel(self.model)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_serialize.py" startline="459" endline="494" pcid="6323">
    def setUp(self):
        self.model = {
            'metadata': {'protocol': 'rest-xml', 'apiVersion': '2014-01-01'},
            'documentation': '',
            'operations': {
                'TestOperation': {
                    'name': 'TestOperation',
                    'http': {
                        'method': 'POST',
                        'requestUri': '/',
                    },
                    'input': {'shape': 'InputShape'},
                }
            },
            'shapes': {
                'InputShape': {
                    'type': 'structure',
                    'members': {
                        'Foo': {
                            'shape': 'FooShape',
                            'locationName': 'Foo'
                        },
                    },
                    'payload': 'Foo'
                },
                'FooShape': {
                    'type': 'list',
                    'member': {'shape': 'StringShape'}
                },
                'StringShape': {
                    'type': 'string',
                }
            }
        }
        self.service_model = ServiceModel(self.model)

</source>
</class>

<class classid="314" nclones="3" nlines="37" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="137" endline="186" pcid="6336">
    def test_feed_with_successful_response(self):
        self.feed_before_parameter_build_event(current_time=1)
        self.feed_request_created_event(current_time=2)

        self.mock_time.return_value = 3
        attempt_event = self.adapter.feed('response-received', {
            'parsed_response': {
                'ResponseMetadata': {
                    'HTTPStatusCode': self.http_status_code,
                    'HTTPHeaders': self.response_headers
                }
            },
            'context': self.context,
            'exception': None
        })
        self.assertEqual(
            attempt_event,
            APICallAttemptEvent(
                service=self.service_id,
                operation=self.wire_name,
                timestamp=2000,
                latency=1000,
                url=self.url,
                request_headers=self.request_headers,
                http_status_code=self.http_status_code,
                response_headers=self.response_headers,
            )
        )

        self.mock_time.return_value = 4
        call_event = self.adapter.feed('after-call', {
            'parsed': {
                'ResponseMetadata': {
                    'HTTPStatusCode': self.http_status_code,
                    'HTTPHeaders': self.response_headers
                }
            },
            'context': self.context
        })
        self.assertEqual(
            call_event,
            APICallEvent(
                service=self.service_id,
                operation=self.wire_name,
                timestamp=1000,
                latency=3000,
                attempts=[attempt_event]
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="314" endline="362" pcid="6339">
    def test_feed_with_parsed_error(self):
        self.feed_before_parameter_build_event(current_time=1)
        self.feed_request_created_event(current_time=2)

        self.mock_time.return_value = 3
        parsed_error = {'Code': 'MyErrorCode', 'Message': 'MyMessage'}
        parsed_response = {
            'Error': parsed_error,
            'ResponseMetadata': {
                'HTTPStatusCode': 400,
                'HTTPHeaders': self.response_headers
            }
        }
        attempt_event = self.adapter.feed('response-received', {
            'parsed_response': parsed_response,
            'context': self.context,
            'exception': None
        })
        self.assertEqual(
            attempt_event,
            APICallAttemptEvent(
                service=self.service_id,
                operation=self.wire_name,
                timestamp=2000,
                latency=1000,
                url=self.url,
                request_headers=self.request_headers,
                http_status_code=400,
                response_headers=self.response_headers,
                parsed_error=parsed_error
            )
        )

        self.mock_time.return_value = 4
        call_event = self.adapter.feed('after-call', {
            'parsed': parsed_response,
            'context': self.context
        })
        self.assertEqual(
            call_event,
            APICallEvent(
                service=self.service_id,
                operation=self.wire_name,
                timestamp=1000,
                latency=3000,
                attempts=[attempt_event]
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="363" endline="404" pcid="6340">
    def test_feed_with_wire_exception(self):
        self.feed_before_parameter_build_event(current_time=1)
        self.feed_request_created_event(current_time=2)

        self.mock_time.return_value = 3
        wire_exception = Exception('Some wire exception')
        attempt_event = self.adapter.feed('response-received', {
            'parsed_response': None,
            'context': self.context,
            'exception': wire_exception
        })
        self.assertEqual(
            attempt_event,
            APICallAttemptEvent(
                service=self.service_id,
                operation=self.wire_name,
                timestamp=2000,
                latency=1000,
                url=self.url,
                request_headers=self.request_headers,
                wire_exception=wire_exception,
            )
        )

        self.mock_time.return_value = 4
        call_event = self.adapter.feed(
            'after-call-error', {
                'exception': wire_exception,
                'context': self.context
            }
        )
        self.assertEqual(
            call_event,
            APICallEvent(
                service=self.service_id,
                operation=self.wire_name,
                timestamp=1000,
                latency=3000,
                attempts=[attempt_event]
            )
        )

</source>
</class>

<class classid="315" nclones="3" nlines="15" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="561" endline="577" pcid="6354">
    def test_serialize_api_call_event(self):
        event = APICallEvent(
            service=self.service, operation=self.operation, timestamp=1000)
        serialized_event_dict = self.get_serialized_event_dict(event)
        self.assertEqual(
            serialized_event_dict, {
                'Version': 1,
                'Type': 'ApiCall',
                'Service': self.service,
                'Api': self.operation,
                'ClientId': self.csm_client_id,
                'MaxRetriesExceeded': 0,
                'Timestamp': 1000,
                'AttemptCount': 0,
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="754" endline="770" pcid="6372">
    def test_serialize_filters_unwanted_response_headers(self):
        response_headers = {'filter-out': 'do-not-include-this'}
        event = APICallAttemptEvent(
            service=self.service, operation=self.operation,
            timestamp=self.timestamp, response_headers=response_headers)
        serialized_event_dict = self.get_serialized_event_dict(event)
        self.assertEqual(
            serialized_event_dict, {
                'Version': 1,
                'Type': 'ApiCallAttempt',
                'Service': self.service,
                'Api': self.operation,
                'ClientId': self.csm_client_id,
                'Timestamp': self.timestamp,
            }
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="660" endline="675" pcid="6363">
    def test_serialize_api_call_attempt_event(self):
        event = APICallAttemptEvent(
            service=self.service, operation=self.operation,
            timestamp=self.timestamp)
        serialized_event_dict = self.get_serialized_event_dict(event)
        self.assertEqual(
            serialized_event_dict, {
                'Version': 1,
                'Type': 'ApiCallAttempt',
                'Service': self.service,
                'Api': self.operation,
                'ClientId': self.csm_client_id,
                'Timestamp': self.timestamp,
            }
        )

</source>
</class>

<class classid="316" nclones="2" nlines="12" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="624" endline="639" pcid="6360">
    def test_serialize_api_call_event_parsed_error(self):
        event = APICallEvent(
            service=self.service, operation=self.operation, timestamp=1000)
        attempt = event.new_api_call_attempt(2000)
        attempt.parsed_error = {
            'Code': 'MyErrorCode',
            'Message': 'My error message'
        }
        serialized_event_dict = self.get_serialized_event_dict(event)
        self.assertEqual(
            serialized_event_dict['FinalAwsException'], 'MyErrorCode')
        self.assertEqual(
            serialized_event_dict['FinalAwsExceptionMessage'],
            'My error message'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="640" endline="652" pcid="6361">
    def test_serialize_api_call_event_wire_exception(self):
        event = APICallEvent(
            service=self.service, operation=self.operation, timestamp=1000)
        attempt = event.new_api_call_attempt(2000)
        attempt.wire_exception = Exception('Error on the wire')
        serialized_event_dict = self.get_serialized_event_dict(event)
        self.assertEqual(
            serialized_event_dict['FinalSdkException'], 'Exception')
        self.assertEqual(
            serialized_event_dict['FinalSdkExceptionMessage'],
            'Error on the wire'
        )

</source>
</class>

<class classid="317" nclones="2" nlines="17" similarity="82">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="816" endline="837" pcid="6377">
    def test_serialize_truncates_long_service_error(self):
        max_error_code_length = 128
        max_error_message_length = 512
        long_error_code = 'c' * (max_error_code_length + 1)
        long_error_message = 'm' * (max_error_message_length + 1)
        event = APICallAttemptEvent(
            service=self.service, operation=self.operation,
            timestamp=self.timestamp, parsed_error={
                'Code': long_error_code,
                'Message': long_error_message
            }
        )
        serialized_event_dict = self.get_serialized_event_dict(event)
        self.assertEqual(
            serialized_event_dict['AwsException'],
            long_error_code[:max_error_code_length]
        )
        self.assertEqual(
            serialized_event_dict['AwsExceptionMessage'],
            long_error_message[:max_error_message_length]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_monitoring.py" startline="838" endline="860" pcid="6378">
    def test_serialize_truncates_long_wire_exception(self):
        max_class_name_length = 128
        max_error_message_length = 512
        long_class_name = 'W' * (max_class_name_length + 1)
        wire_class = type(long_class_name, (Exception,), {})
        long_error_message = 'm' * (max_error_message_length + 1)
        event = APICallAttemptEvent(
            service=self.service, operation=self.operation,
            timestamp=self.timestamp,
            wire_exception=wire_class(long_error_message)
        )
        serialized_event_dict = self.get_serialized_event_dict(event)

        self.assertEqual(
            serialized_event_dict['SdkException'],
            long_class_name[:max_class_name_length]
        )
        self.assertEqual(
            serialized_event_dict['SdkExceptionMessage'],
            long_error_message[:max_error_message_length]
        )


</source>
</class>

<class classid="318" nclones="2" nlines="13" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_endpoint.py" startline="189" endline="202" pcid="6396">
    def test_retry_events_can_alter_behavior(self):
        self.event_emitter.emit.side_effect = self.get_emitter_responses(
            num_retries=1)
        self.endpoint.make_request(self._operation, request_dict())
        self.assert_events_emitted(
            self.event_emitter,
            expected_events=[
                'request-created.ec2.DescribeInstances',
                'before-send.ec2.DescribeInstances',
                'response-received.ec2.DescribeInstances',
                'needs-retry.ec2.DescribeInstances',
            ] * 2
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_endpoint.py" startline="203" endline="218" pcid="6397">
    def test_retry_on_socket_errors(self):
        self.event_emitter.emit.side_effect = self.get_emitter_responses(
            num_retries=1)
        self.http_session.send.side_effect = HTTPClientError(error='wrapped')
        with self.assertRaises(HTTPClientError):
            self.endpoint.make_request(self._operation, request_dict())
        self.assert_events_emitted(
            self.event_emitter,
            expected_events=[
                'request-created.ec2.DescribeInstances',
                'before-send.ec2.DescribeInstances',
                'response-received.ec2.DescribeInstances',
                'needs-retry.ec2.DescribeInstances',
            ] * 2
        )

</source>
</class>

<class classid="319" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="207" endline="220" pcid="6447">
    def test_can_reset_stream(self):
        contents = b'foobarbaz'
        with open(self.filename, 'wb') as f:
            f.write(contents)
        with open(self.filename, 'rb') as body:
            self.prepared_request.body = body
            # pretend the request body was partially sent
            body.read()
            self.assertNotEqual(body.tell(), 0)
            # have the prepared request reset its stream
            self.prepared_request.reset_stream()
            # the stream should be reset
            self.assertEqual(body.tell(), 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="221" endline="233" pcid="6448">
    def test_cannot_reset_stream_raises_error(self):
        contents = b'foobarbaz'
        with open(self.filename, 'wb') as f:
            f.write(contents)
        with open(self.filename, 'rb') as body:
            self.prepared_request.body = Unseekable(body)
            # pretend the request body was partially sent
            body.read()
            self.assertNotEqual(body.tell(), 0)
            # reset stream should fail
            with self.assertRaises(UnseekableStreamError):
                self.prepared_request.reset_stream()

</source>
</class>

<class classid="320" nclones="5" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="319" endline="334" pcid="6460">
    def test_expect_100_continue_returned(self):
        with patch('urllib3.util.wait_for_read') as wait_mock:
            # Shows the server first sending a 100 continue response
            # then a 200 ok response.
            s = FakeSocket(b'HTTP/1.1 100 Continue\r\n\r\nHTTP/1.1 200 OK\r\n')
            conn = AWSHTTPConnection('s3.amazonaws.com', 443)
            conn.sock = s
            wait_mock.return_value = True
            conn.request('GET', '/bucket/foo', b'body',
                         {'Expect': b'100-continue'})
            response = conn.getresponse()
            # Assert that we waited for the 100-continue response
            self.assertEqual(wait_mock.call_count, 1)
            # Now we should verify that our final response is the 200 OK
            self.assertEqual(response.status, 200)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="354" endline="377" pcid="6462">
    def test_expect_100_sends_connection_header(self):
        # When using squid as an HTTP proxy, it will also send
        # a Connection: keep-alive header back with the 100 continue
        # response.  We need to ensure we handle this case.
        with patch('urllib3.util.wait_for_read') as wait_mock:
            # Shows the server first sending a 100 continue response
            # then a 500 response.  We're picking 500 to confirm we
            # actually parse the response instead of getting the
            # default status of 200 which happens when we can't parse
            # the response.
            s = FakeSocket(b'HTTP/1.1 100 Continue\r\n'
                           b'Connection: keep-alive\r\n'
                           b'\r\n'
                           b'HTTP/1.1 500 Internal Service Error\r\n')
            conn = AWSHTTPConnection('s3.amazonaws.com', 443)
            conn.sock = s
            wait_mock.return_value = True
            conn.request('GET', '/bucket/foo', b'body',
                         {'Expect': b'100-continue'})
            # Assert that we waited for the 100-continue response
            self.assertEqual(wait_mock.call_count, 1)
            response = conn.getresponse()
            self.assertEqual(response.status, 500)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="398" endline="417" pcid="6464">
    def test_expect_100_continue_no_response_from_server(self):
        with patch('urllib3.util.wait_for_read') as wait_mock:
            # Shows the server first sending a 100 continue response
            # then a 200 ok response.
            s = FakeSocket(
                b'HTTP/1.1 307 Temporary Redirect\r\n'
                b'Location: http://example.org\r\n')
            conn = AWSHTTPConnection('s3.amazonaws.com', 443)
            conn.sock = s
            # By settings wait_mock to return False, this indicates
            # that the server did not send any response.  In this situation
            # we should just send the request anyways.
            wait_mock.return_value = False
            conn.request('GET', '/bucket/foo', b'body',
                         {'Expect': b'100-continue'})
            # Assert that we waited for the 100-continue response
            self.assertEqual(wait_mock.call_count, 1)
            response = conn.getresponse()
            self.assertEqual(response.status, 307)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="378" endline="397" pcid="6463">
    def test_expect_100_continue_sends_307(self):
        # This is the case where we send a 100 continue and the server
        # immediately sends a 307
        with patch('urllib3.util.wait_for_read') as wait_mock:
            # Shows the server first sending a 100 continue response
            # then a 200 ok response.
            s = FakeSocket(
                b'HTTP/1.1 307 Temporary Redirect\r\n'
                b'Location: http://example.org\r\n')
            conn = AWSHTTPConnection('s3.amazonaws.com', 443)
            conn.sock = s
            wait_mock.return_value = True
            conn.request('GET', '/bucket/foo', b'body',
                         {'Expect': b'100-continue'})
            # Assert that we waited for the 100-continue response
            self.assertEqual(wait_mock.call_count, 1)
            response = conn.getresponse()
            # Now we should verify that our final response is the 307.
            self.assertEqual(response.status, 307)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_awsrequest.py" startline="335" endline="353" pcid="6461">
    def test_handles_expect_100_with_different_reason_phrase(self):
        with patch('urllib3.util.wait_for_read') as wait_mock:
            # Shows the server first sending a 100 continue response
            # then a 200 ok response.
            s = FakeSocket(b'HTTP/1.1 100 (Continue)\r\n\r\nHTTP/1.1 200 OK\r\n')
            conn = AWSHTTPConnection('s3.amazonaws.com', 443)
            conn.sock = s
            wait_mock.return_value = True
            conn.request('GET', '/bucket/foo', six.BytesIO(b'body'),
                         {'Expect': b'100-continue', 'Content-Length': b'4'})
            response = conn.getresponse()
            # Now we should verify that our final response is the 200 OK.
            self.assertEqual(response.status, 200)
            # Assert that we waited for the 100-continue response
            self.assertEqual(wait_mock.call_count, 1)
            # Verify that we went the request body because we got a 100
            # continue.
            self.assertIn(b'body', s.sent_data)

</source>
</class>

<class classid="321" nclones="2" nlines="42" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_autogen.py" startline="531" endline="578" pcid="6500">
    def test_remove_operations_with_required_params(self):
        # We can remove this test once we implement this functionality.
        custom_model = {
            'metadata': {},
            'operations': {
                'ListFooBarThings': {
                    'input': {'shape': 'ListFooBarThingsRequest'},
                    'output': {'shape': 'ListFooBarThingsResponse'},
                },
                'DeleteFooBarThing': {
                    'input': {'shape': 'DeleteFooBarThingRequest'},
                }
            },
            'shapes': {
                'DeleteFooBarThingRequest': {
                    'type': 'structure',
                    'members': {
                        'RequiredParam': {'shape': 'String'},
                        'FooBarThing': {'shape': 'String'},
                    }
                },
                'ListFooBarThingsRequest': {
                    'members': {
                        'RequiredParam': {'shape': 'String'},
                    },
                    'type': 'structure',
                    'required': ['RequiredParam'],
                },
                'ListFooBarThingsResponse': {
                    'type': 'structure',
                    'members': {
                        'FooBarThings': {'shape': 'FooBarThingList'},
                    }
                },
                'FooBarThingList': {
                    'type': 'list',
                    'member': {'shape': 'String'}
                },
                'String': {'type': 'string'},
            }
        }
        service_model = ServiceModel(custom_model)
        completion_data = self.heuristic.generate_completion_descriptions(
            service_model)
        # The operations dict should be empty because the FooBarThing has
        # a required parameter and we don't support that yet.
        self.assertEqual(completion_data['operations'], {})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_autogen.py" startline="579" endline="635" pcid="6501">
    def test_can_reference_multiple_identifiers_if_used(self):
        custom_model = {
            'metadata': {},
            'operations': {
                'ListFooBarThings': {
                    'output': {'shape': 'ListFooBarThingsResponse'},
                },
                'DeleteFooBarThing': {
                    'input': {'shape': 'DeleteFooBarThingRequest'},
                }
            },
            'shapes': {
                'DeleteFooBarThingRequest': {
                    'type': 'structure',
                    'members': {
                        'FooBarThingId': {'shape': 'String'},
                        'FooBarThingArn': {'shape': 'String'},
                    }
                },
                'ListFooBarThingsResponse': {
                    'type': 'structure',
                    'members': {
                        'FooBarThings': {'shape': 'FooBarThingList'},
                    }
                },
                'FooBarThingList': {
                    'type': 'list',
                    'member': {'shape': 'FooBarThingType'},
                },
                'FooBarThingType': {
                    'type': 'structure',
                    'members': {
                        # The DeleteFooBarThing accepts either an Id
                        # or an Arn.
                        'FooBarThingId': {'shape': 'String'},
                        'FooBarThingArn': {'shape': 'String'},
                        # However it doesn't accept a "Name", so this
                        # identifier will be pruned from the response.
                        'FooBarThingPruneId': {'shape': 'String'},
                    }
                },
                'String': {'type': 'string'},
            }
        }
        service_model = ServiceModel(custom_model)
        completion_data = self.heuristic.generate_completion_descriptions(
            service_model)
        self.assertEqual(
            completion_data['resources'],
             {'FooBarThing': {
                 'operation': 'ListFooBarThings',
                 'resourceIdentifier': {
                     'FooBarThingArn': 'FooBarThings[].FooBarThingArn',
                     'FooBarThingId': 'FooBarThings[].FooBarThingId'
                 }}
             }
        )
</source>
</class>

<class classid="322" nclones="22" nlines="11" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="232" endline="242" pcid="6518">
    def test_can_handle_empty_string_for_command(self):
        result = self.cli_parser.parse('')
        self.assert_parsed_results_equal(
            result,
            current_command=None,
            global_params={},
            parsed_params={},
            lineage=[],
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="430" endline="440" pcid="6536">
    def test_current_fragment_populated_on_work_break(self):
        result = self.cli_parser.parse('aws ec2 ')
        self.assert_parsed_results_equal(
            result,
            current_command='ec2',
            parsed_params={},
            global_params={},
            lineage=['aws'],
            current_fragment='',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="407" endline="417" pcid="6534">
    def test_preserves_current_word(self):
        result = self.cli_parser.parse('aws ec2 stop-')
        self.assert_parsed_results_equal(
            result,
            current_command='ec2',
            parsed_params={},
            global_params={},
            lineage=['aws'],
            current_fragment='stop-',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="337" endline="347" pcid="6528">
    def test_can_parse_if_there_longer_command(self):
        result = self.cli_parser.parse('aws s3')
        self.assert_parsed_results_equal(
            result,
            current_command='aws',
            parsed_params={},
            global_params={},
            current_fragment='s3',
            lineage=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="243" endline="253" pcid="6519">
    def test_result_if_aws_exe_alias(self):
        result = self.cli_parser.parse('aws2 ec2')
        self.assert_parsed_results_equal(
            result,
            current_command='ec2',
            global_params={},
            parsed_params={},
            lineage=['aws'],
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="441" endline="452" pcid="6537">
    def test_current_fragment_can_be_option(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst')
        # We should not have parsed the 'instance-ids'.
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='--inst',
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="348" endline="358" pcid="6529">
    def test_parse_shortest_command_if_first_wins(self):
        parser = self.create_parser(return_first_command_match=True)
        result = parser.parse('aws s3')
        self.assert_parsed_results_equal(
            result,
            current_command='s3',
            parsed_params={},
            global_params={},
            lineage=['aws'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="418" endline="429" pcid="6535">
    def test_word_not_preserved_if_not_adjacent_to_word(self):
        result = self.cli_parser.parse('aws ec2 stop- ')
        self.assert_parsed_results_equal(
            result,
            current_command='ec2',
            parsed_params={},
            global_params={},
            lineage=['aws'],
            current_fragment='',
            unparsed_items=['stop-'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="453" endline="464" pcid="6538">
    def test_option_not_preserved_when_space_separated(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst ')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='',
            unparsed_items=['--inst'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="477" endline="492" pcid="6540">
    def test_unknown_option_does_not_consume_arg(self):
        # In this case we're unlikely to offer any helpful
        # auto-completion, but we still need to decided where
        # we should put the 'foo' value.  I think it makes the
        # most sense to put this under "unparsed_items".
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst foo ')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='',
            unparsed_items=['--inst', 'foo'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="465" endline="476" pcid="6539">
    def test_can_have_unparsed_option_with_current_fragment(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst foo')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='foo',
            unparsed_items=['--inst'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="528" endline="541" pcid="6544">
    def test_current_fragment_populated_for_param_value(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --instance-ids i-'
        )
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            current_param='instance-ids',
            parsed_params={'instance-ids': None},
            lineage=['aws', 'ec2'],
            current_fragment='i-',
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="560" endline="573" pcid="6546">
    def test_params_stop_populate_when_dashes_entered(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --instance-ids i-1 --'
        )
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            current_param=None,
            parsed_params={'instance-ids': ['i-1']},
            lineage=['aws', 'ec2'],
            current_fragment='--',
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="493" endline="504" pcid="6541">
    def test_can_handle_multiple_unknown_options(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --inst --foo ')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            parsed_params={},
            lineage=['aws', 'ec2'],
            current_fragment='',
            unparsed_items=['--inst', '--foo'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="514" endline="527" pcid="6543">
    def test_can_handle_error_cases_gracefully(self):
        # The --foo-arg has nargs of None so this is an invalid command.
        # It would normally generate a parser error.  We should make sure
        # we handle this gracefully.
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --foo-arg a b --')
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            lineage=['aws', 'ec2'],
            current_fragment=None,
            unparsed_items=['b', '--'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="542" endline="559" pcid="6545">
    def test_params_populated_unless_last_value(self):
        result = self.cli_parser.parse(
            'aws ec2 stop-instances --instance-ids i-1 i-'
        )
        self.assert_parsed_results_equal(
            result,
            current_command='stop-instances',
            current_param='instance-ids',
            # Here i-1 is in the parsed params because we've already moved
            # on from that word, however, 'i-' is not added to the parsed
            # params dict because we're still parsing that value.  It goes in
            # the ``current_fragment`` attribute.
            parsed_params={'instance-ids': ['i-1']},
            lineage=['aws', 'ec2'],
            current_fragment='i-',
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="592" endline="605" pcid="6548">
    def test_parses_positional(self):
        result = self.cli_parser.parse(
            'aws logs tail mygroup',
        )
        self.assert_parsed_results_equal(
            result,
            current_command='tail',
            current_param='group_name',
            parsed_params={},
            lineage=['aws', 'logs'],
            current_fragment='mygroup',
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="606" endline="619" pcid="6549">
    def test_parses_positional_done(self):
        result = self.cli_parser.parse(
            'aws logs tail mygroup ',
        )
        self.assert_parsed_results_equal(
            result,
            current_command='tail',
            current_param=None,
            parsed_params={'group_name': 'mygroup'},
            lineage=['aws', 'logs'],
            current_fragment='',
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="620" endline="633" pcid="6550">
    def test_parses_positional_parsed_only_once(self):
        result = self.cli_parser.parse(
            'aws logs tail mygroup random-content ',
        )
        self.assert_parsed_results_equal(
            result,
            current_command='tail',
            current_param=None,
            parsed_params={'group_name': 'mygroup'},
            lineage=['aws', 'logs'],
            current_fragment='',
            unparsed_items=['random-content'],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="634" endline="650" pcid="6551">
    def test_parse_positional_with_option(self):
        result = self.cli_parser.parse(
            'aws logs tail mygroup --filter-pattern pat',
            )
        self.assert_parsed_results_equal(
            result,
            current_command='tail',
            current_param='filter-pattern',
            parsed_params={
                'filter-pattern': None,
                'group_name': 'mygroup'
            },
            lineage=['aws', 'logs'],
            current_fragment='pat',
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="574" endline="591" pcid="6547">
    def test_curent_fragment_works_for_global_params(self):
        result = self.cli_parser.parse(
            'aws --endpoint-url http',
        )
        self.assert_parsed_results_equal(
            result,
            current_command='aws',
            current_param='endpoint-url',
            # Here i-1 is in the parsed params because we've already moved
            # on from that word, however, 'i-' is not added to the parsed
            # params dict because we're still parsing that value.  It goes in
            # the ``current_fragment`` attribute.
            parsed_params={},
            lineage=[],
            current_fragment='http',
            unparsed_items=[],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_parser.py" startline="651" endline="666" pcid="6552">
    def test_parse_positional_with_option_before(self):
        result = self.cli_parser.parse(
            'aws logs tail --filter-pattern pattern mygroup',
            )
        self.assert_parsed_results_equal(
            result,
            current_command='tail',
            current_param='group_name',
            parsed_params={
                'filter-pattern': 'pattern',
            },
            lineage=['aws', 'logs'],
            current_fragment='mygroup',
            unparsed_items=[],
        )

</source>
</class>

<class classid="323" nclones="3" nlines="16" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_completer.py" startline="314" endline="334" pcid="6606">

class TestRegionCompleter(unittest.TestCase):
    def setUp(self):
        self.index = InMemoryIndex({
            'command_names': {
                '': ['aws'],
                'aws': []
            },
            'arg_names': {
                '': {'aws': ['region']}
            },
            'arg_data': {
                '': {
                    'aws': {
                        'region': ('region', 'string', 'aws', '', None, False,
                                   False),
                    }
                }
            }
        })
        self.parser = parser.CLIParser(self.index)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_completer.py" startline="406" endline="431" pcid="6618">

class TestFilePathCompleter(unittest.TestCase):
    def setUp(self):
        self.index = InMemoryIndex({
            'command_names': {
                '': ['aws'],
                'aws': []
            },
            'arg_names': {
                '': {'aws': ['profile']}
            },
            'arg_data': {
                '': {
                    'aws': {
                        'profile': ('profile', 'string', 'aws', '', None, False,
                                   False),
                    }
                }
            }
        })
        fake_completer = mock.Mock()
        fake_completer.get_completions.return_value = [
            Completion(text='', display=[('', 'file')]),
            Completion(text='', display=[('', 'folder/')])
        ]
        self.parser = parser.CLIParser(self.index)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/test_completer.py" startline="359" endline="381" pcid="6612">

class TestProfileCompleter(unittest.TestCase):
    def setUp(self):
        self.index = InMemoryIndex({
            'command_names': {
                '': ['aws'],
                'aws': []
            },
            'arg_names': {
                '': {'aws': ['profile']}
            },
            'arg_data': {
                '': {
                    'aws': {
                        'profile': ('profile', 'string', 'aws', '', None, False,
                                   False),
                    }
                }
            }
        })
        fake_session = mock.Mock()
        fake_session.available_profiles = ['default', 'profile1', 'profile2']
        self.parser = parser.CLIParser(self.index)
</source>
</class>

<class classid="324" nclones="2" nlines="38" similarity="82">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/logs/test_autocomplete.py" startline="21" endline="59" pcid="6622">
    def setUp(self):
        self.index = InMemoryIndex({
            'command_names': {
                '': [('aws', None)],
                'aws': [('logs', None)],
                'aws.logs': [('tail', None)],
            },
            'arg_names': {
                '': {
                    'aws': ['region', 'profile'],
                },
                'aws.logs': {
                    'tail': ['group_name'],
                },
            },
            'arg_data': {
                '': {
                    'aws': {
                        'profile': ('profile', 'string', 'aws', '',
                                         None, False, False),
                        'region': ('region', 'string', 'aws', '', None, False,
                                   False),
                    }
                },
                'aws.logs': {
                    'tail': {
                        'group_name': (
                            'group_name', 'string',
                            'tail', 'aws.logs.', None, True, False),
                    },
                }
            }
        })
        self.parser = parser.CLIParser(self.index)
        self.mock_client = mock.Mock()
        self.mock_create_client = mock.Mock()
        self.mock_create_client.create_client.return_value = self.mock_client
        self.completer = GroupNameCompleter(self.mock_create_client)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/ddb/test_autocomplete.py" startline="21" endline="65" pcid="6627">
    def setUp(self):
        self.index = InMemoryIndex({
            'command_names': {
                '': [('aws', None)],
                'aws': [('ddb', None)],
                'aws.ddb': [('put', None), ('select', None)],
            },
            'arg_names': {
                '': {
                    'aws': ['region', 'profile'],
                },
                'aws.ddb': {
                    'put': ['table_name'],
                    'select': ['table_name']
                },
            },
            'arg_data': {
                '': {
                    'aws': {
                        'profile': ('profile', 'string', 'aws', '',
                                         None, False, False),
                        'region': ('region', 'string', 'aws', '', None, False,
                                   False),
                    }
                },
                'aws.ddb': {
                    'put': {
                        'table_name': (
                            'table_name', 'string',
                            'put', 'aws.ddb.', None, True, False),
                    },
                    'select': {
                        'table_name': (
                            'table_name', 'string',
                            'select', 'aws.ddb.', None, True, False),
                    },
                }
            }
        })
        self.parser = parser.CLIParser(self.index)
        self.mock_client = mock.Mock()
        self.mock_create_client = mock.Mock()
        self.mock_create_client.create_client.return_value = self.mock_client
        self.completer = TableNameCompleter(self.mock_create_client)

</source>
</class>

<class classid="325" nclones="5" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/logs/test_autocomplete.py" startline="60" endline="74" pcid="6623">
    def test_complete_group_name(self):
        self.mock_client.describe_log_groups.return_value = {
            'logGroups': [
                {'logGroupName': 'group'},
                {'logGroupName': 'mygroup'},
            ]
        }
        parsed = self.parser.parse('aws logs tail ')
        results = self.completer.complete(parsed)
        self.assertEqual(
            results,
            [CompletionResult('group', 0),
             CompletionResult('mygroup', 0)]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/logs/test_autocomplete.py" startline="75" endline="88" pcid="6624">
    def test_complete_group_name_filters_startswith(self):
        self.mock_client.describe_log_groups.return_value = {
            'logGroups': [
                {'logGroupName': 'group'},
                {'logGroupName': 'mygroup'},
            ]
        }
        parsed = self.parser.parse('aws logs tail my')
        results = self.completer.complete(parsed)
        self.assertEqual(
            results,
            [CompletionResult('mygroup', -2)]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/ddb/test_autocomplete.py" startline="81" endline="95" pcid="6629">
    def test_complete_table_name_with_put(self):
        self.mock_client.list_tables.return_value = {
            'TableNames': [
                'tablename',
                'mytable'
            ]
        }
        parsed = self.parser.parse('aws ddb put ')
        results = self.completer.complete(parsed)
        self.assertEqual(
            results,
            [CompletionResult('tablename', 0),
             CompletionResult('mytable', 0)]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/ddb/test_autocomplete.py" startline="66" endline="80" pcid="6628">
    def test_complete_table_name(self):
        self.mock_client.list_tables.return_value = {
            'TableNames': [
                'tablename',
                'mytable'
            ]
        }
        parsed = self.parser.parse('aws ddb select ')
        results = self.completer.complete(parsed)
        self.assertEqual(
            results,
            [CompletionResult('tablename', 0),
             CompletionResult('mytable', 0)]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/autocomplete/serverside/custom_completers/ddb/test_autocomplete.py" startline="96" endline="109" pcid="6630">
    def test_complete_group_name_filters_startswith(self):
        self.mock_client.list_tables.return_value = {
            'TableNames': [
                'tablename',
                'mytable'
            ]
        }
        parsed = self.parser.parse('aws ddb select my')
        results = self.completer.complete(parsed)
        self.assertEqual(
            results,
            [CompletionResult('mytable', -2)]
        )

</source>
</class>

<class classid="326" nclones="4" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="337" endline="351" pcid="6677">
    def test_query_multiple_topics_with_multi_values(self):
        tag_dict = {
            'topic-name-1': {
                'category': ['foo', 'bar']
            },
            'topic-name-2': {
                'category': ['baz', 'biz']
            }
        }
        self.topic_tag_db = TopicTagDB(tag_dict)
        query_dict = self.topic_tag_db.query('category')
        self.assertEqual(query_dict,
                         {'foo': ['topic-name-1'], 'bar': ['topic-name-1'],
                          'baz': ['topic-name-2'], 'biz': ['topic-name-2']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="367" endline="380" pcid="6679">
    def test_query_with_limit_single_value(self):
        tag_dict = {
            'topic-name-1': {
                'category': ['foo', 'bar']
            },
            'topic-name-2': {
                'category': ['bar', 'biz']
            }
        }
        self.topic_tag_db = TopicTagDB(tag_dict)
        query_dict = self.topic_tag_db.query('category', ['bar'])
        self.assertCountEqual(query_dict,
                              {'bar': ['topic-name-1', 'topic-name-2']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="381" endline="395" pcid="6680">
    def test_query_with_limit_multi_value(self):
        tag_dict = {
            'topic-name-1': {
                'category': ['foo', 'bar']
            },
            'topic-name-2': {
                'category': ['bar', 'biz']
            }
        }
        self.topic_tag_db = TopicTagDB(tag_dict)
        query_dict = self.topic_tag_db.query('category', ['foo', 'bar'])
        self.assertCountEqual(query_dict,
                              {'foo': ['topic-name-1'],
                               'bar': ['topic-name-1', 'topic-name-2']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="352" endline="366" pcid="6678">
    def test_query_multiple_topics_with_overlap_values(self):
        tag_dict = {
            'topic-name-1': {
                'category': ['foo', 'bar']
            },
            'topic-name-2': {
                'category': ['bar', 'biz']
            }
        }
        self.topic_tag_db = TopicTagDB(tag_dict)
        query_dict = self.topic_tag_db.query('category')
        self.assertCountEqual(
            query_dict, {'foo': ['topic-name-1'], 'biz': ['topic-name-2'],
                         'bar': ['topic-name-1', 'topic-name-2']})

</source>
</class>

<class classid="327" nclones="6" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="470" endline="483" pcid="6687">
    def test_scan_tags_with_multi_values(self):
        tags = [
            ':category: Foo, Bar',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="500" endline="513" pcid="6689">
    def test_scan_tags_with_multi_duplicate_values(self):
        tags = [
            ':category: Foo, Foo, Bar'
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="484" endline="499" pcid="6688">
    def test_scan_tags_with_single_and_multi_values(self):
        tags = [
            ':title: Title',
            ':category: Foo, Bar',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'title': ['Title'],
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="528" endline="541" pcid="6691">
    def test_scan_tags_with_multi_values_no_space(self):
        tags = [
            ':category: Foo,Bar',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="514" endline="527" pcid="6690">
    def test_scan_tags_with_multi_values_extra_space(self):
        tags = [
            ':category:    Foo, Bar   ',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo', 'Bar'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/test_topictags.py" startline="542" endline="555" pcid="6692">
    def test_scan_tags_with_multi_preserve_space(self):
        tags = [
            ':category: Foo Bar, Baz',
        ]
        topic_name = 'my-topic'

        reference_tag_dict = {
            topic_name: {
                'category': ['Foo Bar', 'Baz'],
            }
        }
        topic_filepath = self.create_topic_src_file(topic_name, tags)
        self.assert_json_index([topic_filepath], reference_tag_dict)

</source>
</class>

<class classid="328" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="85" endline="110" pcid="6701">
    def test_can_prompt_for_multiple_values_in_order(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              name:
                type: prompt
                description: Enter user name
              group:
                type: prompt
                description: Enter group name
        """)
        self.responses['Enter user name'] = 'myname'
        self.responses['Enter group name'] = 'wheel'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['name'], 'myname')
        self.assertEqual(parameters['group'], 'wheel')
        # We should also have prompted in the order that the keys
        # were defined.
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Enter user name', 'myname'),
             ('Enter group name', 'wheel')],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="111" endline="140" pcid="6702">
    def test_can_prompt_for_conditional_values_true(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              should_stop:
                type: prompt
                description: Should we stop
            next_step:
              switch: should_stop
              yes: DONE
              no: ask_name
          ask_name:
            values:
              name:
                type: prompt
                description: Enter user name
        """)
        self.responses['Should we stop'] = 'no'
        self.responses['Enter user name'] = 'admin'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['should_stop'], 'no')
        self.assertEqual(parameters['name'], 'admin')
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Should we stop', 'no'),
             ('Enter user name', 'admin')],
        )

</source>
</class>

<class classid="329" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="169" endline="194" pcid="6704">
    def test_can_prompt_with_choices_for_prompt(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              name:
                type: prompt
                description: Enter user name
                choices:
                    - display: Administrator
                      actual_value: admin
                    - display: Developer
                      actual_value: dev
        """)
        self.responses['Enter user name'] = 'admin'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['name'], 'admin')
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Enter user name', 'admin', [{'display': 'Administrator',
                                             'actual_value': 'admin'},
                                            {'display': 'Developer',
                                             'actual_value': 'dev'}])],
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="451" endline="479" pcid="6714">
    def test_choices_can_be_variable_reference(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              choices_var:
                type: static
                value:
                  - display: Administrator
                    actual_value: admin
                  - display: Developer
                    actual_value: dev
              name:
                type: prompt
                description: Enter user name
                choices: choices_var
        """)
        self.responses['Enter user name'] = 'admin'

        parameters = self.planner.plan(loaded['plan'])
        self.assertEqual(parameters['name'], 'admin')
        self.assertEqual(
            self.prompter.recorded_prompts,
            [('Enter user name', 'admin', [{'display': 'Administrator',
                                             'actual_value': 'admin'},
                                            {'display': 'Developer',
                                             'actual_value': 'dev'}])],
        )

</source>
</class>

<class classid="330" nclones="2" nlines="17" similarity="87">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="284" endline="311" pcid="6708">
    def test_can_run_apicall_step(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              foo:
                type: apicall
                operation: iam.ListPolicies
                params:
                  Scope: AWS
        """)
        mock_session = mock.Mock(spec=Session)
        mock_client = mock.Mock()
        mock_session.create_client.return_value = mock_client
        mock_client.list_policies.return_value = {
            'Policies': ['foo'],
        }
        api_step = core.APICallStep(
            api_invoker=core.APIInvoker(session=mock_session)
        )
        planner = core.Planner(
            step_handlers={
                'apicall': api_step,
            },
        )
        parameters = planner.plan(loaded['plan'])
        self.assertEqual(parameters['foo'], {'Policies': ['foo']})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="396" endline="426" pcid="6711">
    def test_can_run_apicall_step_with_query(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              foo:
                type: apicall
                operation: iam.ListPolicies
                params:
                  Scope: AWS
                query: Policies[].Name
        """)
        mock_session = mock.Mock(spec=Session)
        mock_client = mock.Mock()
        mock_session.create_client.return_value = mock_client
        mock_client.list_policies.return_value = {
            'Policies': [{'Name': 'one'}, {'Name': 'two'}],
        }
        api_step = core.APICallStep(
            api_invoker=core.APIInvoker(session=mock_session)
        )
        planner = core.Planner(
            step_handlers={
                'apicall': api_step,
            },
        )
        parameters = planner.plan(loaded['plan'])
        # Note this value is the result is applying the
        # Polices[].Name jmespath query to the response.
        self.assertEqual(parameters['foo'], ['one', 'two'])

</source>
</class>

<class classid="331" nclones="2" nlines="26" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="312" endline="356" pcid="6709">
    def test_can_run_apicall_step_with_cache(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              foo:
                type: apicall
                operation: iam.ListPolicies
                params:
                  Scope: AWS
                cache: true
              use_cached_foo:
                type: apicall
                operation: iam.ListPolicies
                params:
                  Scope: AWS
                cache: true
        """)
        mock_session = mock.Mock(spec=Session)
        mock_client = mock.Mock()
        mock_session.create_client.return_value = mock_client
        mock_client.list_policies.return_value = {
            'Policies': ['foo'],
        }
        api_step = core.APICallStep(
            api_invoker=core.APIInvoker(session=mock_session)
        )
        planner = core.Planner(
            step_handlers={
                'apicall': api_step,
            },
        )
        parameters = planner.plan(loaded['plan'])
        self.assertEqual(
            parameters,
            {
                'foo': {'Policies': ['foo']},
                'use_cached_foo': {'Policies': ['foo']},
            }
        )
        self.assertEqual(
            mock_client.list_policies.call_count,
            1
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="357" endline="395" pcid="6710">
    def test_can_run_apicall_step_with_paginate(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              all_policies:
                type: apicall
                operation: iam.ListPolicies
                params:
                  Scope: All
                paginate: true
        """)
        mock_session = mock.Mock(spec=Session)
        mock_client = mock.Mock()
        mock_paginator = mock.Mock(Paginator)
        mock_session.create_client.return_value = mock_client
        mock_client.can_paginate.return_value = True
        mock_client.get_paginator.return_value = mock_paginator
        mock_paginator.paginate.return_value.build_full_result.return_value = {
            'Policies': ['foo'],
        }
        api_step = core.APICallStep(
            api_invoker=core.APIInvoker(session=mock_session)
        )
        planner = core.Planner(
            step_handlers={
                'apicall': api_step,
            },
        )
        parameters = planner.plan(loaded['plan'])
        self.assertEqual(
            parameters,
            {
                'all_policies': {'Policies': ['foo']},
            }
        )
        mock_client.get_paginator.assert_called_with('list_policies')
        mock_paginator.paginate.assert_called_with(Scope='All')

</source>
</class>

<class classid="332" nclones="2" nlines="15" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="616" endline="637" pcid="6721">
    def test_can_load_profiles(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              foo:
                type: sharedconfig
                operation: ListProfiles
        """)
        config_api = mock.Mock(spec=core.SharedConfigAPI)
        config_api.list_profiles.return_value = ['profile1', 'profile2']
        sharedconfig = core.SharedConfigStep(
            config_api=config_api,
        )
        planner = core.Planner(
            step_handlers={
                'sharedconfig': sharedconfig,
            },
        )
        parameters = planner.plan(loaded['plan'])
        self.assertEqual(parameters['foo'], ['profile1', 'profile2'])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="638" endline="665" pcid="6722">
    def test_can_read_config_profile_data(self):
        loaded = load_wizard("""
        plan:
          start:
            values:
              foo:
                type: sharedconfig
                operation: GetValue
                params:
                  profile: devprofile
                  value: region
        """)
        config_api = mock.Mock(spec=core.SharedConfigAPI)
        config_api.get_value.return_value = 'us-west-2'
        sharedconfig = core.SharedConfigStep(
            config_api=config_api,
        )
        planner = core.Planner(
            step_handlers={
                'sharedconfig': sharedconfig,
            },
        )
        parameters = planner.plan(loaded['plan'])
        self.assertEqual(parameters['foo'], 'us-west-2')
        config_api.get_value.assert_called_with(profile='devprofile',
                                                value='region')


</source>
</class>

<class classid="333" nclones="3" nlines="11" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="956" endline="984" pcid="6739">
    def test_can_merge_dicts(self):
        loaded = load_wizard("""
        execute:
          default:
            - type: define-variable
              varname: myvar
              value:
                foo: original-foo
                bar: original-bar
                baz: original-baz
            - type: merge-dict
              output_var: result
              overlays:
              - "{myvar}"
              - bar: FIRST-NEW-BAR
                baz: FIRST-NEW-BAZ
              - baz: SECOND-NEW-BAZ
                newkey: newvalue
        """)
        variables = {}
        self.executor.execute(loaded['execute'], variables)
        expected = {
            'foo': 'original-foo',
            'bar': 'FIRST-NEW-BAR',
            'baz': 'SECOND-NEW-BAZ',
            'newkey': 'newvalue',
        }
        self.assertEqual(variables['result'], expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="985" endline="1014" pcid="6740">
    def test_can_merge_nested_dicts(self):
        loaded = load_wizard("""
        execute:
          default:
            - type: define-variable
              varname: myvar
              value:
                foo:
                  bar:
                    baz: original-baz
                    baz2: original-baz2
                foo2: original-foo2
            - type: merge-dict
              output_var: result
              overlays:
              - "{myvar}"
              - foo:
                  bar:
                    baz: new-baz
                  bar2: new-bar2
        """)
        variables = {}
        self.executor.execute(loaded['execute'], variables)
        expected = {
            'foo': {'bar': {'baz': 'new-baz', 'baz2': 'original-baz2'},
                    'bar2': 'new-bar2'},
            'foo2': 'original-foo2',
        }
        self.assertEqual(variables['result'], expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1015" endline="1049" pcid="6741">
    def test_can_merge_dicts_with_vars(self):
        loaded = load_wizard("""
        execute:
          default:
            - type: define-variable
              varname: myvar
              value:
                foo:
                  bar:
                    baz: original-baz
                    baz2: original-baz2
                foo2: original-foo2
            - type: define-variable
              varname: myvar2
              value:
                foo:
                  bar:
                    baz: new-baz
                    baz2: original-baz2
                  bar2: new-bar2
            - type: merge-dict
              output_var: result
              overlays:
              - "{myvar}"
              - "{myvar2}"
        """)
        variables = {}
        self.executor.execute(loaded['execute'], variables)
        expected = {
            'foo': {'bar': {'baz': 'new-baz', 'baz2': 'original-baz2'},
                    'bar2': 'new-bar2'},
            'foo2': 'original-foo2',
        }
        self.assertEqual(variables['result'], expected)

</source>
</class>

<class classid="334" nclones="2" nlines="19" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1201" endline="1220" pcid="6758">

    def test_make_api_call_can_cache_response(self):
        invoker = core.APIInvoker(self.mock_session)
        invoker.invoke(
            'iam',
            'CreateUser',
            api_params={'UserName': 'admin'},
            plan_variables={},
            cache=True
        )
        call_method_args = self.get_call_args(self.mock_session)
        self.assertEqual(call_method_args, mock.call(UserName='admin'))
        invoker.invoke(
            'iam',
            'CreateUser',
            api_params={'UserName': 'admin'},
            plan_variables={},
            cache=True
        )
        self.assertEqual(self.get_call_count(self.mock_session), 1)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1221" endline="1243" pcid="6759">

    def test_does_not_use_cache_when_different_input_parameters(self):
        invoker = core.APIInvoker(self.mock_session)
        invoker.invoke(
            'iam',
            'CreateUser',
            api_params={'UserName': 'admin'},
            plan_variables={},
            cache=True
        )
        call_method_args = self.get_call_args(self.mock_session)
        self.assertEqual(call_method_args, mock.call(UserName='admin'))
        invoker.invoke(
            'iam',
            'CreateUser',
            api_params={'UserName': 'admin-different'},
            plan_variables={},
            cache=True
        )
        call_method_args = self.get_call_args(self.mock_session)
        self.assertEqual(
            call_method_args, mock.call(UserName='admin-different'))
        self.assertEqual(self.get_call_count(self.mock_session), 2)
</source>
</class>

<class classid="335" nclones="4" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1314" endline="1333" pcid="6765">

    def test_multiline_condition_statement(self):
        step_definition = {
            'type': 'template',
            'value': """{foo}
            {%if   {allow} == False    %}
not allow foo 
            {% endif %}
   {%if   {allow} == True    %}
allow foo
        {% endif %}
more text"""
        }
        parameters = {
            'foo': 'foo parameter',
            'allow': 'True',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, 'foo parameter\nallow foo\nmore text')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1334" endline="1346" pcid="6766">

    def test_can_use_conditions_with_multiple_vars(self):
        step_definition = {
            'type': 'template',
            'value': "{%if {var1} == {var2} %}allow body{% endif %}"
        }
        parameters = {
            'var1': 'yes',
            'var2': 'yes',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, 'allow body')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1357" endline="1369" pcid="6768">

    def test_positive_condition_statements_with_not_equal(self):
        step_definition = {
            'type': 'template',
            'value': "{%if {first_var} != {second_var} %}not equals{% endif %}"
        }
        parameters = {
            'first_var': 'first_value',
            'second_var': 'second_value',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, 'not equals')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1370" endline="1382" pcid="6769">

    def test_negative_condition_statements_with_not_equal(self):
        step_definition = {
            'type': 'template',
            'value': "{%if {first_var} != {second_var} %}not equals{% endif %}"
        }
        parameters = {
            'first_var': 'same_value',
            'second_var': 'same_value',
        }
        step = core.TemplateStep()
        value = step.run_step(step_definition, parameters)
        self.assertEqual(value, '')
</source>
</class>

<class classid="336" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1417" endline="1429" pcid="6773">

    def test_dump_data_resolves_variables(self):
        wizard_values = FakeWizardValues()
        wizard_values.values['replace-me'] = {"replaced": "value"}
        value = core.DumpDataStep().run_step(
            step_definition={
                'type': 'dump-data',
                'dump_type': 'json',
                'value': '{replace-me}'
            },
            parameters=wizard_values
        )
        assert value == '{"replaced": "value"}'
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/wizard/test_core.py" startline="1457" endline="1469" pcid="6776">

    def test_load_data_resolves_variables(self):
        wizard_values = FakeWizardValues()
        wizard_values.values['replace-me'] = '{"replaced": "value"}'
        value = core.LoadDataStep().run_step(
            step_definition={
                'type': 'load-data',
                'load_type': 'json',
                'value': '{replace-me}'
            },
            parameters=wizard_values
        )
        assert value == {"replaced": "value"}
</source>
</class>

<class classid="337" nclones="5" nlines="14" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ec2/test_paginate.py" startline="39" endline="54" pcid="6818">
    def test_inject(self):
        target_operations = {'foo': []}
        injector = EC2PageSizeInjector()
        injector.DEFAULT_PAGE_SIZE = 5
        injector.TARGET_OPERATIONS = target_operations
        parsed_globals = Namespace(paginate=True)
        call_parameters = {}
        event_name = 'operation-args-parsed.ec2.foo'
        injector.inject(
            event_name=event_name,
            parsed_globals=parsed_globals,
            call_parameters=call_parameters
        )
        page_size = call_parameters.get('PaginationConfig', {}).get('PageSize')
        self.assertEqual(page_size, 5)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ec2/test_paginate.py" startline="86" endline="101" pcid="6821">
    def test_operation_whitelist(self):
        target_operations = {'foo': ['bar']}
        injector = EC2PageSizeInjector()
        injector.UNIVERSAL_WHITELIST = []
        injector.TARGET_OPERATIONS = target_operations
        parsed_globals = Namespace(paginate=True)
        call_parameters = {'baz': True}
        event_name = 'operation-args-parsed.ec2.foo'
        injector.inject(
            event_name=event_name,
            parsed_globals=parsed_globals,
            call_parameters=call_parameters
        )
        page_size = call_parameters.get('PaginationConfig', {}).get('PageSize')
        self.assertIsNone(page_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ec2/test_paginate.py" startline="70" endline="85" pcid="6820">
    def test_global_whitelist(self):
        target_operations = {'foo': []}
        injector = EC2PageSizeInjector()
        injector.UNIVERSAL_WHITELIST = ['bar']
        injector.TARGET_OPERATIONS = target_operations
        parsed_globals = Namespace(paginate=True)
        call_parameters = {'baz': True}
        event_name = 'operation-args-parsed.ec2.foo'
        injector.inject(
            event_name=event_name,
            parsed_globals=parsed_globals,
            call_parameters=call_parameters
        )
        page_size = call_parameters.get('PaginationConfig', {}).get('PageSize')
        self.assertIsNone(page_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ec2/test_paginate.py" startline="55" endline="69" pcid="6819">
    def test_no_paginate(self):
        target_operations = {'foo': []}
        injector = EC2PageSizeInjector()
        injector.TARGET_OPERATIONS = target_operations
        parsed_globals = Namespace(paginate=False)
        call_parameters = {}
        event_name = 'operation-args-parsed.ec2.foo'
        injector.inject(
            event_name=event_name,
            parsed_globals=parsed_globals,
            call_parameters=call_parameters
        )
        page_size = call_parameters.get('PaginationConfig', {}).get('PageSize')
        self.assertIsNone(page_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ec2/test_paginate.py" startline="102" endline="115" pcid="6822">
    def test_non_target_operation(self):
        target_operations = {'foo': []}
        injector = EC2PageSizeInjector()
        injector.TARGET_OPERATIONS = target_operations
        parsed_globals = Namespace(paginate=True)
        call_parameters = {}
        event_name = 'operation-args-parsed.ec2.baz'
        injector.inject(
            event_name=event_name,
            parsed_globals=parsed_globals,
            call_parameters=call_parameters
        )
        page_size = call_parameters.get('PaginationConfig', {}).get('PageSize')
        self.assertIsNone(page_size)
</source>
</class>

<class classid="338" nclones="3" nlines="13" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="47" endline="59" pcid="6825">
    def _build_args(self, **kwargs):
        return argparse.Namespace(**dict({
            "hostname": None,
            "private_ip": None,
            "public_ip": None,
            "local": False,
            "username": None,
            "private_key": None,
            "ssh": None,
            "target": None,
            "use_instance_profile": False,
        }, **kwargs))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="611" endline="624" pcid="6849">

    def _build_args(self, **kwargs):
        return argparse.Namespace(**dict({
            "hostname": None,
            "infrastructure_class": "ec2",
            "private_ip": None,
            "public_ip": None,
            "local": False,
            "username": None,
            "private_key": None,
            "ssh": None,
            "target": None,
            "use_instance_profile": None,
        }, **kwargs))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="1071" endline="1084" pcid="6868">
        self.assertEqual(self.register._use_hostname, None)
        self.assertEqual(self.register._name_for_iam, "192.0.2.42")


class TestOpsWorksRegisterOnPremises(TestOpsWorksBase):
    """Tests for functionality specific to on-premises instances."""

    def _build_args(self, **kwargs):
        return argparse.Namespace(**dict({
            "hostname": None,
            "infrastructure_class": "on-premises",
            "private_ip": None,
            "public_ip": None,
            "local": False,
</source>
</class>

<class classid="339" nclones="3" nlines="18" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="212" endline="237" pcid="6834">
    def test_create_iam_entities_simple(self):
        """Basic IAM side-effects.

        Should create a group with a user, and an access key."""

        with mock.patch.object(self.register, "iam", create=True) as mock_iam:
            self.register._stack = dict(
                StackId="STACKID", Name="STACKNAME", Arn="ARN")
            self.register._name_for_iam = "HOSTNAME"

            self.register.create_iam_entities(self._build_args())
            policy = "arn:aws:iam::aws:policy/AWSOpsWorksInstanceRegistration"

            mock_iam.create_group.assert_any_call(
                Path="/AWS/OpsWorks/", GroupName="OpsWorks-STACKID")
            mock_iam.create_user.assert_any_call(
                Path="/AWS/OpsWorks/", UserName="OpsWorks-STACKNAME-HOSTNAME")
            mock_iam.add_user_to_group.assert_any_call(
                UserName="OpsWorks-STACKNAME-HOSTNAME",
                GroupName="OpsWorks-STACKID")
            mock_iam.attach_user_policy.assert_any_call(
                PolicyArn=policy,
                UserName="OpsWorks-STACKNAME-HOSTNAME")
            mock_iam.create_access_key.assert_any_call(
                UserName="OpsWorks-STACKNAME-HOSTNAME")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="238" endline="260" pcid="6835">
    def test_create_iam_entities_group_exists(self):
        """Should reuse an existing group."""

        with mock.patch.object(self.register, "iam", create=True) as mock_iam:
            self.register._stack = dict(
                StackId="STACKID", Name="STACKNAME", Arn="ARN")
            self.register._name_for_iam = "HOSTNAME"
            mock_iam.create_group.side_effect = ClientError(
                {'Error': {'Code': 'EntityAlreadyExists', 'Message': ''}},
                'CreateGroup')

            self.register.create_iam_entities(self._build_args())

            mock_iam.create_group.assert_any_call(
                Path="/AWS/OpsWorks/", GroupName="OpsWorks-STACKID")
            mock_iam.create_user.assert_any_call(
                Path="/AWS/OpsWorks/", UserName="OpsWorks-STACKNAME-HOSTNAME")
            mock_iam.add_user_to_group.assert_any_call(
                UserName="OpsWorks-STACKNAME-HOSTNAME",
                GroupName="OpsWorks-STACKID")
            mock_iam.create_access_key.assert_any_call(
                UserName="OpsWorks-STACKNAME-HOSTNAME")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="299" endline="321" pcid="6837">
    def test_create_iam_entities_attach_user_policy_unauthorized(self):
        """Should call PutUserPolicy when AttachUserPolicy is unauthorized."""

        with mock.patch.object(self.register, "iam", create=True) as mock_iam:
            self.register._stack = dict(
                StackId="STACKID", Name="STACKNAME", Arn="ARN")
            self.register._name_for_iam = "HOSTNAME"
            policy = "arn:aws:iam::aws:policy/AWSOpsWorksInstanceRegistration"

            mock_iam.attach_user_policy.side_effect = ClientError(
                {'Error': {'Code': 'AccessDenied', 'Message': ''}},
                'AttachUserPolicy')

            self.register.create_iam_entities(self._build_args())

            mock_iam.attach_user_policy.assert_any_call(
                PolicyArn=policy,
                UserName="OpsWorks-STACKNAME-HOSTNAME")
            mock_iam.put_user_policy.assert_any_call(
                PolicyName="OpsWorks-Instance",
                PolicyDocument=mock.ANY,
                UserName="OpsWorks-STACKNAME-HOSTNAME")

</source>
</class>

<class classid="340" nclones="2" nlines="19" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="478" endline="505" pcid="6844">
    @mock.patch.object(opsworks, "subprocess")
    def test_setup_target_machine_remote_nix(
            self, mock_subprocess, mock_platform):
        """Should setup a remote machine from a non-Windows host correctly."""

        mock_platform.system.return_value = "Linux"
        args = self._build_args(
            infrastructure_class="ec2", hostname="HOSTNAME", local=False
        )
        self.register._stack = {"StackId": "STACKID"}
        self.register._prov_params = {
            "AgentInstallerUrl": "URL",
            "Parameters": {"assets_download_bucket": "xxx"}
        }
        self.register.access_key = {
            "AccessKeyId": "AKIAXXX",
            "SecretAccessKey": "foobarbaz"
        }
        self.register._use_address = "ip"
        self.register._use_hostname = "HOSTNAME"

        self.register.setup_target_machine(args)

        cmd = mock_subprocess.check_call.call_args[0][0]
        self.assertEqual(cmd[0], "ssh")
        self.assertEqual(cmd[1], "-tt")
        self.assertEqual(cmd[2], "ip")
        self.assertRegex(cmd[3], r"/bin/sh -c ")
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="508" endline="532" pcid="6845">
    @mock.patch.object(opsworks, "subprocess")
    def test_setup_target_machine_remote_windows(
            self, mock_subprocess, mock_platform):
        """Should setup a remote machine from a Windows host correctly."""

        mock_platform.system.return_value = "Windows"
        args = self._build_args(
            infrastructure_class="ec2", hostname="HOSTNAME", local=False
        )
        self.register._stack = {"StackId": "STACKID"}
        self.register._prov_params = {
            "AgentInstallerUrl": "URL",
            "Parameters": {"assets_download_bucket": "xxx"}
        }
        self.register.access_key = {
            "AccessKeyId": "AKIAXXX",
            "SecretAccessKey": "foobarbaz"
        }
        self.register._use_address = "ip"
        self.register._use_hostname = "HOSTNAME"

        self.register.setup_target_machine(args)

        cmd = mock_subprocess.check_call.call_args[0][0]
        self.assertRegex(cmd, r'^plink ".*" -m ".*"$')
</source>
</class>

<class classid="341" nclones="3" nlines="38" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="626" endline="678" pcid="6850">
    @mock.patch.object(opsworks, "subprocess")
    def test_run_main_remote(self, mock_subprocess):
        """Flow test w/ all the expected side-effects for a remote instance."""

        args = self._build_args(stack_id="STACKID", target="i-12345678",
                                local=False)
        parsed_globals = argparse.Namespace()
        mock_ec2 = mock.Mock()
        mock_iam = mock.Mock()
        mock_opsworks = mock.Mock()
        self.mock_session.create_client.side_effect = lambda name, **_: \
            dict(ec2=mock_ec2, iam=mock_iam, opsworks=mock_opsworks)[name]

        mock_opsworks.describe_stacks.return_value = {
            "Stacks": [{
                "Arn": "ARN",
                "Name": "STACKNAME",
                "StackId": "STACKID",
                "Region": "mars-east-1",
            }]
        }
        mock_opsworks.describe_stack_provisioning_parameters.return_value = {
            "AgentInstallerUrl": "URL",
            "Parameters": {
                "assets_download_bucket": "xxx"
            }
        }
        mock_opsworks.describe_instances.return_value = {
            "Instances": []
        }
        mock_ec2.describe_instances.return_value = {
            "Reservations": [{
                "Instances": [{
                    "PublicIpAddress": "192.0.2.42"
                }]
            }]
        }
        mock_iam.create_access_key.return_value = {
            "AccessKey":
                {"AccessKeyId": "AKIAXXX", "SecretAccessKey": "foobarbaz"}
        }

        self.register._run_main(args, parsed_globals)

        mock_iam.create_user.assert_called_with(
            Path="/AWS/OpsWorks/", UserName="OpsWorks-STACKNAME-i-12345678")
        mock_iam.create_group.assert_called_with(
            Path="/AWS/OpsWorks/", GroupName="OpsWorks-STACKID")
        mock_iam.add_user_to_group.assert_called_with(
            UserName="OpsWorks-STACKNAME-i-12345678",
            GroupName="OpsWorks-STACKID")
        mock_iam.create_access_key.assert_called_with(
            UserName="OpsWorks-STACKNAME-i-12345678")
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="1086" endline="1131" pcid="6869">
            "private_key": None,
            "ssh": None,
            "target": None,
            "use_instance_profile": None,
        }, **kwargs))

    @mock.patch.object(opsworks, "subprocess")
    def test_run_main(self, mock_subprocess):
        """Flow test w/ all the expected side-effects for a remote instance."""

        args = self._build_args(stack_id="STACKID", target="HOSTNAME",
                                local=False, ssh=None, hostname=None,
                                private_ip=None, public_ip=None)
        parsed_globals = argparse.Namespace()
        mock_ec2 = mock.Mock()
        mock_iam = mock.Mock()
        mock_opsworks = mock.Mock()
        self.mock_session.create_client.side_effect = lambda name, **_: \
            dict(ec2=mock_ec2, iam=mock_iam, opsworks=mock_opsworks)[name]

        mock_opsworks.describe_stacks.return_value = {
            "Stacks": [{
                "Arn": "ARN",
                "Name": "STACKNAME",
                "StackId": "STACKID",
                "Region": "mars-east-1",
            }]
        }
        mock_opsworks.describe_stack_provisioning_parameters.return_value = {
            "AgentInstallerUrl": "URL",
            "Parameters": {
                "assets_download_bucket": "xxx"
            }
        }
        mock_opsworks.describe_instances.return_value = {
            "Instances": []
        }
        mock_iam.create_access_key.return_value = {
            "AccessKey":
            {"AccessKeyId": "AKIAXXX", "SecretAccessKey": "foobarbaz"}}

        self.register._run_main(args, parsed_globals)

        mock_iam.create_user.assert_called_with(
            Path="/AWS/OpsWorks/", UserName="OpsWorks-STACKNAME-HOSTNAME")
        mock_iam.create_group.assert_called_with(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="683" endline="732" pcid="6851">
    @mock.patch.object(opsworks, "socket")
    @mock.patch.object(opsworks, "platform")
    def test_run_main_local(
            self, mock_platform, mock_socket, mock_subprocess, mock_urlopen):
        """Flow test w/ all the expected side-effects for a local instance."""

        args = self._build_args(stack_id="STACKID", target=None,
                                local=True)
        parsed_globals = argparse.Namespace()
        mock_ec2 = mock.Mock()
        mock_iam = mock.Mock()
        mock_opsworks = mock.Mock()
        mock_platform.system.return_value = "Linux"
        self.mock_session.create_client.side_effect = lambda name, **_: \
            dict(ec2=mock_ec2, iam=mock_iam, opsworks=mock_opsworks)[name]

        mock_opsworks.describe_stacks.return_value = {
            "Stacks": [{
                "Arn": "ARN",
                "Name": "STACKNAME",
                "StackId": "STACKID",
                "Region": "mars-east-1",
            }]
        }
        mock_opsworks.describe_stack_provisioning_parameters.return_value = {
            "AgentInstallerUrl": "URL",
            "Parameters": {
                "assets_download_bucket": "xxx"
            }
        }
        mock_opsworks.describe_instances.return_value = {
            "Instances": []
        }
        mock_iam.create_access_key.return_value = {
            "AccessKey":
                {"AccessKeyId": "AKIAXXX", "SecretAccessKey": "foobarbaz"}
        }
        mock_socket.gethostname.return_value = "HOSTNAME"
        mock_urlopen.return_value.read.return_value = \
            '{"region": "mars-east-1"}'

        self.register._run_main(args, parsed_globals)

        mock_iam.create_user.assert_called_with(
            Path="/AWS/OpsWorks/", UserName="OpsWorks-STACKNAME-HOSTNAME")
        mock_iam.create_group.assert_called_with(
            Path="/AWS/OpsWorks/", GroupName="OpsWorks-STACKID")
        mock_iam.add_user_to_group.assert_called_with(
            UserName="OpsWorks-STACKNAME-HOSTNAME",
            GroupName="OpsWorks-STACKID")
</source>
</class>

<class classid="342" nclones="6" nlines="24" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="774" endline="809" pcid="6855">
            self.register.validate_arguments(
                self._build_args(hostname=None, local=True))
        except Exception as e:
            self.fail(
                'Register should work with bytes response from urlopen.read. '
                'Got exception: %s' % e)

    def test_retrieve_stack_ec2(self):
        """Should retrieve an EC2 stack and the matching instance."""

        with mock.patch.object(
                self.register, "opsworks", create=True) as mock_opsworks:
            mock_ec2 = mock.Mock()
            self.mock_session.create_client.return_value = mock_ec2
            mock_opsworks.describe_stacks.return_value = {
                "Stacks": [{
                    "StackId": "STACKID",
                    "Region": "mars-east-1",
                }]
            }
            mock_ec2.describe_instances.return_value = {
                "Reservations": [{
                    "Instances": [{
                        "InstanceId": "i-12345678",
                    }]
                }, {
                    "Instances": [{
                        "InstanceId": "i-9abcdef0",
                        "VpcId": "vpc-123456"
                    }]
                }
                ]
            }
            self.register.retrieve_stack(self._build_args(
                stack_id="STACKID", target="i-12345678"
            ))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="958" endline="986" pcid="6861">
                "Reservations": []
            }
            with self.assertRaises(ValueError):
                self.register.retrieve_stack(
                    self._build_args(
                        stack_id="STACKID", target="some-instance"))

    def test_retrieve_stack_target_too_many(self):
        """Should complain if it finds too many matching instances."""

        with mock.patch.object(
                self.register, "opsworks", create=True) as mock_opsworks:
            mock_ec2 = mock.Mock()
            self.mock_session.create_client.return_value = mock_ec2
            mock_opsworks.describe_stacks.return_value = {
                "Stacks": [{
                    "StackId": "STACKID",
                    "Region": "mars-east-1",
                }]
            }
            mock_ec2.describe_instances.return_value = {
                "Reservations": [{
                    "Instances": [{
                        "InstanceId": "i-12345678",
                        "PrivateIpAddress": "1.2.3.4"
                    }, {
                        "InstanceId": "i-9abcdef0",
                        "PrivateIpAddress": "1.2.3.5"
                    }]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="906" endline="936" pcid="6859">
                stack_id="STACKID", target="1.2.3.4"
            ))
            mock_ec2.describe_instances.assert_called_with(Filters=[])
            self.assertEqual(
                self.register._ec2_instance["InstanceId"],
                "i-12345678")

    def test_retrieve_stack_target_name(self):
        """Should find an EC2 instance by name."""

        with mock.patch.object(
                self.register, "opsworks", create=True) as mock_opsworks:
            mock_ec2 = mock.Mock()
            self.mock_session.create_client.return_value = mock_ec2
            mock_opsworks.describe_stacks.return_value = {
                "Stacks": [{
                    "StackId": "STACKID",
                    "Region": "mars-east-1",
                }]
            }
            mock_ec2.describe_instances.return_value = {
                "Reservations": [{
                    "Instances": [{
                        "InstanceId": "i-12345678",
                        "PrivateIpAddress": "1.2.3.4"
                    }]
                }]
            }
            self.register.retrieve_stack(self._build_args(
                stack_id="STACKID", target="db-master"
            ))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="844" endline="873" pcid="6857">
                    "Name": "vpc-id",
                    "Values": ["vpc-123456"]
                }])
            self.assertEqual(
                self.register._ec2_instance["InstanceId"],
                "i-12345678")

    def test_retrieve_stack_ec2_instance_id(self):
        """Should find an EC2 instance by instance ID."""

        with mock.patch.object(
                self.register, "opsworks", create=True) as mock_opsworks:
            mock_ec2 = mock.Mock()
            self.mock_session.create_client.return_value = mock_ec2
            mock_opsworks.describe_stacks.return_value = {
                "Stacks": [{
                    "StackId": "STACKID",
                    "Region": "mars-east-1",
                }]
            }
            mock_ec2.describe_instances.return_value = {
                "Reservations": [{
                    "Instances": [{
                        "InstanceId": "i-12345678910",
                    }]
                }]
            }
            self.register.retrieve_stack(self._build_args(
                stack_id="STACKID", target="i-12345678910"
            ))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="874" endline="905" pcid="6858">
            mock_ec2.describe_instances.assert_called_with(
                InstanceIds=["i-12345678910"], Filters=[]
            )
            self.assertEqual(
                self.register._ec2_instance["InstanceId"],
                "i-12345678910")

    def test_retrieve_stack_target_ip_address(self):
        """Should find an EC2 instance by IP address."""

        with mock.patch.object(
                self.register, "opsworks", create=True) as mock_opsworks:
            mock_ec2 = mock.Mock()
            self.mock_session.create_client.return_value = mock_ec2
            mock_opsworks.describe_stacks.return_value = {
                "Stacks": [{
                    "StackId": "STACKID",
                    "Region": "mars-east-1",
                }]
            }
            mock_ec2.describe_instances.return_value = {
                "Reservations": [{
                    "Instances": [{
                        "InstanceId": "i-12345678",
                        "PrivateIpAddress": "1.2.3.4"
                    }, {
                        "InstanceId": "i-9abcdef0",
                        "PrivateIpAddress": "1.2.3.5"
                    }]
                }]
            }
            self.register.retrieve_stack(self._build_args(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_opsworks.py" startline="810" endline="843" pcid="6856">
            mock_ec2.describe_instances.assert_called_with(
                InstanceIds=["i-12345678"], Filters=[]
            )
            self.assertEqual(
                self.register._ec2_instance["InstanceId"],
                "i-12345678")

    def test_retrieve_stack_vpc(self):
        """Should retrieve an VPC stack and the matching instance."""

        with mock.patch.object(
                self.register, "opsworks", create=True) as mock_opsworks:
            mock_ec2 = mock.Mock()
            self.mock_session.create_client.return_value = mock_ec2
            mock_opsworks.describe_stacks.return_value = {
                "Stacks": [{
                    "StackId": "STACKID",
                    "Region": "mars-east-1",
                    "VpcId": "vpc-123456",
                }]
            }
            mock_ec2.describe_instances.return_value = {
                "Reservations": [{
                    "Instances": [{
                        "InstanceId": "i-12345678",
                    }]
                }]
            }
            self.register.retrieve_stack(self._build_args(
                stack_id="STACKID", target="i-12345678"
            ))
            mock_ec2.describe_instances.assert_called_with(
                InstanceIds=["i-12345678"],
                Filters=[{
</source>
</class>

<class classid="343" nclones="21" nlines="12" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="23" endline="37" pcid="6932">
    def test_s3_location(self):
        cmd = self.prefix + '--s3-location bucket=b,key=k,bundleType=zip'
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="172" endline="186" pcid="6943">
    def test_s3_location(self):
        cmd = self.prefix + '--s3-location bucket=b,key=k,bundleType=zip'
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="124" endline="139" pcid="6939">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="273" endline="288" pcid="6950">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="289" endline="304" pcid="6951">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="140" endline="155" pcid="6940">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="323" endline="338" pcid="6954">
    def test_s3_location(self):
        cmd = self.prefix + '--s3-location bucket=b,key=k,bundleType=zip'
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="56" endline="73" pcid="6934">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="74" endline="92" pcid="6935">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="205" endline="222" pcid="6945">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="339" endline="357" pcid="6955">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="187" endline="204" pcid="6944">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="358" endline="376" pcid="6956">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="223" endline="241" pcid="6946">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="93" endline="111" pcid="6936">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="38" endline="55" pcid="6933">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="242" endline="260" pcid="6947">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="397" endline="416" pcid="6958">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="446" endline="462" pcid="6962">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="429" endline="445" pcid="6961">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="377" endline="396" pcid="6957">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'deploymentGroupName': 'bar',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="344" nclones="2" nlines="15" similarity="86">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_install.py" startline="155" endline="171" pcid="6974">
    def test_install_for_ubuntu(self, install):
        self.system.return_value = 'Linux'
        self.linux_distribution.return_value = ('Ubuntu', '', '')
        self.install._run_main(self.args, self.globals)
        self.assertIn('bucket', self.args)
        self.assertEquals(self.bucket, self.args.bucket)
        self.assertIn('key', self.args)
        self.assertEquals('latest/install', self.args.key)
        self.assertIn('installer', self.args)
        self.assertEquals('install', self.args.installer)
        self.makedirs.assert_called_with('/etc/codedeploy-agent/conf')
        self.copyfile.assset_called_with(
            'codedeploy.onpremises.yml',
            '/etc/codedeploy-agent/conf/codedeploy.onpremises.yml'
        )
        install.assert_called_with(self.args)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_install.py" startline="174" endline="191" pcid="6975">
    def test_install_for_windows(self, validate_administrator, install):
        self.system.return_value = 'Windows'
        self.install._run_main(self.args, self.globals)
        self.assertIn('bucket', self.args)
        self.assertEquals(self.bucket, self.args.bucket)
        self.assertIn('key', self.args)
        self.assertEquals('latest/codedeploy-agent.msi', self.args.key)
        self.assertIn('installer', self.args)
        self.assertEquals('codedeploy-agent.msi', self.args.installer)
        self.makedirs.assert_called_with(r'C:\ProgramData\Amazon\CodeDeploy')
        self.copyfile.assset_called_with(
            'conf.onpremises.yml',
            r'C:\ProgramData\Amazon\CodeDeploy\conf.onpremises.yml'
        )
        validate_administrator.assert_called_with()
        install.assert_called_with(self.args)


</source>
</class>

<class classid="345" nclones="2" nlines="19" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_deregister.py" startline="93" endline="117" pcid="6989">
    def test_deregister_with_tags(self):
        self.codedeploy.get_on_premises_instance.return_value = {
            'instanceInfo': {
                'iamUserArn': self.iam_user_arn,
                'tags': self.tags
            }
        }
        self.deregister._run_main(self.args, self.globals)
        self.codedeploy.get_on_premises_instance.assert_called_with(
            instanceName=self.instance_name
        )
        self.assertIn('iam_user_arn', self.args)
        self.assertEquals(self.iam_user_arn, self.args.iam_user_arn)
        self.assertIn('user_name', self.args)
        self.assertEquals(self.instance_name, self.args.user_name)
        self.assertIn('tags', self.args)
        self.assertEquals(self.tags, self.args.tags)
        self.codedeploy.remove_tags_from_on_premises_instances.\
            assert_called_with(
                tags=self.tags,
                instanceNames=[self.instance_name]
            )
        self.codedeploy.deregister_on_premises_instance.\
            assert_called_with(
                instanceName=self.instance_name
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_deregister.py" startline="118" endline="141" pcid="6990">
            )

    def test_deregister_with_no_tags(self):
        self.codedeploy.get_on_premises_instance.return_value = {
            'instanceInfo': {
                'iamUserArn': self.iam_user_arn,
                'tags': None
            }
        }
        self.deregister._run_main(self.args, self.globals)
        self.codedeploy.get_on_premises_instance.assert_called_with(
            instanceName=self.instance_name
        )
        self.assertIn('iam_user_arn', self.args)
        self.assertEquals(self.iam_user_arn, self.args.iam_user_arn)
        self.assertIn('user_name', self.args)
        self.assertEquals(self.instance_name, self.args.user_name)
        self.assertIn('tags', self.args)
        self.assertEquals(None, self.args.tags)
        self.assertFalse(
            self.codedeploy.remove_tags_from_on_premises_instances.called
        )
        self.codedeploy.deregister_on_premises_instance.\
            assert_called_with(
</source>
</class>

<class classid="346" nclones="2" nlines="21" similarity="95">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_systems.py" startline="242" endline="267" pcid="7025">
    def test_install(self):
        process = MagicMock()
        process.communicate.return_value = ('', '')
        process.returncode = 0
        self.popen.return_value = process
        self.ubuntu.install(self.params)
        self.popen.assert_has_calls([
            call(
                ['service', 'codedeploy-agent', 'stop'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            ),
            call().communicate()
        ])
        self.check_call.assert_has_calls([
            call(['apt-get', '-y', 'update']),
            call(['apt-get', '-y', 'install', 'ruby2.0']),
            call(['chmod', '+x', './{0}'.format(self.installer)]),
            call(
                ['./{0}'.format(self.installer), 'auto'],
                env=self.environment
            )
        ])
        self.open.assert_called_with(self.installer, 'wb')
        self.open().write.assert_called_with(self.body)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_systems.py" startline="310" endline="334" pcid="7033">
    def test_install(self):
        process = MagicMock()
        process.communicate.return_value = ('', '')
        process.returncode = 0
        self.popen.return_value = process
        self.rhel.install(self.params)
        self.popen.assert_has_calls([
            call(
                ['service', 'codedeploy-agent', 'stop'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            ),
            call().communicate()
        ])
        self.check_call.assert_has_calls([
            call(['yum', '-y', 'install', 'ruby']),
            call(['chmod', '+x', './{0}'.format(self.installer)]),
            call(
                ['./{0}'.format(self.installer), 'auto'],
                env=self.environment
            )
        ])
        self.open.assert_called_with(self.installer, 'wb')
        self.open().write.assert_called_with(self.body)

</source>
</class>

<class classid="347" nclones="2" nlines="14" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_systems.py" startline="268" endline="285" pcid="7026">
    def test_uninstall(self):
        process = MagicMock()
        process.communicate.return_value = ('', '')
        process.returncode = 0
        self.popen.return_value = process
        self.ubuntu.uninstall(self.params)
        self.popen.assert_has_calls([
            call(
                ['service', 'codedeploy-agent', 'stop'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            ),
            call().communicate()
        ])
        self.check_call.assert_has_calls([
            call(['dpkg', '-r', 'codedeploy-agent'])
        ])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_systems.py" startline="335" endline="352" pcid="7034">
    def test_uninstall(self):
        process = MagicMock()
        process.communicate.return_value = ('', '')
        process.returncode = 0
        self.popen.return_value = process
        self.rhel.uninstall(self.params)
        self.popen.assert_has_calls([
            call(
                ['service', 'codedeploy-agent', 'stop'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            ),
            call().communicate()
        ])
        self.check_call.assert_has_calls([
            call(['yum', '-y', 'erase', 'codedeploy-agent'])
        ])

</source>
</class>

<class classid="348" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="22" endline="41" pcid="7055">
    def test_has_stack_success(self):
        stack_name = "stack_name"

        expected_params = {
            "StackName": stack_name
        }

        response = {
            "Stacks": [
                make_stack_obj(stack_name)
            ]
        }

        self.stub_client.add_response('describe_stacks', response,
                                      expected_params)

        with self.stub_client:
            response = self.deployer.has_stack(stack_name)
            self.assertTrue(response)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="66" endline="82" pcid="7057">
    def test_has_stack_review_in_progress(self):
        stack_name = "stack_name"
        expected_params = {
            "StackName": stack_name
        }

        # Response contains NO stack
        review_in_progress_response = {
            "Stacks": [make_stack_obj(stack_name, "REVIEW_IN_PROGRESS")]
        }
        self.stub_client.add_response('describe_stacks',
                                      review_in_progress_response,
                                      expected_params)
        with self.stub_client:
            response = self.deployer.has_stack(stack_name)
            self.assertFalse(response)

</source>
</class>

<class classid="349" nclones="2" nlines="58" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="90" endline="160" pcid="7059">
    def test_create_changeset_success(self):
        stack_name = "stack_name"
        template = "template"
        parameters = [
            {"ParameterKey": "Key1", "ParameterValue": "Value"},
            {"ParameterKey": "Key2", "UsePreviousValue": True},
            {"ParameterKey": "Key3", "UsePreviousValue": False},
        ]
        # Parameters that Use Previous Value will be removed on stack creation
        # to either force CloudFormation to use the Default value, or ask user to specify a parameter
        filtered_parameters = [
            {"ParameterKey": "Key1", "ParameterValue": "Value"},
            {"ParameterKey": "Key3", "UsePreviousValue": False},
        ]
        capabilities = ["capabilities"]
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]
        s3_uploader = None

        tags = [{"Key":"key1", "Value": "val1"}]

        # Case 1: Stack DOES NOT exist
        self.deployer.has_stack = Mock()
        self.deployer.has_stack.return_value = False

        expected_params = {
            "ChangeSetName": botocore.stub.ANY,
            "StackName": stack_name,
            "TemplateBody": template,
            "ChangeSetType": "CREATE",
            "Parameters": filtered_parameters,
            "Capabilities": capabilities,
            "Description": botocore.stub.ANY,
            "RoleARN": role_arn,
            "NotificationARNs": notification_arns,
            "Tags": tags
        }

        response = {
            "Id": "changeset ID"
        }

        self.stub_client.add_response("create_change_set", response,
                                      expected_params)
        with self.stub_client:
            result = self.deployer.create_changeset(
                    stack_name, template, parameters, capabilities, role_arn,
                    notification_arns, s3_uploader, tags)
            self.assertEquals(response["Id"], result.changeset_id)
            self.assertEquals("CREATE", result.changeset_type)

        # Case 2: Stack exists. We are updating it
        self.deployer.has_stack.return_value = True
        self.stub_client.add_response("get_template_summary",
            {"Parameters": [{"ParameterKey": parameter["ParameterKey"]}
                for parameter in parameters]},
            {"StackName": stack_name})
        expected_params["ChangeSetType"] = "UPDATE"
        expected_params["Parameters"] = parameters
        self.stub_client.add_response("create_change_set", response,
                                      expected_params)
        # template has new parameter but should not be included in
        # expected_params as no previous value
        parameters = list(parameters) + \
            [{"ParameterKey": "New", "UsePreviousValue": True}]
        with self.stub_client:
            result = self.deployer.create_changeset(
                    stack_name, template, parameters, capabilities, role_arn,
                    notification_arns, s3_uploader, tags)
            self.assertEquals(response["Id"], result.changeset_id)
            self.assertEquals("UPDATE", result.changeset_type)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="161" endline="237" pcid="7060">

    def test_create_changeset_success_s3_bucket(self):
        stack_name = "stack_name"
        template = "template"
        template_url = "https://s3.amazonaws.com/bucket/file"
        parameters = [
            {"ParameterKey": "Key1", "ParameterValue": "Value"},
            {"ParameterKey": "Key2", "UsePreviousValue": True},
            {"ParameterKey": "Key3", "UsePreviousValue": False},
        ]
        # Parameters that Use Previous Value will be removed on stack creation
        # to either force CloudFormation to use the Default value, or ask user to specify a parameter
        filtered_parameters = [
            {"ParameterKey": "Key1", "ParameterValue": "Value"},
            {"ParameterKey": "Key3", "UsePreviousValue": False},
        ]
        capabilities = ["capabilities"]
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]

        s3_uploader = Mock()
        def to_path_style_s3_url(some_string, Version=None):
            return "https://s3.amazonaws.com/bucket/file"
        s3_uploader.to_path_style_s3_url = to_path_style_s3_url
        def upload_with_dedup(filename,extension):
            return "s3://bucket/file"
        s3_uploader.upload_with_dedup = upload_with_dedup

        # Case 1: Stack DOES NOT exist
        self.deployer.has_stack = Mock()
        self.deployer.has_stack.return_value = False

        expected_params = {
            "ChangeSetName": botocore.stub.ANY,
            "StackName": stack_name,
            "TemplateURL": template_url,
            "ChangeSetType": "CREATE",
            "Parameters": filtered_parameters,
            "Capabilities": capabilities,
            "Description": botocore.stub.ANY,
            "RoleARN": role_arn,
            "Tags": [],
            "NotificationARNs": notification_arns
        }

        response = {
            "Id": "changeset ID"
        }

        self.stub_client.add_response("create_change_set", response,
                                      expected_params)
        with self.stub_client:
            result = self.deployer.create_changeset(
                stack_name, template, parameters, capabilities, role_arn,
                notification_arns, s3_uploader, [])
            self.assertEquals(response["Id"], result.changeset_id)
            self.assertEquals("CREATE", result.changeset_type)

        # Case 2: Stack exists. We are updating it
        self.deployer.has_stack.return_value = True
        self.stub_client.add_response("get_template_summary",
            {"Parameters": [{"ParameterKey": parameter["ParameterKey"]}
                for parameter in parameters]},
            {"StackName": stack_name})
        expected_params["ChangeSetType"] = "UPDATE"
        expected_params["Parameters"] = parameters
        # template has new parameter but should not be included in
        # expected_params as no previous value
        parameters = list(parameters) + \
            [{"ParameterKey": "New", "UsePreviousValue": True}]
        self.stub_client.add_response("create_change_set", response,
                                      expected_params)
        with self.stub_client:
            result = self.deployer.create_changeset(
                    stack_name, template, parameters, capabilities, role_arn,
                    notification_arns, s3_uploader, [])
            self.assertEquals(response["Id"], result.changeset_id)
</source>
</class>

<class classid="350" nclones="2" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="259" endline="272" pcid="7064">
                                               capabilities, role_arn, notification_arns, None, tags)

    def test_execute_changeset(self):
        stack_name = "stack_name"
        changeset_id = "changeset_id"

        expected_params = {
            "ChangeSetName": changeset_id,
            "StackName": stack_name,
            "DisableRollback": False
        }

        self.stub_client.add_response("execute_change_set", {}, expected_params)
        with self.stub_client:
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="273" endline="288" pcid="7065">
            self.deployer.execute_changeset(changeset_id, stack_name)

    def test_execute_changeset_disable_rollback(self):
        stack_name = "stack_name"
        changeset_id = "changeset_id"
        disable_rollback = True

        expected_params = {
            "ChangeSetName": changeset_id,
            "StackName": stack_name,
            "DisableRollback": disable_rollback
        }

        self.stub_client.add_response("execute_change_set", {}, expected_params)
        with self.stub_client:
            self.deployer.execute_changeset(changeset_id, stack_name,
</source>
</class>

<class classid="351" nclones="2" nlines="20" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="299" endline="322" pcid="7067">
                self.deployer.execute_changeset(changeset_id, stack_name)

    def test_create_and_wait_for_changeset_successful(self):
        stack_name = "stack_name"
        template = "template"
        parameters = [{"ParameterKey": "Key1", "ParameterValue": "Value",
                       "UsePreviousValue": True}]
        capabilities = ["capabilities"]
        changeset_id = "changeset id"
        changeset_type = "changeset type"
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]
        s3_uploader = None
        tags = [{"Key":"key1", "Value": "val1"}]

        self.deployer.create_changeset = Mock()
        self.deployer.create_changeset.return_value = ChangeSetResult(changeset_id, changeset_type)

        self.deployer.wait_for_changeset = Mock()

        result = self.deployer.create_and_wait_for_changeset(
                stack_name, template, parameters, capabilities, role_arn,
                notification_arns, s3_uploader, tags)
        self.assertEquals(result.changeset_id, changeset_id)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="323" endline="346" pcid="7068">
        self.assertEquals(result.changeset_type, changeset_type)

    def test_create_and_wait_for_changeset_error_waiting_for_changeset(self):
        stack_name = "stack_name"
        template = "template"
        parameters = [{"ParameterKey": "Key1", "ParameterValue": "Value",
                       "UsePreviousValue": True}]
        capabilities = ["capabilities"]
        changeset_id = "changeset id"
        changeset_type = "changeset type"
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]
        s3_uploader = None
        tags = [{"Key":"key1", "Value": "val1"}]

        self.deployer.create_changeset = Mock()
        self.deployer.create_changeset.return_value = ChangeSetResult(changeset_id, changeset_type)

        self.deployer.wait_for_changeset = Mock()
        self.deployer.wait_for_changeset.side_effect = RuntimeError

        with self.assertRaises(RuntimeError):
            result = self.deployer.create_and_wait_for_changeset(
                    stack_name, template, parameters, capabilities, role_arn,
</source>
</class>

<class classid="352" nclones="4" nlines="22" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="347" endline="376" pcid="7069">
                    notification_arns, s3_uploader, tags)

    def test_wait_for_changeset_no_changes(self):
        stack_name = "stack_name"
        changeset_id = "changeset-id"

        mock_client = Mock()
        mock_deployer = Deployer(mock_client)
        mock_waiter = Mock()
        mock_client.get_waiter.return_value = mock_waiter

        response = {
            "Status": "FAILED",
            "StatusReason": "The submitted information didn't contain changes."
        }

        waiter_error = botocore.exceptions.WaiterError(name="name",
                                                       reason="reason",
                                                       last_response=response)
        mock_waiter.wait.side_effect = waiter_error

        with self.assertRaises(exceptions.ChangeEmptyError):
            mock_deployer.wait_for_changeset(changeset_id, stack_name)

        waiter_config = {'Delay': 5}
        mock_waiter.wait.assert_called_once_with(ChangeSetName=changeset_id,
                                                 StackName=stack_name,
                                                 WaiterConfig=waiter_config)

        mock_client.get_waiter.assert_called_once_with(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="377" endline="406" pcid="7070">
                "change_set_create_complete")

    def test_wait_for_changeset_no_changes_with_another_error_msg(self):
        stack_name = "stack_name"
        changeset_id = "changeset-id"

        mock_client = Mock()
        mock_deployer = Deployer(mock_client)
        mock_waiter = Mock()
        mock_client.get_waiter.return_value = mock_waiter

        response = {
            "Status": "FAILED",
            "StatusReason": "No updates are to be performed"
        }

        waiter_error = botocore.exceptions.WaiterError(name="name",
                                                       reason="reason",
                                                       last_response=response)
        mock_waiter.wait.side_effect = waiter_error

        with self.assertRaises(exceptions.ChangeEmptyError):
            mock_deployer.wait_for_changeset(changeset_id, stack_name)

        waiter_config = {'Delay': 5}
        mock_waiter.wait.assert_called_once_with(ChangeSetName=changeset_id,
                                                 StackName=stack_name,
                                                 WaiterConfig=waiter_config)

        mock_client.get_waiter.assert_called_once_with(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="437" endline="464" pcid="7072">
                "change_set_create_complete")

    def test_wait_for_execute_no_changes(self):
        stack_name = "stack_name"
        changeset_type = "CREATE"

        mock_client = Mock()
        mock_deployer = Deployer(mock_client)
        mock_waiter = Mock()
        mock_client.get_waiter.return_value = mock_waiter

        waiter_error = botocore.exceptions.WaiterError(name="name",
                                                       reason="reason",
                                                       last_response={})
        mock_waiter.wait.side_effect = waiter_error

        with self.assertRaises(exceptions.DeployFailedError):
            mock_deployer.wait_for_execute(stack_name, changeset_type)

        waiter_config = {
            'Delay': 30,
            'MaxAttempts': 120,
        }
        mock_waiter.wait.assert_called_once_with(StackName=stack_name,
                                                 WaiterConfig=waiter_config)

        mock_client.get_waiter.assert_called_once_with(
                "stack_create_complete")
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deployer.py" startline="407" endline="436" pcid="7071">
                "change_set_create_complete")

    def test_wait_for_changeset_failed_to_create_changeset(self):
        stack_name = "stack_name"
        changeset_id = "changeset-id"

        mock_client = Mock()
        mock_deployer = Deployer(mock_client)
        mock_waiter = Mock()
        mock_client.get_waiter.return_value = mock_waiter

        response = {
            "Status": "FAILED",
            "StatusReason": "some reason"
        }

        waiter_error = botocore.exceptions.WaiterError(name="name",
                                                       reason="reason",
                                                       last_response=response)
        mock_waiter.wait.side_effect = waiter_error

        with self.assertRaises(RuntimeError):
            mock_deployer.wait_for_changeset(changeset_id, stack_name)

        waiter_config = {'Delay': 5}
        mock_waiter.wait.assert_called_once_with(ChangeSetName=changeset_id,
                                                 StackName=stack_name,
                                                 WaiterConfig=waiter_config)

        mock_client.get_waiter.assert_called_once_with(
</source>
</class>

<class classid="353" nclones="3" nlines="18" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="273" endline="301" pcid="7082">

        for url in invalid:
            with self.assertRaises(ValueError):
                parse_s3_url(url)

    def test_is_local_file(self):
        with tempfile.NamedTemporaryFile() as handle:
            self.assertTrue(is_local_file(handle.name))
            self.assertFalse(is_local_folder(handle.name))

    def test_is_local_folder(self):
        with self.make_temp_dir() as filename:
            self.assertTrue(is_local_folder(filename))
            self.assertFalse(is_local_file(filename))

    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    def test_upload_local_artifacts_local_file(self, zip_and_upload_mock):
        # Case 1: Artifact path is a relative path
        # Verifies that we package local artifacts appropriately
        property_name = "property"
        resource_id = "resource_id"
        expected_s3_url = "s3://foo/bar?versionId=baz"

        self.s3_uploader_mock.upload_with_dedup.return_value = expected_s3_url

        with tempfile.NamedTemporaryFile() as handle:
            # Artifact is a file in the temporary directory
            artifact_path = handle.name
            parent_dir = tempfile.gettempdir()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="328" endline="352" pcid="7084">
        with tempfile.NamedTemporaryFile() as handle:
            parent_dir = tempfile.gettempdir()
            artifact_path = make_abs_path(parent_dir, handle.name)

            resource_dict = {property_name: artifact_path}
            result = upload_local_artifacts(resource_id,
                                            resource_dict,
                                            property_name,
                                            parent_dir,
                                            self.s3_uploader_mock)
            self.assertEquals(result, expected_s3_url)

            self.s3_uploader_mock.upload_with_dedup.assert_called_with(artifact_path)
            zip_and_upload_mock.assert_not_called()

    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    def test_upload_local_artifacts_local_folder(self, zip_and_upload_mock):
        property_name = "property"
        resource_id = "resource_id"
        expected_s3_url = "s3://foo/bar?versionId=baz"

        zip_and_upload_mock.return_value = expected_s3_url

        #  Artifact path is a Directory
        with self.make_temp_dir() as artifact_path:
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="303" endline="326" pcid="7083">
            resource_dict = {property_name: artifact_path}
            result = upload_local_artifacts(resource_id,
                                            resource_dict,
                                            property_name,
                                            parent_dir,
                                            self.s3_uploader_mock)
            self.assertEquals(result, expected_s3_url)

            # Internally the method would convert relative paths to absolute
            # path, with respect to the parent directory
            absolute_artifact_path = make_abs_path(parent_dir, artifact_path)
            self.s3_uploader_mock.upload_with_dedup.assert_called_with(absolute_artifact_path)

            zip_and_upload_mock.assert_not_called()

    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    def test_upload_local_artifacts_local_file_abs_path(self, zip_and_upload_mock):
        # Case 2: Artifact path is an absolute path
        # Verifies that we package local artifacts appropriately
        property_name = "property"
        resource_id = "resource_id"
        expected_s3_url = "s3://foo/bar?versionId=baz"

        self.s3_uploader_mock.upload_with_dedup.return_value = expected_s3_url
</source>
</class>

<class classid="354" nclones="2" nlines="15" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="354" endline="374" pcid="7085">
            parent_dir = tempfile.gettempdir()
            resource_dict = {property_name: artifact_path}

            result = upload_local_artifacts(resource_id,
                                            resource_dict,
                                            property_name,
                                            parent_dir,
                                            Mock())
            self.assertEquals(result, expected_s3_url)

            absolute_artifact_path = make_abs_path(parent_dir, artifact_path)

            zip_and_upload_mock.assert_called_once_with(absolute_artifact_path,
                                                        mock.ANY)

    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    def test_upload_local_artifacts_no_path(self, zip_and_upload_mock):
        property_name = "property"
        resource_id = "resource_id"
        expected_s3_url = "s3://foo/bar?versionId=baz"

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="376" endline="395" pcid="7086">

        # If you don't specify a path, we will default to Current Working Dir
        resource_dict = {}
        parent_dir = tempfile.gettempdir()

        result = upload_local_artifacts(resource_id,
                                        resource_dict,
                                        property_name,
                                        parent_dir,
                                        self.s3_uploader_mock)
        self.assertEquals(result, expected_s3_url)

        zip_and_upload_mock.assert_called_once_with(parent_dir, mock.ANY)
        self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    def test_upload_local_artifacts_s3_url(self,
                                           zip_and_upload_mock):
        property_name = "property"
        resource_id = "resource_id"
</source>
</class>

<class classid="355" nclones="2" nlines="18" similarity="94">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="435" endline="460" pcid="7089">

        zip_and_upload_mock.assert_not_called()
        self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    @patch("awscli.customizations.cloudformation.artifact_exporter.make_zip")
    def test_zip_folder(self, make_zip_mock):
        zip_file_name = "name.zip"
        make_zip_mock.return_value = zip_file_name

        with self.make_temp_dir() as dirname:
            with zip_folder(dirname) as actual_zip_file_name:
                self.assertEqual(actual_zip_file_name, zip_file_name)

        make_zip_mock.assert_called_once_with(mock.ANY, dirname)

    @patch("awscli.customizations.cloudformation.artifact_exporter.upload_local_artifacts")
    def test_resource(self, upload_local_artifacts_mock):
        # Property value is a path to file

        class MockResource(Resource):
            PROPERTY_NAME = "foo"

        resource = MockResource(self.s3_uploader_mock)

        resource_id = "id"
        resource_dict = {}
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="569" endline="591" pcid="7093">
        resource_dict[resource.PROPERTY_NAME] = original_path
        parent_dir = "dir"
        s3_url = "s3://foo/bar"

        # This is not a zip file, but a valid local file. Since FORCE_ZIP is NOT set, this will not be zipped
        is_zipfile_mock.return_value = False
        is_local_file_mock.return_value = True
        zip_and_upload_mock.return_value = s3_url
        self.s3_uploader_mock.upload_with_dedup.return_value = s3_url

        resource.export(resource_id, resource_dict, parent_dir)

        copy_to_temp_dir_mock.assert_not_called()
        zip_and_upload_mock.assert_not_called()
        rmtree_mock.assert_not_called()
        is_zipfile_mock.assert_called_once_with(original_path)
        assert resource_dict[resource.PROPERTY_NAME] == s3_url

    @patch("awscli.customizations.cloudformation.artifact_exporter.upload_local_artifacts")
    def test_resource_empty_property_value(self, upload_local_artifacts_mock):
        # Property value is empty

        class MockResource(Resource):
</source>
</class>

<class classid="356" nclones="3" nlines="21" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="466" endline="498" pcid="7090">

        resource.export(resource_id, resource_dict, parent_dir)

        upload_local_artifacts_mock.assert_called_once_with(resource_id,
                                                            resource_dict,
                                                            resource.PROPERTY_NAME,
                                                            parent_dir,
                                                            self.s3_uploader_mock)

        self.assertEquals(resource_dict[resource.PROPERTY_NAME], s3_url)

    @patch("shutil.rmtree")
    @patch("zipfile.is_zipfile")
    @patch("awscli.customizations.cloudformation.artifact_exporter.copy_to_temp_dir")
    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    @patch("awscli.customizations.cloudformation.artifact_exporter.is_local_file")
    def test_resource_with_force_zip_on_regular_file(self, is_local_file_mock, \
        zip_and_upload_mock, copy_to_temp_dir_mock, is_zipfile_mock, rmtree_mock):
        # Property value is a path to file and FORCE_ZIP is True

        class MockResource(Resource):
            PROPERTY_NAME = "foo"
            FORCE_ZIP = True

        resource = MockResource(self.s3_uploader_mock)

        resource_id = "id"
        resource_dict = {}
        original_path = "/path/to/file"
        resource_dict[resource.PROPERTY_NAME] = original_path
        parent_dir = "dir"
        s3_url = "s3://foo/bar"

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="504" endline="534" pcid="7091">
            copy_to_temp_dir_mock.return_value = tmp_dir

            # This is not a zip file
            is_zipfile_mock.return_value = False

            resource.export(resource_id, resource_dict, parent_dir)

            zip_and_upload_mock.assert_called_once_with(tmp_dir, mock.ANY)
            rmtree_mock.assert_called_once_with(tmp_dir)
            is_zipfile_mock.assert_called_once_with(original_path)
            assert resource_dict[resource.PROPERTY_NAME] == s3_url

    @patch("shutil.rmtree")
    @patch("zipfile.is_zipfile")
    @patch("awscli.customizations.cloudformation.artifact_exporter.copy_to_temp_dir")
    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    @patch("awscli.customizations.cloudformation.artifact_exporter.is_local_file")
    def test_resource_with_force_zip_on_zip_file(self, is_local_file_mock, \
        zip_and_upload_mock, copy_to_temp_dir_mock, is_zipfile_mock, rmtree_mock):
        # Property value is a path to zip file and FORCE_ZIP is True
        # We should *not* re-zip an existing zip

        class MockResource(Resource):
            PROPERTY_NAME = "foo"
            FORCE_ZIP = True

        resource = MockResource(self.s3_uploader_mock)

        resource_id = "id"
        resource_dict = {}
        original_path = "/path/to/zip_file"
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="540" endline="567" pcid="7092">
        is_zipfile_mock.return_value = True
        is_local_file_mock.return_value = True
        zip_and_upload_mock.return_value = s3_url
        self.s3_uploader_mock.upload_with_dedup.return_value = s3_url

        resource.export(resource_id, resource_dict, parent_dir)

        copy_to_temp_dir_mock.assert_not_called()
        zip_and_upload_mock.assert_not_called()
        rmtree_mock.assert_not_called()
        is_zipfile_mock.assert_called_once_with(original_path)
        assert resource_dict[resource.PROPERTY_NAME] == s3_url

    @patch("shutil.rmtree")
    @patch("zipfile.is_zipfile")
    @patch("awscli.customizations.cloudformation.artifact_exporter.copy_to_temp_dir")
    @patch("awscli.customizations.cloudformation.artifact_exporter.zip_and_upload")
    @patch("awscli.customizations.cloudformation.artifact_exporter.is_local_file")
    def test_resource_without_force_zip(self, is_local_file_mock, \
        zip_and_upload_mock, copy_to_temp_dir_mock, is_zipfile_mock, rmtree_mock):

        class MockResourceNoForceZip(Resource):
            PROPERTY_NAME = "foo"

        resource = MockResourceNoForceZip(self.s3_uploader_mock)

        resource_id = "id"
        resource_dict = {}
</source>
</class>

<class classid="357" nclones="3" nlines="14" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="593" endline="612" pcid="7094">
        resource = MockResource(self.s3_uploader_mock)

        resource_id = "id"
        resource_dict = {}
        resource_dict[resource.PROPERTY_NAME] = "/path/to/file"
        parent_dir = "dir"
        s3_url = "s3://foo/bar"

        upload_local_artifacts_mock.return_value = s3_url
        resource_dict = {}
        resource.export(resource_id, resource_dict, parent_dir)
        upload_local_artifacts_mock.assert_called_once_with(resource_id,
                                                            resource_dict,
                                                            resource.PROPERTY_NAME,
                                                            parent_dir,
                                                            self.s3_uploader_mock)
        self.assertEquals(resource_dict[resource.PROPERTY_NAME], s3_url)

    @patch("awscli.customizations.cloudformation.artifact_exporter.upload_local_artifacts")
    def test_resource_property_value_dict(self, upload_local_artifacts_mock):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="614" endline="633" pcid="7095">

        class MockResource(Resource):
            PROPERTY_NAME = "foo"

        resource = MockResource(self.s3_uploader_mock)
        resource_id = "id"
        resource_dict = {}
        resource_dict[resource.PROPERTY_NAME] = "/path/to/file"
        parent_dir = "dir"
        s3_url = "s3://foo/bar"

        upload_local_artifacts_mock.return_value = s3_url
        resource_dict = {}
        resource_dict[resource.PROPERTY_NAME] = {"a": "b"}
        resource.export(resource_id, resource_dict, parent_dir)
        upload_local_artifacts_mock.assert_not_called()
        self.assertEquals(resource_dict, {"foo": {"a": "b"}})

    @patch("awscli.customizations.cloudformation.artifact_exporter.upload_local_artifacts")
    def test_resource_has_package_null_property_to_false(self, upload_local_artifacts_mock):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="635" endline="652" pcid="7096">

        class MockResource(Resource):
            PROPERTY_NAME = "foo"
            PACKAGE_NULL_PROPERTY = False

        resource = MockResource(self.s3_uploader_mock)
        resource_id = "id"
        resource_dict = {}
        parent_dir = "dir"
        s3_url = "s3://foo/bar"

        upload_local_artifacts_mock.return_value = s3_url

        resource.export(resource_id, resource_dict, parent_dir)

        upload_local_artifacts_mock.assert_not_called()
        self.assertNotIn(resource.PROPERTY_NAME, resource_dict)

</source>
</class>

<class classid="358" nclones="2" nlines="22" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="694" endline="723" pcid="7098">
        s3_url = "s3://bucket/key1/key2?versionId=SomeVersionNumber"

        upload_local_artifacts_mock.return_value = s3_url

        resource.export(resource_id, resource_dict, parent_dir)

        upload_local_artifacts_mock.assert_called_once_with(resource_id,
                                                            resource_dict,
                                                            resource.PROPERTY_NAME,
                                                            parent_dir,
                                                            self.s3_uploader_mock)

        self.assertEquals(resource_dict[resource.PROPERTY_NAME], {
            "b": "bucket",
            "o": "key1/key2",
            "v": "SomeVersionNumber"
        })

    @patch("awscli.customizations.cloudformation.artifact_exporter.Template")
    def test_export_cloudformation_stack(self, TemplateMock):
        stack_resource = CloudFormationStackResource(self.s3_uploader_mock)

        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME
        exported_template_dict = {"foo": "bar"}
        result_s3_url = "s3://hello/world"
        result_path_style_s3_url = "http://s3.amazonws.com/hello/world"

        template_instance_mock = Mock()
        TemplateMock.return_value = template_instance_mock
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="782" endline="811" pcid="7107">
        resource_dict = {}
        stack_resource.export(resource_id, resource_dict, "dir")
        self.assertEquals(resource_dict, {})
        self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    def test_export_cloudformation_stack_no_upload_path_not_file(self):
        stack_resource = CloudFormationStackResource(self.s3_uploader_mock)
        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME
        s3_url = "s3://hello/world"

        # Case 3: Path is not a file
        with self.make_temp_dir() as dirname:
            resource_dict = {property_name: dirname}
            with self.assertRaises(exceptions.ExportFailedError):
                stack_resource.export(resource_id, resource_dict, "dir")
                self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    @patch("awscli.customizations.cloudformation.artifact_exporter.Template")
    def test_export_serverless_application(self, TemplateMock):
        stack_resource = ServerlessApplicationResource(self.s3_uploader_mock)

        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME
        exported_template_dict = {"foo": "bar"}
        result_s3_url = "s3://hello/world"
        result_path_style_s3_url = "http://s3.amazonws.com/hello/world"

        template_instance_mock = Mock()
        TemplateMock.return_value = template_instance_mock
</source>
</class>

<class classid="359" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="755" endline="767" pcid="7105">
        s3_url = "s3://hello/world"
        self._assert_stack_template_url_is_not_changed(s3_url)

    def test_export_cloudformation_stack_no_upload_path_is_httpsurl(self):
        s3_url = "https://s3.amazonaws.com/hello/world"
        self._assert_stack_template_url_is_not_changed(s3_url)

    def test_export_cloudformation_stack_no_upload_path_is_s3_region_httpsurl(self):
        s3_url = "https://s3.some-valid-region.amazonaws.com/hello/world"
        self._assert_stack_template_url_is_not_changed(s3_url)

    def test_export_cloudformation_stack_no_upload_path_is_virtual(self):
        s3_url = "https://bucket.s3.amazonaws.com/key"
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="768" endline="780" pcid="7106">
        self._assert_stack_template_url_is_not_changed(s3_url)

    def test_export_cloudformation_stack_no_upload_path_is_virtual_region(self):
        s3_url = "https://bucket.s3.some-region.amazonaws.com/key"
        self._assert_stack_template_url_is_not_changed(s3_url)

    def test_export_cloudformation_stack_no_upload_path_is_empty(self):
        stack_resource = CloudFormationStackResource(self.s3_uploader_mock)
        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME
        s3_url = "s3://hello/world"
        resource_dict = {property_name: s3_url}

</source>
</class>

<class classid="360" nclones="2" nlines="45" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="872" endline="931" pcid="7113">
        with self.make_temp_dir() as dirname:
            resource_dict = {property_name: dirname}
            with self.assertRaises(exceptions.ExportFailedError):
                stack_resource.export(resource_id, resource_dict, "dir")
                self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    def test_export_serverless_application_no_upload_path_is_dictionary(self):
        stack_resource = ServerlessApplicationResource(self.s3_uploader_mock)
        resource_id = "id"
        property_name = stack_resource.PROPERTY_NAME

        # Case 4: Path is dictionary
        location = {"ApplicationId": "id", "SemanticVersion": "1.0.1"}
        resource_dict = {property_name: location}
        stack_resource.export(resource_id, resource_dict, "dir")
        self.assertEquals(resource_dict[property_name], location)
        self.s3_uploader_mock.upload_with_dedup.assert_not_called()

    @patch("awscli.customizations.cloudformation.artifact_exporter.yaml_parse")
    def test_template_export_metadata(self, yaml_parse_mock):
        parent_dir = os.path.sep
        template_dir = os.path.join(parent_dir, 'foo', 'bar')
        template_path = os.path.join(template_dir, 'path')
        template_str = self.example_yaml_template()

        metadata_type1_class = Mock()
        metadata_type1_class.RESOURCE_TYPE = "metadata_type1"
        metadata_type1_class.PROPERTY_NAME = "property_1"
        metadata_type1_instance = Mock()
        metadata_type1_class.return_value = metadata_type1_instance

        metadata_type2_class = Mock()
        metadata_type2_class.RESOURCE_TYPE = "metadata_type2"
        metadata_type2_class.PROPERTY_NAME = "property_2"
        metadata_type2_instance = Mock()
        metadata_type2_class.return_value = metadata_type2_instance

        metadata_to_export = [
            metadata_type1_class,
            metadata_type2_class
        ]

        template_dict = {
            "Metadata": {
                "metadata_type1": {
                    "property_1": "abc"
                },
                "metadata_type2": {
                    "property_2": "def"
                }
            }
        }
        open_mock = mock.mock_open()
        yaml_parse_mock.return_value = template_dict

        # Patch the file open method to return template string
        with patch(
                "awscli.customizations.cloudformation."
                "artifact_exporter.compat_open",
                open_mock(read_data=template_str)) as open_mock:
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_artifact_exporter.py" startline="933" endline="997" pcid="7114">
            template_exporter = Template(
                template_path, parent_dir, self.s3_uploader_mock,
                metadata_to_export=metadata_to_export)
            exported_template = template_exporter.export()
            self.assertEquals(exported_template, template_dict)

            open_mock.assert_called_once_with(
                    make_abs_path(parent_dir, template_path), "r")

            self.assertEquals(1, yaml_parse_mock.call_count)

            metadata_type1_class.assert_called_once_with(self.s3_uploader_mock)
            metadata_type1_instance.export.assert_called_once_with(
                "metadata_type1", mock.ANY, template_dir)
            metadata_type2_class.assert_called_once_with(self.s3_uploader_mock)
            metadata_type2_instance.export.assert_called_once_with(
                "metadata_type2", mock.ANY, template_dir)

    @patch("awscli.customizations.cloudformation.artifact_exporter.yaml_parse")
    def test_template_export(self, yaml_parse_mock):
        parent_dir = os.path.sep
        template_dir = os.path.join(parent_dir, 'foo', 'bar')
        template_path = os.path.join(template_dir, 'path')
        template_str = self.example_yaml_template()

        resource_type1_class = Mock()
        resource_type1_class.RESOURCE_TYPE = "resource_type1"
        resource_type1_instance = Mock()
        resource_type1_class.return_value = resource_type1_instance
        resource_type2_class = Mock()
        resource_type2_class.RESOURCE_TYPE = "resource_type2"
        resource_type2_instance = Mock()
        resource_type2_class.return_value = resource_type2_instance

        resources_to_export = [
            resource_type1_class,
            resource_type2_class
        ]

        properties = {"foo": "bar"}
        template_dict = {
            "Resources": {
                "Resource1": {
                    "Type": "resource_type1",
                    "Properties": properties
                },
                "Resource2": {
                    "Type": "resource_type2",
                    "Properties": properties
                },
                "Resource3": {
                    "Type": "some-other-type",
                    "Properties": properties
                }
            }
        }

        open_mock = mock.mock_open()
        yaml_parse_mock.return_value = template_dict

        # Patch the file open method to return template string
        with patch(
                "awscli.customizations.cloudformation."
                "artifact_exporter.compat_open",
                open_mock(read_data=template_str)) as open_mock:
</source>
</class>

<class classid="361" nclones="2" nlines="34" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="246" endline="292" pcid="7137">
    def test_deploy_success(self):
        """
        Tests that we call the deploy command
        """

        stack_name = "stack_name"
        changeset_id = "some changeset"
        parameters = ["a", "b"]
        template = "cloudformation template"
        capabilities = ["foo", "bar"]
        execute_changeset = True
        changeset_type = "CREATE"
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]
        s3_uploader = None
        tags = [{"Key":"key1", "Value": "val1"}]

        # Set the mock to return this fake changeset_id
        self.deployer.create_and_wait_for_changeset.return_value = ChangeSetResult(changeset_id, changeset_type)

        rc = self.deploy_command.deploy(self.deployer,
                                   stack_name,
                                   template,
                                   parameters,
                                   capabilities,
                                   execute_changeset,
                                   role_arn,
                                   notification_arns,
                                   s3_uploader,
                                   tags)
        self.assertEqual(rc, 0)


        self.deployer.create_and_wait_for_changeset.assert_called_once_with(stack_name=stack_name,
                                                     cfn_template=template,
                                                     parameter_values=parameters,
                                                     capabilities=capabilities,
                                                     role_arn=role_arn,
                                                     notification_arns=notification_arns,
                                                     s3_uploader=s3_uploader,
                                                     tags=tags)

        # since execute_changeset is set to True, deploy() will execute changeset
        self.deployer.execute_changeset.assert_called_once_with(changeset_id, stack_name, False)
        self.deployer.wait_for_execute.assert_called_once_with(stack_name, changeset_type)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="293" endline="331" pcid="7138">
    def test_deploy_no_execute(self):
        stack_name = "stack_name"
        changeset_id = "some changeset"
        parameters = ["a", "b"]
        template = "cloudformation template"
        capabilities = ["foo", "bar"]
        execute_changeset = False
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]
        s3_uploader = None
        tags = [{"Key":"key1", "Value": "val1"}]


        self.deployer.create_and_wait_for_changeset.return_value = ChangeSetResult(changeset_id, "CREATE")
        rc = self.deploy_command.deploy(self.deployer,
                                            stack_name,
                                            template,
                                            parameters,
                                            capabilities,
                                            execute_changeset,
                                            role_arn,
                                            notification_arns,
                                            s3_uploader,
                                            tags)
        self.assertEqual(rc, 0)

        self.deployer.create_and_wait_for_changeset.assert_called_once_with(stack_name=stack_name,
                                                     cfn_template=template,
                                                     parameter_values=parameters,
                                                     capabilities=capabilities,
                                                     role_arn=role_arn,
                                                     notification_arns=notification_arns,
                                                     s3_uploader=s3_uploader,
                                                     tags=tags)

        # since execute_changeset is set to True, deploy() will execute changeset
        self.deployer.execute_changeset.assert_not_called()
        self.deployer.wait_for_execute.assert_not_called()

</source>
</class>

<class classid="362" nclones="3" nlines="16" similarity="82">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="357" endline="375" pcid="7140">
    def test_deploy_raises_exception_on_empty_changeset(self):
        stack_name = "stack_name"
        parameters = ["a", "b"]
        template = "cloudformation template"
        capabilities = ["foo", "bar"]
        execute_changeset = True
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]
        tags = []

        empty_changeset = exceptions.ChangeEmptyError(stack_name=stack_name)
        changeset_func = self.deployer.create_and_wait_for_changeset
        changeset_func.side_effect = empty_changeset
        with self.assertRaises(exceptions.ChangeEmptyError):
            self.deploy_command.deploy(
                self.deployer, stack_name, template, parameters, capabilities,
                execute_changeset, role_arn, notification_arns,
                None, tags, fail_on_empty_changeset=True)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="395" endline="412" pcid="7142">
    def test_deploy_empty_changeset_does_not_raise_exception_by_default(self):
        stack_name = "stack_name"
        parameters = ["a", "b"]
        template = "cloudformation template"
        capabilities = ["foo", "bar"]
        execute_changeset = True
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]

        empty_changeset = exceptions.ChangeEmptyError(stack_name=stack_name)
        changeset_func = self.deployer.create_and_wait_for_changeset
        changeset_func.side_effect = empty_changeset
        self.deploy_command.deploy(
            self.deployer, stack_name, template, parameters, capabilities,
            execute_changeset, role_arn, notification_arns,
            s3_uploader=None, tags=[]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="376" endline="394" pcid="7141">
    def test_deploy_does_not_raise_exception_on_empty_changeset(self):
        stack_name = "stack_name"
        parameters = ["a", "b"]
        template = "cloudformation template"
        capabilities = ["foo", "bar"]
        execute_changeset = True
        role_arn = "arn:aws:iam::1234567890:role"
        notification_arns = ["arn:aws:sns:region:1234567890:notify"]

        empty_changeset = exceptions.ChangeEmptyError(stack_name=stack_name)
        changeset_func = self.deployer.create_and_wait_for_changeset
        changeset_func.side_effect = empty_changeset
        self.deploy_command.deploy(
            self.deployer, stack_name, template, parameters, capabilities,
            execute_changeset, role_arn, notification_arns,
            s3_uploader=None, tags=[],
            fail_on_empty_changeset=False
        )

</source>
</class>

<class classid="363" nclones="3" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="483" endline="499" pcid="7147">
    def test_parse_parameter_override_with_deploy_data_format_from_file(self):
        """
        Tests that we can parse parameter arguments from file in
        deploy command parameters file format
        :return:
        """
        data = json.dumps([
            'Key1=Value1',
            'Key2=[1,2,3]',
            'Key3={"a":"val", "b": 2}'
        ])
        output = {"Key1": "Value1",
                  "Key2": '[1,2,3]',
                  "Key3": '{"a":"val", "b": 2}'}
        result = self.deploy_command.parse_parameter_overrides(data)
        self.assertEqual(result, output)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="512" endline="528" pcid="7149">
    def test_parse_parameter_override_with_deploy_data_format(self):
        """
        Tests that we can parse parameter arguments in
        deploy command parameters command line format
        :return:
        """
        data = [
            'Key1=Value1',
            'Key2=[1,2,3]',
            'Key3={"a":"val", "b": 2}'
        ]
        output = {"Key1": "Value1",
                  "Key2": '[1,2,3]',
                  "Key3": '{"a":"val", "b": 2}'}
        result = self.deploy_command.parse_parameter_overrides(data)
        self.assertEqual(result, output)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudformation/test_deploy.py" startline="500" endline="511" pcid="7148">
    def test_parse_parameter_override_with_inline_json(self):
        data = [json.dumps([
            'Key1=Value1',
            'Key2=[1,2,3]',
            'Key3={"a":"val", "b": 2}'
        ])]
        output = {"Key1": "Value1",
                  "Key2": '[1,2,3]',
                  "Key3": '{"a":"val", "b": 2}'}
        result = self.deploy_command.parse_parameter_overrides(data)
        self.assertEqual(result, output)

</source>
</class>

<class classid="364" nclones="2" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_sso.py" startline="118" endline="128" pcid="7177">
    def test_allowed_text(self):
        valid_start_urls = [
            'https://d-abc123.awsapps.com/start',
            'https://d-abc123.awsapps.com/start#',
            'https://d-abc123.awsapps.com/start/',
            'https://d-abc123.awsapps.com/start-beta',
            'https://start.url',
        ]
        for text in valid_start_urls:
            self._validate_text(text)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_listprofiles.py" startline="31" endline="40" pcid="7265">
    def test_lists_profile_multiple(self):
        profiles = [
            'default',
            'profile-foo',
            'profile-baz',
            'some profile',
        ]
        stdout, list_profiles = self._create_command(profiles=profiles)
        list_profiles(args=[], parsed_globals=None)
        self.assertEqual('\n'.join(profiles) + '\n', stdout.getvalue())
</source>
</class>

<class classid="365" nclones="3" nlines="15" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_list.py" startline="40" endline="56" pcid="7203">
    def test_configure_from_env(self):
        env_vars = {
            'profile': 'myprofilename'
        }
        session = FakeSession(
            all_variables={'config_file': '/config/location'},
            environment_vars=env_vars)
        session.session_var_map = {'profile': (None, "PROFILE_ENV_VAR")}
        session.full_config = {
            'profiles': {'default': {'region': 'AWS_REGION'}}}
        stream = six.StringIO()
        self.configure_list = ConfigureListCommand(session, stream)
        self.configure_list(args=[], parsed_globals=None)
        rendered = stream.getvalue()
        self.assertRegex(
            rendered, r'profile\s+myprofilename\s+env\s+PROFILE_ENV_VAR')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_list.py" startline="125" endline="141" pcid="7207">
    def test_configure_from_args(self):
        parsed_globals = Namespace(profile='foo')
        env_vars = {
            'profile': 'myprofilename'
        }
        session = FakeSession(
            all_variables={'config_file': '/config/location'},
            profile='foo', environment_vars=env_vars)
        session.session_var_map = {'profile': (None, ['AWS_PROFILE'])}
        session.full_config = {
            'profiles': {'foo': {'region': 'AWS_REGION'}}}
        stream = six.StringIO()
        self.configure_list = ConfigureListCommand(session, stream)
        self.configure_list(args=[], parsed_globals=parsed_globals)
        rendered = stream.getvalue()
        self.assertRegex(
            rendered, r'profile\s+foo\s+manual\s+--profile')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_list.py" startline="57" endline="73" pcid="7204">
    def test_configure_from_config_file(self):
        config_file_vars = {
            'region': 'us-west-2'
        }
        session = FakeSession(
            all_variables={'config_file': '/config/location'},
            config_file_vars=config_file_vars)
        session.session_var_map = {'region': ('region', "AWS_REGION")}
        session.full_config = {
            'profiles': {'default': {'region': 'AWS_REGION'}}}
        stream = six.StringIO()
        self.configure_list = ConfigureListCommand(session, stream)
        self.configure_list(args=[], parsed_globals=None)
        rendered = stream.getvalue()
        self.assertRegex(
            rendered, r'region\s+us-west-2\s+config-file\s+/config/location')

</source>
</class>

<class classid="366" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_addmodel.py" startline="127" endline="137" pcid="7215">
    def test_get_model_location_with_non_v2(self):
        service_definition = self._create_service_definition(
            'existent', self.default_api_version)
        service_definition['version'] = '3.0'
        model_location = get_model_location(self.session, service_definition)
        self.assertEqual(
            os.path.join(
                self.data_loader.CUSTOMER_DATA_PATH,
                'existent', self.default_api_version,
                'service-3.json'), model_location)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_addmodel.py" startline="138" endline="147" pcid="7216">
    def test_get_model_location_with_missing_version(self):
        service_definition = self._create_service_definition(
            'existent', self.default_api_version)
        service_definition.pop('version')
        model_location = get_model_location(self.session, service_definition)
        self.assertEqual(
            os.path.join(
                self.data_loader.CUSTOMER_DATA_PATH,
                'existent', self.default_api_version,
                'service-2.json'), model_location)
</source>
</class>

<class classid="367" nclones="2" nlines="10" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_importer.py" startline="208" endline="218" pcid="7290">
    def test_import_profile(self):
        file = 'credentials_file'
        credential = ('USERNAME', 'AKID', 'SAK')
        self.importer.import_credential(credential, file)
        profile = {
            '__section__': 'USERNAME',
            'aws_access_key_id': 'AKID',
            'aws_secret_access_key': 'SAK',
        }
        self.mock_writer.update_config.assert_called_with(profile, file)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/test_importer.py" startline="219" endline="228" pcid="7291">
    def test_import_profile_with_prefix(self):
        file = 'credentials_file'
        credential = ('USERNAME', 'AKID', 'SAK')
        self.importer.import_credential(credential, file, profile_prefix='a-')
        profile = {
            '__section__': 'a-USERNAME',
            'aws_access_key_id': 'AKID',
            'aws_secret_access_key': 'SAK',
        }
        self.mock_writer.update_config.assert_called_with(profile, file)
</source>
</class>

<class classid="368" nclones="2" nlines="18" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configure/__init__.py" startline="23" endline="41" pcid="7334">
    def __init__(self, all_variables, profile_does_not_exist=False,
                 config_file_vars=None, environment_vars=None,
                 credentials=None, profile=None, available_profiles=None):
        self.variables = all_variables
        self.profile_does_not_exist = profile_does_not_exist
        self.config = {}
        if config_file_vars is None:
            config_file_vars = {}
        self.config_file_vars = config_file_vars
        if environment_vars is None:
            environment_vars = {}
        if available_profiles is None:
            available_profiles = ['default']
        self._available_profiles = available_profiles
        self.environment_vars = environment_vars
        self._credentials = credentials
        self.profile = profile
        self.user_agent_extra = ''

</source>
<source file="systems/aws-cli-2.4.27/awscli/autocomplete/parser.py" startline="17" endline="85" pcid="11839">
    def __init__(self, current_command=None, current_param=None,
                 global_params=None, parsed_params=None,
                 lineage=None, current_fragment=None, unparsed_items=None):
        """

        :param current_command: The name of the leaf command; the most
            specific subcommand that was parsed.
        :param current_param: The name of the current parameter; this is the
            last known parameter we've parsed.  This value is set when we
            have parsed a known parameter and are parsing values associated
            with this parameter, and will be set to None once we're no longer
            parsing parameter values for the param.
        :param global_params: A dictionary of global CLI params.
        :param parsed_params: A dictionary of parameters that apply to
            the current command (non global params).
        :param lineage: A list of the lineage, with the ``aws`` portion
            included as the first element if necessary.
        :param current_fragment: The last fragment of a word that was not
            parsed.  This can happen if the user types only part of a command.
            The ``current_fragment`` is only populated if the cursor is on
            the current word.  If there is a space between the last word
            and the cursor it is not considered a fragment.  If this value
            is non ``None``, it typically indicates the value that needs to
            be auto-completed.
        :param unparsed_items: A list of items that we were not able to
            parse.  This can happen if the user types a command that's not
            in the index (e.g ``aws foo bar``).

        """
        # Example:
        #  aws --debug ec2 describe-instances --instance-ids i-123 i-124 \
        #    --region us-west-2
        #
        # This would parse to:
        # ParsedResult(
        #  current_command='describe-instances',
        #  global_params={'debug': None, 'region': 'us-west-2'},
        #  parsed_params={'instance-ids': ['i-123', 'i-124']},
        #  lineage=['aws', 'ec2'],
        #  current_fragment=None
        # )
        #
        # An example of last fragment is:
        #
        # "aws ec2 describe-"
        #
        # This would parse to:
        #
        # ParsedResult(current_command='ec2', lineage=['aws'],
        #              current_fragment='describe-')
        self.current_command = current_command
        self.current_param = current_param
        if global_params is None:
            global_params = {}
        self.global_params = global_params
        if parsed_params is None:
            parsed_params = {}
        self.parsed_params = parsed_params
        if lineage is None:
            lineage = []
        self.lineage = lineage
        # current_fragment is used to indicate that the value
        # is not a known subcommand/option.  It will only
        # ever apply to the last word in the command line.
        self.current_fragment = current_fragment
        if unparsed_items is None:
            unparsed_items = []
        self.unparsed_items = unparsed_items

</source>
</class>

<class classid="369" nclones="2" nlines="13" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emrcontainers/test_update_assume_role_policy.py" startline="162" endline="181" pcid="7372">
                'eks.EKS.get_oidc_issuer_id')
    @mock.patch('awscli.customizations.emrcontainers.'
                'eks.EKS.get_account_id')
    def test_policy_document_has_missing_key(self,
                                             get_account_id_patch,
                                             get_oidc_issuer_id_patch,
                                             get_assume_role_policy_patch):
        del self.policy_document["Statement"]

        self.expected_policy_document = copy.deepcopy(self.policy_document)
        self.expected_policy_document["Statement"] = [json.loads(
            self.expected_statement)]

        get_assume_role_policy_patch.return_value = self.policy_document
        get_oidc_issuer_id_patch.return_value = self.oidc_provider
        get_account_id_patch.return_value = self.account_id

        output = self.run_cmd(self.command, expected_rc=0)
        self.assert_trust_policy_updated(output[0])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emrcontainers/test_update_assume_role_policy.py" startline="188" endline="207" pcid="7373">
                'eks.EKS.get_oidc_issuer_id')
    @mock.patch('awscli.customizations.emrcontainers.'
                'eks.EKS.get_account_id')
    def test_policy_document_has_empty_statements(self,
                                                  get_account_id_patch,
                                                  get_oidc_issuer_id_patch,
                                                  get_assume_role_policy_patch):
        del self.policy_document.get("Statement")[:]

        self.expected_policy_document = copy.deepcopy(self.policy_document)
        self.expected_policy_document.get("Statement").append(json.loads(
            self.expected_statement))

        get_assume_role_policy_patch.return_value = self.policy_document
        get_oidc_issuer_id_patch.return_value = self.oidc_provider
        get_account_id_patch.return_value = self.account_id

        output = self.run_cmd(self.command, expected_rc=0)
        self.assert_trust_policy_updated(output[0])

</source>
</class>

<class classid="370" nclones="2" nlines="20" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="19" endline="40" pcid="7377">
    def setUp(self):
        self.domain = 'domain'
        self.domain_owner = 'domain-owner'
        self.package_format = 'npm'
        self.repository = 'repository'
        self.auth_token = 'auth-token'
        self.expiration = (datetime.now(tzlocal()) + relativedelta(hours=10)
                           + relativedelta(minutes=9)).replace(microsecond=0)
        self.endpoint = 'https://{domain}-{domainOwner}.codeartifact.aws.' \
            'a2z.com/{format}/{repository}/'.format(
                domain=self.domain,
                domainOwner=self.domain_owner,
                format=self.package_format,
                repository=self.repository
            )

        self.subprocess_utils = mock.Mock()

        self.test_subject = BaseLogin(
            self.auth_token, self.expiration, self.endpoint,
            self.domain, self.repository, self.subprocess_utils
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="465" endline="494" pcid="7408">
        with self.assertRaises(ValueError):
            self.test_subject.get_scope('.{}'.format(self.namespace))

    def test_get_scope_without_prefix(self):
        expected_value = '@{}'.format(self.namespace)
        scope = self.test_subject.get_scope('@{}'.format(self.namespace))
        self.assertEqual(scope, expected_value)

    def test_get_commands(self):
        commands = self.test_subject.get_commands(
            self.endpoint, self.auth_token
        )
        self.assertCountEqual(commands, self.commands)

    def test_get_commands_with_scope(self):
        commands = self.test_subject.get_commands(
            self.endpoint, self.auth_token, scope=self.namespace
        )
        self.commands[0][3] = '{}:registry'.format(self.namespace)
        self.assertCountEqual(commands, self.commands)

    def test_login_dry_run(self):
        self.test_subject.login(dry_run=True)
        self.subprocess_utils.assert_not_called()


class TestPipLogin(unittest.TestCase):

    PIP_INDEX_URL_FMT = PipLogin.PIP_INDEX_URL_FMT

</source>
</class>

<class classid="371" nclones="3" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="179" endline="194" pcid="7388">
                        '      https://source.com/index.json'
        self.subprocess_utils.check_output.return_value = \
            list_response.encode('utf-8')
        self.test_subject.login()
        self.subprocess_utils.check_output.assert_called_with(
            self.update_operation_command,
            stderr=self.subprocess_utils.PIPE
        )

    def test_login_source_url_already_exists_old_nuget(self):
        non_default_source_name = 'Source Name'
        list_response = 'Registered Sources:\n' \
                        '\n' \
                        '  1. ' + non_default_source_name + ' [ENABLED]\n' \
                                                            '      ' + self.nuget_index_url
        self.subprocess_utils.check_output.return_value = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="341" endline="355" pcid="7397">
    def test_login_source_name_already_exists(self):
        list_response = 'Registered Sources:\n' \
                        '  1.  ' + self.source_name + ' [ENABLED]\n' \
                        '      https://source.com/index.json'
        self.subprocess_utils.check_output.return_value = \
            list_response.encode('utf-8')
        self.test_subject.login()
        self.subprocess_utils.check_output.assert_called_with(
            self.update_operation_command_non_windows,
            stderr=self.subprocess_utils.PIPE
        )

    @mock.patch('awscli.customizations.codeartifact.login.is_windows', True)
    def test_login_source_name_already_exists_on_windows(self):
        list_response = 'Registered Sources:\n' \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="195" endline="210" pcid="7389">
            list_response.encode('utf-8')
        self.test_subject.login()
        self.subprocess_utils.check_output.assert_called_with(
            [
                'nuget', 'sources', 'update',
                '-name', non_default_source_name,
                '-source', self.nuget_index_url,
                '-username', 'aws',
                '-password', self.auth_token
            ],
            stderr=self.subprocess_utils.PIPE
        )

    def test_login_source_url_already_exists(self):
        non_default_source_name = 'Source Name'
        list_response = 'Registered Sources:\n' \
</source>
</class>

<class classid="372" nclones="2" nlines="22" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="615" endline="664" pcid="7418">
            self.assertIn('username', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'username'), username)

        if password:
            self.assertIn('password', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'password'), password)

    def test_get_pypi_rc_path(self):
        self.assertEqual(
            TwineLogin.get_pypi_rc_path(),
            os.path.join(os.path.expanduser("~"), ".pypirc")
        )

    def test_login_pypi_rc_not_found_defaults_set(self):
        self.test_subject.login()

        with open(self.test_pypi_rc_path) as f:
            test_pypi_rc_str = f.read()

        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=test_pypi_rc_str,
            server='codeartifact',
            repo_url=self.endpoint,
            username='aws',
            password=self.auth_token
        )

    def test_login_dry_run(self):
        self.test_subject.login(dry_run=True)
        self.subprocess_utils.assert_not_called()
        self.assertFalse(os.path.exists(self.test_pypi_rc_path))

    def test_login_existing_pypi_rc_not_clobbered(self):
        existing_pypi_rc = '''\
[distutils]
index-servers=
    pypi
    test

[pypi]
repository: http://www.python.org/pypi/
username: monty
password: JgCXIr5xGG

[test]
repository: http://example.com/test/
username: testusername
password: testpassword
'''

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="665" endline="706" pcid="7419">
        with open(self.test_pypi_rc_path, 'w+') as f:
            f.write(existing_pypi_rc)

        self.test_subject.login()

        with open(self.test_pypi_rc_path) as f:
            test_pypi_rc_str = f.read()

        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=test_pypi_rc_str,
            server='codeartifact',
            repo_url=self.endpoint,
            username='aws',
            password=self.auth_token
        )

        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=test_pypi_rc_str,
            server='pypi',
            repo_url='http://www.python.org/pypi/',
            username='monty',
            password='JgCXIr5xGG'
        )

        self._assert_pypi_rc_has_expected_content(
            pypi_rc_str=test_pypi_rc_str,
            server='test',
            repo_url='http://example.com/test/',
            username='testusername',
            password='testpassword'
        )

    def test_login_existing_pypi_rc_with_codeartifact_not_clobbered(self):
        existing_pypi_rc = '''\
[distutils]
index-servers=
    pypi
    codeartifact

[pypi]
repository: http://www.python.org/pypi/
username: monty
</source>
</class>

<class classid="373" nclones="2" nlines="23" similarity="95">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="54" endline="85" pcid="7437">
    def test_upload_successful(self, progress_percentage_mock, get_size_patch):
        file_name = "filename"
        remote_path = "remotepath"
        prefix = "SomePrefix"
        remote_path_with_prefix = "{0}/{1}".format(prefix, remote_path)
        s3uploader = S3Uploader(
            self.s3client, self.bucket_name, prefix, None, False,
            self.transfer_manager_mock)
        expected_upload_url = "s3://{0}/{1}/{2}".format(
            self.bucket_name, prefix, remote_path)

        # Setup mock to fake that file does not exist
        s3uploader.file_exists = Mock()
        s3uploader.file_exists.return_value = False
        # set the metadata used by the uploader when uploading
        artifact_metadata = {"key": "val"}
        s3uploader.artifact_metadata = artifact_metadata

        upload_url = s3uploader.upload(file_name, remote_path)
        self.assertEquals(expected_upload_url, upload_url)

        expected_extra_args = {
            # expected encryption args
            "ServerSideEncryption": "AES256",
            # expected metadata
            "Metadata": artifact_metadata
        }
        self.transfer_manager_mock.upload.assert_called_once_with(
                file_name, self.bucket_name, remote_path_with_prefix,
                expected_extra_args, mock.ANY)
        s3uploader.file_exists.assert_called_once_with(remote_path_with_prefix)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="88" endline="119" pcid="7438">
    def test_upload_successful_odict(self, progress_percentage_mock, get_size_patch):
        file_name = "filename"
        remote_path = "remotepath"
        prefix = "SomePrefix"
        remote_path_with_prefix = "{0}/{1}".format(prefix, remote_path)
        s3uploader = S3Uploader(
            self.s3client, self.bucket_name, prefix, None, False,
            self.transfer_manager_mock)
        expected_upload_url = "s3://{0}/{1}/{2}".format(
            self.bucket_name, prefix, remote_path)

        # Setup mock to fake that file does not exist
        s3uploader.file_exists = Mock()
        s3uploader.file_exists.return_value = False
        # set the metadata used by the uploader when uploading
        artifact_metadata = OrderedDict({"key": "val"})
        s3uploader.artifact_metadata = artifact_metadata

        upload_url = s3uploader.upload(file_name, remote_path)
        self.assertEquals(expected_upload_url, upload_url)

        expected_extra_args = {
            # expected encryption args
            "ServerSideEncryption": "AES256",
            # expected metadata
            "Metadata": artifact_metadata
        }
        self.transfer_manager_mock.upload.assert_called_once_with(
                file_name, self.bucket_name, remote_path_with_prefix,
                expected_extra_args, mock.ANY)
        s3uploader.file_exists.assert_called_once_with(remote_path_with_prefix)

</source>
</class>

<class classid="374" nclones="2" nlines="19" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="136" endline="164" pcid="7440">
    def test_upload_force_upload(self, progress_percentage_mock, get_size_patch):
        file_name = "filename"
        remote_path = "remotepath"
        expected_upload_url = "s3://{0}/{1}".format(self.bucket_name,
                                                    remote_path)

        # Set ForceUpload = True
        self.s3uploader = S3Uploader(
            self.s3client, self.bucket_name, self.prefix,
            None, True, self.transfer_manager_mock)

        # Pretend file already exists
        self.s3uploader.file_exists = Mock()
        self.s3uploader.file_exists.return_value = True

        # Because we forced an update, this should reupload even if file exists
        upload_url = self.s3uploader.upload(file_name, remote_path)
        self.assertEquals(expected_upload_url, upload_url)

        expected_encryption_args = {
            "ServerSideEncryption": "AES256"
        }
        self.transfer_manager_mock.upload.assert_called_once_with(
                file_name, self.bucket_name, remote_path,
                expected_encryption_args, mock.ANY)

        # Since ForceUpload=True, we should NEVER do the file-exists check
        self.s3uploader.file_exists.assert_not_called()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="167" endline="193" pcid="7441">
    def test_upload_successful_custom_kms_key(self, progress_percentage_mock, get_size_patch):
        file_name = "filename"
        remote_path = "remotepath"
        kms_key_id = "kms_id"
        expected_upload_url = "s3://{0}/{1}".format(self.bucket_name,
                                                    remote_path)
        # Set KMS Key Id
        self.s3uploader = S3Uploader(
            self.s3client, self.bucket_name, self.prefix,
            kms_key_id, False, self.transfer_manager_mock)

        # Setup mock to fake that file does not exist
        self.s3uploader.file_exists = Mock()
        self.s3uploader.file_exists.return_value = False

        upload_url = self.s3uploader.upload(file_name, remote_path)
        self.assertEquals(expected_upload_url, upload_url)

        expected_encryption_args = {
            "ServerSideEncryption": "aws:kms",
            "SSEKMSKeyId": kms_key_id
        }
        self.transfer_manager_mock.upload.assert_called_once_with(
                file_name, self.bucket_name, remote_path,
                expected_encryption_args, mock.ANY)
        self.s3uploader.file_exists.assert_called_once_with(remote_path)

</source>
</class>

<class classid="375" nclones="2" nlines="12" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="196" endline="211" pcid="7442">
    def test_upload_successful_nobucket(self, progress_percentage_mock, get_size_patch):
        file_name = "filename"
        remote_path = "remotepath"

        # Setup mock to fake that file does not exist
        self.s3uploader.file_exists = Mock()
        self.s3uploader.file_exists.return_value = False

        # Setup uploader to return a NOSuchBucket exception
        exception = botocore.exceptions.ClientError(
                {"Error": {"Code": "NoSuchBucket"}}, "OpName")
        self.transfer_manager_mock.upload.side_effect = exception

        with self.assertRaises(NoSuchBucketError):
            self.s3uploader.upload(file_name, remote_path)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="214" endline="234" pcid="7443">
    def test_upload_successful_exceptions(self, progress_percentage_mock, get_size_patch):
        file_name = "filename"
        remote_path = "remotepath"

        # Setup mock to fake that file does not exist
        self.s3uploader.file_exists = Mock()
        self.s3uploader.file_exists.return_value = False

        # Raise an unrecognized botocore error
        exception = botocore.exceptions.ClientError(
                {"Error": {"Code": "SomeError"}}, "OpName")
        self.transfer_manager_mock.upload.side_effect = exception

        with self.assertRaises(botocore.exceptions.ClientError):
            self.s3uploader.upload(file_name, remote_path)

        # Some other exception
        self.transfer_manager_mock.upload.side_effect = FloatingPointError()
        with self.assertRaises(FloatingPointError):
            self.s3uploader.upload(file_name, remote_path)

</source>
</class>

<class classid="376" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="339" endline="360" pcid="7449">
    def test_to_path_style_s3_url_other_regions(self):
        key = "path/to/file"
        version = "someversion"
        region = "us-west-2"
        self._construct_uploader(region)

        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key, version)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com/{1}/{2}?versionId={3}".format(
                        region, self.bucket_name, key, version))

        # Without versionId, that query parameter should be omitted
        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com/{1}/{2}".format(
                        region, self.bucket_name, key))


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_s3uploader.py" startline="361" endline="381" pcid="7450">
    def test_to_path_style_s3_url_china_regions(self):
        key = "path/to/file"
        version = "someversion"
        region = "cn-northwest-1"
        self._construct_uploader(region)

        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key, version)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com.cn/{1}/{2}?versionId={3}".format(
                        region, self.bucket_name, key, version))

        # Without versionId, that query parameter should be omitted
        s3uploader = S3Uploader(self.s3client, self.bucket_name, region)
        result = s3uploader.to_path_style_s3_url(key)
        self.assertEqual(
                result,
                "https://s3.{0}.amazonaws.com.cn/{1}/{2}".format(
                        region, self.bucket_name, key))

</source>
</class>

<class classid="377" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_utils.py" startline="124" endline="137" pcid="7465">
    def setUp(self):
        self.s3_client = mock.Mock()
        self.bucket_name = 'mybucket'
        self.error_response = {
            'Error': {
                'Code': '404',
                'Message': 'Not Found'
            }
        }
        self.bucket_no_exists_error = ClientError(
            self.error_response,
            'HeadBucket'
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_subscribe.py" startline="23" endline="37" pcid="9009">
class TestS3BucketHelper(unittest.TestCase):
    def setUp(self):
        self.session = botocore.session.get_session()
        self.s3_client = mock.Mock(self.session.create_client('s3'))
        self.helper = S3BucketHelper(self.s3_client)
        self.error_response = {
            'Error': {
                'Code': '404',
                'Message': 'Not Found'
            }
        }
        self.bucket_no_exists_error = ClientError(
            self.error_response,
            'HeadBucket'
        )
</source>
</class>

<class classid="378" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="76" endline="88" pcid="7490">

    def test_operation_with_no_paginate(self):
        # Operations that don't paginate are left alone.
        self.paginator_model.get_paginator.side_effect = ValueError()
        argument_table = {
            'foo': 'FakeArgObject',
            'bar': 'FakeArgObject',
        }
        starting_table = argument_table.copy()
        paginate.unify_paging_params(argument_table, self.operation_model,
                                     'building-argument-table.foo.bar',
                                     self.session)
        self.assertEqual(starting_table, argument_table)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="89" endline="102" pcid="7491">

    def test_service_with_no_paginate(self):
        # Operations that don't paginate are left alone.
        self.session.get_paginator_model.side_effect = \
            DataNotFoundError(data_path='foo.paginators.json')
        argument_table = {
            'foo': 'FakeArgObject',
            'bar': 'FakeArgObject',
        }
        starting_table = argument_table.copy()
        paginate.unify_paging_params(argument_table, self.operation_model,
                                     'building-argument-table.foo.bar',
                                     self.session)
        self.assertEqual(starting_table, argument_table)
</source>
</class>

<class classid="379" nclones="4" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="104" endline="116" pcid="7492">

class TestHelpDocumentationModifications(TestPaginateBase):
    def test_injects_pagination_help_text(self):
        with patch('awscli.customizations.paginate.get_paginator_config',
                   return_value={'result_key': 'abc'}):
            help_command = OperationHelpCommand(
                Mock(), Mock(), Mock(), 'foo', OperationDocumentEventHandler)
            help_command.obj = Mock(OperationModel)
            help_command.obj.name = 'foo'
            paginate.add_paging_description(help_command)
            self.assertIn('``foo`` is a paginated operation. Multiple API',
                          help_command.doc.getvalue().decode())
            self.assertIn('following query expressions: ``abc``',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="117" endline="127" pcid="7493">
                          help_command.doc.getvalue().decode())

    def test_shows_result_keys_when_array(self):
        with patch('awscli.customizations.paginate.get_paginator_config',
                   return_value={'result_key': ['abc', '123']}):
            help_command = OperationHelpCommand(
                Mock(), Mock(), Mock(), 'foo', OperationDocumentEventHandler)
            help_command.obj = Mock(OperationModel)
            help_command.obj.name = 'foo'
            paginate.add_paging_description(help_command)
            self.assertIn('following query expressions: ``abc``, ``123``',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="128" endline="140" pcid="7494">
                          help_command.doc.getvalue().decode())

    def test_does_not_show_result_key_if_not_present(self):
        with patch('awscli.customizations.paginate.get_paginator_config',
                   return_value={'limit_key': 'aaa'}):
            help_command = OperationHelpCommand(
                Mock(), Mock(), Mock(), 'foo', OperationDocumentEventHandler)
            help_command.obj = Mock(OperationModel)
            help_command.obj.name = 'foo'
            paginate.add_paging_description(help_command)
            self.assertIn('``foo`` is a paginated operation. Multiple API',
                          help_command.doc.getvalue().decode())
            self.assertNotIn('following query expressions',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="141" endline="152" pcid="7495">
                             help_command.doc.getvalue().decode())

    def test_does_not_inject_when_no_pagination(self):
        with patch('awscli.customizations.paginate.get_paginator_config',
                   return_value=None):
            help_command = OperationHelpCommand(
                Mock(), Mock(), Mock(), 'foo', OperationDocumentEventHandler)
            help_command.obj = Mock(OperationModel)
            help_command.obj.name = 'foo'
            paginate.add_paging_description(help_command)
            self.assertNotIn('``foo`` is a paginated operation',
                             help_command.doc.getvalue().decode())
</source>
</class>

<class classid="380" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="301" endline="316" pcid="7509">
            self.parsed_args, self.parsed_globals)

    def test_shadowed_args_are_replaced_when_pagination_turned_off(self):
        input_tokens = ['foo', 'bar']
        self.parsed_globals.paginate = True
        # Corresponds to --bar 10
        self.parsed_args.foo = None
        self.parsed_args.bar = 10
        shadowed_args = {'foo': mock.sentinel.ORIGINAL_ARG}
        arg_table = {'foo': mock.sentinel.PAGINATION_ARG}
        paginate.check_should_enable_pagination(
            input_tokens, shadowed_args, arg_table,
            self.parsed_args, self.parsed_globals)
        # We should have turned paginate off because the
        # user specified --bar 10
        self.assertFalse(self.parsed_globals.paginate)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_paginate.py" startline="317" endline="333" pcid="7510">
        self.assertEqual(arg_table['foo'], mock.sentinel.ORIGINAL_ARG)

    def test_shadowed_args_are_replaced_when_pagination_set_off(self):
        input_tokens = ['foo', 'bar']
        self.parsed_globals.paginate = False
        # Corresponds to --bar 10
        self.parsed_args.foo = None
        self.parsed_args.bar = 10
        shadowed_args = {'foo': mock.sentinel.ORIGINAL_ARG}
        arg_table = {'foo': mock.sentinel.PAGINATION_ARG}
        paginate.check_should_enable_pagination(
            input_tokens, shadowed_args, arg_table,
            self.parsed_args, self.parsed_globals)
        # We should have turned paginate off because the
        # user specified --bar 10
        self.assertFalse(self.parsed_globals.paginate)
        self.assertEqual(arg_table['foo'], mock.sentinel.ORIGINAL_ARG)
</source>
</class>

<class classid="381" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_arguments.py" startline="119" endline="130" pcid="7532">
    def test_saves_query_to_file(self):
        outfile = self.files.create_file('not-empty-test', '')
        session = mock.Mock()
        arg = QueryOutFileArgument(session, 'foo', 'baz', 'event', 0o600)
        arg.add_to_params({}, outfile)
        arg.save_query({'ResponseMetadata': {'HTTPStatusCode': 200},
                        'baz': 'abc123'})
        with open(outfile) as fp:
            self.assertEquals('abc123', fp.read())
        self.assertEquals(1, session.register.call_count)
        session.register.assert_called_with('event', arg.save_query)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_arguments.py" startline="146" endline="155" pcid="7535">
    def test_permissions_on_created_file(self):
        outfile = self.files.create_file('not-empty-test', '')
        session = mock.Mock()
        arg = QueryOutFileArgument(session, 'foo', 'baz', 'event', 0o600)
        arg.add_to_params({}, outfile)
        arg.save_query({'ResponseMetadata': {'HTTPStatusCode': 200},
                        'baz': 'abc123'})
        with open(outfile) as fp:
            fp.read()
        self.assertEqual(os.stat(outfile).st_mode & 0xFFF, 0o600)
</source>
</class>

<class classid="382" nclones="2" nlines="46" similarity="89">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/logs/test_tail.py" startline="237" endline="291" pcid="7562">
    def test_iter_log_events(self):
        logs_generator = NoFollowLogEventsGenerator(
            self.client, TimestampUtils())

        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [
                    self.get_event('event-1', 'event-1-message'),
                    self.get_event('event-2', 'event-2-message'),
                ],
                'nextToken': 'token'
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
                'startTime': self.expected_start_as_milli_epoch,
                'filterPattern': self.filter_pattern,
                'logStreamNames': self.log_stream_names,
                'logStreamNamePrefix': self.log_stream_name_prefix
            }
        )
        # Add a new page that has no more results
        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [
                    self.get_event('event-3', 'event-3-message'),
                ],
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
                'startTime': self.expected_start_as_milli_epoch,
                'filterPattern': self.filter_pattern,
                'logStreamNames': self.log_stream_names,
                'logStreamNamePrefix': self.log_stream_name_prefix,
                'nextToken': 'token'
            }
        )
        with self.stubber:
            log_events_iter = logs_generator.iter_log_events(
                self.group_name, self.start, self.filter_pattern,
                self.log_stream_names, self.log_stream_name_prefix)
            actual_log_events = [event for event in log_events_iter]
        self.assertEqual(
            actual_log_events,
            [
                self.get_expected_event('event-1', 'event-1-message'),
                self.get_expected_event('event-2', 'event-2-message'),
                self.get_expected_event('event-3', 'event-3-message'),
            ]
        )


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/logs/test_tail.py" startline="299" endline="351" pcid="7564">
    def test_iter_log_events(self):
        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [
                    self.get_event('event-1', 'event-1-message'),
                    self.get_event('event-2', 'event-2-message'),
                ],
                'nextToken': 'token'
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
                'startTime': self.expected_start_as_milli_epoch,
                'filterPattern': self.filter_pattern,
                'logStreamNames': self.log_stream_names,
                'logStreamNamePrefix': self.log_stream_name_prefix,
            }
        )
        # Add a new page that has no nextToken
        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [
                    self.get_event('event-3', 'event-3-message'),
                ],
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
                'startTime': self.expected_start_as_milli_epoch,
                'filterPattern': self.filter_pattern,
                'logStreamNames': self.log_stream_names,
                'logStreamNamePrefix': self.log_stream_name_prefix,
                'nextToken': 'token'
            }
        )
        self.mock_sleep.side_effect = KeyboardInterrupt()
        with self.stubber:
            log_events_iter = self.logs_generator.iter_log_events(
                self.group_name, self.start, self.filter_pattern,
                self.log_stream_names, self.log_stream_name_prefix)
            actual_log_events = [event for event in log_events_iter]
        self.mock_sleep.assert_called_once_with(5)
        self.assertEqual(
            actual_log_events,
            [
                self.get_expected_event('event-1', 'event-1-message'),
                self.get_expected_event('event-2', 'event-2-message'),
                self.get_expected_event('event-3', 'event-3-message'),
            ]
        )

</source>
</class>

<class classid="383" nclones="2" nlines="40" similarity="87">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/logs/test_tail.py" startline="415" endline="461" pcid="7566">
    def test_iter_log_events_filters_empty_events_list(self):
        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [],
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
            }
        )
        # Add a new page that has events
        # It should make a call with the same parameters as the
        # previous one
        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [
                    self.get_event('event-1', 'event-1-message'),
                    self.get_event('event-2', 'event-2-message'),
                    self.get_event('event-3', 'event-3-message'),
                ],
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
            }
        )
        self.mock_sleep.side_effect = [
            None,
            KeyboardInterrupt()
        ]
        with self.stubber:
            log_events_iter = self.logs_generator.iter_log_events(
                self.group_name)
            actual_log_events = [event for event in log_events_iter]
        self.mock_sleep.assert_has_calls([mock.call(5), mock.call(5)])
        self.assertEqual(
            actual_log_events,
            [
                self.get_expected_event('event-1', 'event-1-message'),
                self.get_expected_event('event-2', 'event-2-message'),
                self.get_expected_event('event-3', 'event-3-message'),
            ]
        )


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/logs/test_tail.py" startline="462" endline="510" pcid="7567">
    def test_iter_log_events_filters_old_events(self):
        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [
                    self.get_event('event-1', 'event-1-message'),
                    self.get_event('event-2', 'event-2-message'),
                ],
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
            }
        )
        # Add a new page that has no nextToken
        # It should update startTime with the max timestamp
        # from the prvious response events
        self.stubber.add_response(
            'filter_log_events',
            service_response={
                'events': [
                    self.get_event('event-1', 'event-1-message'),
                    self.get_event('event-2', 'event-2-message'),
                    self.get_event('event-3', 'event-3-message'),
                ],
            },
            expected_params={
                'logGroupName': self.group_name,
                'interleaved': True,
                'startTime': self.get_event('event-2', 'event-2-message')['timestamp']
            }
        )
        self.mock_sleep.side_effect = [
            None,
            KeyboardInterrupt()
        ]
        with self.stubber:
            log_events_iter = self.logs_generator.iter_log_events(
                self.group_name)
            actual_log_events = [event for event in log_events_iter]
        self.mock_sleep.assert_has_calls([mock.call(5), mock.call(5)])
        self.assertEqual(
            actual_log_events,
            [
                self.get_expected_event('event-1', 'event-1-message'),
                self.get_expected_event('event-2', 'event-2-message'),
                self.get_expected_event('event-3', 'event-3-message'),
            ]
        )
</source>
</class>

<class classid="384" nclones="3" nlines="14" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_globalargs.py" startline="90" endline="103" pcid="7576">
    def test_cli_overrides_cert_bundle(self):
        environ = {}
        with mock.patch('os.environ', environ):
            parsed_args = FakeParsedArgs(
                verify_ssl=True,
                ca_bundle='/path/to/cli_bundle.pem')
            config_file_vars = {}
            session_var_map = {'ca_bundle': ('ca_bundle', 'AWS_CA_BUNDLE')}
            session = FakeSession(
                session_vars=session_var_map,
                config_file_vars=config_file_vars)
            globalargs.resolve_verify_ssl(parsed_args, session)
            self.assertEqual(parsed_args.verify_ssl, '/path/to/cli_bundle.pem')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_globalargs.py" startline="120" endline="135" pcid="7578">
    def test_no_verify_ssl_overrides_cli_cert_bundle(self):
        environ = {
            'AWS_CA_BUNDLE': '/path/to/env_bundle.pem',
        }
        with mock.patch('os.environ', environ):
            parsed_args = FakeParsedArgs(
                verify_ssl=False,
                ca_bundle='/path/to/cli_bundle.pem')
            config_file_vars = {}
            session_var_map = {'ca_bundle': ('ca_bundle', 'AWS_CA_BUNDLE')}
            session = FakeSession(
                session_vars=session_var_map,
                config_file_vars=config_file_vars)
            globalargs.resolve_verify_ssl(parsed_args, session)
            self.assertFalse(parsed_args.verify_ssl)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_globalargs.py" startline="104" endline="119" pcid="7577">
    def test_cli_overrides_env_cert_bundle(self):
        environ = {
            'AWS_CA_BUNDLE': '/path/to/env_bundle.pem',
        }
        with mock.patch('os.environ', environ):
            parsed_args = FakeParsedArgs(
                verify_ssl=True,
                ca_bundle='/path/to/cli_bundle.pem')
            config_file_vars = {}
            session_var_map = {'ca_bundle': ('ca_bundle', 'AWS_CA_BUNDLE')}
            session = FakeSession(
                session_vars=session_var_map,
                config_file_vars=config_file_vars)
            globalargs.resolve_verify_ssl(parsed_args, session)
            self.assertEqual(parsed_args.verify_ssl, '/path/to/cli_bundle.pem')

</source>
</class>

<class classid="385" nclones="2" nlines="19" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ecs/test_executecommand_startsession.py" startline="121" endline="146" pcid="7612">
    def test_execute_command_success(self, mock_check_call):
        mock_check_call.return_value = 0

        self.client.execute_command.return_value = \
            self.execute_command_response
        self.client.describe_tasks.return_value = self.describe_tasks_response

        rc = self.caller.invoke('ecs', 'ExecuteCommand',
                                self.execute_command_params, mock.Mock())

        self.assertEquals(rc, 0)
        self.client.execute_command.\
            assert_called_with(**self.execute_command_params)

        mock_check_call_list = mock_check_call.call_args[0][0]
        mock_check_call_list[1] = json.loads(mock_check_call_list[1])
        self.assertEqual(
            mock_check_call_list,
            ['session-manager-plugin',
             self.execute_command_response["session"],
             self.region,
             'StartSession',
             self.profile,
             json.dumps(self.ssm_request_parameters),
             self.endpoint_url
             ]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ecs/test_executecommand_startsession.py" startline="174" endline="195" pcid="7615">
        with self.assertRaises(Exception):
            rc = self.caller.invoke('ecs', 'ExecuteCommand',
                                    self.execute_command_params, mock.Mock())
            self.assertEquals(rc, 0)
            self.client.execute_command. \
                assert_called_with(**self.execute_command_params)

    @mock.patch('awscli.customizations.ecs.executecommand.check_call')
    def test_when_check_call_fails(self, mock_check_call):
        mock_check_call.side_effect = [0, Exception('some Exception')]

        self.client.execute_command.return_value = \
            self.execute_command_response
        self.client.describe_tasks.return_value = self.describe_tasks_response

        with self.assertRaises(Exception):
            self.caller.invoke('ecs', 'ExecuteCommand',
                               self.execute_command_params, mock.Mock())

            mock_check_call_list = mock_check_call.call_args[0][0]
            mock_check_call_list[1] = json.loads(mock_check_call_list[1])
            self.assertEqual(
</source>
</class>

<class classid="386" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ecs/test_codedeployvalidator.py" startline="105" endline="120" pcid="7622">

    def test_validate_deployment_group_error_service(self):
        invalid_dgp = {
            'deploymentGroupInfo': {
                'computePlatform': 'ECS',
                'ecsServices': [{
                    'serviceName': 'the-wrong-test-service',
                    'clusterName': 'test-cluster'
                }]
            }
        }
        bad_validator = CodeDeployValidator(None, self.TEST_RESOURCES)
        bad_validator.deployment_group_details = invalid_dgp

        with self.assertRaises(InvalidProperyError):
            bad_validator.validate_deployment_group()
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/ecs/test_codedeployvalidator.py" startline="121" endline="135" pcid="7623">

    def test_validate_deployment_group_error_cluster(self):
        invalid_dgp = {
            'deploymentGroupInfo': {
                'computePlatform': 'ECS',
                'ecsServices': [{
                    'serviceName': 'test-service',
                    'clusterName': 'the-wrong-test-cluster'
                }]
            }
        }
        bad_validator = CodeDeployValidator(None, self.TEST_RESOURCES)
        bad_validator.deployment_group_details = invalid_dgp

        with self.assertRaises(InvalidProperyError):
</source>
</class>

<class classid="387" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_schedule_hbase_backup.py" startline="57" endline="70" pcid="7631">

        self.assert_params_for_cmd(cmdline, result)

    def test_schedule_hbase_backup_incremental_upper_case(self):
        args = ' --cluster-id j-ABCD --dir s3://abc/  --type INCREMENTAL' +\
               ' --interval 10 --unit HOURS'
        cmdline = self.prefix + args

        steps = deepcopy(self.default_steps)
        args = steps[0]['HadoopJarStep']['Args']
        args[5] = '--incremental-backup-time-interval'
        args[7] = '--incremental-backup-time-unit'
        args[8] = 'hours'
        steps[0]['HadoopJarStep']['Args'] = args
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_schedule_hbase_backup.py" startline="71" endline="84" pcid="7632">
        result = {'JobFlowId': 'j-ABCD', 'Steps': steps}

        self.assert_params_for_cmd(cmdline, result)

    def test_schedule_hbase_backup_incremental(self):
        args = ' --cluster-id j-ABCD --dir s3://abc/  --type incremental' +\
               ' --interval 10 --unit minutes'
        cmdline = self.prefix + args

        steps = deepcopy(self.default_steps)
        args = steps[0]['HadoopJarStep']['Args']
        args[5] = '--incremental-backup-time-interval'
        args[7] = '--incremental-backup-time-unit'
        steps[0]['HadoopJarStep']['Args'] = args
</source>
</class>

<class classid="388" nclones="9" nlines="11" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="77" endline="92" pcid="7642">

    def test_consistent_w_optional_args(self):
        emrfs_option_value = 'Consistent=true,RetryCount=5,RetryPeriod=30'

        expected_emrfs_properties = \
            {'fs.s3.consistent': 'true',
             'fs.s3.consistent.retryCount': '5',
             'fs.s3.consistent.retryPeriodSeconds': '30'}

        expected_emrfs_ba_key_values = [
            'fs.s3.consistent=true', 'fs.s3.consistent.retryCount=5',
            'fs.s3.consistent.retryPeriodSeconds=30'
        ]

        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="93" endline="107" pcid="7643">
            expected_emrfs_properties)

    def test_consistent_false_w_optional_args(self):
        emrfs_option_value = 'Consistent=false,RetryCount=5'

        expected_emrfs_properties = {
            'fs.s3.consistent': 'false',
            'fs.s3.consistent.retryCount': '5'}

        expected_emrfs_ba_key_values = [
            'fs.s3.consistent=false', 'fs.s3.consistent.retryCount=5'
        ]

        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="236" endline="248" pcid="7651">

        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

    def test_args_and_consistent(self):
        emrfs_option_value = 'Consistent=true,Args=[k1=v1,k2=v2]'
        expected_emrfs_ba_key_values = ['fs.s3.consistent=true',
                                        'k1=v1', 'k2=v2']
        expected_emrfs_properties = {
            'fs.s3.consistent': 'true',
            'k1': 'v1',
            'k2': 'v2'}
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="249" endline="260" pcid="7652">

        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

    def test_only_args(self):
        emrfs_option_value = 'Args=[k1=v1,k2=v2,k3]'
        expected_emrfs_ba_key_values = ['k1=v1', 'k2=v2', 'k3']
        expected_emrfs_properties = {
            'k1': 'v1',
            'k2': 'v2',
            'k3': ''}
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="204" endline="216" pcid="7649">
        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

    def test_args_and_sse(self):
        emrfs_option_value = \
            'SSE=true,Args=[fs.s3.serverSideEncryptionAlgorithm=AES256]'
        expected_emrfs_ba_key_values = [
            'fs.s3.enableServerSideEncryption=true',
            'fs.s3.serverSideEncryptionAlgorithm=AES256']
        expected_emrfs_properties = {
            'fs.s3.enableServerSideEncryption': 'true',
            'fs.s3.serverSideEncryptionAlgorithm': 'AES256'}
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="146" endline="160" pcid="7646">
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

    def test_cse_custom(self):
        emrfs_option_value = 'Encryption=ClientSide,ProviderType=Custom,' \
            'CustomProviderLocation=my_location,CustomProviderClass=my_class'
        expected_emrfs_ba_key_values = [
            'fs.s3.cse.enabled=true', 'fs.s3.cse.encryptionMaterialsProvider='
            'my_class'
        ]
        expected_emrfs_properties = {
            'fs.s3.cse.enabled': 'true',
            'fs.s3.cse.encryptionMaterialsProvider': 'my_class',
            'fs.s3.cse.encryptionMaterialsProvider.uri': 'my_location'}

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="185" endline="203" pcid="7648">
        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

    def test_cse_and_consistent(self):
        emrfs_option_value = ('Encryption=ClientSide,ProviderType=KMS,'
                              'KMSKeyId=my_key,Consistent=true')
        expected_emrfs_ba_key_values = [
            'fs.s3.consistent=true', 'fs.s3.cse.enabled=true',
            'fs.s3.cse.encryptionMaterialsProvider=com.amazon.ws.emr.'
            'hadoop.fs.cse.KMSEncryptionMaterialsProvider',
            'fs.s3.cse.kms.keyId=my_key']
        expected_emrfs_properties = {
            'fs.s3.consistent': 'true',
            'fs.s3.cse.enabled': 'true',
            'fs.s3.cse.encryptionMaterialsProvider': 'com.amazon.ws.emr.'
            'hadoop.fs.cse.KMSEncryptionMaterialsProvider',
            'fs.s3.cse.kms.keyId': 'my_key'}

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="129" endline="145" pcid="7645">
            expected_emrfs_properties)

    def test_cse_kms(self):
        emrfs_option_value = 'Encryption=ClientSide,ProviderType=KMS,' \
            'KMSKeyId=my_key'
        expected_emrfs_ba_key_values = [
            'fs.s3.cse.enabled=true', 'fs.s3.cse.encryptionMaterialsProvider='
            'com.amazon.ws.emr.hadoop.fs.cse.KMSEncryptionMaterialsProvider',
            'fs.s3.cse.kms.keyId=my_key'
        ]
        expected_emrfs_properties = {
            'fs.s3.cse.enabled': 'true',
            'fs.s3.cse.encryptionMaterialsProvider':
            'com.amazon.ws.emr.hadoop.fs.cse.'
            'KMSEncryptionMaterialsProvider',
            'fs.s3.cse.kms.keyId': 'my_key'}
        self._assert_bootstrap_actions(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="217" endline="235" pcid="7650">

        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

    def test_args_and_cse(self):
        emrfs_option_value = ('Encryption=ClientSide,ProviderType=KMS,'
                              'KMSKeyId=my_key,Args=[k1=v1]')
        expected_emrfs_ba_key_values = [
            'fs.s3.cse.enabled=true',
            'fs.s3.cse.encryptionMaterialsProvider=com.amazon.ws.emr.'
            'hadoop.fs.cse.KMSEncryptionMaterialsProvider',
            'fs.s3.cse.kms.keyId=my_key', 'k1=v1']
        expected_emrfs_properties = {
            'fs.s3.cse.enabled': 'true',
            'fs.s3.cse.encryptionMaterialsProvider': 'com.amazon.ws.emr.'
            'hadoop.fs.cse.KMSEncryptionMaterialsProvider',
            'fs.s3.cse.kms.keyId': 'my_key',
            'k1': 'v1'}
</source>
</class>

<class classid="389" nclones="2" nlines="19" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="108" endline="128" pcid="7644">
            expected_emrfs_properties)

    def test_sse(self):
        emrfs_option_value = 'SSE=true'
        expected_emrfs_ba_key_values = [
            'fs.s3.enableServerSideEncryption=true'
        ]
        expected_emrfs_properties = {
            'fs.s3.enableServerSideEncryption': 'true'}
        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

        emrfs_option_value = 'Encryption=ServerSide'
        expected_emrfs_ba_key_values = [
            'fs.s3.enableServerSideEncryption=true'
        ]
        expected_emrfs_properties = {
            'fs.s3.enableServerSideEncryption': 'true'}
        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_emrfs_utils.py" startline="161" endline="184" pcid="7647">
        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties, 'my_location')

    def test_sse_and_consistent(self):
        emrfs_option_value = 'SSE=true,Consistent=true'
        expected_emrfs_ba_key_values = [
            'fs.s3.consistent=true',
            'fs.s3.enableServerSideEncryption=true']
        expected_emrfs_properties = {
            'fs.s3.consistent': 'true',
            'fs.s3.enableServerSideEncryption': 'true'}
        self._assert_bootstrap_actions(
            emrfs_option_value, expected_emrfs_ba_key_values,
            expected_emrfs_properties)

        emrfs_option_value = 'Consistent=false,Encryption=serVERSIde'
        expected_emrfs_ba_key_values = [
            'fs.s3.consistent=false',
            'fs.s3.enableServerSideEncryption=true']
        expected_emrfs_properties = {
            'fs.s3.consistent': 'false',
            'fs.s3.enableServerSideEncryption': 'true'}

</source>
</class>

<class classid="390" nclones="36" nlines="12" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="313" endline="324" pcid="7675">
        cmd = (DEFAULT_CMD + ' --configurations '
               '[{\"Classification\":\"hadoop-env\",\"Properties\":{'
               '\"someProperty\":\"someValue\"},\"Configurations\":[]}]')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Configurations'] = [
            {
                'Classification': 'hadoop-env',
                'Configurations': [],
                'Properties': {'someProperty': 'someValue'}
            }
        ]
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1341" endline="1355" pcid="7862">
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_autoscaling_policy(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --auto-scaling-role EMR_AUTOSCALING_ROLE --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY
                              },
                'AmiVersion': '3.1.0',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1099" endline="1113" pcid="7745">
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        expected_error_msg = (
            '\naws: error: Must specify --auto-scaling-role when'
            ' configuring an AutoScaling policy for an instance group.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_scale_down_behavior(self):
        cmd = (self.prefix + '--release-label emr-4.0.0 --scale-down-behavior TERMINATE_AT_INSTANCE_HOUR '
                             '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'ReleaseLabel': 'emr-4.0.0',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1072" endline="1086" pcid="7742">
            SERVICE_ACCESS_SECURITY_GROUP
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_autoscaling_policy(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --auto-scaling-role EMR_AUTOSCALING_ROLE --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1129" endline="1143" pcid="7747">
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_missing_volume_type(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLTYPE_ARG)
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'VolumeType')

    def test_instance_groups_with_ebs_config_missing_size(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1114" endline="1128" pcid="7746">
                'VisibleToAllUsers': True,
                'ScaleDownBehavior': 'TERMINATE_AT_INSTANCE_HOUR',
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_ebs_config(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1356" endline="1370" pcid="7863">
                'AutoScalingRole': 'EMR_AUTOSCALING_ROLE',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_autoscaling_policy_missing_autoscaling_role(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_AUTOSCALING_POLICY_ARG)
        expected_error_msg = (
            '\naws: error: Must specify --auto-scaling-role when'
            ' configuring an AutoScaling policy for an instance group.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1268" endline="1280" pcid="7756">
    def test_instance_fleets_with_spot_master_core_cluster_multiple_instance_types(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_CORE_CLUSTER)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_CORE_CLUSTER
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1371" endline="1385" pcid="7864">
    def test_scale_down_behavior(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --scale-down-behavior TERMINATE_AT_TASK_COMPLETION '
                             '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'ScaleDownBehavior': 'TERMINATE_AT_TASK_COMPLETION',
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_ebs_config(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1059" endline="1071" pcid="7741">
    def test_security_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__),
            'input_ec2_attributes_with_security_groups.json')
        cmd = DEFAULT_CMD + '--ec2-attributes file://' + data_path

        result = copy.deepcopy(DEFAULT_RESULT)
        instances = result['Instances']
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['ServiceAccessSecurityGroup'] = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="339" endline="350" pcid="7773">

ADDITIONAL_SLAVE_SECURITY_GROUPS = \
    ['sg-addSlave1', 'sg-addSlave2', 'sg-addSlave3', 'sg-addSlave4']


class TestCreateCluster(BaseAWSCommandParamsTest):
    prefix = 'emr create-cluster '

    def test_quick_start(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1300" endline="1312" pcid="7858">
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP

        self.assert_params_for_cmd(cmd, result)

    def test_additional_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes AdditionalMasterSecurityGroups=[sg-addMaster1'
            ',sg-addMaster2,sg-addMaster3,sg-addMaster4],AdditionalSlaveSecu'
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1313" endline="1328" pcid="7859">
            'rityGroups=[sg-addSlave1,sg-addSlave2,sg-addSlave3,sg-addSlave4]')

        result = copy.deepcopy(DEFAULT_RESULT)
        instances = result['Instances']
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_security_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__),
            'input_ec2_attributes_with_security_groups.json')
        cmd = DEFAULT_CMD + '--ec2-attributes file://' + data_path
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1160" endline="1175" pcid="7749">
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_missing_iops(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1212" endline="1227" pcid="7752">

    def test_instance_fleets_with_spot_master_only_with_ebs_conf(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1473" endline="1488" pcid="7869">
                    'Market': 'ON_DEMAND',
                    'InstanceType': 'd2.xlarge',
                    'EbsConfiguration':
                   {'EbsBlockDeviceConfigs':
                         [
                           {'VolumeSpecification':
                            {'VolumeType': 'standard',
                            'SizeInGB': 10},
                            'VolumesPerInstance': 4
                            }
                         ],
                        'EbsOptimized': True}
                    },
                   {'InstanceRole': 'CORE',
                    'InstanceCount': 2,
                    'Name': 'Core Instance Group',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1425" endline="1440" pcid="7866">
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_missing_iops(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_IOPS
                             },
                'AmiVersion': '3.1.0',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1144" endline="1159" pcid="7748">
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_SIZE_ARG)
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'SizeInGB')

    def test_instance_groups_with_ebs_config_missing_volume_spec(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLSPEC_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLSPEC
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1541" endline="1556" pcid="7873">
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY
                            },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_only_with_ebs_conf(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF)
        result = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1441" endline="1456" pcid="7867">
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_multiple_instance_groups(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES_VOLUME_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES
                             },
                'AmiVersion': '3.1.0',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1034" endline="1049" pcid="7739">
        instances = result['Instances']
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP

        self.assert_params_for_cmd(cmd, result)

    def test_additional_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes AdditionalMasterSecurityGroups=[sg-addMaster1'
            ',sg-addMaster2,sg-addMaster3,sg-addMaster4],AdditionalSlaveSecu'
            'rityGroups=[sg-addSlave1,sg-addSlave2,sg-addSlave3,sg-addSlave4]')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1457" endline="1472" pcid="7868">
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_group_with_ebs_config_from_json(self):
           data_path = os.path.join(
               os.path.dirname(__file__), 'input_instance_groups_ebs_config.json')
           cmd = ('emr create-cluster --use-default-roles --ami-version 3.0.4  '
                  '--instance-groups file://' + data_path)
           result = copy.deepcopy(DEFAULT_RESULT)
           result['Instances']['InstanceGroups'] = \
               [
                   {'InstanceRole': 'MASTER',
                    'InstanceCount': 1,
                    'Name': 'Master Instance Group',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1275" endline="1290" pcid="7856">
            'sg-addSlave2,sg-addSlave3,sg-addSlave4]')

        result = copy.deepcopy(DEFAULT_RESULT)
        instances = result['Instances']
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1525" endline="1540" pcid="7872">
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                  CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY_WITH_TARGETED_ODCR
                              },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_only(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY)
        result = \
            {
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1296" endline="1310" pcid="7758">
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_COMPLEX_CONFIG_FROM_JSON
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': [],
                'JobFlowRole': 'EMR_EC2_DefaultRole',
                'ServiceRole': 'EMR_DefaultRole'
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_both_fleet_group_specified(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --instance-groups ' + CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_ARG)
        expected_error_msg = (
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1341" endline="1355" pcid="7761">
        cmd = (self.prefix + '--release-label emr-4.7.2 --security-configuration MySecurityConfig' +
               ' --kerberos-attributes ' + DEFAULT_KERBEROS_ATTRIBUTES_ARGS +
               ' --instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'KerberosAttributes': KERBEROS_ATTRIBUTES,
                'ReleaseLabel': 'emr-4.7.2',
                'VisibleToAllUsers': True,
                'Tags': [],
                'SecurityConfiguration': 'MySecurityConfig'
            }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1378" endline="1393" pcid="7763">
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'ReleaseLabel': 'emr-4.7.2',
                'VisibleToAllUsers': True,
                'Tags': [],
                'EbsRootVolumeSize': 50,
                'SecurityConfiguration': 'MySecurityConfig'
            }
        self.assert_params_for_cmd(cmd, result)

    def test_create_cluster_with_repo_upgrade_on_boot(self):
        cmd = (self.prefix + '--release-label emr-4.7.2 --security-configuration MySecurityConfig '+
               ' --repo-upgrade-on-boot NONE' +
               ' --instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1326" endline="1340" pcid="7760">
    def test_create_cluster_with_security_config(self):
        cmd = (self.prefix + '--release-label emr-4.7.2 --security-configuration MySecurityConfig '+ 
               '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'ReleaseLabel': 'emr-4.7.2',
                'VisibleToAllUsers': True,
                'Tags': [],
                'SecurityConfiguration': 'MySecurityConfig'
            }
        self.assert_params_for_cmd(cmd, result)

    def test_create_cluster_with_security_config_and_kerberos_attributes(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1281" endline="1295" pcid="7757">
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_complex_config_from_json(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_fleets.json')
        cmd = ('emr create-cluster --use-default-roles --release-label emr-4.2.0  '
                '--instance-fleets file://' + data_path)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1311" endline="1325" pcid="7759">
            '\naws: error: You cannot specify both --instance-groups'
            ' and --instance-fleets options together.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_instance_fleets_with_both_subnetid_subnetids_specified(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --ec2-attributes SubnetId=subnetid-1,SubnetIds=[subnetid-1,subnetid-2]')
        expected_error_msg = (
            '\naws: error: You cannot specify both SubnetId'
            ' and SubnetIds options together.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1194" endline="1211" pcid="7751">
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_on_demand_master_only(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1176" endline="1193" pcid="7750">
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_multiple_instance_groups(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-groups ' +
               CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES_VOLUME_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.MULTIPLE_INSTANCE_GROUPS_WITH_EBS_VOLUMES
                              },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1489" endline="1506" pcid="7870">
                    'Market': 'ON_DEMAND',
                    'InstanceType': 'd2.xlarge'
                    },
                   {'InstanceRole': 'TASK',
                    'InstanceCount': 3,
                    'Name': 'Task Instance Group',
                    'Market': 'SPOT',
                    'BidPrice': '3.45',
                    'InstanceType': 'd2.xlarge'
                    }
           ]
           self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_on_demand_master_only(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY)
        result = \
            {
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1507" endline="1524" pcid="7871">
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY
                            },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_on_demand_master_only_with_targeted_odcr(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_ON_DEMAND_MASTER_ONLY_WITH_TARGETED_ODCR)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1356" endline="1377" pcid="7762">
    def test_create_cluster_with_custom_ami_id(self):
        cmd = (self.prefix + '--release-label emr-4.7.2 --security-configuration MySecurityConfig '+
               ' --custom-ami-id ami-9be6f38c' +
               ' --instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'ReleaseLabel': 'emr-4.7.2',
                'VisibleToAllUsers': True,
                'Tags': [],
                'CustomAmiId': 'ami-9be6f38c',
                'SecurityConfiguration': 'MySecurityConfig'
            }
        self.assert_params_for_cmd(cmd, result)

    def test_create_cluster_with_ebs_root_volume_size(self):
        cmd = (self.prefix + '--release-label emr-4.7.2 --security-configuration MySecurityConfig '+
               ' --ebs-root-volume-size 50' +
               ' --instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1412" endline="1431" pcid="7765">
                'ReleaseLabel': 'emr-5.28.0',
                'VisibleToAllUsers': True,
                'Tags': [],
                'StepConcurrencyLevel': 30,
                'SecurityConfiguration': 'MySecurityConfig'
            }
        self.assert_params_for_cmd(cmd, result)

    def test_create_cluster_with_managed_scaling_policy(self):
        cmd = (self.prefix + '--release-label emr-5.28.0 --security-configuration MySecurityConfig ' +
               '--managed-scaling-policy ComputeLimits={MinimumCapacityUnits=2,MaximumCapacityUnits=4,UnitType=Instances,MaximumCoreCapacityUnits=1} ' +
               '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': DEFAULT_INSTANCES,
                'ReleaseLabel': 'emr-5.28.0',
                'VisibleToAllUsers': True,
                'Tags': [],
                'ManagedScalingPolicy': {
</source>
</class>

<class classid="391" nclones="2" nlines="30" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="532" endline="568" pcid="7701">
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-groups '
            'InstanceGroupType=MASTER,InstanceCount=1,InstanceType=m1.large '
            'InstanceGroupType=CORE,InstanceCount=1,InstanceType=m1.large '
            'InstanceGroupType=TASK,InstanceCount=1,InstanceType=m1.large ')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_group_type_mismatch_cases(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-groups '
            'Name=MASTER,InstanceGroupType=MaSter,InstanceCount=1,'
            'InstanceType=m1.large Name=CORE,InstanceGroupType=cORE,'
            'InstanceCount=1,InstanceType=m1.large Name=TASK,'
            'InstanceGroupType=tAsK,InstanceCount=1,InstanceType=m1.large')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_type_and_count(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-type m1.large')
        expected_result = copy.deepcopy(DEFAULT_RESULT)
        expected_result['Instances'] = \
            {'KeepJobFlowAliveWhenNoSteps': True,
             'TerminationProtected': False,
             'InstanceGroups':
                [{'InstanceRole': 'MASTER',
                  'InstanceCount': 1,
                  'Name': 'MASTER',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'}]
             }
        self.assert_params_for_cmd(cmd, expected_result)
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-type m1.large --instance-count 3')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="565" endline="601" pcid="7799">
            'InstanceGroupType=TASK,InstanceCount=1,InstanceType=m1.large,CustomAmiId=ami-deadpork ')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_group_type_mismatch_cases(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-groups '
            'Name=MASTER,InstanceGroupType=MaSter,InstanceCount=1,'
            'InstanceType=m1.large,CustomAmiId=ami-deadbeef Name=CORE,InstanceGroupType=cORE,'
            'InstanceCount=1,InstanceType=m1.large,CustomAmiId=ami-deadbeef Name=TASK,'
            'InstanceGroupType=tAsK,InstanceCount=1,InstanceType=m1.large,CustomAmiId=ami-deadpork')
        self.assert_params_for_cmd(cmd, DEFAULT_RESULT)

    def test_instance_groups_instance_type_and_count(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-type m1.large')
        expected_result = copy.deepcopy(DEFAULT_RESULT)
        expected_result['Instances'] = \
            {'KeepJobFlowAliveWhenNoSteps': True,
             'TerminationProtected': False,
             'InstanceGroups':
                [{'InstanceRole': 'MASTER',
                  'InstanceCount': 1,
                  'Name': 'MASTER',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'}]
             }
        self.assert_params_for_cmd(cmd, expected_result)
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-type m1.large --instance-count 3')
        expected_result = copy.deepcopy(DEFAULT_RESULT)
        expected_result['Instances'] = \
            {'KeepJobFlowAliveWhenNoSteps': True,
             'TerminationProtected': False,
             'InstanceGroups':
</source>
</class>

<class classid="392" nclones="4" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="569" endline="588" pcid="7702">
        expected_result = copy.deepcopy(DEFAULT_RESULT)
        expected_result['Instances'] = \
            {'KeepJobFlowAliveWhenNoSteps': True,
             'TerminationProtected': False,
             'InstanceGroups':
                [{'InstanceRole': 'MASTER',
                  'InstanceCount': 1,
                  'Name': 'MASTER',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'
                  },
                 {'InstanceRole': 'CORE',
                  'InstanceCount': 2,
                  'Name': 'CORE',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'
                  }]
             }
        self.assert_params_for_cmd(cmd, expected_result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="589" endline="613" pcid="7703">
    def test_instance_groups_missing_required_parameter_error(self):
        cmd = ('emr create-cluster --use-default-roles --release-label'
               ' emr-4.0.0 ')
        expect_error_msg = (
            '\naws: error: Must specify either --instance-groups or '
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--instance-count 2')
        expect_error_msg = (
            '\naws: error: Must specify either --instance-groups or '
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_instance_groups_exclusive_parameter_validation_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label 4.0.0 '
            '--instance-type m1.large --instance-groups ' +
            DEFAULT_INSTANCE_GROUPS_ARG)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="602" endline="621" pcid="7800">
                [{'InstanceRole': 'MASTER',
                  'InstanceCount': 1,
                  'Name': 'MASTER',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'
                  },
                 {'InstanceRole': 'CORE',
                  'InstanceCount': 2,
                  'Name': 'CORE',
                  'Market': 'ON_DEMAND',
                  'InstanceType': 'm1.large'
                  }]
             }
        self.assert_params_for_cmd(cmd, expected_result)

    def test_instance_groups_missing_required_parameter_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 ')
        expect_error_msg = (
            '\naws: error: Must specify either --instance-groups or '
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="622" endline="646" pcid="7801">
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-count 2')
        expect_error_msg = (
            '\naws: error: Must specify either --instance-groups or '
            '--instance-type with --instance-count(optional) to '
            'configure instance groups.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_instance_groups_exclusive_parameter_validation_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--instance-type m1.large --instance-groups ' +
            DEFAULT_INSTANCE_GROUPS_ARG)
        expect_error_msg = (
            '\naws: error: You may not specify --instance-type '
            'or --instance-count with --instance-groups, '
            'because --instance-type and --instance-count are '
            'shortcut options for --instance-groups.\n')
</source>
</class>

<class classid="393" nclones="5" nlines="23" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="644" endline="673" pcid="7707">
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--auto-terminate '
            '--instance-groups '
            'Name=Master,InstanceGroupType=MASTER,InstanceCount=1')
        expect_error_msg = (
            '\nThe following required parameters are missing'
            ' for structure:: InstanceType\n')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceType')

    def test_instance_groups_missing_instance_count_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --release-label emr-4.0.0 '
            '--auto-terminate '
            '--instance-groups '
            'Name=Master,InstanceGroupType=MASTER,InstanceType=m1.xlarge')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceCount')

    def test_instance_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups.json')
        cmd = ('emr create-cluster --use-default-roles'
               ' --release-label emr-4.0.0  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
            [
                {'InstanceRole': 'MASTER',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="674" endline="702" pcid="7708">
                 'InstanceCount': 1,
                 'Name': 'Master Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.large'
                 },
                {'InstanceRole': 'CORE',
                 'InstanceCount': 2,
                 'Name': 'Core Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.xlarge'
                 },
                {'InstanceRole': 'TASK',
                 'InstanceCount': 3,
                 'Name': 'Task Instance Group',
                 'Market': 'SPOT',
                 'BidPrice': '3.45',
                 'InstanceType': 'm1.xlarge'
                 }
        ]
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_from_json_file_spot_bidprice_equals_ondemandprice(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups_spot_bidprice_equals_ondemandprice.json')
        cmd = ('emr create-cluster --use-default-roles'
               ' --release-label emr-4.0.0  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="706" endline="733" pcid="7806">
                {'InstanceRole': 'CORE',
                 'InstanceCount': 2,
                 'Name': 'Core Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.xlarge'
                 },
                {'InstanceRole': 'TASK',
                 'InstanceCount': 3,
                 'Name': 'Task Instance Group',
                 'Market': 'SPOT',
                 'BidPrice': '3.45',
                 'InstanceType': 'm1.xlarge'
                 }
        ]
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_from_json_file_spot_bidprice_equals_ondemandprice(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups_spot_bidprice_equals_ondemandprice.json')
        cmd = ('emr create-cluster --use-default-roles --ami-version 3.0.4  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
            [
                {'InstanceRole': 'MASTER',
                 'InstanceCount': 1,
                 'Name': 'Master Instance Group',
                 'Market': 'SPOT',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="677" endline="705" pcid="7805">
        expect_error_msg = (
            '\nThe following required parameters are missing'
            ' for structure:: InstanceType\n')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceType')

    def test_instance_groups_missing_instance_count_error(self):
        cmd = (
            'emr create-cluster --use-default-roles --ami-version 3.0.4 '
            '--auto-terminate '
            '--instance-groups '
            'Name=Master,InstanceGroupType=MASTER,InstanceType=m1.xlarge')
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'InstanceCount')

    def test_instance_groups_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_instance_groups.json')
        cmd = ('emr create-cluster --use-default-roles --ami-version 3.0.4  '
               '--instance-groups file://' + data_path)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['InstanceGroups'] = \
            [
                {'InstanceRole': 'MASTER',
                 'InstanceCount': 1,
                 'Name': 'Master Instance Group',
                 'Market': 'ON_DEMAND',
                 'InstanceType': 'm1.large'
                 },
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1386" endline="1424" pcid="7865">
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups':
                                                CONSTANTS.INSTANCE_GROUPS_WITH_EBS
                            },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_groups_with_ebs_config_missing_volume_type(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLTYPE_ARG)
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'VolumeType')

    def test_instance_groups_with_ebs_config_missing_size(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_SIZE_ARG)
        stderr = self.run_cmd(cmd, 252)[1]
        self.assert_error_message_has_field_name(stderr, 'SizeInGB')

    def test_instance_groups_with_ebs_config_missing_volume_spec(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-groups ' +
               CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLSPEC_ARG)
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceGroups': CONSTANTS.INSTANCE_GROUPS_WITH_EBS_VOLUME_MISSING_VOLSPEC
                                      },
                'AmiVersion': '3.1.0',
</source>
</class>

<class classid="394" nclones="4" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="748" endline="760" pcid="7713">
               'InstanceProfile=EMR_EC2_DefaultRole '
               '--service-role EMR_DefaultRole')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Ec2KeyName'] = 'testkey'
        result['Instances']['Ec2SubnetId'] = 'subnet-123456'
        result['JobFlowRole'] = 'EMR_EC2_DefaultRole'
        self.assert_params_for_cmd(cmd, result)

    def test_ec2_attributes_az(self):
        cmd = DEFAULT_CMD + '--ec2-attributes AvailabilityZone=us-east-1a'
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Placement'] = {'AvailabilityZone': 'us-east-1a'}
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="761" endline="774" pcid="7714">

    def test_ec2_attributes_subnet_az_error(self):
        cmd = DEFAULT_CMD + '--ec2-attributes ' + \
            'SubnetId=subnet-123456,AvailabilityZone=us-east-1a'
        expect_error_msg = (
            '\naws: error: You may not specify both a SubnetId and an Availab'
            'ilityZone (placement) because ec2SubnetId implies a placement.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_ec2_attributes_with_subnet_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_ec2_attributes_with_subnet.json')
        cmd = ('emr create-cluster --release-label emr-4.0.0 '
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="773" endline="786" pcid="7811">
            '\naws: error: You may not specify both a SubnetId and an Availab'
            'ilityZone (placement) because ec2SubnetId implies a placement.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_ec2_attributes_with_subnet_from_json_file(self):
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_ec2_attributes_with_subnet.json')
        cmd = ('emr create-cluster --ami-version 3.0.4 '
               '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG +
               ' --ec2-attributes file://' + data_path +
               ' --service-role EMR_DefaultRole')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Ec2KeyName'] = 'testkey'
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="760" endline="772" pcid="7810">
        result['JobFlowRole'] = 'EMR_EC2_DefaultRole'
        self.assert_params_for_cmd(cmd, result)

    def test_ec2_attributes_az(self):
        cmd = DEFAULT_CMD + '--ec2-attributes AvailabilityZone=us-east-1a'
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Instances']['Placement'] = {'AvailabilityZone': 'us-east-1a'}
        self.assert_params_for_cmd(cmd, result)

    def test_ec2_attributes_subnet_az_error(self):
        cmd = DEFAULT_CMD + '--ec2-attributes ' + \
            'SubnetId=subnet-123456,AvailabilityZone=us-east-1a'
        expect_error_msg = (
</source>
</class>

<class classid="395" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="810" endline="825" pcid="7719">

        self.assert_params_for_cmd(cmd, result)

    def test_bootstrap_actions_exceed_maximum_error(self):
        cmd = DEFAULT_CMD + ' --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 18):
            cmd += ba_cmd

        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)

        self.assertEquals(expected_error_msg, result[1])

    def test_bootstrap_actions_exceed_maximum_with_applications_error(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="822" endline="837" pcid="7816">
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 18):
            cmd += ba_cmd

        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)

        self.assertEquals(expected_error_msg, result[1])

    def test_bootstrap_actions_exceed_maximum_with_applications_error(self):
        cmd = DEFAULT_CMD + ' --applications Name=GANGLIA Name=HBASE' +\
            ' Name=IMPALA,Args=arg1,arg2 --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 15):
            cmd += ba_cmd
</source>
</class>

<class classid="396" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="826" endline="845" pcid="7720">
        cmd = DEFAULT_CMD + ' --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 20):
            cmd += ba_cmd
        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_boostrap_actions_with_default_fields(self):
        cmd = DEFAULT_CMD + (
            ' --bootstrap-actions Path=s3://test/ba1 Path=s3://test/ba2')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['BootstrapActions'] = \
            [
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba1'}
                 },
                {'Name': 'Bootstrap action',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="838" endline="857" pcid="7817">
        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_boostrap_actions_with_default_fields(self):
        cmd = DEFAULT_CMD + (
            ' --bootstrap-actions Path=s3://test/ba1 Path=s3://test/ba2')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['BootstrapActions'] = \
            [
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba1'}
                 },
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba2'}
                 }
        ]
</source>
</class>

<class classid="397" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="865" endline="883" pcid="7724">
                 "ScriptBootstrapAction":
                    {"Path": "s3://mybucket/test2",
                     "Args": ["arg1", "arg2"]}
                 }
        ]
        self.assert_params_for_cmd(cmd, result)

    # Steps test cases
    def test_wrong_step_type_error(self):
        cmd = DEFAULT_CMD + '--steps Type=unknown'
        expected_error_msg = (
            '\naws: error: The step type unknown is not supported.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_default_step_type_name_action_on_failure(self):
        cmd = DEFAULT_CMD + '--steps Jar=s3://mybucket/mytest.jar'
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = [CUSTOM_JAR_STEP]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="990" endline="1008" pcid="7834">
             'IMPALA_BACKEND_PORT=22001,IMPALA_MEM_LIMIT=70%']
        ba_list = [INSTALL_GANGLIA_BA, INSTALL_HBASE_BA,
                   impala_ba]
        step_list = [INSTALL_HIVE_STEP, INSTALL_PIG_STEP, INSTALL_HBASE_STEP]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = step_list
        result['BootstrapActions'] = ba_list
        result['NewSupportedProducts'] = [INSTALL_MAPR_PRODUCT]
        self.assert_params_for_cmd(cmd, result)

    # Steps test cases
    def test_wrong_step_type_error(self):
        cmd = DEFAULT_CMD + '--steps Type=unknown'
        expected_error_msg = (
            '\naws: error: The step type unknown is not supported.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_default_step_type_name_action_on_failure(self):
</source>
</class>

<class classid="398" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="900" endline="912" pcid="7727">
            {'Name': 'Custom',
             'ActionOnFailure': 'TERMINATE_CLUSTER',
             'HadoopJarStep':
                {'Jar': 's3://mybucket/mytest.jar',
                 'Args': ['arg1', 'arg2'],
                 'MainClass': 'mymainclass'}
             }
        ]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = expected_steps
        self.assert_params_for_cmd(cmd, result)

    def test_streaming_step_with_default_fields(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1025" endline="1037" pcid="7837">
            'Args=arg1,arg2,MainClass=mymainclass,'
            'ActionOnFailure=TERMINATE_CLUSTER')
        expected_steps = [
            {'Name': 'Custom',
             'ActionOnFailure': 'TERMINATE_CLUSTER',
             'HadoopJarStep':
                {'Jar': 's3://mybucket/mytest.jar',
                 'Args': ['arg1', 'arg2'],
                 'MainClass': 'mymainclass'}
             }
        ]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = expected_steps
</source>
</class>

<class classid="399" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="952" endline="962" pcid="7733">
        expect_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for HiveStepConfig: Args.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_hive_step_with_all_fields(self):
        test_step_config = (
            'Type=Hive,ActionOnFailure=CANCEL_AND_WAIT,'
            'Name=HiveBasicStep,' + HIVE_BASIC_ARGS)
        cmd = DEFAULT_CMD + (
            '--applications Name=Hive --steps ' + test_step_config)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1075" endline="1085" pcid="7843">
        self.assert_params_for_cmd(cmd, result)

    def test_hive_step_missing_args(self):
        cmd = DEFAULT_CMD + '--applications Name=Hive --steps Type=Hive'
        expect_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for HiveStepConfig: Args.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_hive_step_with_all_fields(self):
        test_step_config = (
</source>
</class>

<class classid="400" nclones="4" nlines="11" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="971" endline="990" pcid="7735">
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = [PIG_DEFAULT_STEP]
        result['Applications'] = [{'Name': 'Pig'}]
        self.assert_params_for_cmd(cmd, result)

    def test_pig_missing_args(self):
        cmd = DEFAULT_CMD + '--applications Name=Pig --steps Type=Pig'
        expect_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for PigStepConfig: Args.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_pig_step_with_all_fields(self):
        test_step_config = (
            'Name=PigBasicStep,Type=Pig,' + PIG_BASIC_ARGS +
            ',ActionOnFailure=CANCEL_AND_WAIT')
        cmd = DEFAULT_CMD + (
            '--applications Name=Pig --steps ' + test_step_config)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Applications'] = [{'Name': 'Pig'}]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1018" endline="1033" pcid="7738">
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_emr_managed_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes EmrManagedMasterSecurityGroup=sg-master1,'
            'EmrManagedSlaveSecurityGroup=sg-slave1,'
            'ServiceAccessSecurityGroup=sg-service-access')

        result = copy.deepcopy(DEFAULT_RESULT)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1212" endline="1231" pcid="7852">
            'Type=PIG,Args=-f,s3://test/pig3 ' +\
            ' Jar=s3://test/customJar2.jar ' +\
            ' --applications Name=Hive'

        expected_error_msg1 = (
            '\naws: error: Some of the steps require the following'
            ' applications to be installed: Impala, Pig. '
            'Please install the applications using --applications.\n')
        expected_error_msg2 = (
            '\naws: error: Some of the steps require the following'
            ' applications to be installed: Pig, Impala. '
            'Please install the applications using --applications.\n')
        result = self.run_cmd(cmd, 252)

        if(result[1] == expected_error_msg1 or
           result[1] == expected_error_msg2):
            self.assertTrue(True)
        else:
            self.assertTrue(False)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1259" endline="1274" pcid="7855">
    @patch('awscli.customizations.emr.emrutils.call')
    def test_constructed_result(self, call_patch):
        call_patch.return_value = CREATE_CLUSTER_RESULT
        cmd = DEFAULT_CMD
        result = self.run_cmd(cmd, expected_rc=0)
        result_json = json.loads(result[0])
        self.assertEquals(result_json, CONSTRUCTED_RESULT)

    def test_all_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes EmrManagedMasterSecurityGroup=sg-master1,'
            'EmrManagedSlaveSecurityGroup=sg-slave1,'
            'ServiceAccessSecurityGroup=sg-service-access,'
            'AdditionalMasterSecurityGroups='
            '[sg-addMaster1,sg-addMaster2,sg-addMaster3,'
            'sg-addMaster4],AdditionalSlaveSecurityGroups=[sg-addSlave1,'
</source>
</class>

<class classid="401" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1228" endline="1247" pcid="7753">
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_specific_azs(self):
        cmd = (self.prefix + '--release-label emr-4.2.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --ec2-attributes AvailabilityZones=[us-east-1a,us-east-1b]')
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY,
                              'Placement': {'AvailabilityZones': ['us-east-1a','us-east-1b']}
                            },
                'ReleaseLabel': 'emr-4.2.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1557" endline="1576" pcid="7874">
            {
                'Name': DEFAULT_CLUSTER_NAME,
                'Instances': {'KeepJobFlowAliveWhenNoSteps': True,
                              'TerminationProtected': False,
                              'InstanceFleets':
                                                CONSTANTS_FLEET.RES_INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY_WITH_EBS_CONF
                            },
                'AmiVersion': '3.1.0',
                'VisibleToAllUsers': True,
                'Tags': []
            }
        self.assert_params_for_cmd(cmd, result)

    def test_instance_fleets_with_spot_master_specific_azs(self):
        cmd = (self.prefix + '--ami-version 3.1.0 --instance-fleets ' +
               CONSTANTS_FLEET.INSTANCE_FLEETS_WITH_SPOT_MASTER_ONLY +
               ' --ec2-attributes AvailabilityZones=[us-east-1a,us-east-1b]')
        result = \
            {
                'Name': DEFAULT_CLUSTER_NAME,
</source>
</class>

<class classid="402" nclones="2" nlines="12" similarity="91">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1166" endline="1184" pcid="7849">
                        's3://mybucket/test',
                        '--backup-version',
                        'test_version'],
                    'Jar': '/home/hadoop/lib/hbase.jar'}
            }
        ]
        self.assert_params_for_cmd(cmd, result)
        data_path = os.path.join(
            os.path.dirname(__file__), 'input_hbase_restore_from_backup.json')
        cmd = DEFAULT_CMD + (
            '--applications Name=hbase --restore-from-hbase-backup '
            'file://' + data_path)
        self.assert_params_for_cmd(cmd, result)

    def test_empty_step_args(self):
        cmd = DEFAULT_CMD + '--steps Type=Streaming,Args= '
        expect_error_msg = ('\naws: error: The prameter Args cannot '
                            'be an empty list.\n')
        result = self.run_cmd(cmd, 252)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1185" endline="1203" pcid="7850">
        self.assertEquals(expect_error_msg, result[1])

        cmd = DEFAULT_CMD + '--steps Type=Pig,Args= '
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

        cmd = DEFAULT_CMD + '--steps Type=Hive,Args= '
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

        cmd = DEFAULT_CMD + '--steps Args= '
        expect_error_msg = ('\naws: error: The following required parameters '
                            'are missing for CustomJARStepConfig: Jar.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expect_error_msg, result[1])

    def test_missing_applications_for_steps(self):
        cmd = DEFAULT_CMD +\
            '--steps Jar=s3://test/customJar.jar ' +\
</source>
</class>

<class classid="403" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_modify_cluster_attributes.py" startline="62" endline="74" pcid="7911">
        result = self.run_cmd(cmdline, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_termination_protected_and_visible_to_all(self):
        args = ' --cluster-id j-ABC123456 --termination-protected'\
               ' --visible-to-all-users'
        cmdline = self.prefix + args
        result_set_termination_protection = {
            'JobFlowIds': ['j-ABC123456'], 'TerminationProtected': True}
        result_set_visible_to_all_users = {
            'JobFlowIds': ['j-ABC123456'], 'VisibleToAllUsers': True}
        self.run_cmd(cmdline)
        self.assertDictEqual(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_modify_cluster_attributes.py" startline="75" endline="87" pcid="7912">
            self.operations_called[0][1], result_set_visible_to_all_users)
        self.assertDictEqual(
            self.operations_called[1][1], result_set_termination_protection)

    def test_termination_protected_and_no_visible_to_all(self):
        args = ' --cluster-id j-ABC123456 --termination-protected'\
               ' --no-visible-to-all-users'
        cmdline = self.prefix + args
        result_set_termination_protection = {
            'JobFlowIds': ['j-ABC123456'], 'TerminationProtected': True}
        result_set_visible_to_all_users = {
            'JobFlowIds': ['j-ABC123456'], 'VisibleToAllUsers': False}
        self.run_cmd(cmdline)
</source>
</class>

<class classid="404" nclones="9" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="159" endline="174" pcid="7952">
             'k2=v2'
             ]
        }

    SPARK_SUBMIT_COMMAND_RUNNER_STEP = \
        {
            'Jar': 'command-runner.jar',
            'Args':
            ['spark-submit',
             '--deploy-mode',
             'cluster',
             '--conf',
             'k1=v1',
             's3://mybucket/myfolder/app.jar',
             'k2=v2'
             ]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="387" endline="402" pcid="7968">
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)

    def test_impala_step_with_default_fields(self):
        test_step_config = 'Type=Impala,' + \
            self.IMPALA_BASIC_ARGS
        cmd = self.prefix + test_step_config
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps':    [
                {'Name': 'Impala program',
                 'ActionOnFailure': 'CONTINUE',
                 'HadoopJarStep': self.IMPALA_BASIC_SCRIPT_RUNNER_STEP
                 }]
        }
        self.assert_params_for_cmd(cmd, expected_result)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="324" endline="342" pcid="7963">
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps': [
                {'Name': 'HiveWithAllFields',
                 'ActionOnFailure': 'CANCEL_AND_WAIT',
                 'HadoopJarStep': self.HIVE_DEFAULT_SCRIPT_RUNNER_STEP
                 }]
        }
        expected_result_release = copy.deepcopy(expected_result)
        expected_result_release['Steps'][0]['HadoopJarStep'] = \
            self.HIVE_DEFAULT_COMMAND_RUNNER_STEP

        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)

    def test_pig_step_with_default_fields(self):
        cmd = self.prefix + 'Type=Pig,' + self.PIG_BASIC_ARGS
        expected_result = {
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="356" endline="372" pcid="7965">
            expected_result_release=expected_result_release)

    def test_pig_missing_args(self):
        cmd = self.prefix + 'Type=Pig'
        expected_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for PigStepConfig: Args.\n'
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

    def test_pig_step_with_all_fields(self):
        test_step_config = \
            'Name=PigWithAllFields,' + \
            'Type=Pig,' + \
            self.PIG_BASIC_ARGS + ',' + \
            'ActionOnFailure=CANCEL_AND_WAIT'
        cmd = self.prefix + test_step_config
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="212" endline="229" pcid="7955">
            'Jar=s3://mybucket/mytest.jar,'
            'Args=arg1,arg2,MainClass=mymainclass,'
            'ActionOnFailure=TERMINATE_CLUSTER,'
            'Properties=k1=v1\,k2=v2\,k3')
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps': [
                {'Name': 'Custom',
                 'ActionOnFailure': 'TERMINATE_CLUSTER',
                 'HadoopJarStep':
                    {'Jar': 's3://mybucket/mytest.jar',
                     'Args': ['arg1', 'arg2'],
                     'MainClass': 'mymainclass',
                     'Properties':
                        [{'Key': 'k1', 'Value': 'v1'},
                         {'Key': 'k2', 'Value': 'v2'},
                         {'Key': 'k3', 'Value': ''}
                         ]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="257" endline="273" pcid="7958">

    def test_streaming_step_missing_args(self):
        cmd = self.prefix + 'Type=Streaming'
        expected_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for StreamingStepConfig: Args.\n'
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

    def test_streaming_jar_with_all_fields(self):
        test_step_config = 'Type=Streaming,' + \
            'Name=StreamingStepAllFields,' + \
            'ActionOnFailure=CANCEL_AND_WAIT,' + \
            self.STREAMING_ARGS
        cmd = self.prefix + test_step_config
        expected_result = {
            'JobFlowId': 'j-ABC',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="300" endline="316" pcid="7961">
        expected_result_release = copy.deepcopy(expected_result)
        expected_result_release['Steps'][0]['HadoopJarStep'] = \
            self.HIVE_DEFAULT_COMMAND_RUNNER_STEP

        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)

    def test_hive_step_missing_args(self):
        cmd = self.prefix + 'Type=Hive'
        expected_error_msg = '\naws: error: The following ' + \
            'required parameters are missing for HiveStepConfig: Args.\n'

        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="237" endline="256" pcid="7957">
            expected_result_release=expected_result)

    def test_streaming_step_with_default_fields(self):
        cmd = self.prefix + 'Type=Streaming,' + self.STREAMING_ARGS
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps': [
                {'Name': 'Streaming program',
                 'ActionOnFailure': 'CONTINUE',
                 'HadoopJarStep': self.STREAMING_HADOOP_SCRIPT_RUNNER_STEP
                 }
            ]
        }
        expected_result_release = copy.deepcopy(expected_result)
        expected_result_release['Steps'][0]['HadoopJarStep'] = \
            self.STREAMING_HADOOP_COMMAND_RUNNER_STEP

        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="282" endline="299" pcid="7960">
        expected_result_release = copy.deepcopy(expected_result)
        expected_result_release['Steps'][0]['HadoopJarStep'] = \
            self.STREAMING_HADOOP_COMMAND_RUNNER_STEP

        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=expected_result_release)

    def test_hive_step_with_default_fields(self):
        cmd = self.prefix + 'Type=Hive,' + self.HIVE_BASIC_ARGS
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps':    [
                {'Name': 'Hive program',
                 'ActionOnFailure': 'CONTINUE',
                 'HadoopJarStep': self.HIVE_DEFAULT_SCRIPT_RUNNER_STEP
                 }]
            }
</source>
</class>

<class classid="405" nclones="2" nlines="23" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="437" endline="469" pcid="7971">
            expected_result_release=None)

    def test_impala_step_with_all_fields(self):
        test_step_config = \
            'Name=ImpalaWithAllFields,' + \
            'Type=Impala,' + \
            self.IMPALA_BASIC_ARGS + ',' + \
            'ActionOnFailure=CANCEL_AND_WAIT'
        cmd = self.prefix + test_step_config
        expected_result = {
            'JobFlowId': 'j-ABC',
            'Steps': [
                {'Name': 'ImpalaWithAllFields',
                 'ActionOnFailure': 'CANCEL_AND_WAIT',
                 'HadoopJarStep': self.IMPALA_BASIC_SCRIPT_RUNNER_STEP
                 }
            ]
        }
        self.assert_params_for_ami_and_release_based_clusters(
            cmd=cmd, expected_result=expected_result,
            expected_result_release=None)

    def test_impala_step_with_release(self):
        test_step_config = 'Type=Impala,' + self.IMPALA_BASIC_ARGS
        cmd = self.prefix + test_step_config
        expected_result_release = '\naws: error: The step type impala ' + \
            'is not supported.\n'

        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=None,
            expected_result_release=expected_result_release)

    def test_empty_step_args(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_add_steps.py" startline="470" endline="499" pcid="7972">
        cmd = self.prefix + 'Type=Streaming,Args='
        expected_error_msg = ('\naws: error: The prameter Args cannot '
                              'be an empty list.\n')
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

        cmd = self.prefix + 'Type=Pig,Args='
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

        cmd = self.prefix + 'Type=Hive,Args='
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

        cmd = self.prefix + 'Args='
        expected_error_msg = ('\naws: error: The following required parameters'
                              ' are missing for CustomJARStepConfig: Jar.\n')
        self.assert_error_for_ami_and_release_based_clusters(
            cmd=cmd, expected_error_msg=expected_error_msg,
            expected_result_release=expected_error_msg)

    def test_all_step_types(self):
        test_step_config = 'Jar=s3://mybucket/mytest.jar ' + \
            ' Type=Streaming,' + self.STREAMING_ARGS + \
            ' Type=Hive,' + self.HIVE_BASIC_ARGS + \
            ' Type=Pig,' + self.PIG_BASIC_ARGS + \
            ' Type=Impala,' + self.IMPALA_BASIC_ARGS
</source>
</class>

<class classid="406" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_list.py" startline="67" endline="79" pcid="7999">
    def test_can_emit_single_row(self):
        self._format_records([
            {
                'id_a': 'foo',
                'timestamp': self.timestamp,
                'args': '["s3", "ls"]',
                'rc': 0
            }
        ])
        expected_output = 'foo       %s s3 ls     0\n' % self.formatted_time
        actual_output = ensure_text_type(self.output_stream.getvalue())
        self.assertEqual(expected_output, actual_output)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_list.py" startline="101" endline="117" pcid="8001">
    def test_can_truncate_args(self):
        # Truncate the argument if it won't fit in the space alotted to the
        # arguments field.
        self._format_records([
            {
                'id_a': 'foo',
                'timestamp': self.timestamp,
                'args': ('["s3", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
                         'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]'),
                'rc': 0
            }
        ])
        expected_output = 'foo       %s s3 aaa... 0\n' % self.formatted_time
        actual_output = ensure_text_type(self.output_stream.getvalue())
        self.assertEqual(expected_output, actual_output)


</source>
</class>

<class classid="407" nclones="21" nlines="14" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="104" endline="118" pcid="8018">
    def test_display_cli_version(self):
        self.assert_output(
            for_event={
                'event_type': 'CLI_VERSION',
                'id': 'my-id',
                'payload': 'aws-cli/1.11.188',
                'timestamp': 86400000,
                'request_id': None
            },
            contains=[
                'AWS CLI command entered',
                'with AWS CLI version: aws-cli/1.11.188'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="119" endline="134" pcid="8019">
    def test_can_use_color(self):
        self.formatter = DetailedFormatter(self.output, colorize=True)
        self.assert_output(
            for_event={
                'event_type': 'CLI_VERSION',
                'id': 'my-id',
                'payload': 'aws-cli/1.11.188',
                'timestamp': 86400000,
                'request_id': None
            },
            contains=[
                '\x1b[1mAWS CLI command entered',
                '\x1b[36mwith AWS CLI version:'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="540" endline="554" pcid="8039">
    def test_display_parsed_response(self):
        self.assert_output(
            for_event={
                'event_type': 'PARSED_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {},
                'timestamp': 86400000,
            },
            contains=[
                '[0] HTTP response parsed',
                'parsed to: {}'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="135" endline="148" pcid="8020">
    def test_display_cli_arguments(self):
        self.assert_output(
            for_event={
                'event_type': 'CLI_ARGUMENTS',
                'id': 'my-id',
                'payload': ['ec2', 'describe-regions'],
                'timestamp': 86400000,
                'request_id': None
            },
            contains=[
                 "with arguments: ['ec2', 'describe-regions']"
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="444" endline="461" pcid="8034">
    def test_display_http_response_with_no_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'status_code': 200,
                    'headers': {},
                    'body': None
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: There is no associated body'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="555" endline="569" pcid="8040">
    def test_display_cli_rc(self):
        self.assert_output(
            for_event={
                'event_type': 'CLI_RC',
                'id': 'my-id',
                'payload': 0,
                'timestamp': 86400000,
                'request_id': None
            },
            contains=[
                'AWS CLI command exited',
                'with return code: 0'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="347" endline="367" pcid="8030">
    def test_display_http_request_with_json_struct_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': '{"foo": "bar"}'
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: {\n'
                '    "foo": "bar"\n'
                '}'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="286" endline="304" pcid="8027">
    def test_display_http_request_with_empty_string_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': ''
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: There is no associated body'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="267" endline="285" pcid="8026">
    def test_display_http_request_with_no_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': None
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: There is no associated body'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="462" endline="479" pcid="8035">
    def test_display_http_response_with_empty_string_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'status_code': 200,
                    'headers': {},
                    'body': ''
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: There is no associated body'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="425" endline="443" pcid="8033">
    def test_display_http_response_with_streaming_body(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'status_code': 200,
                    'headers': {},
                    'body': 'This should not be printed out',
                    'streaming': True
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: The body is a stream and will not be displayed'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="305" endline="324" pcid="8028">
    def test_display_http_request_with_xml_payload(self):
        xml_body = '<?xml version="1.0" ?><foo><bar>text</bar></foo>'
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': xml_body
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: ' + self.get_pretty_xml(xml_body)
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="480" endline="498" pcid="8036">
    def test_display_http_response_with_xml_payload(self):
        xml_body = '<?xml version="1.0" ?><foo><bar>text</bar></foo>'
        self.assert_output(
            for_event={
                'event_type': 'HTTP_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'status_code': 200,
                    'headers': {},
                    'body': xml_body
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: ' + self.get_pretty_xml(xml_body)
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="499" endline="519" pcid="8037">
    def test_display_http_response_with_xml_payload_and_whitespace(self):
        xml_body = '<?xml version="1.0" ?><foo><bar>text</bar></foo>'
        self.assert_output(
            for_event={
                'event_type': 'HTTP_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'status_code': 200,
                    'headers': {},
                    'body': self.get_pretty_xml(xml_body)
                },
                'timestamp': 86400000,
            },
            # The XML should not be prettified more than once if the body
            # of the response was already prettied.
            contains=[
                'with body: ' + self.get_pretty_xml(xml_body)
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="520" endline="539" pcid="8038">
    def test_display_http_response_with_json_struct_payload(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'status_code': 200,
                    'headers': {},
                    'body': '{"foo": "bar"}'
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: {\n',
                '    "foo": "bar"\n',
                '}',
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="247" endline="266" pcid="8025">
    def test_display_http_request_with_streaming_body(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': 'This should not be printed out',
                    'streaming': True
                },
                'timestamp': 86400000,
            },
            contains=[
                'with body: The body is a stream and will not be displayed',
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="223" endline="246" pcid="8024">
    def test_display_http_request_filter_signature(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {
                        'Authorization': (
                            'Signature=d7fa4de082b598a0ac08b756db438c630a6'
                            'cc79c4f3d1636cf69fac0e7c1abcd'
                        )
                    },
                    'body': 'This is my body'
                },
                'timestamp': 86400000,
            },
            contains=[
                '"Authorization": "Signature=d7fa..."'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="201" endline="222" pcid="8023">
    def test_display_http_request(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': 'This is my body'
                },
                'timestamp': 86400000,
            },
            contains=[
                'to URL: https://myservice.us-west-2.amazonaws.com\n',
                'with method: GET\n',
                'with headers: {}\n',
                'with body: This is my body\n'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="149" endline="168" pcid="8021">
    def test_display_api_call(self):
        self.assert_output(
            for_event={
                'event_type': 'API_CALL',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'service': 'ec2',
                    'operation': 'DescribeRegions',
                    'params': {}
                },
                'timestamp': 86400000,
            },
            contains=[
                'to service: ec2\n',
                'using operation: DescribeRegions\n',
                'with parameters: {}\n'
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="325" endline="346" pcid="8029">
    def test_display_http_request_with_xml_payload_and_whitespace(self):
        xml_body = '<?xml version="1.0" ?><foo><bar>text</bar></foo>'
        self.assert_output(
            for_event={
                'event_type': 'HTTP_REQUEST',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'method': 'GET',
                    'url': 'https://myservice.us-west-2.amazonaws.com',
                    'headers': {},
                    'body': self.get_pretty_xml(xml_body)
                },
                'timestamp': 86400000,
            },
            # The XML should not be prettified more than once if the body
            # of the request was already prettied.
            contains=[
                'with body: ' + self.get_pretty_xml(xml_body)
            ]
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="403" endline="424" pcid="8032">
    def test_display_http_response(self):
        self.assert_output(
            for_event={
                'event_type': 'HTTP_RESPONSE',
                'id': 'my-id',
                'request_id': 'some-id',
                'payload': {
                    'status_code': 200,
                    'headers': {},
                    'body': 'This is my body'
                },
                'timestamp': 86400000,
            },
            contains=[
                '[0] HTTP response received',
                'with status code: 200\n',
                'with headers: {}\n',
                'with body: This is my body\n'

            ]
        )

</source>
</class>

<class classid="408" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="680" endline="692" pcid="8051">

    def test_uses_include(self):
        self.parsed_args.command_id = 'latest'
        self.parsed_args.include = ['API_CALL']
        self.parsed_args.exclude = None
        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)

        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=['API_CALL'], exclude=None,
                output=self.output_stream)
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="693" endline="705" pcid="8052">

    def test_uses_exclude(self):
        self.parsed_args.command_id = 'latest'
        self.parsed_args.include = None
        self.parsed_args.exclude = ['CLI_RC']
        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)

        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=['CLI_RC'],
                output=self.output_stream)
        )
</source>
</class>

<class classid="409" nclones="5" nlines="12" similarity="83">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="714" endline="729" pcid="8054">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_detailed_formatter_is_a_tty(self, mock_is_a_tty):
        mock_is_a_tty.return_value = True
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=True
            )
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="766" endline="785" pcid="8057">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_force_color(self, mock_is_a_tty):
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.parsed_globals.color = 'on'
        # Even with settings that would typically turn off color, it
        # should be turned on because it was explicitly turned on
        mock_is_a_tty.return_value = False

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=True
            )
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="788" endline="806" pcid="8058">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_disable_color(self, mock_is_a_tty):
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.parsed_globals.color = 'off'
        # Even with settings that would typically enable color, it
        # should be turned off because it was explicitly turned off
        mock_is_a_tty.return_value = True

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=False
            )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="732" endline="747" pcid="8055">
    @mock.patch('awscli.customizations.history.commands.is_a_tty')
    def test_detailed_formatter_not_a_tty(self, mock_is_a_tty):
        mock_is_a_tty.return_value = False
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=False
            )
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_show.py" startline="749" endline="763" pcid="8056">
    @mock.patch('awscli.customizations.history.commands.is_windows', True)
    def test_detailed_formatter_no_color_for_windows(self):
        self.formatter = mock.Mock(DetailedFormatter)
        self.add_formatter('detailed', self.formatter)
        self.parsed_args.format = 'detailed'
        self.parsed_args.command_id = 'latest'

        self.show_cmd._run_main(self.parsed_args, self.parsed_globals)
        self.assertEqual(
            self.formatter.call_args,
            mock.call(
                include=None, exclude=None,
                output=self.output_stream, colorize=False
            )
        )
</source>
</class>

<class classid="410" nclones="6" nlines="15" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="93" endline="108" pcid="8067">
    def test_emit_does_write_cli_rc_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        handler.emit('CLI_RC', 0, 'CLI')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'event_type': 'CLI_RC',
                    'payload': 0,
                    'source': 'CLI',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertIsInstance(call['timestamp'], numbers.Number)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="109" endline="124" pcid="8068">
    def test_emit_does_write_cli_version_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        handler.emit('CLI_VERSION', 'Version Info', 'CLI')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'event_type': 'CLI_VERSION',
                    'payload': 'Version Info',
                    'source': 'CLI',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertIsInstance(call['timestamp'], numbers.Number)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="164" endline="184" pcid="8071">
    def test_emit_does_write_http_response_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        payload = {'body': b'data'}
        # In order for an http_response to have a request_id it must have been
        # preceeded by an api_call record.
        handler.emit('API_CALL', '', 'BOTOCORE')
        handler.emit('HTTP_RESPONSE', payload, 'BOTOCORE')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'request_id': mock.ANY,
                    'event_type': 'HTTP_RESPONSE',
                    'payload': payload,
                    'source': 'BOTOCORE',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertTrue(self.UUID_PATTERN.match(call['request_id']))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="143" endline="163" pcid="8070">
    def test_emit_does_write_http_request_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        payload = {'body': b'data'}
        # In order for an http_request to have a request_id it must have been
        # preceeded by an api_call record.
        handler.emit('API_CALL', '', 'BOTOCORE')
        handler.emit('HTTP_REQUEST', payload, 'BOTOCORE')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'request_id': mock.ANY,
                    'event_type': 'HTTP_REQUEST',
                    'payload': payload,
                    'source': 'BOTOCORE',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertTrue(self.UUID_PATTERN.match(call['request_id']))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="185" endline="206" pcid="8072">
    def test_emit_does_write_parsed_response_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        payload = {'metadata': {'data': 'foobar'}}
        # In order for an http_response to have a request_id it must have been
        # preceeded by an api_call record.
        handler.emit('API_CALL', '', 'BOTOCORE')
        handler.emit('PARSED_RESPONSE', payload, 'BOTOCORE')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'request_id': mock.ANY,
                    'event_type': 'PARSED_RESPONSE',
                    'payload': payload,
                    'source': 'BOTOCORE',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertTrue(self.UUID_PATTERN.match(call['request_id']))


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="125" endline="142" pcid="8069">
    def test_emit_does_write_api_call_record(self):
        writer = mock.Mock(DatabaseRecordWriter)
        record_builder = RecordBuilder()
        handler = DatabaseHistoryHandler(writer, record_builder)
        payload = {'foo': 'bar'}
        handler.emit('API_CALL', payload, 'BOTOCORE')
        call = writer.write_record.call_args[0][0]
        self.assertEqual(call, {
                    'command_id': mock.ANY,
                    'request_id': mock.ANY,
                    'event_type': 'API_CALL',
                    'payload': payload,
                    'source': 'BOTOCORE',
                    'timestamp': mock.ANY
        })
        self.assertTrue(self.UUID_PATTERN.match(call['command_id']))
        self.assertTrue(self.UUID_PATTERN.match(call['request_id']))

</source>
</class>

<class classid="411" nclones="5" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="241" endline="257" pcid="8078">
    def test_can_write_record(self):
        self.writer.write_record({
            'command_id': 'command',
            'event_type': 'FOO',
            'payload': 'bar',
            'source': 'TEST',
            'timestamp': 1234
        })

        # Now that we have verified the order of the fields in the insert
        # statement we can verify that the record values are in the correct
        # order in the tuple.
        # (command_id, request_id, source, event_type, timestamp, payload)
        written_record = self._read_last_record()
        self.assertEqual(written_record,
                         ('command', None, 'TEST', 'FOO', 1234, '"bar"'))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="378" endline="392" pcid="8085">
    def test_can_write_parsed_response_record(self):
        self.writer.write_record({
            'command_id': 'command',
            'event_type': 'PARSED_RESPONSE',
            'payload': {},
            'source': 'TEST',
            'timestamp': 1234
        })

        written_record = self._read_last_record()
        self.assertEqual(
            written_record,
            ('command', None, 'TEST', 'PARSED_RESPONSE', 1234, '{}')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="290" endline="304" pcid="8081">
    def test_can_write_cli_arguments_record(self):
        self.writer.write_record({
            'command_id': 'command',
            'event_type': 'CLI_ARGUMENTS',
            'payload': ['s3', 'ls'],
            'source': 'TEST',
            'timestamp': 1234
        })

        written_record = self._read_last_record()
        self.assertEqual(
            written_record,
            ('command', None, 'TEST', 'CLI_ARGUMENTS', 1234, '["s3", "ls"]')
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="393" endline="408" pcid="8086">
    def test_can_write_cli_rc_record(self):
        self.writer.write_record({
            'command_id': 'command',
            'event_type': 'CLI_RC',
            'payload': 0,
            'source': 'TEST',
            'timestamp': 1234
        })

        written_record = self._read_last_record()
        self.assertEqual(
            written_record,
            ('command', None, 'TEST', 'CLI_RC', 1234, '0')
        )


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="273" endline="289" pcid="8080">
    def test_can_write_cli_version_record(self):
        self.writer.write_record({
            'command_id': 'command',
            'event_type': 'CLI_VERSION',
            'payload': ('aws-cli/1.11.184 Python/3.6.2 Darwin/15.6.0 '
                        'botocore/1.7.42'),
            'source': 'TEST',
            'timestamp': 1234
        })
        written_record = self._read_last_record()

        self.assertEqual(
            written_record,
            ('command', None, 'TEST', 'CLI_VERSION', 1234,
             '"aws-cli/1.11.184 Python/3.6.2 Darwin/15.6.0 botocore/1.7.42"')
        )

</source>
</class>

<class classid="412" nclones="2" nlines="19" similarity="89">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="305" endline="327" pcid="8082">
    def test_can_write_api_call_record(self):
        self.writer.write_record({
            'command_id': 'command',
            'event_type': 'API_CALL',
            'payload': {
                'service': 's3',
                'operation': 'ListBuckets',
                'params': {},
            },
            'source': 'TEST',
            'timestamp': 1234
        })

        written_record = self._read_last_record()
        self.assertEqual(
            written_record,
            ('command', None, 'TEST', 'API_CALL', 1234, json.dumps({
                'service': 's3',
                'operation': 'ListBuckets',
                'params': {},
            }))
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/history/test_db.py" startline="328" endline="350" pcid="8083">
    def test_can_write_http_request_record(self):
        self.writer.write_record({
            'command_id': 'command',
            'event_type': 'HTTP_REQUEST',
            'payload': {
                'method': 'GET',
                'headers': CaseInsensitiveDict({}),
                'body': '...',
            },
            'source': 'TEST',
            'timestamp': 1234
        })

        written_record = self._read_last_record()
        self.assertEqual(
            written_record,
            ('command', None, 'TEST', 'HTTP_REQUEST', 1234, json.dumps({
                'method': 'GET',
                'headers': {},
                'body': '...',
            }))
        )

</source>
</class>

<class classid="413" nclones="3" nlines="12" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/eks/test_update_kubeconfig.py" startline="91" endline="104" pcid="8139">
    def test_choose_env_only(self):
        paths = [
            get_testdata("valid_simple"),
            get_testdata("valid_existing")
        ] + glob.glob(get_testdata("invalid_*")) + [
            get_testdata("valid_bad_context"),
            get_testdata("valid_no_user")
        ]
        env_variable = generate_env_variable(paths)
        self.assert_chosen_path(env_variable, 
                                None, 
                                EXAMPLE_ARN, 
                                get_testdata("valid_simple"))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/eks/test_update_kubeconfig.py" startline="121" endline="136" pcid="8141">
    def test_arg_override(self):
        paths = [
            get_testdata("valid_simple"),
            get_testdata("valid_existing")
        ] + glob.glob(get_testdata("invalid_*")) + [
            get_testdata("valid_bad_context"),
            get_testdata("valid_no_user"),
            get_testdata("output_single"),
            get_testdata("output_single_with_role")
        ]
        env_variable = generate_env_variable(paths)
        self.assert_chosen_path(env_variable, 
                                get_testdata("output_combined"), 
                                EXAMPLE_ARN, 
                                get_testdata("output_combined"))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/eks/test_update_kubeconfig.py" startline="105" endline="120" pcid="8140">
    def test_choose_existing(self):
        paths = [
            get_testdata("valid_simple"),
            get_testdata("valid_existing")
        ] + glob.glob(get_testdata("invalid_*")) + [
            get_testdata("valid_bad_context"),
            get_testdata("valid_no_user"),
            get_testdata("output_single"),
            get_testdata("output_single_with_role")
        ]
        env_variable = generate_env_variable(paths)
        self.assert_chosen_path(env_variable, 
                                None, 
                                EXAMPLE_ARN, 
                                get_testdata("output_single"))

</source>
</class>

<class classid="414" nclones="2" nlines="38" similarity="80">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/eks/test_kubeconfig.py" startline="123" endline="176" pcid="8163">
    def test_basic_insert(self):
        initial = OrderedDict([
            ("apiVersion", "v1"),
            ("clusters", [
                OrderedDict([
                    ("cluster", OrderedDict([
                        ("certificate-authority-data", "data1"),
                        ("server", "endpoint1")
                    ])),
                ("name", "oldclustername")
                ])
            ]),
            ("contexts", []),
            ("current-context", "simple"),
            ("kind", "Config"),
            ("preferences", OrderedDict()),
            ("users", [])
        ])
        cluster = OrderedDict([
            ("cluster", OrderedDict([
                ("certificate-authority-data", "data2"),
                ("server", "endpoint2")
            ])),
            ("name", "clustername")
        ])
        cluster_added_correct = OrderedDict([
            ("apiVersion", "v1"),
            ("clusters", [
                OrderedDict([
                    ("cluster", OrderedDict([
                        ("certificate-authority-data", "data1"),
                        ("server", "endpoint1")
                    ])),
                ("name", "oldclustername")
            ]),
                OrderedDict([
                    ("cluster", OrderedDict([
                        ("certificate-authority-data", "data2"),
                        ("server", "endpoint2")
                    ])),
                ("name", "clustername")
                ])
            ]),
            ("contexts", []),
            ("current-context", "simple"),
            ("kind", "Config"),
            ("preferences", OrderedDict()),
            ("users", [])
        ])
        cluster_added = self._appender.insert_entry(Kubeconfig(None, initial),
                                                    "clusters",
                                                    cluster)
        self.assertDictEqual(cluster_added.content, cluster_added_correct)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/eks/test_kubeconfig.py" startline="177" endline="222" pcid="8164">
    def test_update_existing(self):
        initial = OrderedDict([
            ("apiVersion", "v1"),
            ("clusters", [
                OrderedDict([
                    ("cluster", OrderedDict([
                        ("server", "endpoint")
                    ])),
                    ("name", "clustername")
                ])
            ]),
            ("contexts", []),
            ("current-context", None),
            ("kind", "Config"),
            ("preferences", OrderedDict()),
            ("users", [])
        ])
        cluster = OrderedDict([
            ("cluster", OrderedDict([
                ("certificate-authority-data", "data"),
                ("server", "endpoint")
            ])),
            ("name", "clustername")
        ])            
        correct = OrderedDict([
            ("apiVersion", "v1"),
            ("clusters", [
                OrderedDict([
                    ("cluster", OrderedDict([
                        ("certificate-authority-data", "data"),
                        ("server", "endpoint")
                    ])),
                    ("name", "clustername")
                ])
            ]),
            ("contexts", []),
            ("current-context", None),
            ("kind", "Config"),
            ("preferences", OrderedDict()),
            ("users", [])
        ])
        updated = self._appender.insert_entry(Kubeconfig(None, initial),
                                              "clusters",
                                              cluster)
        self.assertDictEqual(updated.content, correct)

</source>
</class>

<class classid="415" nclones="2" nlines="15" similarity="86">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/eks/test_kubeconfig.py" startline="283" endline="301" pcid="8167">
    def test_make_context(self):
        cluster = OrderedDict([
            ("name", "clustername"),
            ("cluster", OrderedDict())
        ])
        user = OrderedDict([
            ("name", "username"),
            ("user", OrderedDict())
        ])
        context_correct = OrderedDict([
            ("context", OrderedDict([
                ("cluster", "clustername"),
                ("user", "username")
            ])),
            ("name", "username")
        ])
        context = self._appender._make_context(cluster, user)
        self.assertDictEqual(context, context_correct)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/eks/test_kubeconfig.py" startline="302" endline="320" pcid="8168">
    def test_make_context_alias(self):
        cluster = OrderedDict([
            ("name", "clustername"),
            ("cluster", OrderedDict())
        ])
        user = OrderedDict([
            ("name", "username"),
            ("user", OrderedDict())
        ])
        context_correct = OrderedDict([
            ("context", OrderedDict([
                ("cluster", "clustername"),
                ("user", "username")
            ])),
            ("name", "alias")
        ])
        alias = "alias"
        context = self._appender._make_context(cluster, user, alias=alias)
        self.assertDictEqual(context, context_correct)
</source>
</class>

<class classid="416" nclones="2" nlines="25" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/servicecatalog/test_generateprovisioningartifact.py" startline="51" endline="82" pcid="8176">
    @patch('os.path.getsize', return_value=1)
    def test_happy_path(self, getsize_patch):
        # Arrange
        self.servicecatalog_client.create_provisioning_artifact\
            .return_value = self.get_create_provisioning_artifact_output()
        expected_pa_detail = self.get_create_provisioning_artifact_output()
        del expected_pa_detail['ResponseMetadata']
        expected_response_output = json.dumps(expected_pa_detail,
                                              indent=2,
                                              ensure_ascii=False)

        # Act
        with capture_output() as captured:
            result = self.cmd._run_main(self.args, self.global_args)

        # Assert
        self.session.create_client.assert_called_with(
                                        'servicecatalog',
                                        region_name=self.global_args.region,
                                        endpoint_url=None,
                                        verify=None)
        self.servicecatalog_client.create_provisioning_artifact.\
            assert_called_once_with(
                            ProductId=self.args.product_id,
                            Parameters=self.
                            get_provisioning_artifact_parameters(
                                self.args.provisioning_artifact_name,
                                self.args.provisioning_artifact_description,
                                self.args.provisioning_artifact_type
                            )
                        )
        self.assertEqual(expected_response_output,
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/servicecatalog/test_generateprovisioningartifact.py" startline="84" endline="117" pcid="8177">
        self.assertEqual(0, result)

    @patch('os.path.getsize', return_value=1)
    def test_happy_path_unicode(self, getsize_patch):
        # Arrange
        self.args.provisioning_artifact_name = u'\u05d1\u05e8\u05d9\u05e6'
        self.args.provisioning_artifact_description = u'\u00fd\u00a9\u0194'
        self.servicecatalog_client.create_provisioning_artifact\
            .return_value = self.get_create_provisioning_artifact_output()
        expected_pa_detail = self.get_create_provisioning_artifact_output()
        del expected_pa_detail['ResponseMetadata']
        expected_response_output = json.dumps(expected_pa_detail,
                                              indent=2,
                                              ensure_ascii=False)

        # Act
        with capture_output() as captured:
            result = self.cmd._run_main(self.args, self.global_args)

        # Assert
        self.session.create_client.assert_called_with(
                                        'servicecatalog',
                                        region_name=self.global_args.region,
                                        endpoint_url=None,
                                        verify=None)
        self.servicecatalog_client.create_provisioning_artifact.\
            assert_called_once_with(
                            ProductId=self.args.product_id,
                            Parameters=self.
                            get_provisioning_artifact_parameters(
                                self.args.provisioning_artifact_name,
                                self.args.provisioning_artifact_description,
                                self.args.provisioning_artifact_type
                            )
</source>
</class>

<class classid="417" nclones="4" nlines="12" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_generatecliskeleton.py" startline="180" endline="195" pcid="8200">
        self.assert_skeleton_equals('yaml-input', expected)

    def test_generate_yaml_input_with_bytes(self):
        input_shape = {
            'A': {
                'type': 'structure',
                'members': {
                    'B': {'type': 'blob'},
                }
            }
        }
        expected = (
            "A:\n"
            "  B: !!binary ''\n"
        )
        self.assert_skeleton_equals(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_generatecliskeleton.py" startline="328" endline="340" pcid="8210">
            'yaml-input', expected, input_shape=input_shape)

    def test_generate_yaml_input_includes_enums_in_comments(self):
        input_shape = {
            'A': {
                'type': 'string',
                'documentation': 'First sentence.',
                'enum': ['ENUM1']
            }
        }
        expected = (
            "A: ENUM1  # First sentence. Valid values are: ENUM1.\n"
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_generatecliskeleton.py" startline="229" endline="249" pcid="8203">
            'yaml-input', expected, input_shape=input_shape)

    def test_generate_yaml_input_with_required_member(self):
        input_shape = {
            'A': {
                'type': 'structure',
                'documentation': 'top-level docstring',
                'members': {
                    'B': {
                        'type': 'string',
                        'documentation': 'nested docstring'
                    }
                },
                'required': ['B']
            }
        }
        expected = (
            "A:  # top-level docstring.\n"
            "  B: ''  # [REQUIRED] nested docstring.\n"
        )
        self.assert_skeleton_equals(
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_generatecliskeleton.py" startline="209" endline="228" pcid="8202">
            'yaml-input', expected, input_shape=input_shape)

    def test_generate_yaml_input_with_nested_comments(self):
        input_shape = {
            'A': {
                'type': 'structure',
                'documentation': 'top-level docstring',
                'members': {
                    'B': {
                        'type': 'string',
                        'documentation': 'nested docstring'
                    }
                }
            }
        }
        expected = (
            "A:  # top-level docstring.\n"
            "  B: ''  # nested docstring.\n"
        )
        self.assert_skeleton_equals(
</source>
</class>

<class classid="418" nclones="2" nlines="15" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="219" endline="232" pcid="8235">
        arn = ('AWSLogs/{account}/CloudTrail-Digest/us-east-1/2015/08/'
               '16/{account}_CloudTrail-Digest_us-east-1_foo_us-east-1_'
               '20150816T230550Z.json.gz').format(account=TEST_ACCOUNT_ID)
        self.assertEqual('20150816T230550Z', extract_digest_key_date(arn))

    def test_creates_traverser(self):
        mock_s3_provider = Mock()
        traverser = create_digest_traverser(
            trail_arn=TEST_TRAIL_ARN, cloudtrail_client=Mock(),
            organization_client=Mock(),
            trail_source_region='us-east-1',
            s3_client_provider=mock_s3_provider,
            bucket='bucket', prefix='prefix')
        self.assertEqual('bucket', traverser.starting_bucket)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="233" endline="249" pcid="8236">
        self.assertEqual('prefix', traverser.starting_prefix)
        digest_provider = traverser.digest_provider
        self.assertEqual('us-east-1', digest_provider.trail_home_region)
        self.assertEqual('foo', digest_provider.trail_name)

    def test_creates_traverser_account_id(self):
        mock_s3_provider = Mock()
        traverser = create_digest_traverser(
            trail_arn=TEST_TRAIL_ARN, cloudtrail_client=Mock(),
            organization_client=Mock(),
            trail_source_region='us-east-1',
            s3_client_provider=mock_s3_provider,
            bucket='bucket', prefix='prefix',
            account_id=TEST_ORGANIZATION_ACCOUNT_ID)
        self.assertEqual('bucket', traverser.starting_bucket)
        self.assertEqual('prefix', traverser.starting_prefix)
        digest_provider = traverser.digest_provider
</source>
</class>

<class classid="419" nclones="2" nlines="17" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="250" endline="268" pcid="8237">
        self.assertEqual('us-east-1', digest_provider.trail_home_region)
        self.assertEqual('foo', digest_provider.trail_name)
        self.assertEqual(
            TEST_ORGANIZATION_ACCOUNT_ID, digest_provider.account_id)

    def test_creates_traverser_and_gets_trail_by_arn(self):
        cloudtrail_client = Mock()
        cloudtrail_client.describe_trails.return_value = {'trailList': [
            {'TrailARN': TEST_TRAIL_ARN,
             'S3BucketName': 'bucket', 'S3KeyPrefix': 'prefix',
             'IsOrganizationTrail': False}
        ]}
        traverser = create_digest_traverser(
            trail_arn=TEST_TRAIL_ARN, trail_source_region='us-east-1',
            cloudtrail_client=cloudtrail_client,
            organization_client=Mock(),
            s3_client_provider=Mock())
        self.assertEqual('bucket', traverser.starting_bucket)
        self.assertEqual('prefix', traverser.starting_prefix)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="269" endline="286" pcid="8238">
        digest_provider = traverser.digest_provider
        self.assertEqual('us-east-1', digest_provider.trail_home_region)
        self.assertEqual('foo', digest_provider.trail_name)
        self.assertEqual(TEST_ACCOUNT_ID, digest_provider.account_id)

    def test_create_traverser_organizational_trail_not_launched(self):
        cloudtrail_client = Mock()
        cloudtrail_client.describe_trails.return_value = {'trailList': [
            {'TrailARN': TEST_TRAIL_ARN,
             'S3BucketName': 'bucket', 'S3KeyPrefix': 'prefix'}
        ]}
        traverser = create_digest_traverser(
            trail_arn=TEST_TRAIL_ARN, trail_source_region='us-east-1',
            cloudtrail_client=cloudtrail_client,
            organization_client=Mock(),
            s3_client_provider=Mock())
        self.assertEqual('bucket', traverser.starting_bucket)
        self.assertEqual('prefix', traverser.starting_prefix)
</source>
</class>

<class classid="420" nclones="3" nlines="14" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="537" endline="550" pcid="8254">
                member_account=TEST_ORGANIZATION_ACCOUNT_ID,
                organization_id=TEST_ORGANIZATION_ID
            )
        )

    def test_ensures_digest_has_proper_metadata(self):
        out = six.BytesIO()
        f = gzip.GzipFile(fileobj=out, mode="wb")
        f.write('{"foo":"bar"}'.encode())
        f.close()
        gzipped_data = out.getvalue()
        s3_client = Mock()
        s3_client.get_object.return_value = {
            'Body': six.BytesIO(gzipped_data),
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="560" endline="574" pcid="8256">
            'Metadata': {}}
        provider = self._get_mock_provider(s3_client)
        with self.assertRaises(InvalidDigestFormat):
            provider.fetch_digest('bucket', 'key')

    def test_ensures_digests_can_be_json_parsed(self):
        json_str = '{{{'
        out = six.BytesIO()
        f = gzip.GzipFile(fileobj=out, mode="wb")
        f.write(json_str.encode())
        f.close()
        gzipped_data = out.getvalue()
        s3_client = Mock()
        s3_client.get_object.return_value = {
            'Body': six.BytesIO(gzipped_data),
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="575" endline="592" pcid="8257">
            'Metadata': {'signature': 'abc', 'signature-algorithm': 'SHA256'}}
        provider = self._get_mock_provider(s3_client)
        with self.assertRaises(InvalidDigestFormat):
            provider.fetch_digest('bucket', 'key')

    def test_fetches_digests(self):
        json_str = '{"foo":"bar"}'
        out = six.BytesIO()
        f = gzip.GzipFile(fileobj=out, mode="wb")
        f.write(json_str.encode())
        f.close()
        gzipped_data = out.getvalue()
        s3_client = Mock()
        s3_client.get_object.return_value = {
            'Body': six.BytesIO(gzipped_data),
            'Metadata': {'signature': 'abc', 'signature-algorithm': 'SHA256'}}
        provider = self._get_mock_provider(s3_client)
        result = provider.fetch_digest('bucket', 'key')
</source>
</class>

<class classid="421" nclones="2" nlines="29" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="652" endline="679" pcid="8261">
        self.assertEqual(
            ('Digest file\ts3://1/%s\tINVALID: public key not '
             'found in region %s for fingerprint abc' % (key_name, region)),
            calls[0]['message'])

    def test_invokes_digest_validator(self):
        start_date = START_DATE
        end_date = END_DATE
        key_name = end_date.strftime(DATE_FORMAT) + '.json.gz'
        digest = {'digestPublicKeyFingerprint': 'a',
                  'digestS3Bucket': '1',
                  'digestS3Object': key_name,
                  'previousDigestSignature': '...',
                  'digestStartTime': (end_date - timedelta(hours=1)).strftime(
                      DATE_FORMAT),
                  'digestEndTime': end_date.strftime(DATE_FORMAT)}
        digest_provider = Mock()
        digest_provider.load_digest_keys_in_range.return_value = [
            key_name]
        digest_provider.fetch_digest.return_value = (digest, key_name)
        key_provider = Mock()
        public_keys = {'a': {'Fingerprint': 'a', 'Value': 'a'}}
        key_provider.get_public_keys.return_value = public_keys
        digest_validator = Mock()
        traverser = DigestTraverser(
            digest_provider=digest_provider, starting_bucket='1',
            starting_prefix='baz', public_key_provider=key_provider,
            digest_validator=digest_validator)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="831" endline="862" pcid="8268">
        self.assertEqual(
            2, len(digest_provider.calls['load_digest_keys_in_range']))
        self.assertEquals(['1', '1', '2', '2'],
                          [c['digestS3Bucket'] for c in collected])

    def test_does_not_hard_fail_on_invalid_signature(self):
        start_date = START_DATE
        end_date = END_DATE
        end_timestamp = end_date.strftime(DATE_FORMAT) + '.json.gz'
        digest = {'digestPublicKeyFingerprint': 'a',
                  'digestS3Bucket': '1',
                  'digestS3Object': end_timestamp,
                  'previousDigestSignature': '...',
                  'digestStartTime': (end_date - timedelta(hours=1)).strftime(
                      DATE_FORMAT),
                  'digestEndTime': end_timestamp,
                  '_signature': '123'}
        digest_provider = Mock()
        digest_provider.load_digest_keys_in_range.return_value = [
            end_timestamp]
        digest_provider.fetch_digest.return_value = (digest, end_timestamp)
        key_provider = Mock()
        public_keys = {'a': {'Fingerprint': 'a', 'Value': 'a'}}
        key_provider.get_public_keys.return_value = public_keys
        digest_validator = Sha256RSADigestValidator()
        on_invalid, calls = collecting_callback()
        traverser = DigestTraverser(
            digest_provider=digest_provider, starting_bucket='1',
            starting_prefix='baz', public_key_provider=key_provider,
            digest_validator=digest_validator, on_invalid=on_invalid)
        digest_iter = traverser.traverse(start_date, end_date)
        next(digest_iter, None)
</source>
</class>

<class classid="422" nclones="2" nlines="16" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="705" endline="720" pcid="8263">
        self.assertEqual(1, len(collected))
        self.assertEqual(
            'Digest file\ts3://1/%s\tINVALID: invalid format' % key_name,
            collected[0]['message'])

    def test_loads_digests_in_range(self):
        start_date = START_DATE
        end_date = START_DATE + timedelta(hours=5)
        key_provider, digest_provider, validator = create_scenario(
            ['gap', 'link', 'link', 'link'])
        traverser = DigestTraverser(
            digest_provider=digest_provider, starting_bucket='1',
            starting_prefix='baz', public_key_provider=key_provider,
            digest_validator=validator)
        collected = list(traverser.traverse(start_date, end_date))
        self.assertEqual(1, key_provider.get_public_keys.call_count)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="812" endline="830" pcid="8267">
        self.assertEqual(1, key_provider.get_public_keys.call_count)
        self.assertEqual(
            1, len(digest_provider.calls['load_digest_keys_in_range']))
        self.assertEqual(4, len(digest_provider.calls['fetch_digest']))

    def test_reloads_objects_on_bucket_change(self):
        start_date = START_DATE
        end_date = END_DATE
        key_provider, digest_provider, validator = create_scenario(
            ['gap', 'link', 'bucket_change', 'link'])
        traverser = DigestTraverser(
            digest_provider=digest_provider, starting_bucket='1',
            starting_prefix='baz', public_key_provider=key_provider,
            digest_validator=validator)
        collected = list(traverser.traverse(start_date, end_date))
        self.assertEquals(4, len(collected))
        self.assertEqual(1, key_provider.get_public_keys.call_count)
        # Ensure the provider was called correctly
        self.assertEqual(1, key_provider.get_public_keys.call_count)
</source>
</class>

<class classid="423" nclones="3" nlines="26" similarity="74">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="721" endline="748" pcid="8264">
        self.assertEqual(
            1, len(digest_provider.calls['load_digest_keys_in_range']))
        self.assertEqual(4, len(digest_provider.calls['fetch_digest']))
        self.assertEquals(4, len(collected))

    def test_invokes_cb_and_continues_when_missing(self):
        start_date = START_DATE
        end_date = END_DATE
        key_provider, digest_provider, validator = create_scenario(
            ['gap', 'link', 'missing', 'link'])
        on_missing, missing_calls = collecting_callback()
        traverser = DigestTraverser(
            digest_provider=digest_provider, starting_bucket='1',
            starting_prefix='baz', public_key_provider=key_provider,
            digest_validator=validator, on_missing=on_missing)
        collected = list(traverser.traverse(start_date, end_date))
        self.assertEquals(3, len(collected))
        self.assertEqual(1, key_provider.get_public_keys.call_count)
        self.assertEquals(1, len(missing_calls))
        # Ensure the keys were provided in the correct order.
        self.assertIn('bucket', missing_calls[0])
        self.assertIn('next_end_date', missing_calls[0])
        # Ensure the keys were provided in the correct order.
        self.assertEqual(digest_provider.digests[1],
                         missing_calls[0]['next_key'])
        self.assertEqual(digest_provider.digests[2],
                         missing_calls[0]['last_key'])
        # Ensure the provider was called correctly
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="781" endline="811" pcid="8266">
        self.assertEqual(1, key_provider.get_public_keys.call_count)
        self.assertEqual(
            1, len(digest_provider.calls['load_digest_keys_in_range']))
        self.assertEqual(5, len(digest_provider.calls['fetch_digest']))

    def test_invokes_cb_and_continues_when_gap(self):
        start_date = START_DATE
        end_date = END_DATE
        key_provider, digest_provider, validator = create_scenario(
            ['gap', 'link', 'gap', 'gap'])
        on_gap, gap_calls = collecting_callback()
        traverser = DigestTraverser(
            digest_provider=digest_provider, starting_bucket='1',
            starting_prefix='baz', public_key_provider=key_provider,
            digest_validator=validator, on_gap=on_gap)
        collected = list(traverser.traverse(start_date, end_date))
        self.assertEquals(4, len(collected))
        self.assertEqual(1, key_provider.get_public_keys.call_count)
        self.assertEquals(2, len(gap_calls))
        # Ensure it was invoked with all the kwargs we expected.
        self.assertIn('bucket', gap_calls[0])
        self.assertIn('next_key', gap_calls[0])
        self.assertIn('next_end_date', gap_calls[0])
        self.assertIn('last_key', gap_calls[0])
        self.assertIn('last_start_date', gap_calls[0])
        # Ensure the keys were provided in the correct order.
        self.assertEqual(digest_provider.digests[3], gap_calls[0]['last_key'])
        self.assertEqual(digest_provider.digests[2], gap_calls[0]['next_key'])
        self.assertEqual(digest_provider.digests[2], gap_calls[1]['last_key'])
        self.assertEqual(digest_provider.digests[1], gap_calls[1]['next_key'])
        # Ensure the provider was called correctly
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="749" endline="780" pcid="8265">
        self.assertEqual(1, key_provider.get_public_keys.call_count)
        self.assertEqual(
            1, len(digest_provider.calls['load_digest_keys_in_range']))
        self.assertEqual(4, len(digest_provider.calls['fetch_digest']))

    def test_invokes_cb_and_continues_when_invalid(self):
        start_date = START_DATE
        end_date = END_DATE
        key_provider, digest_provider, validator = create_scenario(
            ['gap', 'link', 'invalid', 'link', 'invalid'])
        on_invalid, invalid_calls = collecting_callback()
        traverser = DigestTraverser(
            digest_provider=digest_provider, starting_bucket='1',
            starting_prefix='baz', public_key_provider=key_provider,
            digest_validator=validator, on_invalid=on_invalid)
        collected = list(traverser.traverse(start_date, end_date))
        self.assertEquals(3, len(collected))
        self.assertEqual(1, key_provider.get_public_keys.call_count)
        self.assertEquals(2, len(invalid_calls))
        # Ensure it was invoked with all the kwargs we expected.
        self.assertIn('bucket', invalid_calls[0])
        self.assertIn('next_end_date', invalid_calls[0])
        # Ensure the keys were provided in the correct order.
        self.assertEqual(digest_provider.digests[4],
                         invalid_calls[0]['last_key'])
        self.assertEqual(digest_provider.digests[3],
                         invalid_calls[0]['next_key'])
        self.assertEqual(digest_provider.digests[2],
                         invalid_calls[1]['last_key'])
        self.assertEqual(digest_provider.digests[1],
                         invalid_calls[1]['next_key'])
        # Ensure the provider was called correctly
</source>
</class>

<class classid="424" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="914" endline="925" pcid="8272">
        self.assertIsNotNone(command.end_time)
        self.assertGreater(command.end_time, command.start_time)


class TestS3ClientProvider(BaseAWSCommandParamsTest):
    def test_creates_clients_for_buckets_in_us_east_1(self):
        session = Mock()
        s3_client = Mock()
        session.create_client.return_value = s3_client
        s3_client.get_bucket_location.return_value = {'LocationConstraint': ''}
        provider = S3ClientProvider(session)
        created_client = provider.get_client('foo')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/cloudtrail/test_validation.py" startline="957" endline="967" pcid="8275">
        provider.get_client('bar')
        self.assertEqual(2, s3_client.get_bucket_location.call_count)
        provider.get_client('bar')
        self.assertEqual(2, s3_client.get_bucket_location.call_count)

    def test_caches_previously_loaded_clients(self):
        session = Mock()
        s3_client = Mock()
        session.create_client.return_value = s3_client
        s3_client.get_bucket_location.return_value = {'LocationConstraint': ''}
        provider = S3ClientProvider(session)
</source>
</class>

<class classid="425" nclones="3" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="30" endline="49" pcid="8292">

    def test_convert_schedule_df_to_api(self):
        definition = self.load_def("""{"objects": [
            {
              "id" : "S3ToS3Copy",
              "type" : "CopyActivity",
              "schedule" : { "ref" : "CopyPeriod" },
              "input" : { "ref" : "InputData" },
              "output" : { "ref" : "OutputData" }
            }
            ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "S3ToS3Copy", "id": "S3ToS3Copy",
                "fields": [
                    {"key": "input", "refValue": "InputData"},
                    {"key": "output", "refValue": "OutputData"},
                    {"key": "schedule", "refValue": "CopyPeriod"},
                    {"key": "type", "stringValue": "CopyActivity"},
                ]}]
        self.assertEqual(actual, api)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="117" endline="135" pcid="8297">

    def test_list_value_with_strings(self):
        definition = self.load_def("""{"objects": [
            {
              "id" : "emrActivity",
              "type" : "EmrActivity",
              "name" : "Foo",
              "step" : ["s3://foo1", "s3://foo2", "s3://foo3"]
            }
        ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "Foo", "id": "emrActivity",
                "fields": [
                    {"key": "step", "stringValue": "s3://foo1"},
                    {"key": "step", "stringValue": "s3://foo2"},
                    {"key": "step", "stringValue": "s3://foo3"},
                    {"key": "type", "stringValue": "EmrActivity"}
                ]}]
        self.assertEqual(actual, api)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="136" endline="155" pcid="8298">

    def test_value_with_refs(self):
        definition = self.load_def("""{"objects": [
            {
              "id" : "emrActivity",
              "type" : "EmrActivity",
              "name" : "Foo",
              "step" : ["s3://foo1", {"ref": "otherValue"}, "s3://foo3"]
            }
        ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "Foo", "id": "emrActivity",
                "fields": [
                    {"key": "step", "stringValue": "s3://foo1"},
                    {"key": "step", "refValue": "otherValue"},
                    {"key": "step", "stringValue": "s3://foo3"},
                    {"key": "type", "stringValue": "EmrActivity"}
                ]}]
        self.assertEqual(actual, api)

</source>
</class>

<class classid="426" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="50" endline="72" pcid="8293">

    def test_convert_df_to_api_schedule(self):
        definition = self.load_def("""{
              "objects": [
                {
                  "id": "MySchedule",
                  "type": "Schedule",
                  "startDateTime": "2013-08-18T00:00:00",
                  "endDateTime": "2013-08-19T00:00:00",
                  "period": "1 day"
                }
            ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "MySchedule", "id": "MySchedule",
                "fields": [
                    {"key": "endDateTime",
                     "stringValue": "2013-08-19T00:00:00"},
                    {"key": "period", "stringValue": "1 day"},
                    {"key": "startDateTime",
                     "stringValue": "2013-08-18T00:00:00"},
                    {"key": "type", "stringValue": "Schedule"},
                ]}]
        self.assertEqual(actual, api)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="73" endline="96" pcid="8294">

    def test_convert_df_to_api_with_name(self):
        definition = self.load_def("""{
              "objects": [
                {
                  "id": "MySchedule",
                  "name": "OVERRIDE-NAME",
                  "type": "Schedule",
                  "startDateTime": "2013-08-18T00:00:00",
                  "endDateTime": "2013-08-19T00:00:00",
                  "period": "1 day"
                }
            ]}""")
        actual = translator.definition_to_api_objects(definition)
        api = [{"name": "OVERRIDE-NAME", "id": "MySchedule",
                "fields": [
                    {"key": "endDateTime",
                     "stringValue": "2013-08-19T00:00:00"},
                    {"key": "period", "stringValue": "1 day"},
                    {"key": "startDateTime",
                     "stringValue": "2013-08-18T00:00:00"},
                    {"key": "type", "stringValue": "Schedule"},
                ]}]
        self.assertEqual(actual, api)
</source>
</class>

<class classid="427" nclones="2" nlines="16" similarity="87">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="156" endline="174" pcid="8299">
    # These tests check the API -> DF conversion.
    def test_api_to_df(self):
        api = {"pipelineObjects": [
            {"name": "S3ToS3Copy", "id": "S3ToS3Copy",
                "fields": [{"key": "type", "stringValue": "CopyActivity"},
                           {"key": "schedule", "refValue": "CopyPeriod"},
                           {"key": "input", "refValue": "InputData"},
                           {"key": "output", "refValue": "OutputData"}]}]}
        definition = translator.api_to_definition(api)
        self.assertEqual(definition, {
            'objects': [{
                'id': 'S3ToS3Copy',
                'name': 'S3ToS3Copy',
                'type': 'CopyActivity',
                'schedule': {'ref': 'CopyPeriod'},
                'input': {'ref': 'InputData'},
                'output': {'ref': 'OutputData'}
            }]
        })
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="175" endline="193" pcid="8300">

    def test_api_to_df_with_dupe_keys(self):
        # Duplicate keys should be aggregated into a list.
        api = {"pipelineObjects": [
            {"name": "S3ToS3Copy", "id": "S3ToS3Copy",
                "fields": [{"key": "type", "stringValue": "CopyActivity"},
                           {"key": "schedule", "refValue": "CopyPeriod"},
                           {"key": "script", "stringValue": "value1"},
                           {"key": "script", "stringValue": "value2"}]}]}
        definition = translator.api_to_definition(api)
        self.assertEqual(definition, {
            'objects': [{
                'id': 'S3ToS3Copy',
                'name': 'S3ToS3Copy',
                'type': 'CopyActivity',
                'schedule': {'ref': 'CopyPeriod'},
                'script': ['value1', 'value2'],
            }]
        })
</source>
</class>

<class classid="428" nclones="2" nlines="13" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="228" endline="248" pcid="8303">

    def test_df_to_api_with_parameter_objects(self):
        definition = self.load_def("""{"parameters": [
            {
              "id":"myOccurrenceNumber",
              "type":"Integer",
              "description":"Number of pipeline runs",
              "max":"24"
            }
            ]}""")
        actual = translator.definition_to_api_parameters(definition)
        api = [{"id": "myOccurrenceNumber",
                "attributes": [
                    {"key": "description",
                     "stringValue": "Number of pipeline runs"},
                    {"key": "max",
                     "stringValue": "24"},
                    {"key": "type",
                     "stringValue": "Integer"}
                ]}]
        self.assertEqual(actual, api)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_translator.py" startline="260" endline="282" pcid="8305">

    def test_df_to_api_with_parameter_objects_array(self):
        definition = self.load_def("""{"parameters": [
            {
              "id":"myOccurrenceNumber",
              "type":"Integer",
              "description":["part1","part2"],
              "max":"24"
            }
            ]}""")
        actual = translator.definition_to_api_parameters(definition)
        api = [{"id": "myOccurrenceNumber",
                "attributes": [
                    {"key": "description",
                     "stringValue": "part1"},
                    {"key": "description",
                     "stringValue": "part2"},
                    {"key": "max",
                     "stringValue": "24"},
                    {"key": "type",
                     "stringValue": "Integer"}
                ]}]
        self.assertEqual(actual, api)
</source>
</class>

<class classid="429" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_arg_serialize.py" startline="118" endline="135" pcid="8325">
    def test_build_args_with_start_interval(self):
        parsed_args = FakeParsedArgs(
            start_interval=['2014-02-01T00:00:00',
                            '2014-02-04T00:00:00',]
        )
        builder = QueryArgBuilder()
        query = builder.build_query(parsed_args)
        self.assertEqual(query, {
            'selectors': [{
                'fieldName': '@actualStartTime',
                 'operator': {
                     'type': 'BETWEEN',
                     'values': ['2014-02-01T00:00:00',
                                '2014-02-04T00:00:00']
                 }
            }]
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_arg_serialize.py" startline="136" endline="153" pcid="8326">
    def test_build_args_with_end_interval(self):
        parsed_args = FakeParsedArgs(
            schedule_interval=['2014-02-01T00:00:00',
                               '2014-02-04T00:00:00',]
        )
        builder = QueryArgBuilder()
        query = builder.build_query(parsed_args)
        self.assertEqual(query, {
            'selectors': [{
                'fieldName': '@scheduledStartTime',
                 'operator': {
                     'type': 'BETWEEN',
                     'values': ['2014-02-01T00:00:00',
                                '2014-02-04T00:00:00']
                 }
            }]
        })

</source>
</class>

<class classid="430" nclones="2" nlines="18" similarity="88">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_arg_serialize.py" startline="154" endline="179" pcid="8327">
    def test_build_args_with_single_status(self):
        # --status pending
        parsed_args = FakeParsedArgs(
            status=['pending']
        )
        current_time = '2014-02-21T00:00:00'
        start_time = '2014-02-17T00:00:00'
        builder = QueryArgBuilder(current_time=parse(current_time))
        query = builder.build_query(parsed_args)
        self.assertEqual(query, {
            'selectors': [{
                'fieldName': '@actualStartTime',
                 'operator': {
                     'type': 'BETWEEN',
                     'values': [start_time, current_time]
                 }
            }, {
                'fieldName': '@status',
                 'operator': {
                     'type': 'EQ',
                     'values': ['PENDING']
                 }
            },
            ]
        })

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/datapipeline/test_arg_serialize.py" startline="180" endline="205" pcid="8328">
    def test_build_args_with_csv_status(self):
        # --status pending,waiting_on_dependencies
        parsed_args = FakeParsedArgs(
            status=['pending', 'waiting_on_dependencies']
        )
        current_time = '2014-02-21T00:00:00'
        start_time = '2014-02-17T00:00:00'
        builder = QueryArgBuilder(current_time=parse(current_time))
        query = builder.build_query(parsed_args)
        self.assertEqual(query, {
            'selectors': [{
                'fieldName': '@actualStartTime',
                 'operator': {
                     'type': 'BETWEEN',
                     'values': [start_time, current_time]
                 }
            }, {
                'fieldName': '@status',
                 'operator': {
                     'type': 'EQ',
                     'values': ['PENDING', 'WAITING_ON_DEPENDENCIES']
                 }
            },
            ]
        })

</source>
</class>

<class classid="431" nclones="3" nlines="19" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dlm/test_create_default_role.py" startline="75" endline="107" pcid="8373">
                         LIFECYCLE_DEFAULT_ROLE_NAME)

    # Use case: Default role does not exist.
    # Managed Policy exists.
    # Expected results: Operations are performed by the client to verify
    # existence of policy, creation of role and then
    # attaching policy to role
    # create-default-role is executed without any resource type parameter,
    # should default to snapshot
    @mock.patch('awscli.customizations.dlm.'
                'iam.IAM.check_if_role_exists')
    def test_default_role_not_exist(self, role_exists_patch):

        role_exists_patch.return_value = False

        self.run_cmd(self.prefix, expected_rc=0)
        self.assertEqual(len(self.operations_called), 5)

        # Call to check if managed policy exists.
        self.assertEqual(self.operations_called[0][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[0][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN)

        self.assert_create_default_role(LIFECYCLE_DEFAULT_ROLE_NAME,
                                        LIFECYCLE_DEFAULT_ROLE_ASSUME_POLICY)
        self.assert_attached_policy_to_role(
            self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN,
            LIFECYCLE_DEFAULT_ROLE_NAME)

        # Call to get policy's default version id
        self.assertEqual(self.operations_called[3][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[3][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dlm/test_create_default_role.py" startline="127" endline="161" pcid="8375">
        self.assertEqual(self.operations_called[0][1]['RoleName'],
                         LIFECYCLE_DEFAULT_ROLE_NAME)

    # Use case: Default role does not exist.
    # Managed Policy exists.
    # Expected results: Operations are performed by the client to verify
    # existence of policy, creation of role and then
    # attaching policy to role
    # create-default-role is executed resource type = snapshot
    @mock.patch('awscli.customizations.dlm.'
                'iam.IAM.check_if_role_exists')
    def test_default_role_not_exist_snapshot(self, role_exists_patch):

        role_exists_patch.return_value = False

        self.run_cmd(self.prefix + " --resource-type=%s"
                     % (RESOURCE_TYPE_SNAPSHOT),
                     expected_rc=0)
        self.assertEqual(len(self.operations_called), 5)

        # Call to check if managed policy exists.
        self.assertEqual(self.operations_called[0][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[0][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN)

        self.assert_create_default_role(LIFECYCLE_DEFAULT_ROLE_NAME,
                                        LIFECYCLE_DEFAULT_ROLE_ASSUME_POLICY)
        self.assert_attached_policy_to_role(
            self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN,
            LIFECYCLE_DEFAULT_ROLE_NAME)

        # Call to get policy's default version id
        self.assertEqual(self.operations_called[3][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[3][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_ARN)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dlm/test_create_default_role.py" startline="181" endline="212" pcid="8377">
        self.assertEqual(self.operations_called[0][1]['RoleName'],
                         LIFECYCLE_DEFAULT_ROLE_NAME_AMI)

    # Use case: Default role does not exist for AMI.
    # AMI Managed Policy exists.
    # Expected results: Operations are performed by the client to verify
    # existence of policy, creation of role and then
    # attaching policy to role
    # create-default-role is executed with resource type = image
    @mock.patch('awscli.customizations.dlm.'
                'iam.IAM.check_if_role_exists')
    def test_default_role_not_exist_ami(self, role_exists_patch):

        role_exists_patch.return_value = False

        self.run_cmd(self.prefix + " --resource-type=%s"
                     % (RESOURCE_TYPE_IMAGE),
                     expected_rc=0)
        self.assertEqual(len(self.operations_called), 5)

        # Call to check if managed policy exists.
        self.assertEqual(self.operations_called[0][0].name, 'GetPolicy')
        self.assertEqual(self.operations_called[0][1]['PolicyArn'],
                         self.LIFECYCLE_DEFAULT_MANAGED_POLICY_AMI_ARN)

        self.assert_create_default_role(LIFECYCLE_DEFAULT_ROLE_NAME_AMI,
                                        LIFECYCLE_DEFAULT_ROLE_ASSUME_POLICY)
        self.assert_attached_policy_to_role(
            self.LIFECYCLE_DEFAULT_MANAGED_POLICY_AMI_ARN,
            LIFECYCLE_DEFAULT_ROLE_NAME_AMI)

        # Call to get policy's default version id
</source>
</class>

<class classid="432" nclones="7" nlines="10" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="23" endline="38" pcid="8385">
    def test_op_dir(self):
        """
        Format a paths for directory operation.  There are slashes at the
        end of the paths.
        """
        src = '.' + os.sep
        dest = 's3://kyknapp/golfVid/'
        parameters = {'dir_op': True}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': os.path.abspath(src) + os.sep,
                             'type': 'local'},
                     'dest': {'path': 'kyknapp/golfVid/', 'type': 's3'},
                     'dir_op': True, 'use_src_name': True}
        self.assertEqual(files, ref_files)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="106" endline="121" pcid="8390">
    def test_s3_use_src_name(self):
        """
        No directory operation. Local source name given. S3
        common prefix given.
        """
        src = 'fileformat_test.py'
        dest = 's3://kyknapp/golfVid/'
        parameters = {'dir_op': False}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': os.path.abspath(src),
                             'type': 'local'},
                     'dest': {'path': 'kyknapp/golfVid/', 'type': 's3'},
                     'dir_op': False, 'use_src_name': True}
        self.assertEqual(files, ref_files)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="122" endline="138" pcid="8391">
    def test_s3_keep_dest_name(self):
        """
        No directory operation. Local source name given. S3
        full key given.
        """
        src = 'fileformat_test.py'
        dest = 's3://kyknapp/golfVid/file.py'
        parameters = {'dir_op': False}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': os.path.abspath(src),
                             'type': 'local'},
                     'dest': {'path': 'kyknapp/golfVid/file.py', 'type': 's3'},
                     'dir_op': False, 'use_src_name': False}
        self.assertEqual(files, ref_files)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="39" endline="54" pcid="8386">
    def test_op_dir_noslash(self):
        """
        Format a paths for directory operation.  There are no slashes at the
        end of the paths.
        """
        src = '.'
        dest = 's3://kyknapp/golfVid'
        parameters = {'dir_op': True}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': os.path.abspath(src) + os.sep,
                             'type': 'local'},
                     'dest': {'path': 'kyknapp/golfVid/', 'type': 's3'},
                     'dir_op': True, 'use_src_name': True}
        self.assertEqual(files, ref_files)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="55" endline="71" pcid="8387">
    def test_local_use_src_name(self):
        """
        No directory operation. S3 source name given. Existing local
        destination directory given.
        """
        src = 's3://kyknapp/golfVid/hello.txt'
        dest = '.'
        parameters = {'dir_op': False}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': 'kyknapp/golfVid/hello.txt',
                             'type': 's3'},
                     'dest': {'path': os.path.abspath(dest) + os.sep,
                              'type': 'local'},
                     'dir_op': False, 'use_src_name': True}
        self.assertEqual(files, ref_files)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="89" endline="105" pcid="8389">
    def test_local_keep_dest_name(self):
        """
        No directory operation. S3 source name given. Local
        destination filename given.
        """
        src = 's3://kyknapp/golfVid/hello.txt'
        dest = 'hello.txt'
        parameters = {'dir_op': False}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': 'kyknapp/golfVid/hello.txt',
                             'type': 's3'},
                     'dest': {'path': os.path.abspath(dest),
                              'type': 'local'},
                     'dir_op': False, 'use_src_name': False}
        self.assertEqual(files, ref_files)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_fileformat.py" startline="72" endline="88" pcid="8388">
    def test_local_noexist_file(self):
        """
        No directory operation. S3 source name given. Nonexisting local
        destination directory given.
        """
        src = 's3://kyknapp/golfVid/hello.txt'
        dest = 'someFile' + os.sep
        parameters = {'dir_op': False}
        files = self.file_format.format(src, dest, parameters)

        ref_files = {'src': {'path': 'kyknapp/golfVid/hello.txt',
                             'type': 's3'},
                     'dest': {'path': os.path.abspath(dest) + os.sep,
                              'type': 'local'},
                     'dir_op': False, 'use_src_name': True}
        self.assertEqual(files, ref_files)

</source>
</class>

<class classid="433" nclones="2" nlines="21" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_subcommands.py" startline="305" endline="329" pcid="8411">
        self.mock.get_config = MagicMock(return_value={'region': None})
        self.file_creator = FileCreator()
        self.loc_files = make_loc_files(self.file_creator)
        self.bucket = 's3testbucket'

    def tearDown(self):
        self.environ_patch.stop()
        clean_loc_files(self.file_creator)

    def test_check_path_type_pass(self):
        # This tests the class's ability to determine whether the correct
        # path types have been passed for a particular command.  It test every
        # possible combination that is correct for every command.
        cmds = {'cp': ['locals3', 's3s3', 's3local'],
                'mv': ['locals3', 's3s3', 's3local'],
                'rm': ['s3'], 'mb': ['s3'], 'rb': ['s3'],
                'sync': ['locals3', 's3s3', 's3local']}
        s3_file = 's3://' + self.bucket + '/' + 'text1.txt'
        local_file = self.loc_files[0]

        combos = {'s3s3': [s3_file, s3_file],
                  's3local': [s3_file, local_file],
                  'locals3': [local_file, s3_file],
                  's3': [s3_file],
                  'local': [local_file],
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_subcommands.py" startline="330" endline="358" pcid="8412">
                  'locallocal': [local_file, local_file]}

        for cmd in cmds.keys():
            cmd_param = CommandParameters(cmd, {}, '')
            cmd_param.add_region(mock.Mock())
            correct_paths = cmds[cmd]
            for path_args in correct_paths:
                cmd_param.check_path_type(combos[path_args])

    def test_check_path_type_fail(self):
        # This tests the class's ability to determine whether the correct
        # path types have been passed for a particular command. It test every
        # possible combination that is incorrect for every command.
        cmds = {'cp': ['local', 'locallocal', 's3'],
                'mv': ['local', 'locallocal', 's3'],
                'rm': ['local', 'locallocal', 's3s3', 'locals3', 's3local'],
                'ls': ['local', 'locallocal', 's3s3', 'locals3', 's3local'],
                'sync': ['local', 'locallocal', 's3'],
                'mb': ['local', 'locallocal', 's3s3', 'locals3', 's3local'],
                'rb': ['local', 'locallocal', 's3s3', 'locals3', 's3local']}
        s3_file = 's3://' + self.bucket + '/' + 'text1.txt'
        local_file = self.loc_files[0]

        combos = {'s3s3': [s3_file, s3_file],
                  's3local': [s3_file, local_file],
                  'locals3': [local_file, s3_file],
                  's3': [s3_file],
                  'local': [local_file],
                  'locallocal': [local_file, local_file]}
</source>
</class>

<class classid="434" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_subcommands.py" startline="461" endline="476" pcid="8427">

class HelpDocTest(BaseAWSHelpOutputTest):
    def setUp(self):
        super(HelpDocTest, self).setUp()
        self.session = botocore.session.get_session()

    def tearDown(self):
        super(HelpDocTest, self).tearDown()

    def test_s3_help(self):
        # This tests the help command for the s3 service. This
        # checks to make sure the appropriate descriptions are
        # added including the tutorial.
        s3 = S3(self.session)
        parser = argparse.ArgumentParser()
        parser.add_argument('--paginate', action='store_true')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_subcommands.py" startline="477" endline="492" pcid="8428">
        parsed_global = parser.parse_args(['--paginate'])
        help_command = s3.create_help_command()
        help_command([], parsed_global)
        self.assert_contains(
            "This section explains prominent concepts "
            "and notations in the set of high-level S3 commands provided.")
        self.assert_contains("Every command takes one or two positional")
        self.assert_contains("* rb")

    def test_s3command_help(self):
        # This tests the help command for an s3 command. This
        # checks to make sure the command prints appropriate
        # parts.  Note the examples are not included because
        # the event was not registered.
        s3command = CpCommand(self.session)
        s3command._arg_table = s3command._build_arg_table()
</source>
</class>

<class classid="435" nclones="10" nlines="13" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_base.py" startline="168" endline="184" pcid="8463">

    def test_compare_size(self):
        """
        Confirms compare size works.
        """
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='comparator_test.py', size=11,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dest_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="115" endline="138" pcid="8483">

    def test_compare_exact_timestamps_diff_age_not_download(self):
        """
        Confirm that same sized files are synced when the timestamps differ,
        the type of operation is not a download, and ``exact_timestamps``
        is set.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src - datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_src, src_type='s3',
                            dest_type='local', operation_name='upload')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="48" endline="70" pcid="8480">

    def test_compare_exact_timestamps_src_older(self):
        """
        Confirm that same-sized files are synced when
        the source is older than the destination and
        `exact_timestamps` is set.
        """
        time_src = datetime.datetime.now() - datetime.timedelta(days=1)
        time_dst = datetime.datetime.now()

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_src, src_type='s3',
                            dest_type='local', operation_name='download')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="93" endline="114" pcid="8482">

    def test_compare_exact_timestamps_same_age_diff_size(self):
        """
        Confirm that files of differing sizes are synced when
        the source and destination are the same age and
        `exact_timestamps` is set.
        """
        time_both = datetime.datetime.now()

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=20,
                            last_update=time_both, src_type='s3',
                            dest_type='local', operation_name='download')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_both, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="71" endline="92" pcid="8481">

    def test_compare_exact_timestamps_same_age_same_size(self):
        """
        Confirm that same-sized files are not synced when
        the source and destination are the same age and
        `exact_timestamps` is set.
        """
        time_both = datetime.datetime.now()

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_both, src_type='s3',
                            dest_type='local', operation_name='download')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_both, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertFalse(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_base.py" startline="185" endline="202" pcid="8464">

    def test_compare_lastmod_upload(self):
        """
        Confirms compare time works for uploads.
        """
        time = datetime.datetime.now()
        future_time = time + datetime.timedelta(0, 3)
        src_file = FileStat(src='', dest='',
                            compare_key='comparator_test.py', size=10,
                            last_update=future_time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dest_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_exacttimestamps.py" startline="25" endline="47" pcid="8479">

    def test_compare_exact_timestamps_dest_older(self):
        """
        Confirm that same-sized files are synced when
        the destination is older than the source and
        `exact_timestamps` is set.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src - datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_src, src_type='s3',
                            dest_type='local', operation_name='download')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='local',
                            dest_type='s3', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_base.py" startline="203" endline="220" pcid="8465">

    def test_compare_lastmod_copy(self):
        """
        Confirms compare time works for copies.
        """
        time = datetime.datetime.now()
        future_time = time + datetime.timedelta(0, 3)
        src_file = FileStat(src='', dest='',
                            compare_key='comparator_test.py', size=10,
                            last_update=future_time, src_type='s3',
                            dest_type='s3', operation_name='copy')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='s3', operation_name='')
        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dest_file)
        self.assertTrue(should_sync)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_sizeonly.py" startline="46" endline="68" pcid="8477">
    def test_compare_size_only_different_update_times(self):
        """
        Confirm that files with the same size but different update times
        are not synced.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src + datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_src, src_type='local',
                            dest_type='s3', operation_name='upload')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='s3',
                            dest_type='local', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertFalse(should_sync)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/syncstrategy/test_sizeonly.py" startline="25" endline="45" pcid="8476">
    def test_compare_size_only(self):
        """
        Confirm that files are synced when size differs.
        """
        time_src = datetime.datetime.now()
        time_dst = time_src + datetime.timedelta(days=1)

        src_file = FileStat(src='', dest='',
                            compare_key='test.py', size=11,
                            last_update=time_src, src_type='local',
                            dest_type='s3', operation_name='upload')

        dst_file = FileStat(src='', dest='',
                            compare_key='test.py', size=10,
                            last_update=time_dst, src_type='s3',
                            dest_type='local', operation_name='')

        should_sync = self.sync_strategy.determine_should_sync(
            src_file, dst_file)
        self.assertTrue(should_sync)

</source>
</class>

<class classid="436" nclones="4" nlines="12" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="96" endline="110" pcid="8496">
    def test_on_queued(self):
        subscriber = self.get_result_subscriber(QueuedResultSubscriber)
        subscriber.on_queued(self.future)
        result = self.get_queued_result()
        self.assert_result_queue_is_empty()
        self.assertEqual(
            result,
            QueuedResult(
                transfer_type=self.transfer_type,
                src=self.src,
                dest=self.dest,
                total_transfer_size=self.size
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="143" endline="157" pcid="8499">
    def test_on_done_failure(self):
        subscriber = self.get_result_subscriber(DoneResultSubscriber)
        subscriber.on_done(self.failure_future)
        result = self.get_queued_result()
        self.assert_result_queue_is_empty()
        self.assertEqual(
            result,
            FailureResult(
                transfer_type=self.transfer_type,
                src=self.src,
                dest=self.dest,
                exception=self.ref_exception
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="129" endline="142" pcid="8498">
    def test_on_done_success(self):
        subscriber = self.get_result_subscriber(DoneResultSubscriber)
        subscriber.on_done(self.future)
        result = self.get_queued_result()
        self.assert_result_queue_is_empty()
        self.assertEqual(
            result,
            SuccessResult(
                transfer_type=self.transfer_type,
                src=self.src,
                dest=self.dest,
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="111" endline="128" pcid="8497">
    def test_on_progress(self):
        ref_bytes_transferred = 1024 * 1024  # 1MB
        subscriber = self.get_result_subscriber(ProgressResultSubscriber)
        subscriber.on_progress(self.future, ref_bytes_transferred)
        result = self.get_queued_result()
        self.assert_result_queue_is_empty()
        self.assertEqual(
            result,
            ProgressResult(
                transfer_type=self.transfer_type,
                src=self.src,
                dest=self.dest,
                bytes_transferred=ref_bytes_transferred,
                total_transfer_size=self.size,
                timestamp=mock.ANY
            )
        )

</source>
</class>

<class classid="437" nclones="6" nlines="17" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="235" endline="255" pcid="8506">
    def test_progress_result(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=self.total_transfer_size
            )
        )

        bytes_transferred = 1024 * 1024  # 1MB
        self.result_recorder(
            ProgressResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, bytes_transferred=bytes_transferred,
                total_transfer_size=self.total_transfer_size,
                timestamp=0
            )
        )

        self.assertEqual(
            self.result_recorder.bytes_transferred, bytes_transferred)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="281" endline="303" pcid="8508">
    def test_progress_result_with_no_known_transfer_size(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=None
            )
        )

        bytes_transferred = 1024 * 1024
        self.result_recorder(
            ProgressResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, bytes_transferred=bytes_transferred,
                total_transfer_size=None, timestamp=0
            )
        )
        # Because the transfer size is still not known, update the
        # expected bytes transferred with what was actually transferred.
        self.assertEqual(
            self.result_recorder.bytes_transferred, bytes_transferred)
        self.assertEqual(
            self.result_recorder.expected_bytes_transferred, bytes_transferred)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="304" endline="329" pcid="8509">
    def test_progress_result_with_transfer_size_provided_during_progress(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=None
            )
        )

        bytes_transferred = 1024 * 1024
        self.result_recorder(
            ProgressResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, bytes_transferred=bytes_transferred,
                total_transfer_size=self.total_transfer_size,
                timestamp=0
            )
        )

        self.assertEqual(
            self.result_recorder.bytes_transferred, bytes_transferred)
        # With the total size provided in the progress result, it should
        # accurately be reflected in the expected bytes transferred.
        self.assertEqual(
            self.result_recorder.expected_bytes_transferred,
            self.total_transfer_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="256" endline="280" pcid="8507">
    def test_multiple_progress_results(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=self.total_transfer_size
            )
        )

        bytes_transferred = 1024 * 1024  # 1MB
        num_results = 5
        for i in range(num_results):
            self.result_recorder(
                ProgressResult(
                    transfer_type=self.transfer_type, src=self.src,
                    dest=self.dest, bytes_transferred=bytes_transferred,
                    total_transfer_size=self.total_transfer_size,
                    timestamp=i
                )
            )

        self.assertEqual(
            self.result_recorder.bytes_transferred,
            num_results * bytes_transferred
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="537" endline="568" pcid="8518">
    def test_failure_result_and_learned_of_transfer_size_in_progress(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=None
            )
        )

        bytes_transferred = 1024 * 1024
        self.result_recorder(
            ProgressResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, bytes_transferred=bytes_transferred,
                total_transfer_size=self.total_transfer_size,
                timestamp=0
            )
        )
        self.result_recorder(
            FailureResult(
                transfer_type=self.transfer_type, src=self.src, dest=self.dest,
                exception=self.exception
            )
        )
        self.assertEqual(self.result_recorder.files_transferred, 1)
        self.assertEqual(self.result_recorder.files_failed, 1)
        # Since we knew how many bytes to expect at some point, it should
        # be accurately reflected in the amount failed to send when the
        # failure result is processed.
        self.assertEqual(
            self.result_recorder.bytes_failed_to_transfer,
            self.total_transfer_size - bytes_transferred)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="483" endline="515" pcid="8516">
    def test_failure_result_mid_progress(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=self.total_transfer_size
            )
        )

        bytes_transferred = 1024 * 1024  # 1MB
        self.result_recorder(
            ProgressResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, bytes_transferred=bytes_transferred,
                total_transfer_size=self.total_transfer_size,
                timestamp=0
            )
        )

        self.result_recorder(
            FailureResult(
                transfer_type=self.transfer_type, src=self.src, dest=self.dest,
                exception=self.exception
            )
        )

        self.assertEqual(self.result_recorder.files_transferred, 1)
        self.assertEqual(self.result_recorder.files_failed, 1)
        self.assertEqual(
            self.result_recorder.bytes_failed_to_transfer,
            self.total_transfer_size - bytes_transferred)
        self.assertEqual(
            self.result_recorder.bytes_transferred, bytes_transferred)

</source>
</class>

<class classid="438" nclones="2" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="391" endline="407" pcid="8512">
    def test_success_result(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=self.total_transfer_size
            )
        )

        self.result_recorder(
            SuccessResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest
            )
        )
        self.assertEqual(self.result_recorder.files_transferred, 1)
        self.assertEqual(self.result_recorder.files_failed, 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="569" endline="582" pcid="8519">
    def test_can_handle_results_with_no_dest(self):
        # This is just a quick smoke test to make sure that a result with
        # no destination like deletes can be handled for the lifecycle of
        # a transfer (i.e. being queued and finishing)
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=None, total_transfer_size=None))
        self.result_recorder(
            SuccessResult(
                transfer_type=self.transfer_type, src=self.src, dest=None))
        self.assertEqual(self.result_recorder.expected_files_transferred, 1)
        self.assertEqual(self.result_recorder.files_transferred, 1)

</source>
</class>

<class classid="439" nclones="2" nlines="20" similarity="77">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="408" endline="431" pcid="8513">
    def test_multiple_success_results(self):
        num_results = 5
        for i in range(num_results):
            self.result_recorder(
                QueuedResult(
                    transfer_type=self.transfer_type,
                    src=self.src + str(i),
                    dest=self.dest + str(i),
                    total_transfer_size=self.total_transfer_size
                )
            )

        for i in range(num_results):
            self.result_recorder(
                SuccessResult(
                    transfer_type=self.transfer_type,
                    src=self.src + str(i),
                    dest=self.dest + str(i),
                )
            )

        self.assertEqual(self.result_recorder.files_transferred, num_results)
        self.assertEqual(self.result_recorder.files_failed, 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="454" endline="482" pcid="8515">
    def test_multiple_failure_results(self):
        num_results = 5
        for i in range(num_results):
            self.result_recorder(
                QueuedResult(
                    transfer_type=self.transfer_type,
                    src=self.src + str(i),
                    dest=self.dest + str(i),
                    total_transfer_size=self.total_transfer_size
                )
            )

        for i in range(num_results):
            self.result_recorder(
                FailureResult(
                    transfer_type=self.transfer_type,
                    src=self.src + str(i),
                    dest=self.dest + str(i),
                    exception=self.exception
                )
            )

        self.assertEqual(self.result_recorder.files_transferred, num_results)
        self.assertEqual(self.result_recorder.files_failed, num_results)
        self.assertEqual(
            self.result_recorder.bytes_failed_to_transfer,
            self.total_transfer_size * num_results)
        self.assertEqual(self.result_recorder.bytes_transferred, 0)

</source>
</class>

<class classid="440" nclones="2" nlines="14" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="432" endline="453" pcid="8514">
    def test_failure_result(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=self.total_transfer_size
            )
        )

        self.result_recorder(
            FailureResult(
                transfer_type=self.transfer_type, src=self.src, dest=self.dest,
                exception=self.exception
            )
        )

        self.assertEqual(self.result_recorder.files_transferred, 1)
        self.assertEqual(self.result_recorder.files_failed, 1)
        self.assertEqual(
            self.result_recorder.bytes_failed_to_transfer,
            self.total_transfer_size)
        self.assertEqual(self.result_recorder.bytes_transferred, 0)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="516" endline="536" pcid="8517">
    def test_failure_result_still_did_not_know_transfer_size(self):
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=self.src,
                dest=self.dest, total_transfer_size=None
            )
        )
        self.result_recorder(
            FailureResult(
                transfer_type=self.transfer_type, src=self.src, dest=self.dest,
                exception=self.exception
            )
        )
        self.assertEqual(self.result_recorder.files_transferred, 1)
        self.assertEqual(self.result_recorder.files_failed, 1)
        # Because we never knew how many bytes to expect, do not make
        # any adjustments to bytes failed to transfer because it is impossible
        # to know that.
        self.assertEqual(
            self.result_recorder.bytes_failed_to_transfer, 0)

</source>
</class>

<class classid="441" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="651" endline="664" pcid="8528">
    def test_result_with_unicode(self):
        unicode_source = u'\u2713'
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=unicode_source,
                dest=self.dest, total_transfer_size=self.total_transfer_size
            )
        )
        self.assertEqual(
            self.result_recorder.expected_bytes_transferred,
            self.total_transfer_size
        )
        self.assertEqual(self.result_recorder.expected_files_transferred, 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="665" endline="679" pcid="8529">
    def test_result_with_encoded_unicode(self):
        unicode_source = u'\u2713'.encode('utf-8')
        self.result_recorder(
            QueuedResult(
                transfer_type=self.transfer_type, src=unicode_source,
                dest=self.dest, total_transfer_size=self.total_transfer_size
            )
        )
        self.assertEqual(
            self.result_recorder.expected_bytes_transferred,
            self.total_transfer_size
        )
        self.assertEqual(self.result_recorder.expected_files_transferred, 1)


</source>
</class>

<class classid="442" nclones="5" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="708" endline="723" pcid="8533">
    def test_progress(self):
        mb = 1024 * 1024

        self.result_recorder.expected_bytes_transferred = 20 * mb
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.final_expected_files_transferred = 4
        self.result_recorder.bytes_transferred = mb
        self.result_recorder.files_transferred = 1

        progress_result = self.get_progress_result()
        self.result_printer(progress_result)
        ref_progress_statement = (
            'Completed 1.0 MiB/20.0 MiB (0 Bytes/s) with 3 file(s) '
            'remaining\r')
        self.assertEqual(self.out_file.getvalue(), ref_progress_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="766" endline="780" pcid="8536">
    def test_progress_still_calculating_totals(self):
        mb = 1024 * 1024

        self.result_recorder.expected_bytes_transferred = 20 * mb
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.bytes_transferred = mb
        self.result_recorder.files_transferred = 1

        progress_result = self.get_progress_result()
        self.result_printer(progress_result)
        ref_progress_statement = (
            'Completed 1.0 MiB/~20.0 MiB (0 Bytes/s) with ~3 file(s) '
            'remaining (calculating...)\r')
        self.assertEqual(self.out_file.getvalue(), ref_progress_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="781" endline="792" pcid="8537">
    def test_progress_still_calculating_totals_no_bytes(self):
        self.result_recorder.expected_bytes_transferred = 0
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.bytes_transferred = 0
        self.result_recorder.files_transferred = 1

        progress_result = self.get_progress_result()
        self.result_printer(progress_result)
        ref_progress_statement = (
            'Completed 1 file(s) with ~3 file(s) remaining (calculating...)\r')
        self.assertEqual(self.out_file.getvalue(), ref_progress_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="724" endline="736" pcid="8534">
    def test_progress_with_no_expected_transfer_bytes(self):
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.final_expected_files_transferred = 4
        self.result_recorder.bytes_transferred = 0
        self.result_recorder.expected_bytes_transferred = 0

        progress_result = self.get_progress_result()
        self.result_printer(progress_result)
        ref_progress_statement = (
            'Completed 1 file(s) with 3 file(s) remaining\r')
        self.assertEqual(self.out_file.getvalue(), ref_progress_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="793" endline="809" pcid="8538">
    def test_progress_with_transfer_speed_reporting(self):
        mb = 1024 * 1024

        self.result_recorder.expected_bytes_transferred = 20 * mb
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.final_expected_files_transferred = 4
        self.result_recorder.bytes_transferred = mb
        self.result_recorder.files_transferred = 1
        self.result_recorder.bytes_transfer_speed = 1024 * 7

        progress_result = self.get_progress_result()
        self.result_printer(progress_result)
        ref_progress_statement = (
            'Completed 1.0 MiB/20.0 MiB (7.0 KiB/s) with 3 file(s) '
            'remaining\r')
        self.assertEqual(self.out_file.getvalue(), ref_progress_statement)

</source>
</class>

<class classid="443" nclones="18" nlines="14" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="810" endline="830" pcid="8539">
    def test_success(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)

        self.result_printer(success_result)

        ref_success_statement = (
            'upload: file to s3://mybucket/mykey\n'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="949" endline="966" pcid="8545">
    def test_delete_success_but_no_expected_files_transferred_provided(self):
        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=None)

        self.result_printer(success_result)

        ref_success_statement = (
            'delete: s3://mybucket/mykey\n'
            'Completed 1 file(s) with ~0 file(s) remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="931" endline="948" pcid="8544">
    def test_delete_success_with_files_remaining(self):
        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.files_transferred = 1

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=None)

        self.result_printer(success_result)

        ref_success_statement = (
            'delete: s3://mybucket/mykey\n'
            'Completed 1 file(s) with ~3 file(s) remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1096" endline="1117" pcid="8550">
    def test_failure_for_delete(self):
        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=None,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'delete failed: s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)
        self.assertEqual(self.out_file.getvalue(), '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1340" endline="1362" pcid="8564">
    def test_print_unicode_failure(self):
        transfer_type = 'upload'
        src = u'\u2713'
        dest = 's3://mybucket/mykey'

        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            u'upload failed: \u2713 to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)
        self.assertEqual(self.out_file.getvalue(), '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="967" endline="989" pcid="8546">
    def test_failure(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)
        self.assertEqual(self.out_file.getvalue(), '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="888" endline="910" pcid="8542">
    def test_success_but_no_expected_files_transferred_provided(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = mb
        self.result_recorder.bytes_transferred = mb

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)

        self.result_printer(success_result)

        ref_success_statement = (
            'upload: file to s3://mybucket/mykey\n'
            'Completed 1.0 MiB/~1.0 MiB (0 Bytes/s) with ~0 file(s) '
            'remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="865" endline="887" pcid="8541">
    def test_success_with_files_remaining(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = 4 * mb
        self.result_recorder.bytes_transferred = mb

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)

        self.result_printer(success_result)

        ref_success_statement = (
            'upload: file to s3://mybucket/mykey\n'
            'Completed 1.0 MiB/~4.0 MiB (0 Bytes/s) with ~3 file(s) '
            'remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="911" endline="930" pcid="8543">
    def test_success_for_delete(self):
        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=None)

        self.result_printer(success_result)

        ref_success_statement = (
            'delete: s3://mybucket/mykey\n'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1472" endline="1486" pcid="8576">
    def test_print_failure_result(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'
        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1406" endline="1420" pcid="8570">
    def test_print_failure_result(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'
        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1145" endline="1170" pcid="8552">
    def test_delete_failure_but_no_expected_files_transferred_provided(self):
        shared_file = self.out_file
        self.result_printer = ResultPrinter(
            result_recorder=self.result_recorder,
            out_file=shared_file,
            error_file=shared_file
        )

        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=None,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_statement = (
            'delete failed: s3://mybucket/mykey my exception\n'
            'Completed 1 file(s) with ~0 file(s) remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1118" endline="1144" pcid="8551">
    def test_delete_failure_with_files_remaining(self):
        shared_file = self.out_file
        self.result_printer = ResultPrinter(
            result_recorder=self.result_recorder,
            out_file=shared_file,
            error_file=shared_file
        )

        transfer_type = 'delete'
        src = 's3://mybucket/mykey'

        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.files_transferred = 1

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=None,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_statement = (
            'delete failed: s3://mybucket/mykey my exception\n'
            'Completed 1 file(s) with ~3 file(s) remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1492" endline="1515" pcid="8578">
    def test_final_total_does_not_try_to_clear_empty_progress(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = mb
        self.result_recorder.bytes_transferred = mb

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)
        self.result_printer(success_result)
        ref_statement = ''
        self.assertEqual(self.out_file.getvalue(), ref_statement)

        self.result_recorder.final_expected_files_transferred = 1
        self.result_printer(FinalTotalSubmissionsResult(1))
        # The final total submission result should be a noop and
        # not print anything out.
        self.assertEqual(self.out_file.getvalue(), ref_statement)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1253" endline="1292" pcid="8559">
    def test_final_total_notification_with_no_more_expected_progress(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = mb
        self.result_recorder.bytes_transferred = mb

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)

        self.result_printer(success_result)

        ref_success_statement = (
            'upload: file to s3://mybucket/mykey\n'
            'Completed 1.0 MiB/~1.0 MiB (0 Bytes/s) with ~0 file(s) '
            'remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

        # Now the result recorder/printer is notified it was just
        # there will be no more queueing. Therefore it should
        # clear out remaining progress if the expected number of files
        # transferred is equal to the number of files that has completed
        # because this is the final task meaning we want to clear any progress
        # that is displayed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_printer(FinalTotalSubmissionsResult(1))
        ref_success_statement = (
            'upload: file to s3://mybucket/mykey\n'
            'Completed 1.0 MiB/~1.0 MiB (0 Bytes/s) '
            'with ~0 file(s) remaining (calculating...)\r'
            '                                             '
            '                                    \n'
        )
        self.assertEqual(self.out_file.getvalue(), ref_success_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1426" endline="1447" pcid="8572">
    def test_final_total_does_not_try_to_clear_empty_progress(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = mb
        self.result_recorder.bytes_transferred = mb

        success_result = SuccessResult(
            transfer_type=transfer_type, src=src, dest=dest)
        self.result_printer(success_result)
        ref_statement = 'upload: file to s3://mybucket/mykey\n'
        self.assertEqual(self.out_file.getvalue(), ref_statement)

        self.result_recorder.final_expected_files_transferred = 1
        self.result_printer(FinalTotalSubmissionsResult(1))
        self.assertEqual(self.out_file.getvalue(), ref_statement)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="990" endline="1020" pcid="8547">
    def test_failure_with_files_remaining(self):
        shared_file = self.out_file
        self.result_printer = ResultPrinter(
            result_recorder=self.result_recorder,
            out_file=shared_file,
            error_file=shared_file
        )

        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 4
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = 4 * mb
        self.result_recorder.bytes_transferred = mb

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
            'Completed 1.0 MiB/~4.0 MiB (0 Bytes/s) with ~3 file(s) '
            'remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1021" endline="1051" pcid="8548">
    def test_failure_but_no_expected_files_transferred_provided(self):
        shared_file = self.out_file
        self.result_printer = ResultPrinter(
            result_recorder=self.result_recorder,
            out_file=shared_file,
            error_file=shared_file
        )

        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'

        mb = 1024 * 1024
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1
        self.result_recorder.expected_bytes_transferred = mb
        self.result_recorder.bytes_transferred = mb

        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
            'Completed 1.0 MiB/~1.0 MiB (0 Bytes/s) with ~0 file(s) '
            'remaining (calculating...)\r'
        )
        self.assertEqual(self.out_file.getvalue(), ref_statement)

</source>
</class>

<class classid="444" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1298" endline="1313" pcid="8561">
    def test_print_unicode_success_src_and_dest(self):
        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        result = SuccessResult(
            transfer_type='upload',
            src=u'/tmp/\u2713',
            dest='s3://mybucket/mykey'
        )
        self.result_printer(result)
        expected = u'upload: /tmp/\u2713 to s3://mybucket/mykey\n'
        self.assertEqual(self.out_file.getvalue(), expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1314" endline="1329" pcid="8562">
    def test_print_unicode_success_src(self):
        # Pretend that this is the final result in the result queue that
        # is processed.
        self.result_recorder.final_expected_files_transferred = 1
        self.result_recorder.expected_files_transferred = 1
        self.result_recorder.files_transferred = 1

        result = SuccessResult(
            transfer_type='delete',
            src=u's3://mybucket/tmp/\u2713',
            dest=None
        )
        self.result_printer(result)
        expected = u'delete: s3://mybucket/tmp/\u2713\n'
        self.assertEqual(self.out_file.getvalue(), expected)

</source>
</class>

<class classid="445" nclones="3" nlines="14" similarity="85">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1529" endline="1545" pcid="8581">
    def test_run(self):
        transfer_type = 'upload'
        src = 'src'
        dest = 'dest'
        total_transfer_size = 1024 * 1024
        results_to_process = [
            QueuedResult(transfer_type, src, dest, total_transfer_size),
            SuccessResult(transfer_type, src, dest)
        ]
        results_with_shutdown = results_to_process + [ShutdownThreadRequest()]

        for result in results_with_shutdown:
            self.result_queue.put(result)
        self.result_processor.run()

        self.assertEqual(self.results_handled, results_to_process)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1546" endline="1565" pcid="8582">
    def test_run_without_result_handlers(self):
        transfer_type = 'upload'
        src = 'src'
        dest = 'dest'
        total_transfer_size = 1024 * 1024
        results_to_process = [
            QueuedResult(transfer_type, src, dest, total_transfer_size),
            SuccessResult(transfer_type, src, dest)
        ]
        results_with_shutdown = results_to_process + [ShutdownThreadRequest()]

        for result in results_with_shutdown:
            self.result_queue.put(result)
        self.result_processor = ResultProcessor(self.result_queue)
        self.result_processor.run()

        # Ensure that the entire result queue got processed even though
        # there was no handlers provided.
        self.assertTrue(self.result_queue.empty())

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1621" endline="1640" pcid="8585">

    def test_does_not_process_results_after_shutdown(self):
        transfer_type = 'upload'
        src = 'src'
        dest = 'dest'
        total_transfer_size = 1024 * 1024
        results_to_process = [
            QueuedResult(transfer_type, src, dest, total_transfer_size),
            SuccessResult(transfer_type, src, dest)
        ]
        results_with_shutdown = results_to_process + [
            ShutdownThreadRequest(), WarningResult('my warning')]

        for result in results_with_shutdown:
            self.result_queue.put(result)
        self.result_processor.run()
        # Because a ShutdownThreadRequest was sent the processor should
        # not have processed anymore results stored after it.
        self.assertEqual(self.results_handled, results_to_process)

</source>
</class>

<class classid="446" nclones="2" nlines="13" similarity="92">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1655" endline="1672" pcid="8587">

    def test_success(self):
        with self.command_result_recorder:
            self.result_queue.put(
                QueuedResult(
                    transfer_type=self.transfer_type, src=self.src,
                    dest=self.dest,
                    total_transfer_size=self.total_transfer_size
                )
            )
            self.result_queue.put(
                SuccessResult(
                    transfer_type=self.transfer_type, src=self.src,
                    dest=self.dest
                )
            )
        self.assertEqual(
            self.command_result_recorder.get_command_result(), (0, 0))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1673" endline="1690" pcid="8588">

    def test_fail(self):
        with self.command_result_recorder:
            self.result_queue.put(
                QueuedResult(
                    transfer_type=self.transfer_type, src=self.src,
                    dest=self.dest,
                    total_transfer_size=self.total_transfer_size
                )
            )
            self.result_queue.put(
                FailureResult(
                    transfer_type=self.transfer_type, src=self.src,
                    dest=self.dest, exception=Exception('my exception')
                )
            )
        self.assertEqual(
            self.command_result_recorder.get_command_result(), (1, 0))
</source>
</class>

<class classid="447" nclones="3" nlines="17" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_filegenerator.py" startline="311" endline="328" pcid="8620">
    def tearDown(self):
        self.files.remove_all()

    def test_no_follow_symlink(self):
        abs_root = six.text_type(os.path.abspath(self.root) + os.sep)
        input_local_dir = {'src': {'path': abs_root,
                                   'type': 'local'},
                           'dest': {'path': self.bucket,
                                    'type': 's3'},
                           'dir_op': True, 'use_src_name': True}
        file_stats = FileGenerator(self.client, '', False).call(input_local_dir)
        self.filenames.sort()
        result_list = []
        for file_stat in file_stats:
            result_list.append(getattr(file_stat, 'src'))
        self.assertEqual(len(result_list), len(self.filenames))
        # Just check to make sure the right local files are generated.
        for i in range(len(result_list)):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_filegenerator.py" startline="354" endline="375" pcid="8622">
            self.assertEqual(result_list[i], filename)
        self.assertFalse(file_gen.result_queue.empty())

    def test_follow_symlink(self):
        # First remove the bad symlink.
        os.remove(os.path.join(self.root, 'symlink_2'))
        abs_root = six.text_type(os.path.abspath(self.root) + os.sep)
        input_local_dir = {'src': {'path': abs_root,
                                   'type': 'local'},
                           'dest': {'path': self.bucket,
                                    'type': 's3'},
                           'dir_op': True, 'use_src_name': True}
        file_stats = FileGenerator(self.client, '', True).call(input_local_dir)
        all_filenames = self.filenames + self.symlink_files
        all_filenames.sort()
        result_list = []
        for file_stat in file_stats:
            result_list.append(getattr(file_stat, 'src'))
        self.assertEqual(len(result_list), len(all_filenames))
        # Just check to make sure the right local files are generated.
        for i in range(len(result_list)):
            filename = six.text_type(os.path.abspath(all_filenames[i]))
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_filegenerator.py" startline="329" endline="353" pcid="8621">
            filename = six.text_type(os.path.abspath(self.filenames[i]))
            self.assertEqual(result_list[i], filename)

    def test_warn_bad_symlink(self):
        """
        This tests to make sure it fails when following bad symlinks.
        """
        abs_root = six.text_type(os.path.abspath(self.root) + os.sep)
        input_local_dir = {'src': {'path': abs_root,
                                   'type': 'local'},
                           'dest': {'path': self.bucket,
                                    'type': 's3'},
                           'dir_op': True, 'use_src_name': True}
        file_stats = FileGenerator(self.client, '', True).call(input_local_dir)
        file_gen = FileGenerator(self.client, '', True)
        file_stats = file_gen.call(input_local_dir)
        all_filenames = self.filenames + self.symlink_files
        all_filenames.sort()
        result_list = []
        for file_stat in file_stats:
            result_list.append(getattr(file_stat, 'src'))
        self.assertEqual(len(result_list), len(all_filenames))
        # Just check to make sure the right local files are generated.
        for i in range(len(result_list)):
            filename = six.text_type(os.path.abspath(all_filenames[i]))
</source>
</class>

<class classid="448" nclones="2" nlines="39" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_filegenerator.py" startline="551" endline="593" pcid="8635">
                     operation_name='delete')
        )
        self.client.head_object.assert_not_called()

    def test_s3_directory(self):
        """
        Generates s3 files under a common prefix. Also it ensures that
        zero size files are ignored.
        Note: Size and last update are not tested because s3 generates them.
        """
        input_s3_file = {'src': {'path': self.bucket + '/', 'type': 's3'},
                         'dest': {'path': '', 'type': 'local'},
                         'dir_op': True, 'use_src_name': True}
        params = {'region': 'us-east-1'}
        files = FileGenerator(self.client, '').call(input_s3_file)

        self.parsed_responses = [{
            "CommonPrefixes": [], "Contents": [
                {"Key": "another_directory/text2.txt", "Size": 100,
                 "LastModified": "2014-01-09T20:45:49.000Z"},
                {"Key": "text1.txt", "Size": 10,
                 "LastModified": "2013-01-09T20:45:49.000Z"}]}]
        self.patch_make_request()
        result_list = []
        for filename in files:
            result_list.append(filename)
        file_stat = FileStat(src=self.file2,
                             dest='another_directory' + os.sep +
                             'text2.txt',
                             compare_key='another_directory/text2.txt',
                             size=result_list[0].size,
                             last_update=result_list[0].last_update,
                             src_type='s3',
                             dest_type='local', operation_name='')
        file_stat2 = FileStat(src=self.file1,
                              dest='text1.txt',
                              compare_key='text1.txt',
                              size=result_list[1].size,
                              last_update=result_list[1].last_update,
                              src_type='s3',
                              dest_type='local', operation_name='')

        ref_list = [file_stat, file_stat2]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_filegenerator.py" startline="594" endline="644" pcid="8636">
        self.assertEqual(len(result_list), len(ref_list))
        for i in range(len(result_list)):
            compare_files(result_list[i], ref_list[i])

    def test_s3_delete_directory(self):
        """
        Generates s3 files under a common prefix. Also it ensures that
        the directory itself is included because it is a delete command
        Note: Size and last update are not tested because s3 generates them.
        """
        input_s3_file = {'src': {'path': self.bucket + '/', 'type': 's3'},
                         'dest': {'path': '', 'type': 'local'},
                         'dir_op': True, 'use_src_name': True}
        self.parsed_responses = [{
            "CommonPrefixes": [], "Contents": [
                {"Key": "another_directory/", "Size": 0,
                 "LastModified": "2012-01-09T20:45:49.000Z"},
                {"Key": "another_directory/text2.txt", "Size": 100,
                 "LastModified": "2014-01-09T20:45:49.000Z"},
                {"Key": "text1.txt", "Size": 10,
                 "LastModified": "2013-01-09T20:45:49.000Z"}]}]
        self.patch_make_request()
        files = FileGenerator(self.client, 'delete').call(input_s3_file)
        result_list = []
        for filename in files:
            result_list.append(filename)

        file_stat1 = FileStat(src=self.bucket + '/another_directory/',
                              dest='another_directory' + os.sep,
                              compare_key='another_directory/',
                              size=result_list[0].size,
                              last_update=result_list[0].last_update,
                              src_type='s3',
                              dest_type='local', operation_name='delete')
        file_stat2 = FileStat(src=self.file2,
                              dest='another_directory' + os.sep + 'text2.txt',
                              compare_key='another_directory/text2.txt',
                              size=result_list[1].size,
                              last_update=result_list[1].last_update,
                              src_type='s3',
                              dest_type='local', operation_name='delete')
        file_stat3 = FileStat(src=self.file1,
                              dest='text1.txt',
                              compare_key='text1.txt',
                              size=result_list[2].size,
                              last_update=result_list[2].last_update,
                              src_type='s3',
                              dest_type='local', operation_name='delete')

        ref_list = [file_stat1, file_stat2, file_stat3]
        self.assertEqual(len(result_list), len(ref_list))
</source>
</class>

<class classid="449" nclones="2" nlines="12" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_filters.py" startline="179" endline="192" pcid="8650">
    def test_create_root_s3_with_prefix(self):
        parameters = {'filters': [['--exclude', 'test.txt']],
                      'dir_op': True,
                      'src': 's3://bucket/prefix/',
                      'dest': 'prefix'}
        s3_filter = self.create_filter(parameters=parameters)
        s3_files = [
            self.file_stat('bucket/prefix/test.txt', src_type='s3'),
            self.file_stat('bucket/prefix/test2.txt', src_type='s3'),
        ]
        filtered = list(s3_filter.call(s3_files))
        self.assertEqual(len(filtered), 1)
        self.assertEqual(filtered[0].src, 'bucket/prefix/test2.txt')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_filters.py" startline="193" endline="204" pcid="8651">
    def test_create_root_s3_no_dir_op(self):
        parameters = {'filters': [['--exclude', 'test.txt']],
                      'dir_op': False,
                      'src': 's3://bucket/test.txt',
                      'dest': 'temp'}
        s3_filter = self.create_filter(parameters=parameters)
        s3_files = [
            self.file_stat('bucket/test.txt', src_type='s3'),
        ]
        filtered = list(s3_filter.call(s3_files))
        self.assertEqual(len(filtered), 0)

</source>
</class>

<class classid="450" nclones="6" nlines="11" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="104" endline="115" pcid="8660">
    def test_enqueue_uploads(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='filename', dest='bucket/key',
                         operation_name='upload'))

        self.s3_transfer_handler.call(fileinfos)
        self.assertEqual(
            self.transfer_manager.upload.call_count, num_transfers)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="116" endline="128" pcid="8661">
    def test_enqueue_downloads(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='bucket/key', dest='filename',
                         compare_key='key',
                         operation_name='download'))

        self.s3_transfer_handler.call(fileinfos)
        self.assertEqual(
            self.transfer_manager.download.call_count, num_transfers)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="129" endline="141" pcid="8662">
    def test_enqueue_copies(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='sourcebucket/sourcekey', dest='bucket/key',
                         compare_key='key',
                         operation_name='copy'))

        self.s3_transfer_handler.call(fileinfos)
        self.assertEqual(
            self.transfer_manager.copy.call_count, num_transfers)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="213" endline="227" pcid="8668">
    def test_notifies_total_submissions(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='bucket/key', dest='filename',
                         compare_key='key',
                         operation_name='download'))

        self.s3_transfer_handler.call(fileinfos)
        self.assertEqual(
            self.result_recorder.final_expected_files_transferred,
            num_transfers
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="176" endline="187" pcid="8666">
    def test_enqueue_deletes(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='bucket/key', dest=None, operation_name='delete',
                         src_type='s3'))

        self.s3_transfer_handler.call(fileinfos)
        self.assertEqual(
            self.transfer_manager.delete.call_count, num_transfers)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="228" endline="252" pcid="8669">
    def test_notifies_total_submissions_accounts_for_skips(self):
        fileinfos = []
        num_transfers = 5
        for _ in range(num_transfers):
            fileinfos.append(
                FileInfo(src='bucket/key', dest='filename',
                         compare_key='key',
                         operation_name='download'))

        # Add a fileinfo that should get skipped. To skip, we do a glacier
        # download.
        fileinfos.append(FileInfo(
            src='bucket/key', dest='filename', operation_name='download',
            compare_key='key',
            associated_response_data={'StorageClass': 'GLACIER'}))
        self.s3_transfer_handler.call(fileinfos)
        # Since the last glacier download was skipped the final expected
        # total should be equal to the number of transfers provided in the
        # for loop.
        self.assertEqual(
            self.result_recorder.final_expected_files_transferred,
            num_transfers
        )


</source>
</class>

<class classid="451" nclones="14" nlines="20" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="279" endline="304" pcid="8673">
    def test_submit(self):
        fileinfo = FileInfo(
            src=self.filename, dest=self.bucket+'/'+self.key)
        self.cli_params['guess_mime_type'] = True  # Default settings
        future = self.transfer_request_submitter.submit(fileinfo)

        self.assertIs(self.transfer_manager.upload.return_value, future)
        upload_call_kwargs = self.transfer_manager.upload.call_args[1]
        self.assertEqual(upload_call_kwargs['fileobj'], self.filename)
        self.assertEqual(upload_call_kwargs['bucket'], self.bucket)
        self.assertEqual(upload_call_kwargs['key'], self.key)
        self.assertEqual(upload_call_kwargs['extra_args'], {})

        # Make sure the subscriber applied are of the correct type and order
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            ProvideUploadContentTypeSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = upload_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="928" endline="951" pcid="8714">
    def test_submit(self):
        fileinfo = FileInfo(
            src=self.bucket+'/'+self.key, dest=self.filename,
            compare_key=self.key)
        future = self.transfer_request_submitter.submit(fileinfo)
        self.assertIs(self.transfer_manager.download.return_value, future)

        download_call_kwargs = self.transfer_manager.download.call_args[1]
        self.assertIsInstance(
            download_call_kwargs['fileobj'], StdoutBytesWriter)
        self.assertEqual(download_call_kwargs['bucket'], self.bucket)
        self.assertEqual(download_call_kwargs['key'], self.key)
        self.assertEqual(download_call_kwargs['extra_args'], {})

        ref_subscribers = [
            QueuedResultSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = download_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="992" endline="1012" pcid="8719">
    def test_submit(self):
        fileinfo = FileInfo(
            src=self.bucket+'/'+self.key, dest=None, operation_name='delete')
        future = self.transfer_request_submitter.submit(fileinfo)
        self.assertIs(self.transfer_manager.delete.return_value, future)

        delete_call_kwargs = self.transfer_manager.delete.call_args[1]
        self.assertEqual(delete_call_kwargs['bucket'], self.bucket)
        self.assertEqual(delete_call_kwargs['key'], self.key)
        self.assertEqual(delete_call_kwargs['extra_args'], {})

        ref_subscribers = [
            QueuedResultSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = delete_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="850" endline="872" pcid="8709">
    def test_submit(self):
        fileinfo = FileInfo(
            src=self.filename, dest=self.bucket+'/'+self.key)
        future = self.transfer_request_submitter.submit(fileinfo)
        self.assertIs(self.transfer_manager.upload.return_value, future)

        upload_call_kwargs = self.transfer_manager.upload.call_args[1]
        self.assertIsInstance(
            upload_call_kwargs['fileobj'], NonSeekableStream)
        self.assertEqual(upload_call_kwargs['bucket'], self.bucket)
        self.assertEqual(upload_call_kwargs['key'], self.key)
        self.assertEqual(upload_call_kwargs['extra_args'], {})

        ref_subscribers = [
            QueuedResultSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = upload_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="438" endline="462" pcid="8684">
    def test_submit(self):
        fileinfo = self.create_file_info(self.key)
        future = self.transfer_request_submitter.submit(fileinfo)

        self.assertIs(self.transfer_manager.download.return_value, future)
        download_call_kwargs = self.transfer_manager.download.call_args[1]
        self.assertEqual(download_call_kwargs['fileobj'], self.filename)
        self.assertEqual(download_call_kwargs['bucket'], self.bucket)
        self.assertEqual(download_call_kwargs['key'], self.key)
        self.assertEqual(download_call_kwargs['extra_args'], {})

        # Make sure the subscriber applied are of the correct type and order
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            DirectoryCreatorSubscriber,
            ProvideLastModifiedTimeSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = download_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="623" endline="651" pcid="8697">
    def test_submit(self):
        fileinfo = FileInfo(
            src=self.source_bucket+'/'+self.source_key,
            dest=self.bucket+'/'+self.key)
        self.cli_params['guess_mime_type'] = True  # Default settings
        future = self.transfer_request_submitter.submit(fileinfo)
        self.assertIs(self.transfer_manager.copy.return_value, future)
        copy_call_kwargs = self.transfer_manager.copy.call_args[1]
        self.assertEqual(
            copy_call_kwargs['copy_source'],
            {'Bucket': self.source_bucket, 'Key': self.source_key})
        self.assertEqual(copy_call_kwargs['bucket'], self.bucket)
        self.assertEqual(copy_call_kwargs['key'], self.key)
        self.assertEqual(copy_call_kwargs['extra_args'], {})

        # Make sure the subscriber applied are of the correct type and order
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            SetMetadataDirectivePropsSubscriber,
            SetTagsSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = copy_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="317" endline="336" pcid="8675">
    def test_submit_when_content_type_specified(self):
        fileinfo = FileInfo(
            src=self.filename, dest=self.bucket+'/'+self.key)
        self.cli_params['content_type'] = 'text/plain'
        self.transfer_request_submitter.submit(fileinfo)

        upload_call_kwargs = self.transfer_manager.upload.call_args[1]
        self.assertEqual(
            upload_call_kwargs['extra_args'], {'ContentType': 'text/plain'})
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = upload_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="337" endline="354" pcid="8676">
    def test_submit_when_no_guess_content_mime_type(self):
        fileinfo = FileInfo(
            src=self.filename, dest=self.bucket+'/'+self.key)
        self.cli_params['guess_mime_type'] = False
        self.transfer_request_submitter.submit(fileinfo)

        upload_call_kwargs = self.transfer_manager.upload.call_args[1]
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = upload_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="385" endline="405" pcid="8679">
    def test_submit_move_adds_delete_source_subscriber(self):
        fileinfo = FileInfo(
            src=self.filename, dest=self.bucket+'/'+self.key)
        self.cli_params['guess_mime_type'] = True  # Default settings
        self.cli_params['is_move'] = True
        self.transfer_request_submitter.submit(fileinfo)
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            ProvideUploadContentTypeSubscriber,
            DeleteSourceFileSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        upload_call_kwargs = self.transfer_manager.upload.call_args[1]
        actual_subscribers = upload_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="688" endline="707" pcid="8700">
    def test_metadata_directive_excludes_copy_props_subscribers(self):
        fileinfo = FileInfo(
            src=self.source_bucket+'/'+self.source_key,
            dest=self.bucket+'/'+self.key)
        self.cli_params['copy_props'] = 'default'
        self.cli_params['metadata_directive'] = 'REPLACE'
        self.transfer_request_submitter.submit(fileinfo)

        copy_call_kwargs = self.transfer_manager.copy.call_args[1]
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = copy_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="873" endline="893" pcid="8710">
    def test_submit_with_expected_size_provided(self):
        provided_size = 100
        self.cli_params['expected_size'] = provided_size
        fileinfo = FileInfo(
            src=self.filename, dest=self.bucket+'/'+self.key)
        self.transfer_request_submitter.submit(fileinfo)
        upload_call_kwargs = self.transfer_manager.upload.call_args[1]

        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = upload_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])
        # The ProvideSizeSubscriber should be providing the correct size
        self.assertEqual(actual_subscribers[0].size, provided_size)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="665" endline="687" pcid="8699">
    def test_submit_when_content_type_specified(self):
        fileinfo = FileInfo(
            src=self.source_bucket+'/'+self.source_key,
            dest=self.bucket+'/'+self.key)
        self.cli_params['content_type'] = 'text/plain'
        self.transfer_request_submitter.submit(fileinfo)

        copy_call_kwargs = self.transfer_manager.copy.call_args[1]
        self.assertEqual(
            copy_call_kwargs['extra_args'], {'ContentType': 'text/plain'})
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            SetMetadataDirectivePropsSubscriber,
            SetTagsSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        actual_subscribers = copy_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="809" endline="831" pcid="8706">
    def test_submit_move_adds_delete_source_subscriber(self):
        fileinfo = FileInfo(
            dest=self.source_bucket + '/' + self.source_key,
            src=self.bucket + '/' + self.key)
        self.cli_params['guess_mime_type'] = True  # Default settings
        self.cli_params['is_move'] = True
        self.transfer_request_submitter.submit(fileinfo)
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            SetMetadataDirectivePropsSubscriber,
            SetTagsSubscriber,
            DeleteSourceObjectSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        copy_call_kwargs = self.transfer_manager.copy.call_args[1]
        actual_subscribers = copy_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="584" endline="604" pcid="8694">
    def test_submit_move_adds_delete_source_subscriber(self):
        fileinfo = self.create_file_info(self.key)
        self.cli_params['guess_mime_type'] = True  # Default settings
        self.cli_params['is_move'] = True
        self.transfer_request_submitter.submit(fileinfo)
        ref_subscribers = [
            ProvideSizeSubscriber,
            QueuedResultSubscriber,
            DirectoryCreatorSubscriber,
            ProvideLastModifiedTimeSubscriber,
            DeleteSourceObjectSubscriber,
            ProgressResultSubscriber,
            DoneResultSubscriber,
        ]
        download_call_kwargs = self.transfer_manager.download.call_args[1]
        actual_subscribers = download_call_kwargs['subscribers']
        self.assertEqual(len(ref_subscribers), len(actual_subscribers))
        for i, actual_subscriber in enumerate(actual_subscribers):
            self.assertIsInstance(actual_subscriber, ref_subscribers[i])


</source>
</class>

<class classid="452" nclones="6" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="370" endline="384" pcid="8678">
    def test_dry_run(self):
        self.cli_params['dryrun'] = True
        self.transfer_request_submitter = UploadRequestSubmitter(
            self.transfer_manager, self.result_queue, self.cli_params)
        fileinfo = FileInfo(
            src=self.filename, src_type='local', operation_name='upload',
            dest=self.bucket + '/' + self.key, dest_type='s3')
        self.transfer_request_submitter.submit(fileinfo)

        result = self.result_queue.get()
        self.assertIsInstance(result, DryRunResult)
        self.assertEqual(result.transfer_type, 'upload')
        self.assertTrue(result.src.endswith(self.filename))
        self.assertEqual(result.dest, 's3://' + self.bucket + '/' + self.key)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="894" endline="909" pcid="8711">
    def test_dry_run(self):
        self.cli_params['dryrun'] = True
        self.transfer_request_submitter = UploadStreamRequestSubmitter(
            self.transfer_manager, self.result_queue, self.cli_params)
        fileinfo = FileInfo(
            src=self.filename, src_type='local', operation_name='upload',
            dest=self.bucket + '/' + self.key, dest_type='s3')
        self.transfer_request_submitter.submit(fileinfo)

        result = self.result_queue.get()
        self.assertIsInstance(result, DryRunResult)
        self.assertEqual(result.transfer_type, 'upload')
        self.assertEqual(result.dest, 's3://' + self.bucket + '/' + self.key)
        self.assertEqual(result.src, '-')


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="1013" endline="1029" pcid="8720">
    def test_dry_run(self):
        self.cli_params['dryrun'] = True
        self.transfer_request_submitter = DeleteRequestSubmitter(
            self.transfer_manager, self.result_queue, self.cli_params)
        fileinfo = FileInfo(
            src=self.bucket + '/' + self.key, src_type='s3',
            dest=self.bucket + '/' + self.key, dest_type='s3',
            operation_name='delete')
        self.transfer_request_submitter.submit(fileinfo)

        result = self.result_queue.get()
        self.assertIsInstance(result, DryRunResult)
        self.assertEqual(result.transfer_type, 'delete')
        self.assertEqual(result.src, 's3://' + self.bucket + '/' + self.key)
        self.assertIsNone(result.dest)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="952" endline="968" pcid="8715">
    def test_dry_run(self):
        self.cli_params['dryrun'] = True
        self.transfer_request_submitter = DownloadStreamRequestSubmitter(
            self.transfer_manager, self.result_queue, self.cli_params)
        fileinfo = FileInfo(
            dest=self.filename, dest_type='local', operation_name='download',
            src=self.bucket + '/' + self.key, src_type='s3',
            compare_key=self.key)
        self.transfer_request_submitter.submit(fileinfo)

        result = self.result_queue.get()
        self.assertIsInstance(result, DryRunResult)
        self.assertEqual(result.transfer_type, 'download')
        self.assertEqual(result.src, 's3://' + self.bucket + '/' + self.key)
        self.assertEqual(result.dest, '-')


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="571" endline="583" pcid="8693">
    def test_dry_run(self):
        self.cli_params['dryrun'] = True
        self.transfer_request_submitter = DownloadRequestSubmitter(
            self.transfer_manager, self.result_queue, self.cli_params)
        fileinfo = self.create_file_info(self.key)
        self.transfer_request_submitter.submit(fileinfo)

        result = self.result_queue.get()
        self.assertIsInstance(result, DryRunResult)
        self.assertEqual(result.transfer_type, 'download')
        self.assertTrue(result.dest.endswith(self.filename))
        self.assertEqual(result.src, 's3://' + self.bucket + '/' + self.key)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="792" endline="808" pcid="8705">
    def test_dry_run(self):
        self.cli_params['dryrun'] = True
        self.transfer_request_submitter = CopyRequestSubmitter(
            self.transfer_manager, self.result_queue, self.cli_params)
        fileinfo = FileInfo(
            src=self.source_bucket + '/' + self.source_key, src_type='s3',
            dest=self.bucket + '/' + self.key, dest_type='s3',
            operation_name='copy')
        self.transfer_request_submitter.submit(fileinfo)

        result = self.result_queue.get()
        self.assertIsInstance(result, DryRunResult)
        self.assertEqual(result.transfer_type, 'copy')
        source = 's3://' + self.source_bucket + '/' + self.source_key
        self.assertEqual(result.src, source)
        self.assertEqual(result.dest, 's3://' + self.bucket + '/' + self.key)

</source>
</class>

<class classid="453" nclones="2" nlines="16" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="477" endline="498" pcid="8686">
    def test_warn_glacier_for_incompatible(self):
        fileinfo = FileInfo(
            src=self.bucket+'/'+self.key, dest=self.filename,
            operation_name='download',
            associated_response_data={
                'StorageClass': 'GLACIER',
            }
        )
        future = self.transfer_request_submitter.submit(fileinfo)

        # A warning should have been submitted because it is a non-restored
        # glacier object.
        warning_result = self.result_queue.get()
        self.assertIsInstance(warning_result, WarningResult)
        self.assertIn(
            'Unable to perform download operations on GLACIER objects',
            warning_result.message)

        # The transfer should have been skipped.
        self.assertIsNone(future)
        self.assert_no_downloads_happened()

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="708" endline="732" pcid="8701">
    def test_warn_glacier_for_incompatible(self):
        fileinfo = FileInfo(
            src=self.source_bucket+'/'+self.source_key,
            dest=self.bucket+'/'+self.key,
            operation_name='copy',
            associated_response_data={
                'StorageClass': 'GLACIER',
            }
        )
        future = self.transfer_request_submitter.submit(fileinfo)

        # A warning should have been submitted because it is a non-restored
        # glacier object.
        warning_result = self.result_queue.get()
        self.assertIsInstance(warning_result, WarningResult)
        self.assertIn(
            'Unable to perform copy operations on GLACIER objects',
            warning_result.message)

        # The transfer request should have never been sent therefore return
        # no future.
        self.assertIsNone(future)
        # The transfer should have been skipped.
        self.assertEqual(len(self.transfer_manager.copy.call_args_list), 0)

</source>
</class>

<class classid="454" nclones="3" nlines="13" similarity="76">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="733" endline="752" pcid="8702">
    def test_not_warn_glacier_for_compatible(self):
        fileinfo = FileInfo(
            src=self.source_bucket+'/'+self.source_key,
            dest=self.bucket+'/'+self.key,
            operation_name='copy',
            associated_response_data={
                'StorageClass': 'GLACIER',
                'Restore': 'ongoing-request="false"'
            }
        )
        future = self.transfer_request_submitter.submit(fileinfo)
        self.assertIs(self.transfer_manager.copy.return_value, future)

        # A warning should have not been submitted because it is a restored
        # glacier object.
        self.assertTrue(self.result_queue.empty())

        # And the transfer should not have been skipped.
        self.assertEqual(len(self.transfer_manager.copy.call_args_list), 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="753" endline="770" pcid="8703">
    def test_warn_glacier_force_glacier(self):
        self.cli_params['force_glacier_transfer'] = True
        fileinfo = FileInfo(
            src=self.source_bucket+'/'+self.source_key,
            dest=self.bucket+'/'+self.key,
            operation_name='copy',
            associated_response_data={
                'StorageClass': 'GLACIER',
            }
        )
        future = self.transfer_request_submitter.submit(fileinfo)
        self.assertIs(self.transfer_manager.copy.return_value, future)

        # A warning should have not been submitted because it is glacier
        # transfers were forced.
        self.assertTrue(self.result_queue.empty())
        self.assertEqual(len(self.transfer_manager.copy.call_args_list), 1)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="771" endline="791" pcid="8704">
    def test_warn_glacier_ignore_glacier_warnings(self):
        self.cli_params['ignore_glacier_warnings'] = True
        fileinfo = FileInfo(
            src=self.source_bucket+'/'+self.source_key,
            dest=self.bucket+'/'+self.key,
            operation_name='copy',
            associated_response_data={
                'StorageClass': 'GLACIER',
            }
        )
        future = self.transfer_request_submitter.submit(fileinfo)

        # The transfer request should have never been sent therefore return
        # no future.
        self.assertIsNone(future)
        # A warning should have not been submitted because it was specified
        # to ignore glacier warnings.
        self.assertTrue(self.result_queue.empty())
        # But the transfer still should have been skipped.
        self.assertEqual(len(self.transfer_manager.copy.call_args_list), 0)

</source>
</class>

<class classid="455" nclones="2" nlines="18" similarity="84">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="1058" endline="1080" pcid="8725">
    def test_submit(self):
        full_filename = self.file_creator.create_file(self.filename, 'content')
        fileinfo = FileInfo(
            src=full_filename, dest=None, operation_name='delete',
            src_type='local')
        rval = self.transfer_request_submitter.submit(fileinfo)
        self.assertTrue(rval)

        queued_result = self.result_queue.get()
        self.assertIsInstance(queued_result, QueuedResult)
        self.assertEqual(queued_result.transfer_type, 'delete')
        self.assertTrue(queued_result.src.endswith(self.filename))
        self.assertIsNone(queued_result.dest)
        self.assertEqual(queued_result.total_transfer_size, 0)

        failure_result = self.result_queue.get()
        self.assertIsInstance(failure_result, SuccessResult)
        self.assertEqual(failure_result.transfer_type, 'delete')
        self.assertTrue(failure_result.src.endswith(self.filename))
        self.assertIsNone(failure_result.dest)

        self.assertFalse(os.path.exists(full_filename))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_s3handler.py" startline="1081" endline="1102" pcid="8726">
    def test_submit_with_exception(self):
        fileinfo = FileInfo(
            src=self.filename, dest=None, operation_name='delete',
            src_type='local')
        # The file was never created so it should trigger an exception
        # when it is attempted to be deleted in the submitter.
        rval = self.transfer_request_submitter.submit(fileinfo)
        self.assertTrue(rval)

        queued_result = self.result_queue.get()
        self.assertIsInstance(queued_result, QueuedResult)
        self.assertEqual(queued_result.transfer_type, 'delete')
        self.assertTrue(queued_result.src.endswith(self.filename))
        self.assertIsNone(queued_result.dest)
        self.assertEqual(queued_result.total_transfer_size, 0)

        failure_result = self.result_queue.get()
        self.assertIsInstance(failure_result, FailureResult)
        self.assertEqual(failure_result.transfer_type, 'delete')
        self.assertTrue(failure_result.src.endswith(self.filename))
        self.assertIsNone(failure_result.dest)

</source>
</class>

<class classid="456" nclones="5" nlines="28" similarity="82">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="31" endline="69" pcid="8729">
    def test_compare_key_equal_should_not_sync(self):
        """
        Confirm the appropriate action is taken when the soruce compare key
        is equal to the destination compare key.
        """
        # Try when the sync strategy says not to sync the file.
        self.sync_strategy.determine_should_sync.return_value = False

        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='comparator_test.py', size=10,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        src_files.append(src_file)
        dest_files.append(dest_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Try when the sync strategy says to sync the file.
        self.sync_strategy.determine_should_sync.return_value = True

        ref_list = []
        result_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        ref_list.append(src_file)
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="185" endline="218" pcid="8733">
    def test_empty_dest(self):
        """
        Confirm the appropriate action is taken when there are no more dest
        files to take.
        """
        # Try when the sync strategy says to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = True

        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='domparator_test.py', size=10,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        src_files.append(src_file)
        ref_list.append(src_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="111" endline="151" pcid="8731">
    def test_compare_key_greater(self):
        """
        Confirm the appropriate action is taken when the soruce compare key
        is greater than the destination compare key.
        """
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = False

        # Try when the sync strategy says to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = True
        
        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='domparator_test.py', size=10,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        src_files.append(src_file)
        dest_files.append(dest_file)
        ref_list.append(dest_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="70" endline="110" pcid="8730">
    def test_compare_key_less(self):
        """
        Confirm the appropriate action is taken when the soruce compare key
        is less than the destination compare key.
        """
        self.not_at_src_sync_strategy.determine_should_sync.return_value = False

        # Try when the sync strategy says to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = True

        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        src_file = FileStat(src='', dest='',
                            compare_key='bomparator_test.py', size=10,
                            last_update=time, src_type='local',
                            dest_type='s3', operation_name='upload')
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        src_files.append(src_file)
        dest_files.append(dest_file)
        ref_list.append(src_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_dest_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_comparator.py" startline="152" endline="184" pcid="8732">
    def test_empty_src(self):
        """
        Confirm the appropriate action is taken when there are no more source
        files to take.
        """
        # Try when the sync strategy says to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = True

        src_files = []
        dest_files = []
        ref_list = []
        result_list = []
        time = datetime.datetime.now()
        dest_file = FileStat(src='', dest='',
                             compare_key='comparator_test.py', size=10,
                             last_update=time, src_type='s3',
                             dest_type='local', operation_name='')
        dest_files.append(dest_file)
        ref_list.append(dest_file)
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

        # Now try when the sync strategy says not to sync the file.
        self.not_at_src_sync_strategy.determine_should_sync.return_value = False
        result_list = []
        ref_list = []
        files = self.comparator.call(iter(src_files), iter(dest_files))
        for filename in files:
            result_list.append(filename)
        self.assertEqual(result_list, ref_list)

</source>
</class>

<class classid="457" nclones="3" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_utils.py" startline="582" endline="594" pcid="8788">
    def test_copy_object(self):
        params = {}
        RequestParamsMapper.map_copy_object_params(params, self.cli_params)
        self.assertEqual(
            params,
            {'CopySourceSSECustomerAlgorithm': 'AES256',
             'CopySourceSSECustomerKey': 'my-sse-c-copy-source-key',
             'SSECustomerAlgorithm': 'AES256',
             'SSECustomerKey': 'my-sse-c-key',
             'SSEKMSKeyId': 'my-kms-key',
             'ServerSideEncryption': 'AES256'}
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_utils.py" startline="595" endline="606" pcid="8789">
    def test_create_multipart_upload(self):
        params = {}
        RequestParamsMapper.map_create_multipart_upload_params(
            params, self.cli_params)
        self.assertEqual(
            params,
            {'SSECustomerAlgorithm': 'AES256',
             'SSECustomerKey': 'my-sse-c-key',
             'SSEKMSKeyId': 'my-kms-key',
             'ServerSideEncryption': 'AES256'}
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_utils.py" startline="616" endline="627" pcid="8791">
    def test_upload_part_copy(self):
        params = {}
        RequestParamsMapper.map_upload_part_copy_params(
            params, self.cli_params)
        self.assertEqual(
            params,
            {'CopySourceSSECustomerAlgorithm': 'AES256',
             'CopySourceSSECustomerKey': 'my-sse-c-copy-source-key',
             'SSECustomerAlgorithm': 'AES256',
             'SSECustomerKey': 'my-sse-c-key'})


</source>
</class>

<class classid="458" nclones="3" nlines="11" similarity="72">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="33" endline="44" pcid="8809">
    def test_create_client(self):
        params = {
            'region': 'us-west-2',
            'endpoint_url': 'https://myendpoint',
            'verify_ssl': True,
        }
        self.factory.create_client(params=params)
        self.session.create_client.assert_called_with(
            's3', region_name='us-west-2', endpoint_url='https://myendpoint',
            verify=True
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="59" endline="71" pcid="8811">
    def test_create_client_with_no_source_region(self):
        params = {
            'region': 'us-west-2',
            'endpoint_url': 'https://myendpoint',
            'verify_ssl': True,
            'source_region': None,
        }
        self.factory.create_client(params, is_source_client=True)
        self.session.create_client.assert_called_with(
            's3', region_name='us-west-2', endpoint_url='https://myendpoint',
            verify=True
        )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="72" endline="86" pcid="8812">
    def test_create_client_respects_source_region_for_copies(self):
        params = {
            'region': 'us-west-2',
            'endpoint_url': 'https://myendpoint',
            'verify_ssl': True,
            'source_region': 'us-west-1',
            'paths_type': 's3s3',
        }
        self.factory.create_client(params, is_source_client=True)
        self.session.create_client.assert_called_with(
            's3', region_name='us-west-1', endpoint_url=None,
            verify=True
        )


</source>
</class>

<class classid="459" nclones="3" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="207" endline="221" pcid="8828">
    @mock.patch('s3transfer.crt.S3Client')
    def test_uses_region_parameter_for_crt_manager(self, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['region'] = 'param-region'
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.assertEqual(
            mock_crt_client.call_args[1]['region'], 'param-region'
        )
        self.assertEqual(
            self.session.create_client.call_args[1]['region_name'],
            'param-region'
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="253" endline="266" pcid="8831">
    @mock.patch('s3transfer.crt.S3Client')
    def test_uses_endpoint_url_parameter_for_crt_manager(
            self, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['endpoint_url'] = 'https://my.endpoint.com'
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.assertEqual(
            self.session.create_client.call_args[1]['endpoint_url'],
            'https://my.endpoint.com'
        )
        self.assert_tls_enabled_for_crt_client(mock_crt_client)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="268" endline="281" pcid="8832">
    @mock.patch('s3transfer.crt.S3Client')
    def test_can_disable_tls_using_endpoint_scheme_for_crt_manager(
            self, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['endpoint_url'] = 'http://my.endpoint.com'
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.assertEqual(
            self.session.create_client.call_args[1]['endpoint_url'],
            'http://my.endpoint.com'
        )
        self.assert_tls_disabled_for_crt_client(mock_crt_client)
</source>
</class>

<class classid="460" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="283" endline="294" pcid="8833">
    @mock.patch('s3transfer.crt.S3Client')
    def test_uses_botocore_credential_provider_for_crt_manager(
            self, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.session.get_component.assert_called_with('credential_provider')
        self.assertIsNotNone(
            mock_crt_client.call_args[1]['credential_provider']
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="296" endline="308" pcid="8834">
    @mock.patch('s3transfer.crt.S3Client')
    def test_disable_botocore_credential_provider_for_crt_manager(
            self, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['sign_request'] = False
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.session.get_component.assert_not_called()
        self.assertIsNone(
            mock_crt_client.call_args[1]['credential_provider']
        )
</source>
</class>

<class classid="461" nclones="2" nlines="16" similarity="93">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="311" endline="327" pcid="8835">
    @mock.patch('s3transfer.crt.ClientTlsContext')
    def test_use_verify_ssl_parameter_for_crt_manager(
            self, mock_client_tls_context_options, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        fake_ca_contents = b"fake ca content"
        fake_ca_bundle = self.files.create_file(
            "fake_ca", fake_ca_contents, mode='wb')
        self.params['verify_ssl'] = fake_ca_bundle
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        tls_context_options = mock_client_tls_context_options.call_args[0][0]
        self.assertEqual(tls_context_options.ca_buffer,
                         fake_ca_contents)
        self.assert_uses_client_tls_context_options(
            mock_crt_client, mock_client_tls_context_options)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="330" endline="346" pcid="8836">
    @mock.patch('s3transfer.crt.ClientTlsContext')
    def test_use_ca_bundle_from_session_for_crt_manager(
            self, mock_client_tls_context_options, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        fake_ca_contents = b"fake ca content"
        fake_ca_bundle = self.files.create_file(
            "fake_ca", fake_ca_contents, mode='wb')
        self.session.get_config_variable.return_value = fake_ca_bundle
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        tls_context_options = mock_client_tls_context_options.call_args[0][0]
        self.assertEqual(tls_context_options.ca_buffer,
                         fake_ca_contents)
        self.assert_uses_client_tls_context_options(
            mock_crt_client, mock_client_tls_context_options)
</source>
</class>

<class classid="462" nclones="2" nlines="13" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="349" endline="363" pcid="8837">
    @mock.patch('s3transfer.crt.ClientTlsContext')
    def test_use_verify_ssl_parameter_none_for_crt_manager(
            self, mock_client_tls_context_options, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['verify_ssl'] = None
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        tls_context_options = mock_client_tls_context_options.call_args[0][0]
        with open(DEFAULT_CA_BUNDLE, mode='rb') as fh:
            contents = fh.read()
            self.assertEqual(tls_context_options.ca_buffer, contents)
        self.assert_uses_client_tls_context_options(
            mock_crt_client, mock_client_tls_context_options)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="366" endline="378" pcid="8838">
    @mock.patch('s3transfer.crt.ClientTlsContext')
    def test_use_verify_ssl_parameter_false_for_crt_manager(
            self, mock_client_tls_context_options, mock_crt_client):
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt')
        self.params['verify_ssl'] = False
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        tls_context_options = mock_client_tls_context_options.call_args[0][0]
        self.assertFalse(tls_context_options.verify_peer)
        self.assert_uses_client_tls_context_options(
            mock_crt_client, mock_client_tls_context_options)
</source>
</class>

<class classid="463" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="380" endline="393" pcid="8839">
    @mock.patch('s3transfer.crt.S3Client')
    def test_target_bandwidth_configure_for_crt_manager(
            self, mock_crt_client):
        GB = 1024 ** 3
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt',
            target_bandwidth=1*GB)
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.assertEqual(
            mock_crt_client.call_args[1]['throughput_target_gbps'],
            8
        )
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_factory.py" startline="395" endline="407" pcid="8840">
    @mock.patch('s3transfer.crt.S3Client')
    def test_multipart_chunksize_configure_for_crt_manager(
            self, mock_crt_client):
        part_size = 16 * (1024**2)
        self.runtime_config = self.get_runtime_config(
            preferred_transfer_client='crt',
            multipart_chunksize=part_size)
        transfer_manager = self.factory.create_transfer_manager(
            self.params, self.runtime_config)
        self.assert_is_crt_manager(transfer_manager)
        self.assertEqual(
            mock_crt_client.call_args[1]['part_size'],
            part_size
</source>
</class>

<class classid="464" nclones="2" nlines="13" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_subscribers.py" startline="558" endline="570" pcid="8933">
    def test_makes_head_object_call_if_not_cached(self):
        subscriber = SetMetadataDirectivePropsSubscriber(
            client=self.client,
            transfer_config=self.transfer_config,
            cli_params=self.cli_params,
            head_object_response=None,
        )
        self.client.head_object.return_value = {}
        self.set_size_for_mp_copy(self.future)
        subscriber.on_queued(self.future)
        self.client.head_object.assert_called_with(
            Bucket=self.source_bucket, Key=self.source_key)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_subscribers.py" startline="571" endline="587" pcid="8934">
    def test_add_extra_params_to_head_object_call(self):
        subscriber = SetMetadataDirectivePropsSubscriber(
            client=self.client,
            transfer_config=self.transfer_config,
            cli_params=self.cli_params,
            head_object_response=None,
        )
        self.client.head_object.return_value = {}
        self.cli_params['request_payer'] = 'requester'
        self.set_size_for_mp_copy(self.future)
        subscriber.on_queued(self.future)
        self.client.head_object.assert_called_with(
            Bucket=self.source_bucket, Key=self.source_key,
            RequestPayer='requester'
        )


</source>
</class>

<class classid="465" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_binaryformat.py" startline="63" endline="77" pcid="8985">
    def test_can_convert_list_of_blob(self):
        members = {
            'BS': {
                'type': 'list',
                'member': {'type': 'blob'},
            }
        }
        params = {
            'BS': [u'Zm9v', u'']
        }
        expected_params = {
            'BS': [b'foo', b'']
        }
        self.assert_decoded_params(members, params, expected_params)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/test_binaryformat.py" startline="78" endline="93" pcid="8986">
    def test_can_convert_map_to_blob(self):
        members = {
            'StoB': {
                'type': 'map',
                'key': {'type': 'string'},
                'value': {'type': 'blob'},
            }
        }
        params = {
            'StoB': {'a': u'Zm9v', 'b': u''}
        }
        expected_params = {
            'StoB': {'a': b'foo', 'b': b''}
        }
        self.assert_decoded_params(members, params, expected_params)

</source>
</class>

<class classid="466" nclones="5" nlines="17" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_getstatus.py" startline="150" endline="175" pcid="9003">
            self.assertEqual(expected_output, mock_stdout.getvalue())

    def test_delivery_channel_success_single_delivery_info(self):
        name = 'default'
        success = {'lastStatus': 'SUCCESS'}

        stream_delivery_status = success
        history_delivery_status = {}
        snapshot_delivery_status = {}

        status = self._make_delivery_channel_status(
            name, stream_delivery_status=stream_delivery_status,
            history_delivery_status=history_delivery_status,
            snapshot_delivery_status=snapshot_delivery_status
        )
        self.channel_status.append(status)

        expected_output = (
            'Configuration Recorders:\n\n'
            'Delivery Channels:\n\n'
            'name: default\n'
            'last stream delivery status: SUCCESS\n\n'
        )

        with mock.patch('sys.stdout', six.StringIO()) as mock_stdout:
            self.cmd._run_main(self.parsed_args, self.parsed_globals)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_getstatus.py" startline="233" endline="264" pcid="9006">
            self.assertEqual(expected_output, mock_stdout.getvalue())

    def test_delivery_channel_mixed_multiple_delivery_info(self):
        name = 'default'
        success = {'lastStatus': 'SUCCESS'}
        failure = {'lastStatus': 'FAILURE', 'lastErrorCode': '500',
                   'lastErrorMessage': 'This is the error'}

        stream_delivery_status = failure
        history_delivery_status = success
        snapshot_delivery_status = success

        status = self._make_delivery_channel_status(
            name, stream_delivery_status=stream_delivery_status,
            history_delivery_status=history_delivery_status,
            snapshot_delivery_status=snapshot_delivery_status
        )
        self.channel_status.append(status)

        expected_output = (
            'Configuration Recorders:\n\n'
            'Delivery Channels:\n\n'
            'name: default\n'
            'last stream delivery status: FAILURE\n'
            'error code: 500\n'
            'message: This is the error\n'
            'last history delivery status: SUCCESS\n'
            'last snapshot delivery status: SUCCESS\n\n'
        )

        with mock.patch('sys.stdout', six.StringIO()) as mock_stdout:
            self.cmd._run_main(self.parsed_args, self.parsed_globals)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_getstatus.py" startline="204" endline="232" pcid="9005">
            self.assertEqual(expected_output, mock_stdout.getvalue())

    def test_delivery_channel_fail_single_delivery_info(self):
        name = 'default'
        failure = {'lastStatus': 'FAILURE', 'lastErrorCode': '500',
                   'lastErrorMessage': 'This is the error'}

        stream_delivery_status = failure
        history_delivery_status = {}
        snapshot_delivery_status = {}

        status = self._make_delivery_channel_status(
            name, stream_delivery_status=stream_delivery_status,
            history_delivery_status=history_delivery_status,
            snapshot_delivery_status=snapshot_delivery_status
        )
        self.channel_status.append(status)

        expected_output = (
            'Configuration Recorders:\n\n'
            'Delivery Channels:\n\n'
            'name: default\n'
            'last stream delivery status: FAILURE\n'
            'error code: 500\n'
            'message: This is the error\n\n'
        )

        with mock.patch('sys.stdout', six.StringIO()) as mock_stdout:
            self.cmd._run_main(self.parsed_args, self.parsed_globals)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_getstatus.py" startline="176" endline="203" pcid="9004">
            self.assertEqual(expected_output, mock_stdout.getvalue())

    def test_delivery_channel_success_multiple_delivery_info(self):
        name = 'default'
        success = {'lastStatus': 'SUCCESS'}

        stream_delivery_status = success
        history_delivery_status = success
        snapshot_delivery_status = success

        status = self._make_delivery_channel_status(
            name, stream_delivery_status=stream_delivery_status,
            history_delivery_status=history_delivery_status,
            snapshot_delivery_status=snapshot_delivery_status
        )
        self.channel_status.append(status)

        expected_output = (
            'Configuration Recorders:\n\n'
            'Delivery Channels:\n\n'
            'name: default\n'
            'last stream delivery status: SUCCESS\n'
            'last history delivery status: SUCCESS\n'
            'last snapshot delivery status: SUCCESS\n\n'
        )

        with mock.patch('sys.stdout', six.StringIO()) as mock_stdout:
            self.cmd._run_main(self.parsed_args, self.parsed_globals)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_getstatus.py" startline="265" endline="303" pcid="9007">
            self.assertEqual(expected_output, mock_stdout.getvalue())

    def test_multiple_delivery_channels(self):
        name = 'default'
        success = {'lastStatus': 'SUCCESS'}
        failure = {'lastStatus': 'FAILURE', 'lastErrorCode': '500',
                   'lastErrorMessage': 'This is the error'}

        stream_delivery_status = failure
        history_delivery_status = success
        snapshot_delivery_status = success

        status = self._make_delivery_channel_status(
            name, stream_delivery_status=stream_delivery_status,
            history_delivery_status=history_delivery_status,
            snapshot_delivery_status=snapshot_delivery_status
        )
        self.channel_status.append(status)
        self.channel_status.append(status)

        expected_output = (
            'Configuration Recorders:\n\n'
            'Delivery Channels:\n\n'
            'name: default\n'
            'last stream delivery status: FAILURE\n'
            'error code: 500\n'
            'message: This is the error\n'
            'last history delivery status: SUCCESS\n'
            'last snapshot delivery status: SUCCESS\n\n'
            'name: default\n'
            'last stream delivery status: FAILURE\n'
            'error code: 500\n'
            'message: This is the error\n'
            'last history delivery status: SUCCESS\n'
            'last snapshot delivery status: SUCCESS\n\n'
        )

        with mock.patch('sys.stdout', six.StringIO()) as mock_stdout:
            self.cmd._run_main(self.parsed_args, self.parsed_globals)
</source>
</class>

<class classid="467" nclones="2" nlines="19" similarity="73">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_putconfigurationrecorder.py" startline="76" endline="98" pcid="9028">
                'name': 'myname',
                'roleARN': 'myarn'}},
            parameters)

    def test_configuration_recorder_when_update_value(self):
        value = '{"name":"myname","roleARN":"myarn"}'
        parameters = {
            'ConfigurationRecorder': {
                'recordingGroup': {
                    'allSupported': True,
                    'resourceTypes': ['AWS::EC2::Volume']
                }
            }
        }
        extract_recording_group(self.session, self.argument_table)
        configuration_recorder_argument = self.argument_table[
            'configuration-recorder']
        configuration_recorder_argument.add_to_params(parameters, value)
        self.assertEqual(
            {'ConfigurationRecorder': {
                'name': 'myname',
                'roleARN': 'myarn',
                'recordingGroup': {
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/configservice/test_putconfigurationrecorder.py" startline="112" endline="130" pcid="9030">
                    'allSupported': True,
                    'resourceTypes': ['AWS::EC2::Volume']}}},
            parameters)

    def test_recording_group_when_update_value(self):
        value = '{"allSupported":true,"resourceTypes":["AWS::EC2::Volume"]}'
        parameters = {
            'ConfigurationRecorder': {
                'name': 'myname',
                'roleARN': 'myarn',
            }
        }
        extract_recording_group(self.session, self.argument_table)
        recording_group_argument = self.argument_table['recording-group']
        recording_group_argument.add_to_params(parameters, value)
        self.assertEqual(
            {'ConfigurationRecorder': {
                'name': 'myname',
                'roleARN': 'myarn',
</source>
</class>

<class classid="468" nclones="5" nlines="12" similarity="81">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="28" endline="40" pcid="9052">
    def test_extract_identifier(self):
        parsed_result = {'type': 'identifier', 'value': 'spam'}
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam')
        expected = {
            'expression': '#n0',
            'identifiers': {'#n0': 'spam'},
            'values': {},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="54" endline="66" pcid="9054">
    def test_extract_bytes(self):
        parsed_result = {'type': 'literal', 'value': b'spam'}
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('b"spam"')
        expected = {
            'expression': ':n0',
            'identifiers': {},
            'values': {':n0': b'spam'},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="67" endline="79" pcid="9055">
    def test_extract_number(self):
        parsed_result = {'type': 'literal', 'value': 7}
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract("7")
        expected = {
            'expression': ':n0',
            'identifiers': {},
            'values': {':n0': 7},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="80" endline="92" pcid="9056">
    def test_set_index_offset(self):
        parsed_result = {'type': 'identifier', 'value': 'spam'}
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam', 5)
        expected = {
            'expression': '#n5',
            'identifiers': {'#n5': 'spam'},
            'values': {},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="41" endline="53" pcid="9053">
    def test_extract_string(self):
        parsed_result = {'type': 'literal', 'value': 'spam'}
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('"spam"')
        expected = {
            'expression': ':n0',
            'identifiers': {},
            'values': {':n0': 'spam'},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
</class>

<class classid="469" nclones="11" nlines="17" similarity="70">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="93" endline="111" pcid="9057">
    def test_represent_comparator(self):
        parsed_result = {
            'type': 'comparator', 'value': 'eq',
            'children': [
                {'type': 'identifier', 'value': 'spam'},
                {'type': 'literal', 'value': 7}
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam = 7')
        expected = {
            'expression': '#n0 = :n1',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 7},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="205" endline="225" pcid="9062">
    def test_represent_subexpression(self):
        parsed_result = {
            'type': 'subexpression',
            'children': [
                {'type': 'comparator', 'value': 'lte', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('( spam <= 7 )')
        expected = {
            'expression': '( #n0 <= :n1 )',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 7},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="246" endline="264" pcid="9064">
    def test_represent_function(self):
        parsed_result = {
            'type': 'function', 'value': 'myfunction',
            'children': [
                {'type': 'identifier', 'value': 'spam'},
                {'type': 'literal', 'value': 1},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('myfunction(1, 2)')
        expected = {
            'expression': 'myfunction(#n0, :n1)',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 1},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="284" endline="301" pcid="9066">
    def test_represent_index_identifier(self):
        parsed_result = {
            'type': 'index_identifier', 'value': Decimal(0),
            'children': [
                {'type': 'identifier', 'value': 'foo', 'children': []},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('foo[0]')
        expected = {
            'expression': '#n0[0]',
            'identifiers': {'#n0': 'foo'},
            'values': {},
            'substitution_count': 1,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="226" endline="245" pcid="9063">
    def test_represent_between(self):
        parsed_result = {
            'type': 'between_expression',
            'children': [
                {'type': 'identifier', 'value': 'spam'},
                {'type': 'literal', 'value': 1},
                {'type': 'literal', 'value': 2},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam between 1 and 2')
        expected = {
            'expression': '#n0 BETWEEN :n1 AND :n2',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 1, ':n2': 2},
            'substitution_count': 3,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="184" endline="204" pcid="9061">
    def test_represent_not(self):
        parsed_result = {
            'type': 'not_expression',
            'children': [
                {'type': 'comparator', 'value': 'ne', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('NOT spam <> 7')
        expected = {
            'expression': 'NOT #n0 <> :n1',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 7},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="112" endline="136" pcid="9058">
    def test_represent_or(self):
        parsed_result = {
            'type': 'or_expression',
            'children': [
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'eggs'},
                    {'type': 'literal', 'value': 6}
                ]}
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam = 7 or eggs = 6')
        expected = {
            'expression': '#n0 = :n1 OR #n2 = :n3',
            'identifiers': {'#n0': 'spam', '#n2': 'eggs'},
            'values': {':n1': 7, ':n3': 6},
            'substitution_count': 4,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="162" endline="183" pcid="9060">
    def test_represent_in(self):
        parsed_result = {
            'type': 'in_expression',
            'children': [
                {'type': 'identifier', 'value': 'spam'},
                {'type': 'sequence', 'children': [
                    {'type': 'literal', 'value': 1},
                    {'type': 'literal', 'value': 2},
                ]}
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam IN (2, 3)')
        expected = {
            'expression': '#n0 IN (:n1, :n2)',
            'identifiers': {'#n0': 'spam'},
            'values': {':n1': 1, ':n2': 2},
            'substitution_count': 3,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="137" endline="161" pcid="9059">
    def test_represent_and(self):
        parsed_result = {
            'type': 'and_expression',
            'children': [
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'spam'},
                    {'type': 'literal', 'value': 7}
                ]},
                {'type': 'comparator', 'value': 'eq', 'children': [
                    {'type': 'identifier', 'value': 'eggs'},
                    {'type': 'literal', 'value': 6}
                ]}
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('spam = 7 and eggs = 6')
        expected = {
            'expression': '#n0 = :n1 AND #n2 = :n3',
            'identifiers': {'#n0': 'spam', '#n2': 'eggs'},
            'values': {':n1': 7, ':n3': 6},
            'substitution_count': 4,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="265" endline="283" pcid="9065">
    def test_represent_path_identifier(self):
        parsed_result = {
            'type': 'path_identifier',
            'children': [
                {'type': 'identifier', 'value': 'foo', 'children': []},
                {'type': 'identifier', 'value': 'bar', 'children': []},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('foo.bar')
        expected = {
            'expression': '#n0.#n1',
            'identifiers': {'#n0': 'foo', '#n1': 'bar'},
            'values': {},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_extractor.py" startline="302" endline="322" pcid="9067">
    def test_represent_dotted_index_identifier(self):
        parsed_result = {
            'type': 'path_identifier',
            'children': [
                {'type': 'index_identifier', 'value': Decimal(0), 'children': [
                    {'type': 'identifier', 'value': 'foo', 'children': []},
                ]},
                {'type': 'identifier', 'value': 'bar', 'children': []},
            ]
        }
        parser = FakeParser(parsed_result)
        extractor = AttributeExtractor(parser)
        result = extractor.extract('foo[0].bar')
        expected = {
            'expression': '#n0[0].#n1',
            'identifiers': {'#n0': 'foo', '#n1': 'bar'},
            'values': {},
            'substitution_count': 2,
        }
        self.assertEqual(result, expected)

</source>
</class>

<class classid="470" nclones="3" nlines="14" similarity="78">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_transform.py" startline="327" endline="348" pcid="9135">
    def test_transform_incorrect_type_for_structure(self):
        input_params = {
            'Structure': 'foo'
        }

        input_shape = {
            'Structure': {
                'type': 'structure',
                'members': {
                    'TransformMe': {'shape': self.target_shape},
                }
            }
        }

        self.add_input_shape(input_shape)

        self.transformer.transform(
            params=input_params, model=self.operation_model.input_shape,
            transformation=self.transformation,
            target_shape=self.target_shape)
        self.assertEqual(input_params, {'Structure': 'foo'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_transform.py" startline="349" endline="369" pcid="9136">
    def test_transform_incorrect_type_for_map(self):
        input_params = {
            'Map': 'foo'
        }

        input_shape = {
            'Map': {
                'type': 'map',
                'key': {'shape': 'String'},
                'value': {'shape': self.target_shape}
            }
        }

        self.add_input_shape(input_shape)

        self.transformer.transform(
            params=input_params, model=self.operation_model.input_shape,
            transformation=self.transformation,
            target_shape=self.target_shape)
        self.assertEqual(input_params, {'Map': 'foo'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/dynamodb/test_transform.py" startline="370" endline="387" pcid="9137">
    def test_transform_incorrect_type_for_list(self):
        input_params = {
            'List': 'foo'
        }

        input_shape = {
            'List': {
                'type': 'list',
                'member': {'shape': self.target_shape}
            }
        }

        self.add_input_shape(input_shape)

        self.transformer.transform(
            params=input_params, model=self.operation_model.input_shape,
            transformation=self.transformation, target_shape=self.target_shape)
        self.assertEqual(input_params, {'List': 'foo'})
</source>
</class>

<class classid="471" nclones="2" nlines="21" similarity="95">
<source file="systems/aws-cli-2.4.27/tests/__init__.py" startline="528" endline="549" pcid="9301">
    def put_object(self, bucket_name, key_name, contents='', extra_args=None):
        client = self._create_client_for_bucket(bucket_name)
        call_args = {
            'Bucket': bucket_name,
            'Key': key_name, 'Body': contents
        }
        if extra_args is not None:
            call_args.update(extra_args)
        response = client.put_object(**call_args)
        extra_head_params = {}
        if extra_args:
            extra_head_params = dict(
                (k, v) for (k, v) in extra_args.items()
                if k in self._PUT_HEAD_SHARED_EXTRAS
            )
        self.wait_until_key_exists(
            bucket_name,
            key_name,
            extra_params=extra_head_params,
        )
        return response

</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="781" endline="803" pcid="9970">
    def put_object(self, bucket_name, key_name, contents='', extra_args=None):
        client = self.create_client_for_bucket(bucket_name)
        call_args = {
            'Bucket': bucket_name,
            'Key': key_name, 'Body': contents
        }
        if extra_args is not None:
            call_args.update(extra_args)
        response = client.put_object(**call_args)
        self.addCleanup(self.delete_key, bucket_name, key_name)
        extra_head_params = {}
        if extra_args:
            extra_head_params = dict(
                (k, v) for (k, v) in extra_args.items()
                if k in self._PUT_HEAD_SHARED_EXTRAS
            )
        self.wait_until_key_exists(
            bucket_name,
            key_name,
            extra_params=extra_head_params,
        )
        return response

</source>
</class>

<class classid="472" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/__init__.py" startline="550" endline="572" pcid="9302">
    def delete_bucket(self, bucket_name, attempts=5, delay=5):
        self.remove_all_objects(bucket_name)
        client = self._create_client_for_bucket(bucket_name)

        # There's a chance that, even though the bucket has been used
        # several times, the delete will fail due to eventual consistency
        # issues.
        attempts_remaining = attempts
        while True:
            attempts_remaining -= 1
            try:
                client.delete_bucket(Bucket=bucket_name)
                break
            except client.exceptions.NoSuchBucket:
                if self.bucket_not_exists(bucket_name):
                    # Fast fail when the NoSuchBucket error is real.
                    break
                if attempts_remaining <= 0:
                    raise
                time.sleep(delay)

        self._bucket_to_region.pop(bucket_name, None)

</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="804" endline="826" pcid="9971">
    def delete_bucket(self, bucket_name, attempts=5, delay=5):
        self.remove_all_objects(bucket_name)
        client = self.create_client_for_bucket(bucket_name)

        # There's a chance that, even though the bucket has been used
        # several times, the delete will fail due to eventual consistency
        # issues.
        attempts_remaining = attempts
        while True:
            attempts_remaining -= 1
            try:
                client.delete_bucket(Bucket=bucket_name)
                break
            except client.exceptions.NoSuchBucket:
                if self.bucket_not_exists(bucket_name):
                    # Fast fail when the NoSuchBucket error is real.
                    break
                if attempts_remaining <= 0:
                    raise
                time.sleep(delay)

        self.regions.pop(bucket_name, None)

</source>
</class>

<class classid="473" nclones="2" nlines="14" similarity="78">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/upload.py" startline="526" endline="551" pcid="9452">
    def _get_upload_input_manager_cls(self, transfer_future):
        """Retrieves a class for managing input for an upload based on file type

        :type transfer_future: s3transfer.futures.TransferFuture
        :param transfer_future: The transfer future for the request

        :rtype: class of UploadInputManager
        :returns: The appropriate class to use for managing a specific type of
            input for uploads.
        """
        upload_manager_resolver_chain = [
            UploadFilenameInputManager,
            UploadSeekableInputManager,
            UploadNonSeekableInputManager,
        ]

        fileobj = transfer_future.meta.call_args.fileobj
        for upload_manager_cls in upload_manager_resolver_chain:
            if upload_manager_cls.is_compatible(fileobj):
                return upload_manager_cls
        raise RuntimeError(
            'Input {} of type: {} is not supported.'.format(
                fileobj, type(fileobj)
            )
        )

</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/download.py" startline="285" endline="314" pcid="9579">
    def _get_download_output_manager_cls(self, transfer_future, osutil):
        """Retrieves a class for managing output for a download

        :type transfer_future: s3transfer.futures.TransferFuture
        :param transfer_future: The transfer future for the request

        :type osutil: s3transfer.utils.OSUtils
        :param osutil: The os utility associated to the transfer

        :rtype: class of DownloadOutputManager
        :returns: The appropriate class to use for managing a specific type of
            input for downloads.
        """
        download_manager_resolver_chain = [
            DownloadSpecialFilenameOutputManager,
            DownloadFilenameOutputManager,
            DownloadSeekableOutputManager,
            DownloadNonSeekableOutputManager,
        ]

        fileobj = transfer_future.meta.call_args.fileobj
        for download_manager_cls in download_manager_resolver_chain:
            if download_manager_cls.is_compatible(fileobj, osutil):
                return download_manager_cls
        raise RuntimeError(
            'Output {} of type: {} is not supported.'.format(
                fileobj, type(fileobj)
            )
        )

</source>
</class>

<class classid="474" nclones="2" nlines="20" similarity="80">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/manager.py" startline="288" endline="333" pcid="9466">
    def upload(self, fileobj, bucket, key, extra_args=None, subscribers=None):
        """Uploads a file to S3

        :type fileobj: str or seekable file-like object
        :param fileobj: The name of a file to upload or a seekable file-like
            object to upload. It is recommended to use a filename because
            file-like objects may result in higher memory usage.

        :type bucket: str
        :param bucket: The name of the bucket to upload to

        :type key: str
        :param key: The name of the key to upload to

        :type extra_args: dict
        :param extra_args: Extra arguments that may be passed to the
            client operation

        :type subscribers: list(s3transfer.subscribers.BaseSubscriber)
        :param subscribers: The list of subscribers to be invoked in the
            order provided based on the event emit during the process of
            the transfer request.

        :rtype: s3transfer.futures.TransferFuture
        :returns: Transfer future representing the upload
        """
        if extra_args is None:
            extra_args = {}
        if subscribers is None:
            subscribers = []
        self._validate_all_known_args(extra_args, self.ALLOWED_UPLOAD_ARGS)
        self._validate_if_bucket_supported(bucket)
        call_args = CallArgs(
            fileobj=fileobj,
            bucket=bucket,
            key=key,
            extra_args=extra_args,
            subscribers=subscribers,
        )
        extra_main_kwargs = {}
        if self._bandwidth_limiter:
            extra_main_kwargs['bandwidth_limiter'] = self._bandwidth_limiter
        return self._submit_transfer(
            call_args, UploadSubmissionTask, extra_main_kwargs
        )

</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/manager.py" startline="334" endline="381" pcid="9467">
    def download(
        self, bucket, key, fileobj, extra_args=None, subscribers=None
    ):
        """Downloads a file from S3

        :type bucket: str
        :param bucket: The name of the bucket to download from

        :type key: str
        :param key: The name of the key to download from

        :type fileobj: str or seekable file-like object
        :param fileobj: The name of a file to download or a seekable file-like
            object to download. It is recommended to use a filename because
            file-like objects may result in higher memory usage.

        :type extra_args: dict
        :param extra_args: Extra arguments that may be passed to the
            client operation

        :type subscribers: list(s3transfer.subscribers.BaseSubscriber)
        :param subscribers: The list of subscribers to be invoked in the
            order provided based on the event emit during the process of
            the transfer request.

        :rtype: s3transfer.futures.TransferFuture
        :returns: Transfer future representing the download
        """
        if extra_args is None:
            extra_args = {}
        if subscribers is None:
            subscribers = []
        self._validate_all_known_args(extra_args, self.ALLOWED_DOWNLOAD_ARGS)
        self._validate_if_bucket_supported(bucket)
        call_args = CallArgs(
            bucket=bucket,
            key=key,
            fileobj=fileobj,
            extra_args=extra_args,
            subscribers=subscribers,
        )
        extra_main_kwargs = {'io_executor': self._io_executor}
        if self._bandwidth_limiter:
            extra_main_kwargs['bandwidth_limiter'] = self._bandwidth_limiter
        return self._submit_transfer(
            call_args, DownloadSubmissionTask, extra_main_kwargs
        )

</source>
</class>

<class classid="475" nclones="4" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/manager.py" startline="445" endline="480" pcid="9469">
    def delete(self, bucket, key, extra_args=None, subscribers=None):
        """Delete an S3 object.

        :type bucket: str
        :param bucket: The name of the bucket.

        :type key: str
        :param key: The name of the S3 object to delete.

        :type extra_args: dict
        :param extra_args: Extra arguments that may be passed to the
            DeleteObject call.

        :type subscribers: list
        :param subscribers: A list of subscribers to be invoked during the
            process of the transfer request.  Note that the ``on_progress``
            callback is not invoked during object deletion.

        :rtype: s3transfer.futures.TransferFuture
        :return: Transfer future representing the deletion.

        """
        if extra_args is None:
            extra_args = {}
        if subscribers is None:
            subscribers = []
        self._validate_all_known_args(extra_args, self.ALLOWED_DELETE_ARGS)
        self._validate_if_bucket_supported(bucket)
        call_args = CallArgs(
            bucket=bucket,
            key=key,
            extra_args=extra_args,
            subscribers=subscribers,
        )
        return self._submit_transfer(call_args, DeleteSubmissionTask)

</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/crt.py" startline="218" endline="230" pcid="9506">
    def delete(self, bucket, key, extra_args=None, subscribers=None):
        if extra_args is None:
            extra_args = {}
        if subscribers is None:
            subscribers = {}
        callargs = CallArgs(
            bucket=bucket,
            key=key,
            extra_args=extra_args,
            subscribers=subscribers,
        )
        return self._submit_transfer("delete_object", callargs)

</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/crt.py" startline="204" endline="217" pcid="9505">
    def upload(self, fileobj, bucket, key, extra_args=None, subscribers=None):
        if extra_args is None:
            extra_args = {}
        if subscribers is None:
            subscribers = {}
        callargs = CallArgs(
            bucket=bucket,
            key=key,
            fileobj=fileobj,
            extra_args=extra_args,
            subscribers=subscribers,
        )
        return self._submit_transfer("put_object", callargs)

</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/crt.py" startline="188" endline="203" pcid="9504">
    def download(
        self, bucket, key, fileobj, extra_args=None, subscribers=None
    ):
        if extra_args is None:
            extra_args = {}
        if subscribers is None:
            subscribers = {}
        callargs = CallArgs(
            bucket=bucket,
            key=key,
            fileobj=fileobj,
            extra_args=extra_args,
            subscribers=subscribers,
        )
        return self._submit_transfer("get_object", callargs)

</source>
</class>

<class classid="476" nclones="2" nlines="24" similarity="70">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/copies.py" startline="323" endline="368" pcid="9496">
    def _main(
        self,
        client,
        copy_source,
        bucket,
        key,
        upload_id,
        part_number,
        extra_args,
        callbacks,
        size,
    ):
        """
        :param client: The client to use when calling PutObject
        :param copy_source: The CopySource parameter to use
        :param bucket: The name of the bucket to upload to
        :param key: The name of the key to upload to
        :param upload_id: The id of the upload
        :param part_number: The number representing the part of the multipart
            upload
        :param extra_args: A dictionary of any extra arguments that may be
            used in the upload.
        :param callbacks: List of callbacks to call after copy part
        :param size: The size of the transfer. This value is passed into
            the callbacks

        :rtype: dict
        :returns: A dictionary representing a part::

            {'Etag': etag_value, 'PartNumber': part_number}

            This value can be appended to a list to be used to complete
            the multipart upload.
        """
        response = client.upload_part_copy(
            CopySource=copy_source,
            Bucket=bucket,
            Key=key,
            UploadId=upload_id,
            PartNumber=part_number,
            **extra_args
        )
        for callback in callbacks:
            callback(bytes_transferred=size)
        etag = response['CopyPartResult']['ETag']
        return {'ETag': etag, 'PartNumber': part_number}
</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/__init__.py" startline="459" endline="485" pcid="9815">
    def _upload_one_part(
        self,
        filename,
        bucket,
        key,
        upload_id,
        part_size,
        extra_args,
        callback,
        part_number,
    ):
        open_chunk_reader = self._os.open_file_chunk_reader
        with open_chunk_reader(
            filename, part_size * (part_number - 1), part_size, callback
        ) as body:
            response = self._client.upload_part(
                Bucket=bucket,
                Key=key,
                UploadId=upload_id,
                PartNumber=part_number,
                Body=body,
                **extra_args,
            )
            etag = response['ETag']
            return {'ETag': etag, 'PartNumber': part_number}


</source>
</class>

<class classid="477" nclones="2" nlines="12" similarity="76">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/utils.py" startline="286" endline="314" pcid="9622">
    def is_special_file(cls, filename):
        """Checks to see if a file is a special UNIX file.

        It checks if the file is a character special device, block special
        device, FIFO, or socket.

        :param filename: Name of the file

        :returns: True if the file is a special file. False, if is not.
        """
        # If it does not exist, it must be a new file so it cannot be
        # a special file.
        if not os.path.exists(filename):
            return False
        mode = os.stat(filename).st_mode
        # Character special device.
        if stat.S_ISCHR(mode):
            return True
        # Block special device
        if stat.S_ISBLK(mode):
            return True
        # Named pipe / FIFO
        if stat.S_ISFIFO(mode):
            return True
        # Socket.
        if stat.S_ISSOCK(mode):
            return True
        return False

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/s3/filegenerator.py" startline="29" endline="50" pcid="13509">

def is_special_file(path):
    """
    This function checks to see if a special file.  It checks if the
    file is a character special device, block special device, FIFO, or
    socket.
    """
    mode = os.stat(path).st_mode
    # Character special device.
    if stat.S_ISCHR(mode):
        return True
    # Block special device
    if stat.S_ISBLK(mode):
        return True
    # FIFO.
    if stat.S_ISFIFO(mode):
        return True
    # Socket.
    if stat.S_ISSOCK(mode):
        return True
    return False

</source>
</class>

<class classid="478" nclones="2" nlines="12" similarity="83">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/utils.py" startline="461" endline="498" pcid="9636">
    def from_filename(
        cls,
        filename,
        start_byte,
        chunk_size,
        callbacks=None,
        enable_callbacks=True,
    ):
        """Convenience factory function to create from a filename.

        :type start_byte: int
        :param start_byte: The first byte from which to start reading.

        :type chunk_size: int
        :param chunk_size: The max chunk size to read.  Trying to read
            pass the end of the chunk size will behave like you've
            reached the end of the file.

        :type full_file_size: int
        :param full_file_size: The entire content length associated
            with ``fileobj``.

        :type callbacks: function(amount_read)
        :param callbacks: Called whenever data is read from this object.

        :type enable_callbacks: bool
        :param enable_callbacks: Indicate whether to invoke callback
            during read() calls.

        :rtype: ``ReadFileChunk``
        :return: A new instance of ``ReadFileChunk``

        """
        f = open(filename, 'rb')
        f.seek(start_byte)
        file_size = os.fstat(f.fileno()).st_size
        return cls(f, chunk_size, file_size, callbacks, enable_callbacks)

</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/__init__.py" startline="236" endline="274" pcid="9792">
    def from_filename(
        cls,
        filename,
        start_byte,
        chunk_size,
        callback=None,
        enable_callback=True,
    ):
        """Convenience factory function to create from a filename.

        :type start_byte: int
        :param start_byte: The first byte from which to start reading.

        :type chunk_size: int
        :param chunk_size: The max chunk size to read.  Trying to read
            pass the end of the chunk size will behave like you've
            reached the end of the file.

        :type full_file_size: int
        :param full_file_size: The entire content length associated
            with ``fileobj``.

        :type callback: function(amount_read)
        :param callback: Called whenever data is read from this object.

        :type enable_callback: bool
        :param enable_callback: Indicate whether to invoke callback
            during read() calls.

        :rtype: ``ReadFileChunk``
        :return: A new instance of ``ReadFileChunk``

        """
        f = open(filename, 'rb')
        file_size = os.fstat(f.fileno()).st_size
        return cls(
            f, start_byte, chunk_size, file_size, callback, enable_callback
        )

</source>
</class>

<class classid="479" nclones="2" nlines="18" similarity="72">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/bandwidth.py" startline="102" endline="136" pcid="9742">
    def __init__(
        self,
        fileobj,
        leaky_bucket,
        transfer_coordinator,
        time_utils=None,
        bytes_threshold=256 * 1024,
    ):
        """Limits bandwidth for reads on a wrapped stream

        :type fileobj: file-like object
        :param fileobj: The file like object to wrap

        :type leaky_bucket: LeakyBucket
        :param leaky_bucket: The leaky bucket to use to throttle reads on
            the stream

        :type transfer_coordinator: s3transfer.futures.TransferCoordinator
        param transfer_coordinator: The coordinator for the general transfer
            that the wrapped stream is a part of

        :type time_utils: TimeUtils
        :param time_utils: The time utility to use for interacting with time
        """
        self._fileobj = fileobj
        self._leaky_bucket = leaky_bucket
        self._transfer_coordinator = transfer_coordinator
        self._time_utils = time_utils
        if time_utils is None:
            self._time_utils = TimeUtils()
        self._bandwidth_limiting_enabled = True
        self._request_token = RequestToken()
        self._bytes_seen = 0
        self._bytes_threshold = bytes_threshold

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/credentials.py" startline="1653" endline="1671" pcid="11155">
    }

    def __init__(
            self,
            load_config,
            client_creator,
            profile_name,
            cache=None,
            disable_env_vars=False,
            token_loader_cls=None,
    ):
        self.cache = cache
        self._load_config = load_config
        self._client_creator = client_creator
        self._profile_name = profile_name
        self._profile_config = None
        self._disable_env_vars = disable_env_vars
        if token_loader_cls is None:
            token_loader_cls = FileWebIdentityTokenLoader
</source>
</class>

<class classid="480" nclones="2" nlines="12" similarity="91">
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/__init__.py" startline="383" endline="394" pcid="9811">
    def __init__(
        self,
        client,
        config,
        osutil,
        executor_cls=concurrent.futures.ThreadPoolExecutor,
    ):
        self._client = client
        self._config = config
        self._os = osutil
        self._executor_cls = executor_cls

</source>
<source file="systems/aws-cli-2.4.27/awscli/s3transfer/__init__.py" startline="521" endline="533" pcid="9819">
    def __init__(
        self,
        client,
        config,
        osutil,
        executor_cls=concurrent.futures.ThreadPoolExecutor,
    ):
        self._client = client
        self._config = config
        self._os = osutil
        self._executor_cls = executor_cls
        self._ioqueue = ShutdownQueue(self._config.max_io_queue)

</source>
</class>

<class classid="481" nclones="2" nlines="12" similarity="75">
<source file="systems/aws-cli-2.4.27/awscli/clidocs.py" startline="224" endline="238" pcid="9857">
    def _doc_member(self, doc, member_name, member_shape, stack):
        if member_shape.name in stack:
            # Document the recursion once, otherwise just
            # note the fact that it's recursive and return.
            if stack.count(member_shape.name) > 1:
                if member_shape.type_name == 'structure':
                    doc.write('( ... recursive ... )')
                return
        stack.append(member_shape.name)
        try:
            self._do_doc_member(doc, member_name,
                                member_shape, stack)
        finally:
            stack.pop()

</source>
<source file="systems/aws-cli-2.4.27/awscli/clidocs.py" startline="429" endline="442" pcid="9882">
    def _json_example(self, doc, argument_model, stack):
        if argument_model.name in stack:
            # Document the recursion once, otherwise just
            # note the fact that it's recursive and return.
            if stack.count(argument_model.name) > 1:
                if argument_model.type_name == 'structure':
                    doc.write('{ ... recursive ... }')
                return
        stack.append(argument_model.name)
        try:
            self._do_json_example(doc, argument_model, stack)
        finally:
            stack.pop()

</source>
</class>

<class classid="482" nclones="2" nlines="19" similarity="70">
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="424" endline="446" pcid="9944">
    def run_cmd(self, cmd, expected_rc=0):
        logging.debug("Calling cmd: %s", cmd)
        self.patch_make_request()
        event_emitter = self.driver.session.get_component('event_emitter')
        event_emitter.register('before-call', self.before_call)
        event_emitter.register_first(
            'before-parameter-build.*.*', self.before_parameter_build)
        if not isinstance(cmd, list):
            cmdlist = cmd.split()
        else:
            cmdlist = cmd
        with capture_output() as captured:
            rc = self.entry_point.main(cmdlist)
        stderr = captured.stderr.getvalue()
        stdout = captured.stdout.getvalue()
        self.assertEqual(
            rc, expected_rc,
            "Unexpected rc (expected: %s, actual: %s) for command: %s\n"
            "stdout:\n%sstderr:\n%s" % (
                expected_rc, rc, cmd, stdout, stderr))
        return stdout, stderr, rc


</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="481" endline="500" pcid="9948">
    def run_cmd(self, cmd, expected_rc=0):
        if not isinstance(cmd, list):
            cmdlist = cmd.split()
        else:
            cmdlist = cmd
        with capture_output() as captured:
            try:
                rc = self.entry_point.main(cmdlist)
            except SystemExit as e:
                rc = e.code
        stderr = captured.stderr.getvalue()
        stdout = captured.stdout.getvalue()
        self.assertEqual(
            rc, expected_rc,
            "Unexpected rc (expected: %s, actual: %s) for command: %s\n"
            "stdout:\n%sstderr:\n%s" % (
                expected_rc, rc, cmd, stdout, stderr))
        return stdout, stderr, rc


</source>
</class>

<class classid="483" nclones="2" nlines="13" similarity="71">
<source file="systems/aws-cli-2.4.27/awscli/shorthand.py" startline="276" endline="289" pcid="10091">
    def _explicit_list(self):
        # explicit-list = "[" [value *(",' value)] "]"
        self._expect('[', consume_whitespace=True)
        values = []
        while self._current() != ']':
            val = self._explicit_values()
            values.append(val)
            self._consume_whitespace()
            if self._current() != ']':
                self._expect(',')
                self._consume_whitespace()
        self._expect(']')
        return values

</source>
<source file="systems/aws-cli-2.4.27/awscli/shorthand.py" startline="299" endline="313" pcid="10093">
    def _hash_literal(self):
        self._expect('{', consume_whitespace=True)
        keyvals = {}
        while self._current() != '}':
            key = self._key()
            self._expect('=', consume_whitespace=True)
            v = self._explicit_values()
            self._consume_whitespace()
            if self._current() != '}':
                self._expect(',')
                self._consume_whitespace()
            keyvals[key] = v
        self._expect('}')
        return keyvals

</source>
</class>

<class classid="484" nclones="2" nlines="19" similarity="75">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/paginator.py" startline="45" endline="73" pcid="10215">
    def _add_paginator(self, section, paginator_name):
        section = section.add_new_section(paginator_name)

        # Docment the paginator class
        section.style.start_sphinx_py_class(
            class_name='%s.Paginator.%s' % (
                self._client.__class__.__name__, paginator_name))
        section.style.start_codeblock()
        section.style.new_line()

        # Document how to instantiate the paginator.
        section.write(
            'paginator = client.get_paginator(\'%s\')' % xform_name(
                paginator_name)
        )
        section.style.end_codeblock()
        section.style.new_line()
        # Get the pagination model for the particular paginator.
        paginator_config = self._service_paginator_model.get_paginator(
            paginator_name)
        document_paginate_method(
            section=section,
            paginator_name=paginator_name,
            event_emitter=self._client.meta.events,
            service_model=self._client.meta.service_model,
            paginator_config=paginator_config
        )


</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/waiter.py" startline="40" endline="64" pcid="10262">
    def _add_single_waiter(self, section, waiter_name):
        section = section.add_new_section(waiter_name)
        section.style.start_sphinx_py_class(
            class_name='%s.Waiter.%s' % (
                self._client.__class__.__name__, waiter_name))

        # Add example on how to instantiate waiter.
        section.style.start_codeblock()
        section.style.new_line()
        section.write(
            'waiter = client.get_waiter(\'%s\')' % xform_name(waiter_name)
        )
        section.style.end_codeblock()

        # Add information on the wait() method
        section.style.new_line()
        document_wait_method(
            section=section,
            waiter_name=waiter_name,
            event_emitter=self._client.meta.events,
            service_model=self._client.meta.service_model,
            service_waiter_model=self._service_waiter_model
        )


</source>
</class>

<class classid="485" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/client.py" startline="266" endline="279" pcid="10329">
    def _add_response_example(self, section, shape):
        example_section = section.add_new_section('syntax')
        example_section.style.new_line()
        example_section.style.bold('Syntax')
        example_section.style.new_paragraph()
        documenter = ResponseExampleDocumenter(
            service_id=self._service_id,
            operation_name=None,
            event_emitter=self._client.meta.events,
        )
        documenter.document_example(
            example_section, shape, include=[self._GENERIC_ERROR_SHAPE],
        )

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/client.py" startline="280" endline="292" pcid="10330">
    def _add_response_params(self, section, shape):
        params_section = section.add_new_section('Structure')
        params_section.style.new_line()
        params_section.style.bold('Structure')
        params_section.style.new_paragraph()
        documenter = ResponseParamsDocumenter(
            service_id=self._service_id,
            operation_name=None,
            event_emitter=self._client.meta.events,
        )
        documenter.document_params(
            params_section, shape, include=[self._GENERIC_ERROR_SHAPE],
        )
</source>
</class>

<class classid="486" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/style.py" startline="232" endline="255" pcid="10376">
    def end_a(self):
        self.doc.do_translation = False
        if self.a_href:
            last_write = self.doc.pop_write()
            last_write = last_write.rstrip(' ')
            if last_write and last_write != '`':
                if ':' in last_write:
                    last_write = last_write.replace(':', r'\:')
                self.doc.push_write(last_write)
                self.doc.push_write(' <%s>`__' % self.a_href)
            elif last_write == '`':
                # Look at start_a().  It will do a self.doc.write('`')
                # which is the start of the link title.  If that is the
                # case then there was no link text.  We should just
                # use an inline link.  The syntax of this is
                # `<http://url>`_
                self.doc.push_write('`<%s>`__' % self.a_href)
            else:
                self.doc.push_write(self.a_href)
                self.doc.hrefs[self.a_href] = self.a_href
                self.doc.write('`__')
            self.a_href = None
        self.doc.write(' ')

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/style.py" startline="232" endline="255" pcid="13973">
    def end_a(self):
        self.doc.do_translation = False
        if self.a_href:
            last_write = self.doc.pop_write()
            last_write = last_write.rstrip(' ')
            if last_write and last_write != '`':
                if ':' in last_write:
                    last_write = last_write.replace(':', r'\:')
                self.doc.push_write(last_write)
                self.doc.push_write(' <%s>`__' % self.a_href)
            elif last_write == '`':
                # Look at start_a().  It will do a self.doc.write('`')
                # which is the start of the link title.  If that is the
                # case then there was no link text.  We should just
                # use an inline link.  The syntax of this is
                # `<http://url>`_
                self.doc.push_write('`<%s>`__' % self.a_href)
            else:
                self.doc.push_write(self.a_href)
                self.doc.hrefs[self.a_href] = self.a_href
                self.doc.write('`__')
            self.a_href = None
        self.doc.write(' ')

</source>
</class>

<class classid="487" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="66" endline="80" pcid="10415">
    def add_tag(self, tag, attrs=None, is_start=True):
        if not self._doc_has_handler(tag, is_start):
            self.unhandled_tags.append(tag)
            return

        if is_start:
            if tag == 'li':
                node = LineItemNode(attrs)
            else:
                node = TagNode(tag, attrs)
            self.current_node.add_child(node)
            self.current_node = node
        else:
            self.current_node = self.current_node.parent

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="66" endline="80" pcid="14012">
    def add_tag(self, tag, attrs=None, is_start=True):
        if not self._doc_has_handler(tag, is_start):
            self.unhandled_tags.append(tag)
            return

        if is_start:
            if tag == 'li':
                node = LineItemNode(attrs)
            else:
                node = TagNode(tag, attrs)
            self.current_node.add_child(node)
            self.current_node = node
        else:
            self.current_node = self.current_node.parent

</source>
</class>

<class classid="488" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="154" endline="172" pcid="10431">
    def _lstrip(self, node):
        """
        Traverses the tree, stripping out whitespace until text data is found
        :param node: The node to strip
        :return: True if non-whitespace data was found, False otherwise
        """
        for child in node.children:
            if isinstance(child, DataNode):
                child.lstrip()
                if child.data:
                    return True
            else:
                found = self._lstrip(child)
                if found:
                    return True

        return False


</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="154" endline="172" pcid="14028">
    def _lstrip(self, node):
        """
        Traverses the tree, stripping out whitespace until text data is found
        :param node: The node to strip
        :return: True if non-whitespace data was found, False otherwise
        """
        for child in node.children:
            if isinstance(child, DataNode):
                child.lstrip()
                if child.data:
                    return True
            else:
                found = self._lstrip(child)
                if found:
                    return True

        return False


</source>
</class>

<class classid="489" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="186" endline="200" pcid="10434">
    def write(self, doc):
        if not self.data:
            return

        if self.data.isspace():
            str_data = ' '
        else:
            end_space = self.data[-1].isspace()
            words = self.data.split()
            words = doc.translate_words(words)
            str_data = ' '.join(words)
            if end_space:
                str_data += ' '

        doc.handle_data(str_data)
</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="186" endline="200" pcid="14031">
    def write(self, doc):
        if not self.data:
            return

        if self.data.isspace():
            str_data = ' '
        else:
            end_space = self.data[-1].isspace()
            words = self.data.split()
            words = doc.translate_words(words)
            str_data = ' '.join(words)
            if end_space:
                str_data += ' '

        doc.handle_data(str_data)
</source>
</class>

<class classid="490" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="24" endline="34" pcid="10435">
    def __init__(self, target='man'):
        self.style = ReSTStyle(self)
        self.target = target
        self.parser = DocStringParser(self)
        self.keep_data = True
        self.do_translation = False
        self.translation_map = {}
        self.hrefs = {}
        self._writes = []
        self._last_doc_string = None

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="24" endline="34" pcid="14219">
    def __init__(self, target='man'):
        self.style = ReSTStyle(self)
        self.target = target
        self.parser = DocStringParser(self)
        self.keep_data = True
        self.do_translation = False
        self.translation_map = {}
        self.hrefs = {}
        self._writes = []
        self._last_doc_string = None

</source>
</class>

<class classid="491" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="87" endline="98" pcid="10445">
    def include_doc_string(self, doc_string):
        if doc_string:
            try:
                start = len(self._writes)
                self.parser.feed(doc_string)
                self.parser.close()
                end = len(self._writes)
                self._last_doc_string = (start, end)
            except Exception:
                LOG.debug('Error parsing doc string', exc_info=True)
                LOG.debug(doc_string)

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="87" endline="98" pcid="14229">
    def include_doc_string(self, doc_string):
        if doc_string:
            try:
                start = len(self._writes)
                self.parser.feed(doc_string)
                self.parser.close()
                end = len(self._writes)
                self._last_doc_string = (start, end)
            except Exception:
                LOG.debug('Error parsing doc string', exc_info=True)
                LOG.debug(doc_string)

</source>
</class>

<class classid="492" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="107" endline="129" pcid="10447">
    def __init__(self, name, section_names=None, target='man', context=None):
        """Provides a Hierarichial structure to a ReSTDocument

        You can write to it similiar to as you can to a ReSTDocument but
        has an innate structure for more orginaztion and abstraction.

        :param name: The name of the document
        :param section_names: A list of sections to be included
            in the document.
        :param target: The target documentation of the Document structure
        :param context: A dictionary of data to store with the strucuture. These
            are only stored per section not the entire structure.
        """
        super(DocumentStructure, self).__init__(target=target)
        self._name = name
        self._structure = OrderedDict()
        self._path = [self._name]
        self._context = {}
        if context is not None:
            self._context = context
        if section_names is not None:
            self._generate_structure(section_names)

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="107" endline="129" pcid="14231">
    def __init__(self, name, section_names=None, target='man', context=None):
        """Provides a Hierarichial structure to a ReSTDocument

        You can write to it similiar to as you can to a ReSTDocument but
        has an innate structure for more orginaztion and abstraction.

        :param name: The name of the document
        :param section_names: A list of sections to be included
            in the document.
        :param target: The target documentation of the Document structure
        :param context: A dictionary of data to store with the strucuture. These
            are only stored per section not the entire structure.
        """
        super(DocumentStructure, self).__init__(target=target)
        self._name = name
        self._structure = OrderedDict()
        self._path = [self._name]
        self._context = {}
        if context is not None:
            self._context = context
        if section_names is not None:
            self._generate_structure(section_names)

</source>
</class>

<class classid="493" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="193" endline="210" pcid="10457">
    def flush_structure(self):
        """Flushes a doc structure to a ReSTructed string

        The document is flushed out in a DFS style where sections and their
        subsections' values are added to the string as they are visited.
        """
        # We are at the root flush the links at the beginning of the
        # document
        if len(self.path) == 1:
            if self.hrefs:
                self.style.new_paragraph()
                for refname, link in self.hrefs.items():
                    self.style.link_target_definition(refname, link)
        value = self.getvalue()
        for name, section in self._structure.items():
            value += section.flush_structure()
        return value

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="193" endline="210" pcid="14241">
    def flush_structure(self):
        """Flushes a doc structure to a ReSTructed string

        The document is flushed out in a DFS style where sections and their
        subsections' values are added to the string as they are visited.
        """
        # We are at the root flush the links at the beginning of the
        # document
        if len(self.path) == 1:
            if self.hrefs:
                self.style.new_paragraph()
                for refname, link in self.hrefs.items():
                    self.style.link_target_definition(refname, link)
        value = self.getvalue()
        for name, section in self._structure.items():
            value += section.flush_structure()
        return value

</source>
</class>

<class classid="494" nclones="6" nlines="10" similarity="70">
<source file="systems/aws-cli-2.4.27/awscli/botocore/retries/bucket.py" startline="23" endline="33" pcid="10686">
    def __init__(self, max_rate, clock, min_rate=_MIN_RATE):
        self._fill_rate = None
        self._max_capacity = None
        self._current_capacity = 0
        self._clock = clock
        self._last_timestamp = None
        self._min_rate = min_rate
        self._lock = threading.Lock()
        self._new_fill_rate_condition = threading.Condition(self._lock)
        self.max_rate = max_rate

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/credentials.py" startline="630" endline="640" pcid="11097">
    def __init__(self, refresh_using, method, time_fetcher=_local_now):
        self._refresh_using = refresh_using
        self._access_key = None
        self._secret_key = None
        self._token = None
        self._expiry_time = None
        self._time_fetcher = time_fetcher
        self._refresh_lock = threading.Lock()
        self.method = method
        self._frozen_credentials = None

</source>
<source file="systems/aws-cli-2.4.27/awscli/clidriver.py" startline="524" endline="545" pcid="11935">
    def __init__(self, cli_name, session, service_name=None):
        # The cli_name is the name the user types, the name we show
        # in doc, etc.
        # The service_name is the name we used internally with botocore.
        # For example, we have the 's3api' as the cli_name for the service
        # but this is actually bound to the 's3' service name in botocore,
        # i.e. we load s3.json from the botocore data dir.  Most of
        # the time these are the same thing but in the case of renames,
        # we want users/external things to be able to rename the cli name
        # but *not* the service name, as this has to be exactly what
        # botocore expects.
        self._name = cli_name
        self.session = session
        self._command_table = None
        if service_name is None:
            # Then default to using the cli name.
            self._service_name = cli_name
        else:
            self._service_name = service_name
        self._lineage = [self]
        self._service_model = None

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/client.py" startline="58" endline="72" pcid="11675">
    def __init__(self, loader, endpoint_resolver, user_agent, event_emitter,
                 response_parser_factory=None, exceptions_factory=None,
                 config_store=None):
        self._loader = loader
        self._endpoint_resolver = endpoint_resolver
        self._user_agent = user_agent
        self._event_emitter = event_emitter
        self._response_parser_factory = response_parser_factory
        self._exceptions_factory = exceptions_factory
        # TODO: Migrate things away from scoped_config in favor of the
        # config_store.  The config store can pull things from both the scoped
        # config and environment variables (and potentially more in the
        # future).
        self._config_store = config_store

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/credentials.py" startline="1352" endline="1406" pcid="11142">
    def __init__(self, load_config, client_creator, cache, profile_name,
                 prompter=getpass.getpass, credential_sourcer=None,
                 profile_provider_builder=None):
        """
        :type load_config: callable
        :param load_config: A function that accepts no arguments, and
            when called, will return the full configuration dictionary
            for the session (``session.full_config``).

        :type client_creator: callable
        :param client_creator: A factory function that will create
            a client when called.  Has the same interface as
            ``botocore.session.Session.create_client``.

        :type cache: dict
        :param cache: An object that supports ``__getitem__``,
            ``__setitem__``, and ``__contains__``.  An example
            of this is the ``JSONFileCache`` class in the CLI.

        :type profile_name: str
        :param profile_name: The name of the profile.

        :type prompter: callable
        :param prompter: A callable that returns input provided
            by the user (i.e raw_input, getpass.getpass, etc.).

        :type credential_sourcer: CanonicalNameCredentialSourcer
        :param credential_sourcer: A credential provider that takes a
            configuration, which is used to provide the source credentials
            for the STS call.
        """
        #: The cache used to first check for assumed credentials.
        #: This is checked before making the AssumeRole API
        #: calls and can be useful if you have short lived
        #: scripts and you'd like to avoid calling AssumeRole
        #: until the credentials are expired.
        self.cache = cache
        self._load_config = load_config
        # client_creator is a callable that creates function.
        # It's basically session.create_client
        self._client_creator = client_creator
        self._profile_name = profile_name
        self._prompter = prompter
        # The _loaded_config attribute will be populated from the
        # load_config() function once the configuration is actually
        # loaded.  The reason we go through all this instead of just
        # requiring that the loaded_config be passed to us is to that
        # we can defer configuration loaded until we actually try
        # to load credentials (as opposed to when the object is
        # instantiated).
        self._loaded_config = {}
        self._credential_sourcer = credential_sourcer
        self._profile_provider_builder = profile_provider_builder
        self._visited_profiles = [self._profile_name]

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/credentials.py" startline="1993" endline="2005" pcid="11181">
    _UTC_DATE_FORMAT = '%Y-%m-%dT%H:%M:%SZ'

    def __init__(self, start_url, sso_region, role_name, account_id,
                 client_creator, token_loader=None, cache=None,
                 expiry_window_seconds=None):
        self._client_creator = client_creator
        self._sso_region = sso_region
        self._role_name = role_name
        self._account_id = account_id
        self._start_url = start_url
        self._token_loader = token_loader
        super(SSOCredentialFetcher, self).__init__(
            cache, expiry_window_seconds
</source>
</class>

<class classid="495" nclones="2" nlines="18" similarity="94">
<source file="systems/aws-cli-2.4.27/awscli/botocore/auth.py" startline="443" endline="480" pcid="10775">
    def _should_sha256_sign_payload(self, request):
        # S3 allows optional body signing, so to minimize the performance
        # impact, we opt to not SHA256 sign the body on streaming uploads,
        # provided that we're on https.
        client_config = request.context.get('client_config')
        s3_config = getattr(client_config, 's3', None)

        # The config could be None if it isn't set, or if the customer sets it
        # to None.
        if s3_config is None:
            s3_config = {}

        # The explicit configuration takes precedence over any implicit
        # configuration.
        sign_payload = s3_config.get('payload_signing_enabled', None)
        if sign_payload is not None:
            return sign_payload

        # We require that both a checksum be present and https be enabled
        # to implicitly disable body signing. The combination of TLS and
        # a checksum is sufficiently secure and durable for us to be
        # confident in the request without body signing.
        checksum_header = 'Content-MD5'
        checksum_context = request.context.get('checksum', {})
        algorithm = checksum_context.get('request_algorithm')
        if isinstance(algorithm, dict) and algorithm.get('in') == 'header':
            checksum_header = algorithm['name']
        if not request.url.startswith('https') or \
                checksum_header not in request.headers:
            return True

        # If the input is streaming we disable body signing by default.
        if request.context.get('has_streaming_input', False):
            return False

        # If the S3-specific checks had no results, delegate to the generic
        # checks.
        return super(S3SigV4Auth, self)._should_sha256_sign_payload(request)
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="165" endline="202" pcid="11350">

    def _should_sha256_sign_payload(self, request):
        # S3 allows optional body signing, so to minimize the performance
        # impact, we opt to not SHA256 sign the body on streaming uploads,
        # provided that we're on https.
        client_config = request.context.get('client_config')
        s3_config = getattr(client_config, 's3', None)

        # The config could be None if it isn't set, or if the customer sets it
        # to None.
        if s3_config is None:
            s3_config = {}

        # The explicit configuration takes precedence over any implicit
        # configuration.
        sign_payload = s3_config.get('payload_signing_enabled', None)
        if sign_payload is not None:
            return sign_payload

        # We require that both a checksum be present and https be enabled
        # to implicitly disable body signing. The combination of TLS and
        # a checksum is sufficiently secure and durable for us to be
        # confident in the request without body signing.
        checksum_header = 'Content-MD5'
        checksum_context = request.context.get('checksum', {})
        algorithm = checksum_context.get('request_algorithm')
        if isinstance(algorithm, dict) and algorithm.get('in') == 'header':
            checksum_header = algorithm['name']
        if not request.url.startswith('https') or \
                checksum_header not in request.headers:
            return True

        # If the input is streaming we disable body signing by default.
        if request.context.get('has_streaming_input', False):
            return False

        # If the S3-specific checks had no results, delegate to the generic
        # checks.
</source>
</class>

<class classid="496" nclones="2" nlines="14" similarity="92">
<source file="systems/aws-cli-2.4.27/awscli/botocore/waiter.py" startline="221" endline="240" pcid="10956">
    def _create_path_all_matcher(self):
        expression = jmespath.compile(self.argument)
        expected = self.expected

        def acceptor_matches(response):
            if is_valid_waiter_error(response):
                return
            result = expression.search(response)
            if not isinstance(result, list) or not result:
                # pathAll matcher must result in a list.
                # Also we require at least one element in the list,
                # that is, an empty list should not result in this
                # acceptor match.
                return False
            for element in result:
                if element != expected:
                    return False
            return True
        return acceptor_matches

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/waiter.py" startline="241" endline="260" pcid="10958">
    def _create_path_any_matcher(self):
        expression = jmespath.compile(self.argument)
        expected = self.expected

        def acceptor_matches(response):
            if is_valid_waiter_error(response):
                return
            result = expression.search(response)
            if not isinstance(result, list) or not result:
                # pathAny matcher must result in a list.
                # Also we require at least one element in the list,
                # that is, an empty list should not result in this
                # acceptor match.
                return False
            for element in result:
                if element == expected:
                    return True
            return False
        return acceptor_matches

</source>
</class>

<class classid="497" nclones="2" nlines="16" similarity="76">
<source file="systems/aws-cli-2.4.27/awscli/botocore/credentials.py" startline="1218" endline="1233" pcid="11135">
    def load(self):
        try:
            available_creds = self._ini_parser(self._creds_filename)
        except ConfigNotFound:
            return None
        if self._profile_name in available_creds:
            config = available_creds[self._profile_name]
            if self.ACCESS_KEY in config:
                logger.info("Found credentials in shared credentials file: %s",
                            self._creds_filename)
                access_key, secret_key = self._extract_creds_from_mapping(
                    config, self.ACCESS_KEY, self.SECRET_KEY)
                token = self._get_session_token(config)
                return Credentials(access_key, secret_key, token,
                                   method=self.METHOD)

</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/credentials.py" startline="1267" endline="1288" pcid="11138">
    def load(self):
        """
        If there is are credentials in the configuration associated with
        the session, use those.
        """
        try:
            full_config = self._config_parser(self._config_filename)
        except ConfigNotFound:
            return None
        if self._profile_name in full_config['profiles']:
            profile_config = full_config['profiles'][self._profile_name]
            if self.ACCESS_KEY in profile_config:
                logger.info("Credentials found in config file: %s",
                            self._config_filename)
                access_key, secret_key = self._extract_creds_from_mapping(
                    profile_config, self.ACCESS_KEY, self.SECRET_KEY)
                token = self._get_session_token(profile_config)
                return Credentials(access_key, secret_key, token,
                                   method=self.METHOD)
        else:
            return None

</source>
</class>

<class classid="498" nclones="2" nlines="42" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="38" endline="90" pcid="11341">
    def add_auth(self, request):
        if self.credentials is None:
            raise NoCredentialsError()

        # Use utcnow() because that's what gets mocked by tests, but set
        # timezone because CRT assumes naive datetime is local time.
        datetime_now = datetime.datetime.utcnow().replace(
            tzinfo=datetime.timezone.utc)

        # Use existing 'X-Amz-Content-SHA256' header if able
        existing_sha256 = self._get_existing_sha256(request)

        self._modify_request_before_signing(request)

        credentials_provider = awscrt.auth.AwsCredentialsProvider.new_static(
            access_key_id=self.credentials.access_key,
            secret_access_key=self.credentials.secret_key,
            session_token=self.credentials.token)

        if self._is_streaming_checksum_payload(request):
            explicit_payload = STREAMING_UNSIGNED_PAYLOAD_TRAILER
        elif self._should_sha256_sign_payload(request):
            if existing_sha256:
                explicit_payload = existing_sha256
            else:
                explicit_payload = None  # to be calculated during signing
        else:
            explicit_payload = UNSIGNED_PAYLOAD

        if self._should_add_content_sha256_header(explicit_payload):
            body_header = \
                awscrt.auth.AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA_256
        else:
            body_header = awscrt.auth.AwsSignedBodyHeaderType.NONE

        signing_config = awscrt.auth.AwsSigningConfig(
            algorithm=awscrt.auth.AwsSigningAlgorithm.V4,
            signature_type=self._SIGNATURE_TYPE,
            credentials_provider=credentials_provider,
            region=self._region_name,
            service=self._service_name,
            date=datetime_now,
            should_sign_header=self._should_sign_header,
            use_double_uri_encode=self._USE_DOUBLE_URI_ENCODE,
            should_normalize_uri_path=self._SHOULD_NORMALIZE_URI_PATH,
            signed_body_value=explicit_payload,
            signed_body_header_type=body_header,
            expiration_in_seconds=self._expiration_in_seconds,
            )
        crt_request = self._crt_request_from_aws_request(request)
        future = awscrt.auth.aws_sign_request(crt_request, signing_config)
        future.result()
        self._apply_signing_changes(request, crt_request)
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="226" endline="278" pcid="11353">
        self._expiration_in_seconds = None

    def add_auth(self, request):
        if self.credentials is None:
            raise NoCredentialsError()

        # Use utcnow() because that's what gets mocked by tests, but set
        # timezone because CRT assumes naive datetime is local time.
        datetime_now = datetime.datetime.utcnow().replace(
            tzinfo=datetime.timezone.utc)

        # Use existing 'X-Amz-Content-SHA256' header if able
        existing_sha256 = self._get_existing_sha256(request)

        self._modify_request_before_signing(request)

        credentials_provider = awscrt.auth.AwsCredentialsProvider.new_static(
            access_key_id=self.credentials.access_key,
            secret_access_key=self.credentials.secret_key,
            session_token=self.credentials.token)

        if self._is_streaming_checksum_payload(request):
            explicit_payload = STREAMING_UNSIGNED_PAYLOAD_TRAILER
        elif self._should_sha256_sign_payload(request):
            if existing_sha256:
                explicit_payload = existing_sha256
            else:
                explicit_payload = None  # to be calculated during signing
        else:
            explicit_payload = UNSIGNED_PAYLOAD

        if self._should_add_content_sha256_header(explicit_payload):
            body_header = \
                awscrt.auth.AwsSignedBodyHeaderType.X_AMZ_CONTENT_SHA_256
        else:
            body_header = awscrt.auth.AwsSignedBodyHeaderType.NONE

        signing_config = awscrt.auth.AwsSigningConfig(
            algorithm=awscrt.auth.AwsSigningAlgorithm.V4_ASYMMETRIC,
            signature_type=self._SIGNATURE_TYPE,
            credentials_provider=credentials_provider,
            region=self._region_name,
            service=self._service_name,
            date=datetime_now,
            should_sign_header=self._should_sign_header,
            use_double_uri_encode=self._USE_DOUBLE_URI_ENCODE,
            should_normalize_uri_path=self._SHOULD_NORMALIZE_URI_PATH,
            signed_body_value=explicit_payload,
            signed_body_header_type=body_header,
            expiration_in_seconds=self._expiration_in_seconds,
            )
        crt_request = self._crt_request_from_aws_request(request)
        future = awscrt.auth.aws_sign_request(crt_request, signing_config)
</source>
</class>

<class classid="499" nclones="2" nlines="24" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="91" endline="119" pcid="11342">

    def _crt_request_from_aws_request(self, aws_request):
        url_parts = urlsplit(aws_request.url)
        crt_path = url_parts.path if url_parts.path else '/'
        if aws_request.params:
            array = []
            for (param, value) in aws_request.params.items():
                value = str(value)
                array.append('%s=%s' % (param, value))
            crt_path = crt_path + '?' + '&'.join(array)
        elif url_parts.query:
            crt_path = '%s?%s' % (crt_path, url_parts.query)

        crt_headers = awscrt.http.HttpHeaders(aws_request.headers.items())

        # CRT requires body (if it exists) to be an I/O stream.
        crt_body_stream = None
        if aws_request.body:
            if hasattr(aws_request.body, 'seek'):
                crt_body_stream = aws_request.body
            else:
                crt_body_stream = BytesIO(aws_request.body)

        crt_request = awscrt.http.HttpRequest(
            method=aws_request.method,
            path=crt_path,
            headers=crt_headers,
            body_stream=crt_body_stream)
        return crt_request
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="279" endline="307" pcid="11354">
        future.result()
        self._apply_signing_changes(request, crt_request)

    def _crt_request_from_aws_request(self, aws_request):
        url_parts = urlsplit(aws_request.url)
        crt_path = url_parts.path if url_parts.path else '/'
        if aws_request.params:
            array = []
            for (param, value) in aws_request.params.items():
                value = str(value)
                array.append('%s=%s' % (param, value))
            crt_path = crt_path + '?' + '&'.join(array)
        elif url_parts.query:
            crt_path = '%s?%s' % (crt_path, url_parts.query)

        crt_headers = awscrt.http.HttpHeaders(aws_request.headers.items())

        # CRT requires body (if it exists) to be an I/O stream.
        crt_body_stream = None
        if aws_request.body:
            if hasattr(aws_request.body, 'seek'):
                crt_body_stream = aws_request.body
            else:
                crt_body_stream = BytesIO(aws_request.body)

        crt_request = awscrt.http.HttpRequest(
            method=aws_request.method,
            path=crt_path,
            headers=crt_headers,
</source>
</class>

<class classid="500" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="404" endline="445" pcid="11366">
                 expires=DEFAULT_EXPIRES):
        super().__init__(credentials, service_name, region_name)
        self._expiration_in_seconds = expires

    def _modify_request_before_signing(self, request):
        super()._modify_request_before_signing(request)

        # We automatically set this header, so if it's the auto-set value we
        # want to get rid of it since it doesn't make sense for presigned urls.
        content_type = request.headers.get('content-type')
        if content_type == 'application/x-www-form-urlencoded; charset=utf-8':
            del request.headers['content-type']

        # Now parse the original query string to a dict, inject our new query
        # params, and serialize back to a query string.
        url_parts = urlsplit(request.url)
        # parse_qs makes each value a list, but in our case we know we won't
        # have repeated keys so we know we have single element lists which we
        # can convert back to scalar values.
        query_dict = dict(
            [(k, v[0]) for k, v in
             parse_qs(url_parts.query, keep_blank_values=True).items()])
        # The spec is particular about this.  It *has* to be:
        # https://<endpoint>?<operation params>&<auth params>
        # You can't mix the two types of params together, i.e just keep doing
        # new_query_params.update(op_params)
        # new_query_params.update(auth_params)
        # percent_encode_sequence(new_query_params)
        if request.data:
            # We also need to move the body params into the query string. To
            # do this, we first have to convert it to a dict.
            query_dict.update(_get_body_as_dict(request))
            request.data = ''
        new_query_string = percent_encode_sequence(query_dict)
        # url_parts is a tuple (and therefore immutable) so we need to create
        # a new url_parts with the new query string.
        # <part>   - <index>
        # scheme   - 0
        # netloc   - 1
        # path     - 2
        # query    - 3  <-- we're replacing this.
        # fragment - 4
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="494" endline="535" pcid="11371">
                 expires=DEFAULT_EXPIRES):
        super().__init__(credentials, service_name, region_name)
        self._expiration_in_seconds = expires

    def _modify_request_before_signing(self, request):
        super()._modify_request_before_signing(request)

        # We automatically set this header, so if it's the auto-set value we
        # want to get rid of it since it doesn't make sense for presigned urls.
        content_type = request.headers.get('content-type')
        if content_type == 'application/x-www-form-urlencoded; charset=utf-8':
            del request.headers['content-type']

        # Now parse the original query string to a dict, inject our new query
        # params, and serialize back to a query string.
        url_parts = urlsplit(request.url)
        # parse_qs makes each value a list, but in our case we know we won't
        # have repeated keys so we know we have single element lists which we
        # can convert back to scalar values.
        query_dict = dict(
            [(k, v[0]) for k, v in
             parse_qs(url_parts.query, keep_blank_values=True).items()])
        # The spec is particular about this.  It *has* to be:
        # https://<endpoint>?<operation params>&<auth params>
        # You can't mix the two types of params together, i.e just keep doing
        # new_query_params.update(op_params)
        # new_query_params.update(auth_params)
        # percent_encode_sequence(new_query_params)
        if request.data:
            # We also need to move the body params into the query string. To
            # do this, we first have to convert it to a dict.
            query_dict.update(_get_body_as_dict(request))
            request.data = ''
        new_query_string = percent_encode_sequence(query_dict)
        # url_parts is a tuple (and therefore immutable) so we need to create
        # a new url_parts with the new query string.
        # <part>   - <index>
        # scheme   - 0
        # netloc   - 1
        # path     - 2
        # query    - 3  <-- we're replacing this.
        # fragment - 4
</source>
</class>

<class classid="501" nclones="4" nlines="18" similarity="70">
<source file="systems/aws-cli-2.4.27/awscli/clidriver.py" startline="244" endline="265" pcid="11912">
    def _construct_cli_region_chain(self):
        providers = [
            InstanceVarProvider(
                instance_var='region',
                session=self.session
            ),
            EnvironmentProvider(
                name='AWS_REGION',
                env=os.environ,
            ),
            EnvironmentProvider(
                name='AWS_DEFAULT_REGION',
                env=os.environ,
            ),
            ScopedConfigProvider(
                config_var_name='region',
                session=self.session,
            ),
            IMDSRegionProvider(self.session),
        ]
        return ChainProvider(providers=providers)

</source>
<source file="systems/aws-cli-2.4.27/awscli/clidriver.py" startline="312" endline="329" pcid="11916">
    def _construct_cli_auto_prompt_chain(self):
        providers = [
            InstanceVarProvider(
                instance_var='cli_auto_prompt',
                session=self.session,
            ),
            EnvironmentProvider(
                name='AWS_CLI_AUTO_PROMPT',
                env=os.environ,
            ),
            ScopedConfigProvider(
                config_var_name='cli_auto_prompt',
                session=self.session
            ),
            ConstantProvider(value='off'),
        ]
        return ChainProvider(providers=providers)

</source>
<source file="systems/aws-cli-2.4.27/awscli/clidriver.py" startline="284" endline="301" pcid="11914">
    def _construct_cli_pager_chain(self):
        providers = [
            EnvironmentProvider(
                name='AWS_PAGER',
                env=os.environ,
            ),
            ScopedConfigProvider(
                config_var_name='cli_pager',
                session=self.session,
            ),
            EnvironmentProvider(
                name='PAGER',
                env=os.environ,
            ),
            ConstantProvider(value=default_pager),
        ]
        return ChainProvider(providers=providers)

</source>
<source file="systems/aws-cli-2.4.27/awscli/clidriver.py" startline="266" endline="283" pcid="11913">
    def _construct_cli_output_chain(self):
        providers = [
            InstanceVarProvider(
                instance_var='output',
                session=self.session,
            ),
            EnvironmentProvider(
                name='AWS_DEFAULT_OUTPUT',
                env=os.environ,
            ),
            ScopedConfigProvider(
                config_var_name='output',
                session=self.session,
            ),
            ConstantProvider(value='json'),
        ]
        return ChainProvider(providers=providers)

</source>
</class>

<class classid="502" nclones="2" nlines="10" similarity="90">
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/app.py" startline="165" endline="175" pcid="11994">
    def _collect_prompt_definitions(self):
        value_prompt_definitions = {}
        plan = self._definition['plan']
        for section_name, section_definition in plan.items():
            if section_name == self.DONE:
                continue
            for name, value_definition in section_definition['values'].items():
                if value_definition['type'] == 'prompt':
                    value_prompt_definitions[name] = value_definition
        return value_prompt_definitions

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/app.py" startline="176" endline="186" pcid="11995">
    def _map_prompts_to_sections(self):
        prompts_to_sections = {}
        sections = self._definition['plan']
        for section_name, section_definition in sections.items():
            if section_name == self.DONE:
                prompts_to_sections[section_name] = self.DONE
                continue
            for name, value_definition in section_definition['values'].items():
                prompts_to_sections[name] = section_name
        return prompts_to_sections

</source>
</class>

<class classid="503" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/core.py" startline="289" endline="300" pcid="12048">
    def run_step(self, step_definition, parameters):
        var_resolver = VariableResolver()
        value = var_resolver.resolve_variables(
            parameters, step_definition['value'],
        )
        load_type = step_definition['load_type']
        if load_type == 'json':
            return json.loads(value)
        else:
            raise ValueError(f'Unsupported load_type: {load_type}')


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/core.py" startline="304" endline="315" pcid="12049">
    def run_step(self, step_definition, parameters):
        var_resolver = VariableResolver()
        value = var_resolver.resolve_variables(
            parameters, step_definition['value'],
        )
        dump_type = step_definition['dump_type']
        if dump_type == 'json':
            return json.dumps(value)
        else:
            raise ValueError(f'Unsupported load_type: {dump_type}')


</source>
</class>

<class classid="504" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/ui/section.py" startline="32" endline="46" pcid="12149">
    def _get_container(self):
        content = f" {self._definition['shortname']}"
        buffer = Buffer(
            document=Document(content),
            read_only=True
        )
        return Window(
            content=BufferControl(
                buffer=buffer, focusable=False
            ),
            style=self._get_style,
            width=Dimension.exact(len(content) + 1),
            dont_extend_height=True,
        )

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/wizard/ui/prompt.py" startline="82" endline="96" pcid="12162">
    def _get_container(self):
        content = f'{self._value_description}:'
        buffer = Buffer(
            document=Document(content),
            read_only=True
        )
        return Window(
            content=BufferControl(
                buffer=buffer, focusable=False
            ),
            style=self._get_style,
            width=Dimension.exact(len(content) + 1),
            dont_extend_height=True,
        )

</source>
</class>

<class classid="505" nclones="2" nlines="16" similarity="88">
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/uninstall.py" startline="29" endline="51" pcid="12272">

    def _run_main(self, parsed_args, parsed_globals):
        params = parsed_args
        params.session = self._session
        validate_region(params, parsed_globals)
        validate_instance(params)
        params.system.validate_administrator()

        try:
            self._uninstall_agent(params)
            self._delete_config_file(params)
        except Exception as e:
            sys.stdout.flush()
            sys.stderr.write(
                'ERROR\n'
                '{0}\n'
                'Uninstall the AWS CodeDeploy Agent on the on-premises '
                'instance by following the instructions in "Configure '
                'Existing On-Premises Instances by Using AWS CodeDeploy" in '
                'the AWS CodeDeploy User Guide.\n'.format(e)
            )
            return 255
        return 0
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/install.py" startline="60" endline="84" pcid="12281">

    def _run_main(self, parsed_args, parsed_globals):
        params = parsed_args
        params.session = self._session
        validate_region(params, parsed_globals)
        validate_instance(params)
        params.system.validate_administrator()
        self._validate_override_config(params)
        self._validate_agent_installer(params)

        try:
            self._create_config(params)
            self._install_agent(params)
        except Exception as e:
            sys.stdout.flush()
            sys.stderr.write(
                'ERROR\n'
                '{0}\n'
                'Install the AWS CodeDeploy Agent on the on-premises instance '
                'by following the instructions in "Configure Existing '
                'On-Premises Instances by Using AWS CodeDeploy" in the AWS '
                'CodeDeploy User Guide.\n'.format(e)
            )
            return 255
        return 0
</source>
</class>

<class classid="506" nclones="2" nlines="32" similarity="81">
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/deregister.py" startline="44" endline="87" pcid="12306">

    def _run_main(self, parsed_args, parsed_globals):
        params = parsed_args
        params.session = self._session
        validate_region(params, parsed_globals)
        validate_instance_name(params)

        self.codedeploy = self._session.create_client(
            'codedeploy',
            region_name=params.region,
            endpoint_url=parsed_globals.endpoint_url,
            verify=parsed_globals.verify_ssl
        )
        self.iam = self._session.create_client(
            'iam',
            region_name=params.region
        )

        try:
            self._get_instance_info(params)
            if params.tags:
                self._remove_tags(params)
            self._deregister_instance(params)
            if not params.no_delete_iam_user:
                self._delete_user_policy(params)
                self._delete_access_key(params)
                self._delete_iam_user(params)
            sys.stdout.write(
                'Run the following command on the on-premises instance to '
                'uninstall the codedeploy-agent:\n'
                'aws deploy uninstall\n'
            )
        except Exception as e:
            sys.stdout.flush()
            sys.stderr.write(
                'ERROR\n'
                '{0}\n'
                'Deregister the on-premises instance by following the '
                'instructions in "Configure Existing On-Premises Instances by '
                'Using AWS CodeDeploy" in the AWS CodeDeploy User '
                'Guide.\n'.format(e)
            )
            return 255
        return 0
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/register.py" startline="66" endline="115" pcid="12316">
    ]

    def _run_main(self, parsed_args, parsed_globals):
        params = parsed_args
        params.session = self._session
        validate_region(params, parsed_globals)
        validate_instance_name(params)
        validate_tags(params)
        validate_iam_user_arn(params)

        self.codedeploy = self._session.create_client(
            'codedeploy',
            region_name=params.region,
            endpoint_url=parsed_globals.endpoint_url,
            verify=parsed_globals.verify_ssl
        )
        self.iam = self._session.create_client(
            'iam',
            region_name=params.region
        )

        try:
            if not params.iam_user_arn:
                self._create_iam_user(params)
                self._create_access_key(params)
                self._create_user_policy(params)
                self._create_config(params)
            self._register_instance(params)
            if params.tags:
                self._add_tags(params)
            sys.stdout.write(
                'Copy the on-premises configuration file named {0} to the '
                'on-premises instance, and run the following command on the '
                'on-premises instance to install and configure the AWS '
                'CodeDeploy Agent:\n'
                'aws deploy install --config-file {0}\n'.format(
                    DEFAULT_CONFIG_FILE
                )
            )
        except Exception as e:
            sys.stdout.flush()
            sys.stderr.write(
                'ERROR\n'
                '{0}\n'
                'Register the on-premises instance by following the '
                'instructions in "Configure Existing On-Premises Instances by '
                'Using AWS CodeDeploy" in the AWS CodeDeploy User '
                'Guide.\n'.format(e)
            )
            return 255
</source>
</class>

<class classid="507" nclones="2" nlines="14" similarity="92">
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/deregister.py" startline="126" endline="141" pcid="12310">

    def _delete_user_policy(self, params):
        sys.stdout.write('Deleting the IAM user policies... ')
        list_user_policies = self.iam.get_paginator('list_user_policies')
        try:
            for response in list_user_policies.paginate(
                    UserName=params.user_name):
                for policy_name in response['PolicyNames']:
                    self.iam.delete_user_policy(
                        UserName=params.user_name,
                        PolicyName=policy_name
                    )
        except ClientError as e:
            if e.response.get('Error', {}).get('Code') != 'NoSuchEntity':
                raise e
        sys.stdout.write('DONE\n')
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/deregister.py" startline="142" endline="157" pcid="12311">

    def _delete_access_key(self, params):
        sys.stdout.write('Deleting the IAM user access keys... ')
        list_access_keys = self.iam.get_paginator('list_access_keys')
        try:
            for response in list_access_keys.paginate(
                    UserName=params.user_name):
                for access_key in response['AccessKeyMetadata']:
                    self.iam.delete_access_key(
                        UserName=params.user_name,
                        AccessKeyId=access_key['AccessKeyId']
                    )
        except ClientError as e:
            if e.response.get('Error', {}).get('Code') != 'NoSuchEntity':
                raise e
        sys.stdout.write('DONE\n')
</source>
</class>

<class classid="508" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/codedeploy.py" startline="23" endline="48" pcid="12313">

def initialize(cli):
    """
    The entry point for CodeDeploy high level commands.
    """
    cli.register(
        'building-command-table.main',
        change_name
    )
    cli.register(
        'building-command-table.deploy',
        inject_commands
    )
    cli.register(
        'building-argument-table.deploy.get-application-revision',
        modify_revision_arguments
    )
    cli.register(
        'building-argument-table.deploy.register-application-revision',
        modify_revision_arguments
    )
    cli.register(
        'building-argument-table.deploy.create-deployment',
        modify_revision_arguments
    )

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/datapipeline/__init__.py" startline="66" endline="84" pcid="13097">


def register_customizations(cli):
    cli.register(
        'building-argument-table.datapipeline.put-pipeline-definition',
        add_pipeline_definition)
    cli.register(
        'building-argument-table.datapipeline.activate-pipeline',
        activate_pipeline_definition)
    # botocore level events use service id, not service name
    cli.register(
        'after-call.data-pipeline.GetPipelineDefinition',
        translate_definition)
    cli.register(
        'building-command-table.datapipeline',
        register_commands)
    cli.register_last(
        'doc-output.datapipeline.get-pipeline-definition',
        document_translation)
</source>
</class>

<class classid="509" nclones="2" nlines="10" similarity="80">
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/register.py" startline="116" endline="130" pcid="12317">
        return 0

    def _create_iam_user(self, params):
        sys.stdout.write('Creating the IAM user... ')
        params.user_name = params.instance_name
        response = self.iam.create_user(
            Path='/AWS/CodeDeploy/',
            UserName=params.user_name
        )
        params.iam_user_arn = response['User']['Arn']
        sys.stdout.write(
            'DONE\n'
            'IamUserArn: {0}\n'.format(
                params.iam_user_arn
            )
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/codedeploy/register.py" startline="131" endline="146" pcid="12318">
        )

    def _create_access_key(self, params):
        sys.stdout.write('Creating the IAM user access key... ')
        response = self.iam.create_access_key(
            UserName=params.user_name
        )
        params.access_key_id = response['AccessKey']['AccessKeyId']
        params.secret_access_key = response['AccessKey']['SecretAccessKey']
        sys.stdout.write(
            'DONE\n'
            'AccessKeyId: {0}\n'
            'SecretAccessKey: {1}\n'.format(
                params.access_key_id,
                params.secret_access_key
            )
</source>
</class>

<class classid="510" nclones="2" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/awscli/customizations/s3events.py" startline="43" endline="59" pcid="12628">
def replace_event_stream_docs(help_command, **kwargs):
    doc = help_command.doc
    current = ''
    while current != '======\nOutput\n======':
        try:
            current = doc.pop_write()
        except IndexError:
            # This should never happen, but in the rare case that it does
            # we should be raising something with a helpful error message.
            raise DocSectionNotFoundError(
                'Could not find the "output" section for the command: %s'
                % help_command)
    doc.write('======\nOutput\n======\n')
    doc.write("This command generates no output.  The selected "
              "object content is written to the specified outfile.\n")


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/datapipeline/__init__.py" startline="90" endline="113" pcid="13099">


def document_translation(help_command, **kwargs):
    # Remove all the writes until we get to the output.
    # I don't think this is the ideal way to do this, we should
    # improve our plugin/doc system to make this easier.
    doc = help_command.doc
    current = ''
    while current != '======\nOutput\n======':
        try:
            current = doc.pop_write()
        except IndexError:
            # This should never happen, but in the rare case that it does
            # we should be raising something with a helpful error message.
            raise DocSectionNotFoundError(
                'Could not find the "output" section for the command: %s'
                % help_command)
    doc.write('======\nOutput\n======')
    doc.write(
        '\nThe output of this command is the pipeline definition, which'
        ' is documented in the '
        '`Pipeline Definition File Syntax '
        '<http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/'
        'dp-writing-pipeline-definition.html>`__')
</source>
</class>

<class classid="511" nclones="2" nlines="27" similarity="77">
<source file="systems/aws-cli-2.4.27/awscli/customizations/ecs/executecommand.py" startline="76" endline="115" pcid="12658">
class ExecuteCommandCaller(CLIOperationCaller):
    def invoke(self, service_name, operation_name, parameters, parsed_globals):
        try:
            # making an execute-command call to connect to an
            # active session on a container would require
            # session-manager-plugin to be installed on the client machine.
            # Hence, making this empty session-manager-plugin call
            # before calling execute-command to ensure that
            # session-manager-plugin is installed
            # before execute-command-command is made
            check_call(["session-manager-plugin"])
            client = self._session.create_client(
                service_name, region_name=parsed_globals.region,
                endpoint_url=parsed_globals.endpoint_url,
                verify=parsed_globals.verify_ssl)
            response = client.execute_command(**parameters)
            region_name = client.meta.region_name
            profile_name = self._session.profile \
                if self._session.profile is not None else ''
            endpoint_url = client.meta.endpoint_url
            ssm_request_params = build_ssm_request_paramaters(response, client)
            # ignore_user_entered_signals ignores these signals
            # because if signals which kills the process are not
            # captured would kill the foreground process but not the
            # background one. Capturing these would prevents process
            # from getting killed and these signals are input to plugin
            # and handling in there
            with ignore_user_entered_signals():
                # call executable with necessary input
                check_call(["session-manager-plugin",
                            json.dumps(response['session']),
                            region_name,
                            "StartSession",
                            profile_name,
                            json.dumps(ssm_request_params),
                            endpoint_url])
            return 0
        except OSError as ex:
            if ex.errno == errno.ENOENT:
                logger.debug('SessionManagerPlugin is not present',
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/sessionmanager.py" startline="58" endline="101" pcid="13228">
    def invoke(self, service_name, operation_name, parameters,
               parsed_globals):
        client = self._session.create_client(
            service_name, region_name=parsed_globals.region,
            endpoint_url=parsed_globals.endpoint_url,
            verify=parsed_globals.verify_ssl)
        response = client.start_session(**parameters)
        session_id = response['SessionId']
        region_name = client.meta.region_name
        # profile_name is used to passed on to session manager plugin
        # to fetch same profile credentials to make an api call in the plugin.
        # If no profile is passed then pass on empty string
        profile_name = self._session.profile \
            if self._session.profile is not None else ''
        endpoint_url = client.meta.endpoint_url

        try:
            # ignore_user_entered_signals ignores these signals
            # because if signals which kills the process are not
            # captured would kill the foreground process but not the
            # background one. Capturing these would prevents process
            # from getting killed and these signals are input to plugin
            # and handling in there
            with ignore_user_entered_signals():
                # call executable with necessary input
                check_call(["session-manager-plugin",
                            json.dumps(response),
                            region_name,
                            "StartSession",
                            profile_name,
                            json.dumps(parameters),
                            endpoint_url])
            return 0
        except OSError as ex:
            if ex.errno == errno.ENOENT:
                logger.debug('SessionManagerPlugin is not present',
                             exc_info=True)
                # start-session api call returns response and starts the
                # session on ssm-agent and response is forwarded to
                # session-manager-plugin. If plugin is not present, terminate
                # is called so that service and ssm-agent terminates the
                # session to avoid zombie session active on ssm-agent for
                # default self terminate time
                client.terminate_session(SessionId=session_id)
</source>
</class>

<class classid="512" nclones="3" nlines="15" similarity="81">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/applicationutils.py" startline="129" endline="145" pcid="12676">
def _build_install_hive_step(region,
                             action_on_failure=constants.TERMINATE_CLUSTER):
    step_args = [
        emrutils.build_s3_link(constants.HIVE_SCRIPT_PATH, region),
        constants.INSTALL_HIVE_ARG,
        constants.BASE_PATH_ARG,
        emrutils.build_s3_link(constants.HIVE_BASE_PATH, region),
        constants.HIVE_VERSIONS,
        constants.LATEST]
    step = emrutils.build_step(
        name=constants.INSTALL_HIVE_NAME,
        action_on_failure=action_on_failure,
        jar=emrutils.build_s3_link(constants.SCRIPT_RUNNER_PATH, region),
        args=step_args)
    return step


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/applicationutils.py" startline="146" endline="163" pcid="12677">
def _build_install_hive_site_step(region, hive_site_path,
                                  action_on_failure=constants.CANCEL_AND_WAIT):
    step_args = [
        emrutils.build_s3_link(constants.HIVE_SCRIPT_PATH, region),
        constants.BASE_PATH_ARG,
        emrutils.build_s3_link(constants.HIVE_BASE_PATH),
        constants.INSTALL_HIVE_SITE_ARG,
        hive_site_path,
        constants.HIVE_VERSIONS,
        constants.LATEST]
    step = emrutils.build_step(
        name=constants.INSTALL_HIVE_SITE_NAME,
        action_on_failure=action_on_failure,
        jar=emrutils.build_s3_link(constants.SCRIPT_RUNNER_PATH, region),
        args=step_args)
    return step


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/applicationutils.py" startline="164" endline="180" pcid="12678">
def _build_pig_install_step(region,
                            action_on_failure=constants.TERMINATE_CLUSTER):
    step_args = [
        emrutils.build_s3_link(constants.PIG_SCRIPT_PATH, region),
        constants.INSTALL_PIG_ARG,
        constants.BASE_PATH_ARG,
        emrutils.build_s3_link(constants.PIG_BASE_PATH, region),
        constants.PIG_VERSIONS,
        constants.LATEST]
    step = emrutils.build_step(
        name=constants.INSTALL_PIG_NAME,
        action_on_failure=action_on_failure,
        jar=emrutils.build_s3_link(constants.SCRIPT_RUNNER_PATH, region),
        args=step_args)
    return step


</source>
</class>

<class classid="513" nclones="4" nlines="15" similarity="71">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/hbase.py" startline="35" endline="53" pcid="12761">
    def _run_main_command(self, parsed_args, parsed_globals):
        steps = []
        args = hbaseutils.build_hbase_restore_from_backup_args(
            parsed_args.dir, parsed_args.backup_version)

        step_config = emrutils.build_step(
            jar=constants.HBASE_JAR_PATH,
            name=constants.HBASE_RESTORE_STEP_NAME,
            action_on_failure=constants.CANCEL_AND_WAIT,
            args=args)

        steps.append(step_config)
        parameters = {'JobFlowId': parsed_args.cluster_id,
                      'Steps': steps}
        emrutils.call_and_display_response(self._session, 'AddJobFlowSteps',
                                           parameters, parsed_globals)
        return 0


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/hbase.py" startline="167" endline="183" pcid="12766">
    def _run_main_command(self, parsed_args, parsed_globals):
        steps = []
        args = self._build_hbase_backup_args(parsed_args)

        step_config = emrutils.build_step(
            jar=constants.HBASE_JAR_PATH,
            name=constants.HBASE_BACKUP_STEP_NAME,
            action_on_failure=constants.CANCEL_AND_WAIT,
            args=args)

        steps.append(step_config)
        parameters = {'JobFlowId': parsed_args.cluster_id,
                      'Steps': steps}
        emrutils.call_and_display_response(self._session, 'AddJobFlowSteps',
                                           parameters, parsed_globals)
        return 0

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/hbase.py" startline="81" endline="99" pcid="12762">
    def _run_main_command(self, parsed_args, parsed_globals):
        steps = []
        self._check_type(parsed_args.type)
        self._check_unit(parsed_args.unit)
        args = self._build_hbase_schedule_backup_args(parsed_args)

        step_config = emrutils.build_step(
            jar=constants.HBASE_JAR_PATH,
            name=constants.HBASE_SCHEDULE_BACKUP_STEP_NAME,
            action_on_failure=constants.CANCEL_AND_WAIT,
            args=args)

        steps.append(step_config)
        parameters = {'JobFlowId': parsed_args.cluster_id,
                      'Steps': steps}
        emrutils.call_and_display_response(self._session, 'AddJobFlowSteps',
                                           parameters, parsed_globals)
        return 0

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/hbase.py" startline="208" endline="225" pcid="12768">
    def _run_main_command(self, parsed_args, parsed_globals):
        steps = []

        args = self._build_hbase_disable_backups_args(parsed_args)

        step_config = emrutils.build_step(
            constants.HBASE_JAR_PATH,
            constants.HBASE_SCHEDULE_BACKUP_STEP_NAME,
            constants.CANCEL_AND_WAIT,
            args)

        steps.append(step_config)
        parameters = {'JobFlowId': parsed_args.cluster_id,
                      'Steps': steps}
        emrutils.call_and_display_response(self._session, 'AddJobFlowSteps',
                                           parameters, parsed_globals)
        return 0

</source>
</class>

<class classid="514" nclones="2" nlines="28" similarity="71">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/instancefleetsutils.py" startline="18" endline="59" pcid="12770">
def validate_and_build_instance_fleets(parsed_instance_fleets):
    """
    Helper method that converts --instance-fleets option value in
    create-cluster to Amazon Elastic MapReduce InstanceFleetConfig
    data type.
    """
    instance_fleets = []
    for instance_fleet in parsed_instance_fleets:
        instance_fleet_config = {}

        keys = instance_fleet.keys()

        if 'Name' in keys:
            instance_fleet_config['Name'] = instance_fleet['Name']
        else:
            instance_fleet_config['Name'] = instance_fleet['InstanceFleetType']
        instance_fleet_config['InstanceFleetType'] = instance_fleet['InstanceFleetType']

        if 'TargetOnDemandCapacity' in keys:
            instance_fleet_config['TargetOnDemandCapacity'] = instance_fleet['TargetOnDemandCapacity']

        if 'TargetSpotCapacity' in keys:
            instance_fleet_config['TargetSpotCapacity'] = instance_fleet['TargetSpotCapacity']

        if 'InstanceTypeConfigs' in keys:
            if 'TargetSpotCapacity' in keys:
                for instance_type_config in instance_fleet['InstanceTypeConfigs']:
                    instance_type_config_keys = instance_type_config.keys()
            instance_fleet_config['InstanceTypeConfigs'] = instance_fleet['InstanceTypeConfigs']

        if 'LaunchSpecifications' in keys:
            instanceFleetProvisioningSpecifications = instance_fleet['LaunchSpecifications']
            instance_fleet_config['LaunchSpecifications'] = {}

            if 'SpotSpecification' in instanceFleetProvisioningSpecifications:
                instance_fleet_config['LaunchSpecifications']['SpotSpecification'] = \
                    instanceFleetProvisioningSpecifications['SpotSpecification']

            if 'OnDemandSpecification' in instanceFleetProvisioningSpecifications:
                instance_fleet_config['LaunchSpecifications']['OnDemandSpecification'] = \
                    instanceFleetProvisioningSpecifications['OnDemandSpecification']

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/instancegroupsutils.py" startline="18" endline="58" pcid="12835">
def build_instance_groups(parsed_instance_groups):
    """
    Helper method that converts --instance-groups option value in
    create-cluster and add-instance-groups to
    Amazon Elastic MapReduce InstanceGroupConfig data type.
    """
    instance_groups = []
    for instance_group in parsed_instance_groups:
        ig_config = {}

        keys = instance_group.keys()
        if 'Name' in keys:
            ig_config['Name'] = instance_group['Name']
        else:
            ig_config['Name'] = instance_group['InstanceGroupType']
        ig_config['InstanceType'] = instance_group['InstanceType']
        ig_config['InstanceCount'] = instance_group['InstanceCount']
        ig_config['InstanceRole'] = instance_group['InstanceGroupType'].upper()

        if 'BidPrice' in keys:
            if instance_group['BidPrice'] != 'OnDemandPrice':
                ig_config['BidPrice'] = instance_group['BidPrice']
            ig_config['Market'] = constants.SPOT
        else:
            ig_config['Market'] = constants.ON_DEMAND
        if 'EbsConfiguration' in keys:
            ig_config['EbsConfiguration'] = instance_group['EbsConfiguration']

        if 'AutoScalingPolicy' in keys:
            ig_config['AutoScalingPolicy'] = instance_group['AutoScalingPolicy']

        if 'Configurations' in keys:
            ig_config['Configurations'] = instance_group['Configurations']

        if 'CustomAmiId' in keys:
            ig_config['CustomAmiId'] = instance_group['CustomAmiId']

        instance_groups.append(ig_config)
    return instance_groups


</source>
</class>

<class classid="515" nclones="3" nlines="16" similarity="75">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="109" endline="127" pcid="12776">
def build_hive_step(parsed_step, release_label, region=None):
    args = parsed_step.get('Args')
    emrutils.check_required_field(
        structure=constants.HIVE_STEP_CONFIG, name='Args', value=args)
    emrutils.check_empty_string_list(name='Args', value=args)
    name = _apply_default_value(
        arg=parsed_step.get('Name'),
        value=constants.DEFAULT_HIVE_STEP_NAME)
    action_on_failure = \
        _apply_default_value(
            arg=parsed_step.get('ActionOnFailure'),
            value=constants.DEFAULT_FAILURE_ACTION)

    return emrutils.build_step(
        jar=_get_runner_jar(release_label, region),
        args=_build_hive_args(args, release_label, region),
        name=name,
        action_on_failure=action_on_failure)

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="212" endline="229" pcid="12781">

def build_spark_step(parsed_step, release_label, region=None):
    name = _apply_default_value(
        arg=parsed_step.get('Name'),
        value=constants.DEFAULT_SPARK_STEP_NAME)
    action_on_failure = _apply_default_value(
        arg=parsed_step.get('ActionOnFailure'),
        value=constants.DEFAULT_FAILURE_ACTION)
    args = parsed_step.get('Args')
    emrutils.check_required_field(
        structure=constants.SPARK_STEP_CONFIG, name='Args', value=args)

    return emrutils.build_step(
        jar=_get_runner_jar(release_label, region),
        args=_build_spark_args(args, release_label, region),
        name=name,
        action_on_failure=action_on_failure)

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="148" endline="166" pcid="12778">

def build_pig_step(parsed_step, release_label, region=None):
    args = parsed_step.get('Args')
    emrutils.check_required_field(
        structure=constants.PIG_STEP_CONFIG, name='Args', value=args)
    emrutils.check_empty_string_list(name='Args', value=args)
    name = _apply_default_value(
        arg=parsed_step.get('Name'),
        value=constants.DEFAULT_PIG_STEP_NAME)
    action_on_failure = _apply_default_value(
        arg=parsed_step.get('ActionOnFailure'),
        value=constants.DEFAULT_FAILURE_ACTION)

    return emrutils.build_step(
        jar=_get_runner_jar(release_label, region),
        args=_build_pig_args(args, release_label, region),
        name=name,
        action_on_failure=action_on_failure)

</source>
</class>

<class classid="516" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="128" endline="147" pcid="12777">

def _build_hive_args(args, release_label, region):
    args_list = []
    if release_label:
        args_list.append(constants.HIVE_SCRIPT_COMMAND)
    else:
        args_list.append(emrutils.build_s3_link(
            relative_path=constants.HIVE_SCRIPT_PATH, region=region))

    args_list.append(constants.RUN_HIVE_SCRIPT)

    if not release_label:
        args_list.append(constants.HIVE_VERSIONS)
        args_list.append(constants.LATEST)

    args_list.append(constants.ARGS)
    args_list += args

    return args_list

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/emr/steputils.py" startline="167" endline="186" pcid="12779">

def _build_pig_args(args, release_label, region):
    args_list = []
    if release_label:
        args_list.append(constants.PIG_SCRIPT_COMMAND)
    else:
        args_list.append(emrutils.build_s3_link(
            relative_path=constants.PIG_SCRIPT_PATH, region=region))

    args_list.append(constants.RUN_PIG_SCRIPT)

    if not release_label:
        args_list.append(constants.PIG_VERSIONS)
        args_list.append(constants.LATEST)

    args_list.append(constants.ARGS)
    args_list += args

    return args_list

</source>
</class>

<class classid="517" nclones="2" nlines="18" similarity="84">
<source file="systems/aws-cli-2.4.27/awscli/customizations/datapipeline/translator.py" startline="67" endline="94" pcid="13072">
def definition_to_api_objects(definition):
    if 'objects' not in definition:
        raise PipelineDefinitionError('Missing "objects" key', definition)
    api_elements = []
    # To convert to the structure expected by the service,
    # we convert the existing structure to a list of dictionaries.
    # Each dictionary has a 'fields', 'id', and 'name' key.
    for element in definition['objects']:
        try:
            element_id = element.pop('id')
        except KeyError:
            raise PipelineDefinitionError('Missing "id" key of element: %s' %
                                          json.dumps(element), definition)
        api_object = {'id': element_id}
        # If a name is provided, then we use that for the name,
        # otherwise the id is used for the name.
        name = element.pop('name', element_id)
        api_object['name'] = name
        # Now we need the field list.  Each element in the field list is a dict
        # with a 'key', 'stringValue'|'refValue'
        fields = []
        for key, value in sorted(element.items()):
            fields.extend(_parse_each_field(key, value))
        api_object['fields'] = fields
        api_elements.append(api_object)
    return api_elements


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/datapipeline/translator.py" startline="95" endline="115" pcid="13073">
def definition_to_api_parameters(definition):
    if 'parameters' not in definition:
        return None
    parameter_objects = []
    for element in definition['parameters']:
        try:
            parameter_id = element.pop('id')
        except KeyError:
            raise PipelineDefinitionError('Missing "id" key of parameter: %s' %
                                          json.dumps(element), definition)
        parameter_object = {'id': parameter_id}
        # Now we need the attribute list.  Each element in the attribute list
        # is a dict with a 'key', 'stringValue'
        attributes = []
        for key, value in sorted(element.items()):
            attributes.extend(_parse_each_field(key, value))
        parameter_object['attributes'] = attributes
        parameter_objects.append(parameter_object)
    return parameter_objects


</source>
</class>

<class classid="518" nclones="2" nlines="11" similarity="81">
<source file="systems/aws-cli-2.4.27/awscli/customizations/s3/subcommands.py" startline="526" endline="538" pcid="13537">
            # thrown before reaching the automatic return of rc of zero.
            return 0

    def _list_all_objects(self, bucket, key, page_size=None,
                          request_payer=None):
        paginator = self.client.get_paginator('list_objects_v2')
        paging_args = {
            'Bucket': bucket, 'Prefix': key, 'Delimiter': '/',
            'PaginationConfig': {'PageSize': page_size}
        }
        if request_payer is not None:
            paging_args['RequestPayer'] = request_payer
        iterator = paginator.paginate(**paging_args)
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/s3/subcommands.py" startline="573" endline="585" pcid="13540">
            last_mod_str = self._make_last_mod_str(bucket['CreationDate'])
            print_str = last_mod_str + ' ' + bucket['Name'] + '\n'
            uni_print(print_str)

    def _list_all_objects_recursive(self, bucket, key, page_size=None,
                                    request_payer=None):
        paginator = self.client.get_paginator('list_objects_v2')
        paging_args = {
            'Bucket': bucket, 'Prefix': key,
            'PaginationConfig': {'PageSize': page_size}
        }
        if request_payer is not None:
            paging_args['RequestPayer'] = request_payer
</source>
</class>

<class classid="519" nclones="2" nlines="20" similarity="70">
<source file="systems/aws-cli-2.4.27/awscli/customizations/s3/subcommands.py" startline="803" endline="829" pcid="13555">
    DESCRIPTION = "Syncs directories and S3 prefixes. Recursively copies " \
                  "new and updated files from the source directory to " \
                  "the destination. Only creates folders in the destination " \
                  "if they contain one or more files."
    USAGE = "<LocalPath> <S3Uri> or <S3Uri> " \
            "<LocalPath> or <S3Uri> <S3Uri>"
    ARG_TABLE = [{'name': 'paths', 'nargs': 2, 'positional_arg': True,
                  'synopsis': USAGE}] + TRANSFER_ARGS + \
                [METADATA, COPY_PROPS, METADATA_DIRECTIVE]


class MbCommand(S3Command):
    NAME = 'mb'
    DESCRIPTION = "Creates an S3 bucket."
    USAGE = "<S3Uri>"
    ARG_TABLE = [{'name': 'path', 'positional_arg': True, 'synopsis': USAGE}]

    def _run_main(self, parsed_args, parsed_globals):
        super(MbCommand, self)._run_main(parsed_args, parsed_globals)

        if not parsed_args.path.startswith('s3://'):
            raise ParamValidationError(
                "%s\nError: Invalid argument type" % self.USAGE
            )
        bucket, _ = split_s3_bucket_key(parsed_args.path)

        bucket_config = {'LocationConstraint': self.client.meta.region_name}
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/s3/subcommands.py" startline="843" endline="871" pcid="13556">
            )
            return 1


class RbCommand(S3Command):
    NAME = 'rb'
    DESCRIPTION = (
        "Deletes an empty S3 bucket. A bucket must be completely empty "
        "of objects and versioned objects before it can be deleted. "
        "However, the ``--force`` parameter can be used to delete "
        "the non-versioned objects in the bucket before the bucket is "
        "deleted."
    )
    USAGE = "<S3Uri>"
    ARG_TABLE = [{'name': 'path', 'positional_arg': True,
                  'synopsis': USAGE}, FORCE]

    def _run_main(self, parsed_args, parsed_globals):
        super(RbCommand, self)._run_main(parsed_args, parsed_globals)

        if not parsed_args.path.startswith('s3://'):
            raise ParamValidationError(
                "%s\nError: Invalid argument type" % self.USAGE
            )
        bucket, key = split_s3_bucket_key(parsed_args.path)

        if key:
            raise ParamValidationError(
                'Please specify a valid bucket name only. '
</source>
</class>

<class classid="520" nclones="2" nlines="12" similarity="91">
<source file="systems/aws-cli-2.4.27/awscli/customizations/ecr.py" startline="35" endline="46" pcid="13684">
    def _run_main(self, parsed_args, parsed_globals):
        ecr_client = create_client_from_parsed_globals(
                self._session,
                'ecr',
                parsed_globals)
        result = ecr_client.get_authorization_token()
        auth = result['authorizationData'][0]
        auth_token = b64decode(auth['authorizationToken']).decode()
        _, password = auth_token.split(':')
        sys.stdout.write(password)
        sys.stdout.write('\n')
        return 0
</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/ecr_public.py" startline="35" endline="46" pcid="13839">
    def _run_main(self, parsed_args, parsed_globals):
        ecr_public_client = create_client_from_parsed_globals(
                self._session,
                'ecr-public',
                parsed_globals)
        result = ecr_public_client.get_authorization_token()
        auth = result['authorizationData']
        auth_token = b64decode(auth['authorizationToken']).decode()
        _, password = auth_token.split(':')
        sys.stdout.write(password)
        sys.stdout.write('\n')
        return 0
</source>
</class>

<class classid="521" nclones="2" nlines="11" similarity="90">
<source file="systems/aws-cli-2.4.27/awscli/customizations/dynamodb/transform.py" startline="58" endline="69" pcid="13726">
    def _transform_map(self, model, params, transformation, target_shape):
        if not isinstance(params, Mapping):
            return
        value_model = model.value
        value_shape = value_model.name
        for key, value in params.items():
            if value_shape == target_shape:
                params[key] = transformation(value)
            else:
                self._transform_parameters(
                    value_model, params[key], transformation, target_shape)

</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/dynamodb/transform.py" startline="70" endline="80" pcid="13727">
    def _transform_list(self, model, params, transformation, target_shape):
        if not isinstance(params, MutableSequence):
            return
        member_model = model.member
        member_shape = member_model.name
        for i, item in enumerate(params):
            if member_shape == target_shape:
                params[i] = transformation(item)
            else:
                self._transform_parameters(
                    member_model, params[i], transformation, target_shape)
</source>
</class>

<class classid="522" nclones="2" nlines="13" similarity="84">
<source file="systems/aws-cli-2.4.27/awscli/customizations/dynamodb/exceptions.py" startline="65" endline="81" pcid="13818">
    def __init__(self, token, message, expression):
        error_message = (
            'Invalid token value: {message}\n'
            '{expression}\n{underline}\n'
        )
        token_length = token['end'] - token['start']
        underline = ' ' * token['start'] + '^' * (max(token_length, 1))
        error_message = error_message.format(
            message=message,
            expression=expression,
            underline=underline,
        )
        self.token = token
        self.expression = expression
        super(InvalidLiteralValueError, self).__init__(error_message)


</source>
<source file="systems/aws-cli-2.4.27/awscli/customizations/dynamodb/exceptions.py" startline="83" endline="97" pcid="13819">
    def __init__(self, start_token, expression):
        message = (
            'Unknown expression type starting at token `{token_value}`\n'
            '{expression}\n{underline}'
        )
        token_length = start_token['end'] - start_token['start']
        underline = ' ' * start_token['start'] + '^' * (max(token_length, 1))
        message = message.format(
            token_value=start_token['value'],
            expression=expression,
            underline=underline,
        )
        self.start_token = start_token
        self.expression = expression
        super(UnknownExpressionError, self).__init__(message)
</source>
</class>

</clones>
