<clones>
<systeminfo processor="nicad6" system="django-tastypie-0.14.4" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="641" npairs="64"/>
<runinfo ncompares="7039" cputime="40179"/>
<classinfo nclasses="20"/>

<class classid="1" nclones="3" nlines="10" similarity="100">
<source file="systems/django-tastypie-0.14.4/tastypie/test.py" startline="72" endline="111" pcid="66">
    def post(self, uri, format='json', data=None, authentication=None,
            **kwargs):
        """
        Performs a simulated ``POST`` request to the provided URI.

        Optionally accepts a ``data`` kwarg. **Unlike** ``GET``, in ``POST``
        the ``data`` gets serialized & sent as the body instead of becoming
        part of the URI.
        Example::

            from tastypie.test import TestApiClient
            client = TestApiClient()

            response = client.post('/api/v1/entry/', data={
                'created': '2012-05-01T20:02:36',
                'slug': 'another-post',
                'title': 'Another Post',
                'user': '/api/v1/user/1/',
            })

        Optionally accepts an ``authentication`` kwarg, which should be an HTTP
        header with the correct authentication data already setup.

        All other ``**kwargs`` passed in get passed through to the Django
        ``TestClient``. See
https://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client
        for details.
        """
        content_type = self.get_content_type(format)
        kwargs['content_type'] = content_type

        if data is not None:
            kwargs['data'] = self.serializer.serialize(
                data, format=content_type)

        if authentication is not None:
            kwargs['HTTP_AUTHORIZATION'] = authentication

        return self.client.post(uri, **kwargs)

</source>
<source file="systems/django-tastypie-0.14.4/tastypie/test.py" startline="112" endline="151" pcid="67">
    def put(self, uri, format='json', data=None, authentication=None,
            **kwargs):
        """
        Performs a simulated ``PUT`` request to the provided URI.

        Optionally accepts a ``data`` kwarg. **Unlike** ``GET``, in ``PUT`` the
        ``data`` gets serialized & sent as the body instead of becoming part of
        the URI.
        Example::

            from tastypie.test import TestApiClient
            client = TestApiClient()

            response = client.put('/api/v1/entry/1/', data={
                'created': '2012-05-01T20:02:36',
                'slug': 'another-post',
                'title': 'Another Post',
                'user': '/api/v1/user/1/',
            })

        Optionally accepts an ``authentication`` kwarg, which should be an HTTP
        header with the correct authentication data already setup.

        All other ``**kwargs`` passed in get passed through to the Django
        ``TestClient``. See
https://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client
        for details.
        """
        content_type = self.get_content_type(format)
        kwargs['content_type'] = content_type

        if data is not None:
            kwargs['data'] = self.serializer.serialize(
                data, format=content_type)

        if authentication is not None:
            kwargs['HTTP_AUTHORIZATION'] = authentication

        return self.client.put(uri, **kwargs)

</source>
<source file="systems/django-tastypie-0.14.4/tastypie/test.py" startline="152" endline="191" pcid="68">
    def patch(self, uri, format='json', data=None, authentication=None,
            **kwargs):
        """
        Performs a simulated ``PATCH`` request to the provided URI.

        Optionally accepts a ``data`` kwarg. **Unlike** ``GET``, in ``PATCH``
        the ``data`` gets serialized & sent as the body instead of becoming
        part of the URI.
        Example::

            from tastypie.test import TestApiClient
            client = TestApiClient()

            response = client.patch('/api/v1/entry/1/', data={
                'created': '2012-05-01T20:02:36',
                'slug': 'another-post',
                'title': 'Another Post',
                'user': '/api/v1/user/1/',
            })

        Optionally accepts an ``authentication`` kwarg, which should be an HTTP
        header with the correct authentication data already setup.

        All other ``**kwargs`` passed in get passed through to the Django
        ``TestClient``. See
https://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client
        for details.
        """
        content_type = self.get_content_type(format)
        kwargs['content_type'] = content_type

        if data is not None:
            kwargs['data'] = self.serializer.serialize(
                data, format=content_type)

        if authentication is not None:
            kwargs['HTTP_AUTHORIZATION'] = authentication

        return self.client.patch(uri, **kwargs)

</source>
</class>

<class classid="2" nclones="2" nlines="11" similarity="81">
<source file="systems/django-tastypie-0.14.4/tastypie/authorization.py" startline="154" endline="169" pcid="123">
    def perm_list_checks(self, request, code, obj_list):
        klass = self.base_checks(request, obj_list.model)
        if klass is False:
            return []

        permission = '%s.%s_%s' % (
            klass._meta.app_label,
            code,
            get_module_name(klass._meta)
        )

        if self.check_user_perm(request.user, permission, obj_list):
            return obj_list

        return obj_list.none()

</source>
<source file="systems/django-tastypie-0.14.4/tastypie/authorization.py" startline="170" endline="185" pcid="124">
    def perm_obj_checks(self, request, code, obj):
        klass = self.base_checks(request, obj.__class__)
        if klass is False:
            raise Unauthorized("You are not allowed to access that resource.")

        permission = '%s.%s_%s' % (
            klass._meta.app_label,
            code,
            get_module_name(klass._meta)
        )

        if self.check_user_perm(request.user, permission, obj):
            return True

        raise Unauthorized("You are not allowed to access that resource.")

</source>
</class>

<class classid="3" nclones="2" nlines="21" similarity="100">
<source file="systems/django-tastypie-0.14.4/tests/related_resource/tests.py" startline="342" endline="376" pcid="215">

        cat2 = Category.objects.get(pk=2)

        self.assertEqual(cat2.name, 'Kid')

    def test_patch_detail_with_missing_related_fields(self):
        """
        When fields are excluded the value of the field should not be set to a
        default value if updated by tastypie.
        """
        resource = NoteWithUpdatableUserResource()
        note = Note.objects.create(author_id=1)
        user = User.objects.get(pk=1)

        self.assertEqual(user.password, 'this_is_not_a_valid_password_string')

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'PATCH'
        request.path = "/v1/noteswithupdatableuser/%(pk)s/" % {'pk': note.pk}

        data = {
            'author': {
                'id': 1,
                'username': 'johndoe',
                'email': 'john@doetown.com',
            }
        }

        request.set_body(json.dumps(data))

        resp = resource.patch_detail(request, pk=note.pk)

        self.assertEqual(resp.status_code, 202)

</source>
<source file="systems/django-tastypie-0.14.4/tests/related_resource/tests.py" startline="377" endline="412" pcid="216">
        user2 = User.objects.get(pk=1)

        self.assertEqual(user2.email, 'john@doetown.com')
        self.assertEqual(user2.password, 'this_is_not_a_valid_password_string')

    def test_patch_detail_dont_update_related_without_permission(self):
        """
        When fields are excluded the value of the field should not be set to a
        default value if updated by tastypie.
        """
        resource = NoteResource()
        note = Note.objects.create(author_id=1)
        user = User.objects.get(pk=1)

        self.assertEqual(user.password, 'this_is_not_a_valid_password_string')

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'PATCH'
        request.path = "/v1/note/%(pk)s/" % {'pk': note.pk}

        data = {
            'author': {
                'id': 1,
                'username': 'johndoe',
                'email': 'john@doetown.com',
            }
        }

        request.set_body(json.dumps(data))

        resp = resource.patch_detail(request, pk=note.pk)

        self.assertEqual(resp.status_code, 202)

        user2 = User.objects.get(pk=1)
</source>
</class>

<class classid="4" nclones="5" nlines="41" similarity="71">
<source file="systems/django-tastypie-0.14.4/tests/related_resource/tests.py" startline="415" endline="473" pcid="217">
        self.assertEqual(user2.password, 'this_is_not_a_valid_password_string')


@override_settings(ROOT_URLCONF='related_resource.api.urls')
class NestedRelatedResourceTest(TestCaseWithFixture):
    def test_one_to_one(self):
        """
        Test a related ToOne resource with a nested full ToOne resource
        """
        self.assertEqual(Person.objects.count(), 0)
        self.assertEqual(Company.objects.count(), 0)
        self.assertEqual(Address.objects.count(), 0)

        pr = PersonResource()

        data = {
            'name': 'Joan Rivers',
            'company': {
                'name': 'Yum Yum Pie Factory!',
                'address': {
                    'line': 'Somewhere, Utah'
                }
            }
        }

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'POST'
        request.set_body(json.dumps(data))
        resp = pr.post_list(request)
        self.assertEqual(resp.status_code, 201)

        pk = Person.objects.all()[0].pk
        request = MockRequest()
        request.method = 'GET'
        request.path = reverse('api_dispatch_detail', kwargs={
            'pk': pk,
            'resource_name': pr._meta.resource_name,
            'api_name': pr._meta.api_name
        })
        resp = pr.get_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 200)

        person = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(person['name'], 'Joan Rivers')

        company = person['company']
        self.assertEqual(company['name'], 'Yum Yum Pie Factory!')

        address = company['address']
        self.assertEqual(address['line'], 'Somewhere, Utah')

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'PUT'
        request.path = reverse('api_dispatch_detail', kwargs={
            'pk': pk,
            'resource_name': pr._meta.resource_name,
            'api_name': pr._meta.api_name
</source>
<source file="systems/django-tastypie-0.14.4/tests/related_resource/tests.py" startline="474" endline="528" pcid="218">
        })
        request.set_body(resp.content.decode('utf-8'))
        resp = pr.put_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 204)

    def test_one_to_many(self):
        """
        Test a related ToOne resource with a nested full ToMany resource
        """
        self.assertEqual(Person.objects.count(), 0)
        self.assertEqual(Company.objects.count(), 0)
        self.assertEqual(Product.objects.count(), 0)

        pr = PersonResource()

        data = {
            'name': 'Joan Rivers',
            'company': {
                'name': 'Yum Yum Pie Factory!',
                'products': [
                    {
                        'name': 'Tasty Pie'
                    }
                ]
            }
        }

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'POST'
        request.set_body(json.dumps(data))
        resp = pr.post_list(request)
        self.assertEqual(resp.status_code, 201)
        self.assertEqual(Person.objects.count(), 1)
        self.assertEqual(Company.objects.count(), 1)
        self.assertEqual(Product.objects.count(), 1)

        pk = Person.objects.all()[0].pk
        request = MockRequest()
        request.method = 'GET'
        resp = pr.get_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 200)

        person = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(person['name'], 'Joan Rivers')

        company = person['company']
        self.assertEqual(company['name'], 'Yum Yum Pie Factory!')
        self.assertEqual(len(company['products']), 1)

        product = company['products'][0]
        self.assertEqual(product['name'], 'Tasty Pie')

        request = MockRequest()
        request.GET = {'format': 'json'}
</source>
<source file="systems/django-tastypie-0.14.4/tests/related_resource/tests.py" startline="529" endline="585" pcid="219">
        request.method = 'PUT'
        request.set_body(json.dumps(person))
        resp = pr.put_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 204)

    def test_many_to_one(self):
        """
        Test a related ToMany resource with a nested full ToOne resource
        """
        self.assertEqual(Person.objects.count(), 0)
        self.assertEqual(Dog.objects.count(), 0)
        self.assertEqual(DogHouse.objects.count(), 0)

        pr = PersonResource()

        data = {
            'name': 'Joan Rivers',
            'dogs': [
                {
                    'name': 'Snoopy',
                    'house': {
                        'color': 'Red'
                    }
                }
            ]
        }

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'POST'
        request.set_body(json.dumps(data))
        resp = pr.post_list(request)
        self.assertEqual(resp.status_code, 201)
        self.assertEqual(Person.objects.count(), 1)
        self.assertEqual(Dog.objects.count(), 1)
        self.assertEqual(DogHouse.objects.count(), 1)

        pk = Person.objects.all()[0].pk
        request = MockRequest()
        request.method = 'GET'
        request.path = reverse('api_dispatch_detail', kwargs={'pk': pk, 'resource_name': pr._meta.resource_name, 'api_name': pr._meta.api_name})
        resp = pr.get_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 200)

        person = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(person['name'], 'Joan Rivers')
        self.assertEqual(len(person['dogs']), 1)

        dog = person['dogs'][0]
        self.assertEqual(dog['name'], 'Snoopy')

        house = dog['house']
        self.assertEqual(house['color'], 'Red')

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'PUT'
</source>
<source file="systems/django-tastypie-0.14.4/tests/related_resource/tests.py" startline="586" endline="649" pcid="220">
        request.set_body(json.dumps(person))
        request.path = reverse('api_dispatch_detail', kwargs={'pk': pk, 'resource_name': pr._meta.resource_name, 'api_name': pr._meta.api_name})
        resp = pr.put_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 204)

    def test_many_to_one_extra_data_ignored(self):
        """
        Test a related ToMany resource with a nested full ToOne resource

        FieldError would result when extra data is included on an embedded
        resource for an already saved object.
        """
        self.assertEqual(Person.objects.count(), 0)
        self.assertEqual(Dog.objects.count(), 0)
        self.assertEqual(DogHouse.objects.count(), 0)

        pr = PersonResource()

        data = {
            'name': 'Joan Rivers',
            'dogs': [
                {
                    'name': 'Snoopy',
                    'house': {
                        'color': 'Red'
                    }
                }
            ]
        }

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'POST'
        request.set_body(json.dumps(data))
        resp = pr.post_list(request)
        self.assertEqual(resp.status_code, 201)
        self.assertEqual(Person.objects.count(), 1)
        self.assertEqual(Dog.objects.count(), 1)
        self.assertEqual(DogHouse.objects.count(), 1)

        pk = Person.objects.all()[0].pk
        request = MockRequest()
        request.method = 'GET'
        request.path = reverse('api_dispatch_detail', kwargs={'pk': pk, 'resource_name': pr._meta.resource_name, 'api_name': pr._meta.api_name})
        resp = pr.get_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 200)

        person = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(person['name'], 'Joan Rivers')
        self.assertEqual(len(person['dogs']), 1)

        dog = person['dogs'][0]
        self.assertEqual(dog['name'], 'Snoopy')

        house = dog['house']
        self.assertEqual(house['color'], 'Red')

        # clients may include extra data, which should be ignored. Make extra data is ignored on the resource and sub resources.
        person['thisfieldshouldbeignored'] = 'foobar'
        person['dogs'][0]['thisfieldshouldbeignored'] = 'foobar'

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'PUT'
</source>
<source file="systems/django-tastypie-0.14.4/tests/related_resource/tests.py" startline="650" endline="710" pcid="221">
        request.set_body(json.dumps(person))
        request.path = reverse('api_dispatch_detail', kwargs={'pk': pk, 'resource_name': pr._meta.resource_name, 'api_name': pr._meta.api_name})
        resp = pr.put_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 204)

    def test_many_to_many(self):
        """
        Test a related ToMany resource with a nested full ToMany resource
        """
        self.assertEqual(Person.objects.count(), 0)
        self.assertEqual(Dog.objects.count(), 0)
        self.assertEqual(Bone.objects.count(), 0)

        pr = PersonResource()

        data = {
            'name': 'Joan Rivers',
            'dogs': [
                {
                    'name': 'Snoopy',
                    'bones': [
                        {
                            'color': 'white'
                        }
                    ]
                }
            ]
        }

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'POST'
        request.path = reverse('api_dispatch_list', kwargs={'resource_name': pr._meta.resource_name, 'api_name': pr._meta.api_name})
        request.set_body(json.dumps(data))
        resp = pr.post_list(request)
        self.assertEqual(resp.status_code, 201)
        self.assertEqual(Person.objects.count(), 1)
        self.assertEqual(Dog.objects.count(), 1)
        self.assertEqual(Bone.objects.count(), 1)

        pk = Person.objects.all()[0].pk
        request = MockRequest()
        request.method = 'GET'
        request.path = reverse('api_dispatch_detail', kwargs={'pk': pk, 'resource_name': pr._meta.resource_name, 'api_name': pr._meta.api_name})
        resp = pr.get_detail(request, pk=pk)
        self.assertEqual(resp.status_code, 200)

        person = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(person['name'], 'Joan Rivers')
        self.assertEqual(len(person['dogs']), 1)

        dog = person['dogs'][0]
        self.assertEqual(dog['name'], 'Snoopy')
        self.assertEqual(len(dog['bones']), 1)

        bone = dog['bones'][0]
        self.assertEqual(bone['color'], 'white')

        request = MockRequest()
        request.GET = {'format': 'json'}
        request.method = 'PUT'
</source>
</class>

<class classid="5" nclones="2" nlines="12" similarity="83">
<source file="systems/django-tastypie-0.14.4/tests/validation/tests.py" startline="66" endline="79" pcid="257">
    def test_valid_data(self):
        data = json.dumps({
            'title': 'Test Title',
            'slug': 'test-title',
            'content': 'This is the content',
            'user': {'pk': 1},  # loaded from fixtures
            'annotated': {'annotations': 'This is an annotations'},
        })

        resp = self.client.post('/api/v1/notes/', data=data, content_type='application/json')
        self.assertEqual(resp.status_code, 201)
        note = json.loads(self.client.get(resp['location']).content.decode('utf-8'))
        self.assertTrue(note['annotated'])

</source>
<source file="systems/django-tastypie-0.14.4/tests/validation/tests.py" startline="103" endline="116" pcid="259">
    def test_valid_data(self):
        data = json.dumps({
            'title': 'Test Title',
            'slug': 'test-title',
            'content': 'This is the content',
            'annotated': {'annotations': 'This is another annotations'},
        })

        resp = self.client.put('/api/v1/notes/1/', data=data, content_type='application/json')
        self.assertEqual(resp.status_code, 204)
        note = json.loads(self.client.get('/api/v1/notes/1/', content_type='application/json').content.decode('utf-8'))
        self.assertTrue(note['annotated'])
        self.assertEqual('test-title', note['slug'])

</source>
</class>

<class classid="6" nclones="2" nlines="15" similarity="86">
<source file="systems/django-tastypie-0.14.4/tests/validation/tests.py" startline="80" endline="100" pcid="258">
    def test_invalid_data(self):
        data = json.dumps({
            'title': '',
            'slug': 'test-title',
            'content': 'This is the content',
            'user': {'pk': 1},  # loaded from fixtures
            'annotated': {'annotations': ''},
        })

        resp = self.client.post('/api/v1/notes/', data=data, content_type='application/json')
        self.assertEqual(resp.status_code, 400)
        self.assertEqual(json.loads(resp.content.decode('utf-8')), {
            'notes': {
                'title': ['This field is required.']
            },
            'annotated': {
                'annotations': ['This field is required.']
            }
        })


</source>
<source file="systems/django-tastypie-0.14.4/tests/validation/tests.py" startline="117" endline="137" pcid="260">
    def test_invalid_data(self):
        data = json.dumps({
            'title': '',
            'slug': '',
            'content': 'This is the content',
            'annotated': {'annotations': None},
        })

        resp = self.client.put('/api/v1/notes/1/', data=data, content_type='application/json')
        self.assertEqual(resp.status_code, 400)
        self.assertEqual(json.loads(resp.content.decode('utf-8')), {
            'notes': {
                'slug': ['This field is required.'],
                'title': ['This field is required.']
            },
            'annotated': {
                'annotations': ['This field is required.']
            }
        })


</source>
</class>

<class classid="7" nclones="4" nlines="23" similarity="79">
<source file="systems/django-tastypie-0.14.4/tests/slashless/tests.py" startline="10" endline="35" pcid="264">
    def test_gets_without_trailing_slash(self):
        resp = self.client.get('/api/v1', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 2)
        self.assertEqual(deserialized['notes'], {'list_endpoint': '/api/v1/notes', 'schema': '/api/v1/notes/schema'})

        resp = self.client.get('/api/v1/notes', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 2)
        self.assertEqual(deserialized['meta']['limit'], 20)
        self.assertEqual(len(deserialized['objects']), 2)
        self.assertEqual([obj['title'] for obj in deserialized['objects']], [u'First Post!', u'Another Post'])

        resp = self.client.get('/api/v1/notes/1', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 9)
        self.assertEqual(deserialized['title'], u'First Post!')

        resp = self.client.get('/api/v1/notes/set/2;1', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        obj_ids = [o["id"] for o in deserialized["objects"]]
        self.assertEqual(sorted(obj_ids), [1, 2])
</source>
<source file="systems/django-tastypie-0.14.4/tests/basic/tests/views.py" startline="11" endline="38" pcid="593">
    def test_gets(self):
        resp = self.client.get('/api/v1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 6)
        self.assertEqual(deserialized['notes'], {'list_endpoint': '/api/v1/notes/', 'schema': '/api/v1/notes/schema/'})

        resp = self.client.get('/api/v1/notes/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 2)
        self.assertEqual(deserialized['meta']['limit'], 20)
        self.assertEqual(len(deserialized['objects']), 2)
        self.assertEqual([obj['title'] for obj in deserialized['objects']], [u'First Post!', u'Another Post'])

        resp = self.client.get('/api/v1/notes/1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 9)
        self.assertEqual(deserialized['title'], u'First Post!')

        resp = self.client.get('/api/v1/notes/set/2;1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 1)
        self.assertEqual(len(deserialized['objects']), 2)
        self.assertEqual([obj['title'] for obj in deserialized['objects']], [u'Another Post', u'First Post!'])

</source>
<source file="systems/django-tastypie-0.14.4/tests/gis/tests/views.py" startline="19" endline="46" pcid="296">
    def test_gets(self):
        resp = self.client.get('/api/v1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 2)
        self.assertEqual(deserialized['geonotes'], {'list_endpoint': '/api/v1/geonotes/', 'schema': '/api/v1/geonotes/schema/'})

        resp = self.client.get('/api/v1/geonotes/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 2)
        self.assertEqual(deserialized['meta']['limit'], 20)
        self.assertEqual(len(deserialized['objects']), 3)
        self.assertEqual([obj['title'] for obj in deserialized['objects']], [u'Points inside Golden Gate Park note', u'Golden Gate Park', u'Line inside Golden Gate Park'])

        resp = self.client.get('/api/v1/geonotes/1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 12)
        self.assertEqual(deserialized['title'], u'Points inside Golden Gate Park note')

        resp = self.client.get('/api/v1/geonotes/set/2;1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 1)
        self.assertEqual(len(deserialized['objects']), 2)
        self.assertEqual([obj['title'] for obj in deserialized['objects']], [u'Golden Gate Park', u'Points inside Golden Gate Park note'])

</source>
<source file="systems/django-tastypie-0.14.4/tests/basic/tests/views.py" startline="124" endline="145" pcid="600">
    def test_slugbased(self):
        resp = self.client.get('/api/v2/slugbased/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 2)
        self.assertEqual(deserialized['meta']['limit'], 20)
        self.assertEqual(len(deserialized['objects']), 2)
        self.assertEqual([obj['title'] for obj in deserialized['objects']], [u'First Post', u'Another First Post'])

        resp = self.client.get('/api/v2/slugbased/first-post/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 5)
        self.assertEqual(deserialized['title'], u'First Post')

        resp = self.client.get('/api/v2/slugbased/set/another-first-post;first-post/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        deserialized = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(len(deserialized), 1)
        self.assertEqual(len(deserialized['objects']), 2)
        self.assertEqual([obj['title'] for obj in deserialized['objects']], [u'Another First Post', u'First Post'])

</source>
</class>

<class classid="8" nclones="4" nlines="12" similarity="76">
<source file="systems/django-tastypie-0.14.4/tests/gis/tests/views.py" startline="47" endline="63" pcid="297">
    def test_posts(self):
        request = HttpRequest()
        post_data = '{"content": "A new post.", "is_active": true, "title": "New Title", "slug": "new-title", "user": "/api/v1/users/1/"}'
        request._body = request._raw_post_data = post_data

        resp = self.client.post('/api/v1/geonotes/', data=post_data, content_type='application/json')
        self.assertEqual(resp.status_code, 201)
        self.assertTrue(resp['location'].endswith('/api/v1/geonotes/4/'))

        # make sure posted object exists
        resp = self.client.get('/api/v1/geonotes/4/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        obj = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(obj['content'], 'A new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')

</source>
<source file="systems/django-tastypie-0.14.4/tests/gis/tests/views.py" startline="64" endline="79" pcid="298">
    def test_puts(self):
        request = HttpRequest()
        post_data = '{"content": "Another new post.", "is_active": true, "title": "Another New Title", "slug": "new-title", "user": "/api/v1/users/1/", "lines": null, "points": null, "polys": null}'
        request._body = request._raw_post_data = post_data

        resp = self.client.put('/api/v1/geonotes/1/', data=post_data, content_type='application/json')
        self.assertEqual(resp.status_code, 204)

        # make sure posted object exists
        resp = self.client.get('/api/v1/geonotes/1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        obj = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(obj['content'], 'Another new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')

</source>
<source file="systems/django-tastypie-0.14.4/tests/basic/tests/views.py" startline="58" endline="71" pcid="596">
    def test_puts(self):
        post_data = '{"content": "Another new post.", "is_active": true, "title": "Another New Title", "slug": "new-title", "user": "/api/v1/users/1/"}'

        resp = self.client.put('/api/v1/notes/1/', data=post_data, content_type='application/json')
        self.assertEqual(resp.status_code, 204)

        # make sure posted object exists
        resp = self.client.get('/api/v1/notes/1/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        obj = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(obj['content'], 'Another new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')

</source>
<source file="systems/django-tastypie-0.14.4/tests/basic/tests/views.py" startline="43" endline="57" pcid="595">
    def test_posts(self):
        post_data = b'{"content": "A new post.", "is_active": true, "title": "New Title", "slug": "new-title", "user": "/api/v1/users/1/"}'

        resp = self.client.post('/api/v1/notes/', data=post_data, content_type='application/json')
        self.assertEqual(resp.status_code, 201)
        self.assertTrue(resp['location'].endswith('/api/v1/notes/3/'))

        # make sure posted object exists
        resp = self.client.get('/api/v1/notes/3/', data={'format': 'json'})
        self.assertEqual(resp.status_code, 200)
        obj = json.loads(resp.content.decode('utf-8'))
        self.assertEqual(obj['content'], 'A new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')

</source>
</class>

<class classid="9" nclones="2" nlines="21" similarity="100">
<source file="systems/django-tastypie-0.14.4/tests/gis/tests/views.py" startline="91" endline="116" pcid="300">
    def test_options(self):
        resp = self.client.options('/api/v1/geonotes/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET,POST,PUT,DELETE,PATCH'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)

        resp = self.client.options('/api/v1/geonotes/1/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET,POST,PUT,DELETE,PATCH'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)

        resp = self.client.options('/api/v1/geonotes/schema/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)

        resp = self.client.options('/api/v1/geonotes/set/2;1/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)


</source>
<source file="systems/django-tastypie-0.14.4/tests/basic/tests/views.py" startline="99" endline="123" pcid="599">
    def test_options(self):
        resp = self.client.options('/api/v1/notes/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET,POST,PUT,DELETE,PATCH'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)

        resp = self.client.options('/api/v1/notes/1/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET,POST,PUT,DELETE,PATCH'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)

        resp = self.client.options('/api/v1/notes/schema/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)

        resp = self.client.options('/api/v1/notes/set/2;1/')
        self.assertEqual(resp.status_code, 200)
        allows = 'GET'
        self.assertEqual(resp['Allow'], allows)
        self.assertEqual(resp.content.decode('utf-8'), allows)

</source>
</class>

<class classid="10" nclones="5" nlines="13" similarity="72">
<source file="systems/django-tastypie-0.14.4/tests/gis/tests/views.py" startline="157" endline="177" pcid="304">
    def test_post_object(self):
        post_data = '{"content": "A new post.", "is_active": true, "title": "New Title", "slug": "new-title", "user": "/api/v1/users/1/"}'
        response = self.client.post('/api/v1/geonotes/', data=post_data, HTTP_ACCEPT='application/json', content_type='application/json')

        self.assertEqual(response.status_code, 201)

        location = response['Location']
        self.assertTrue(location.endswith('/api/v1/geonotes/4/'))

        # make sure posted object exists
        response = self.client.get('/api/v1/geonotes/4/', HTTP_ACCEPT='application/json')

        self.assertEqual(response.status_code, 200)

        data = response.content.decode('utf-8')
        obj = json.loads(data)

        self.assertEqual(obj['content'], 'A new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')

</source>
<source file="systems/django-tastypie-0.14.4/tests/alphanumeric/tests/views.py" startline="260" endline="277" pcid="590">
    def test_post_object(self):
        post_data = '{"artnr": "A76124/03", "name": "Bigwheel XXL"}'
        response = self.client.post('/api/v1/products/', data=post_data, HTTP_ACCEPT='application/json', content_type='application/json')
        data = response.content.decode('utf-8')
        self.assertEqual(response.status_code, 201, data)
        location = response['Location']
        self.assertTrue(location.endswith('/api/v1/products/A76124/03/'))

        # make sure posted object exists
        response = self.client.get('/api/v1/products/A76124/03/', HTTP_ACCEPT='application/json')

        data = response.content.decode('utf-8')
        self.assertEqual(response.status_code, 200, data)

        obj = json.loads(data)

        self.assertEqual(obj['name'], 'Bigwheel XXL')
        self.assertEqual(obj['artnr'], 'A76124/03')
</source>
<source file="systems/django-tastypie-0.14.4/tests/basic/tests/views.py" startline="195" endline="213" pcid="607">
    def test_post_object(self):
        post_data = '{"content": "A new post.", "is_active": true, "title": "New Title", "slug": "new-title", "user": "/api/v1/users/1/"}'
        response = self.client.post('/api/v1/notes/', data=post_data, HTTP_ACCEPT='application/json', content_type='application/json')
        self.assertEqual(response.status_code, 201)
        location = response['Location']
        self.assertTrue(location.endswith('/api/v1/notes/3/'))

        # make sure posted object exists
        response = self.client.get('/api/v1/notes/3/', HTTP_ACCEPT='application/json')

        self.assertEqual(response.status_code, 200)

        data = response.content.decode('utf-8')
        obj = json.loads(data)

        self.assertEqual(obj['content'], 'A new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')

</source>
<source file="systems/django-tastypie-0.14.4/tests/gis/tests/views.py" startline="204" endline="234" pcid="306">
    def test_post_xml(self):
        post_data = """<object><created>2010-03-30T20:05:00</created><polys type="null"/><is_active type="boolean">True</is_active><title>Points inside Golden Gate Park note 2</title><lines type="null"/><slug>points-inside-golden-gate-park-note-2</slug><content>A new post.</content><points type="hash"><type>MultiPoint</type><coordinates type="list"><objects><value type="float">-122.475233</value><value type="float">37.768617</value></objects><objects><value type="float">-122.470416</value><value type="float">37.767382</value></objects></coordinates></points><user>/api/v1/users/1/</user></object>"""
        response = self.client.post('/api/v1/geonotes/', data=post_data, HTTP_ACCEPT='application/xml', content_type='application/xml')

        self.assertEqual(response.status_code, 201)

        location = response['Location']
        self.assertTrue(location.endswith('/api/v1/geonotes/4/'))

        # make sure posted object exists
        response = self.client.get('/api/v1/geonotes/4/', HTTP_ACCEPT='application/json')

        self.assertEqual(response.status_code, 200)

        data = response.content.decode('utf-8')
        obj = json.loads(data)

        self.assertEqual(obj['content'], 'A new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')
        # Weeeee!  GeoJSON returned!
        self.assertEqual(obj['points'], {"coordinates": [[-122.475233, 37.768616999999999], [-122.470416, 37.767381999999998]], "type": "MultiPoint"})

        # Or we can ask for XML
        response = self.client.get('/api/v1/geonotes/4/', HTTP_ACCEPT='application/xml')

        self.assertEqual(response.status_code, 200)
        data = response.content.decode('utf-8')

        self.assertIn('<points type="hash"><coordinates type="list"><objects><value type="float">-122.475233</value><value type="float">37.768617</value></objects><objects><value type="float">-122.470416</value><value type="float">37.767382</value></objects></coordinates><type>MultiPoint</type></points>', data)

</source>
<source file="systems/django-tastypie-0.14.4/tests/gis/tests/views.py" startline="178" endline="203" pcid="305">
    def test_post_geojson(self):
        post_data = """{
            "content": "A new post.", "is_active": true, "title": "New Title2",
            "slug": "new-title2", "user": "/api/v1/users/1/",
            "polys": { "type": "MultiPolygon", "coordinates": [ [ [ [ -122.511067, 37.771276 ], [ -122.510037, 37.766391 ], [ -122.510037, 37.763813 ], [ -122.456822, 37.765848 ], [ -122.452960, 37.766459 ], [ -122.454848, 37.773990 ], [ -122.475362, 37.773040 ], [ -122.511067, 37.771276 ] ] ] ] }
        }"""
        response = self.client.post('/api/v1/geonotes/', data=post_data, HTTP_ACCEPT='application/json', content_type='application/json')

        self.assertEqual(response.status_code, 201)

        location = response['Location']
        self.assertTrue(location.endswith('/api/v1/geonotes/4/'))

        # make sure posted object exists
        response = self.client.get('/api/v1/geonotes/4/', HTTP_ACCEPT='application/json')

        self.assertEqual(response.status_code, 200)

        data = response.content.decode('utf-8')
        obj = json.loads(data)

        self.assertEqual(obj['content'], 'A new post.')
        self.assertEqual(obj['is_active'], True)
        self.assertEqual(obj['user'], '/api/v1/users/1/')
        self.assertEqual(obj['polys'], {u'type': u'MultiPolygon', u'coordinates': [[[[-122.511067, 37.771276], [-122.510037, 37.766390999999999], [-122.510037, 37.763812999999999], [-122.456822, 37.765847999999998], [-122.45296, 37.766458999999998], [-122.454848, 37.773989999999998], [-122.475362, 37.773040000000002], [-122.511067, 37.771276]]]]})

</source>
</class>

<class classid="11" nclones="4" nlines="12" similarity="76">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="52" endline="63" pcid="342">
    def test_page2(self):
        paginator = Paginator({}, self.data_set,
            resource_uri='/api/v1/notes/', limit=2, offset=2)
        meta = paginator.page()['meta']
        self.assertEqual(meta['limit'], 2)
        self.assertEqual(meta['offset'], 2)
        self.assertTrue('limit=2' in meta['previous'])
        self.assertTrue('offset=0' in meta['previous'])
        self.assertTrue('limit=2' in meta['next'])
        self.assertTrue('offset=4' in meta['next'])
        self.assertEqual(meta['total_count'], 6)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="75" endline="88" pcid="344">
    def test_page2_with_request(self):
        for req in [{'offset': '2', 'limit': '2'},
                QueryDict('offset=2&limit=2')]:
            paginator = Paginator(req, self.data_set,
                resource_uri='/api/v1/notes/', limit=2, offset=2)
            meta = paginator.page()['meta']
            self.assertEqual(meta['limit'], 2)
            self.assertEqual(meta['offset'], 2)
            self.assertTrue('limit=2' in meta['previous'])
            self.assertTrue('offset=0' in meta['previous'])
            self.assertTrue('limit=2' in meta['next'])
            self.assertTrue('offset=4' in meta['next'])
            self.assertEqual(meta['total_count'], 6)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="64" endline="74" pcid="343">
    def test_page3(self):
        paginator = Paginator({}, self.data_set,
            resource_uri='/api/v1/notes/', limit=2, offset=4)
        meta = paginator.page()['meta']
        self.assertEqual(meta['limit'], 2)
        self.assertEqual(meta['offset'], 4)
        self.assertTrue('limit=2' in meta['previous'])
        self.assertTrue('offset=2' in meta['previous'])
        self.assertEqual(meta['next'], None)
        self.assertEqual(meta['total_count'], 6)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="89" endline="101" pcid="345">
    def test_page3_with_request(self):
        for req in [{'offset': '4', 'limit': '2'},
                QueryDict('offset=4&limit=2')]:
            paginator = Paginator(req, self.data_set,
                resource_uri='/api/v1/notes/', limit=2, offset=4)
            meta = paginator.page()['meta']
            self.assertEqual(meta['limit'], 2)
            self.assertEqual(meta['offset'], 4)
            self.assertTrue('limit=2' in meta['previous'])
            self.assertTrue('offset=2' in meta['previous'])
            self.assertEqual(meta['next'], None)
            self.assertEqual(meta['total_count'], 6)

</source>
</class>

<class classid="12" nclones="2" nlines="17" similarity="72">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="122" endline="141" pcid="348">
    def test_complex_get(self):
        request = {
            'slug__startswith': 'food',
            'format': 'json',
        }
        paginator = Paginator(request, self.data_set,
            resource_uri='/api/v1/notes/', limit=2, offset=2)
        meta = paginator.page()['meta']
        self.assertEqual(meta['limit'], 2)
        self.assertEqual(meta['offset'], 2)
        self.assertTrue('limit=2' in meta['previous'])
        self.assertTrue('offset=0' in meta['previous'])
        self.assertTrue('slug__startswith=food' in meta['previous'])
        self.assertTrue('format=json' in meta['previous'])
        self.assertTrue('limit=2' in meta['next'])
        self.assertTrue('offset=4' in meta['next'])
        self.assertTrue('slug__startswith=food' in meta['next'])
        self.assertTrue('format=json' in meta['next'])
        self.assertEqual(meta['total_count'], 6)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="268" endline="283" pcid="354">
    def test_multiple(self):
        request = QueryDict('a=1&a=2')
        paginator = Paginator(request, self.data_set,
            resource_uri='/api/v1/notes/', limit='2', offset='2')
        meta = paginator.page()['meta']
        self.assertEqual(meta['limit'], 2)
        self.assertEqual(meta['offset'], 2)
        self.assertTrue('limit=2' in meta['previous'])
        self.assertTrue('offset=0' in meta['previous'])
        self.assertTrue('a=1' in meta['previous'])
        self.assertTrue('a=2' in meta['previous'])
        self.assertTrue('limit=2' in meta['next'])
        self.assertTrue('offset=4' in meta['next'])
        self.assertTrue('a=1' in meta['next'])
        self.assertTrue('a=2' in meta['next'])

</source>
</class>

<class classid="13" nclones="2" nlines="28" similarity="74">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="142" endline="182" pcid="349">
    def test_limit(self):
        paginator = Paginator({}, self.data_set, limit=20, offset=0)

        paginator.limit = '10'
        self.assertEqual(paginator.get_limit(), 10)

        paginator.limit = None
        self.assertEqual(paginator.get_limit(), 20)

        paginator.limit = 10
        self.assertEqual(paginator.get_limit(), 10)

        paginator.limit = -10
        raised = False
        try:
            paginator.get_limit()
        except BadRequest as e:
            raised = e
        self.assertTrue(raised)
        self.assertEqual(str(raised), "Invalid limit '-10' provided. Please provide a positive integer >= 0.")

        paginator.limit = 'hAI!'
        raised = False
        try:
            paginator.get_limit()
        except BadRequest as e:
            raised = e
        self.assertTrue(raised)
        self.assertEqual(str(raised), "Invalid limit 'hAI!' provided. Please provide a positive integer.")

        # Test the max_limit.
        paginator.limit = 1000
        self.assertEqual(paginator.get_limit(), 1000)

        paginator.limit = 1001
        self.assertEqual(paginator.get_limit(), 1000)

        paginator = Paginator({},
            self.data_set, limit=20, offset=0, max_limit=10)
        self.assertEqual(paginator.get_limit(), 10)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/paginator.py" startline="183" endline="212" pcid="350">
    def test_offset(self):
        paginator = Paginator({}, self.data_set, limit=20, offset=0)

        paginator.offset = '10'
        self.assertEqual(paginator.get_offset(), 10)

        paginator.offset = 0
        self.assertEqual(paginator.get_offset(), 0)

        paginator.offset = 10
        self.assertEqual(paginator.get_offset(), 10)

        paginator.offset = -10
        raised = False
        try:
            paginator.get_offset()
        except BadRequest as e:
            raised = e
        self.assertTrue(raised)
        self.assertEqual(str(raised), "Invalid offset '-10' provided. Please provide a positive integer >= 0.")

        paginator.offset = 'hAI!'
        raised = False
        try:
            paginator.get_offset()
        except BadRequest as e:
            raised = e
        self.assertTrue(raised)
        self.assertEqual(str(raised), "Invalid offset 'hAI!' provided. Please provide an integer.")

</source>
</class>

<class classid="14" nclones="2" nlines="18" similarity="94">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/api.py" startline="32" endline="56" pcid="362">
    def test_register(self):
        # NOTE: these have all been registered in core.tests.api_urls
        api = Api()
        self.assertEqual(len(api._registry), 0)

        api.register(NoteResource())
        self.assertEqual(len(api._registry), 1)
        self.assertEqual(sorted(api._registry.keys()), ['notes'])

        api.register(UserResource())
        self.assertEqual(len(api._registry), 2)
        self.assertEqual(sorted(api._registry.keys()), ['notes', 'users'])

        api.register(UserResource())
        self.assertEqual(len(api._registry), 2)
        self.assertEqual(sorted(api._registry.keys()), ['notes', 'users'])

        self.assertEqual(len(api._canonicals), 2)
        api.register(UserResource(), canonical=False)
        self.assertEqual(len(api._registry), 2)
        self.assertEqual(sorted(api._registry.keys()), ['notes', 'users'])
        self.assertEqual(len(api._canonicals), 2)

        self.assertRaises(ValueError, api.register, NoteResource)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/api.py" startline="57" endline="78" pcid="363">
    def test_global_registry(self):
        api = Api()
        self.assertEqual(len(api._registry), 0)

        api.register(NoteResource())
        self.assertEqual(len(api._registry), 1)
        self.assertEqual(sorted(api._registry.keys()), ['notes'])

        api.register(UserResource())
        self.assertEqual(len(api._registry), 2)
        self.assertEqual(sorted(api._registry.keys()), ['notes', 'users'])

        api.register(UserResource())
        self.assertEqual(len(api._registry), 2)
        self.assertEqual(sorted(api._registry.keys()), ['notes', 'users'])

        self.assertEqual(len(api._canonicals), 2)
        api.register(UserResource(), canonical=False)
        self.assertEqual(len(api._registry), 2)
        self.assertEqual(sorted(api._registry.keys()), ['notes', 'users'])
        self.assertEqual(len(api._canonicals), 2)

</source>
</class>

<class classid="15" nclones="7" nlines="18" similarity="73">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authorization.py" startline="48" endline="69" pcid="372">
    def test_no_rules(self):
        request = HttpRequest()
        resource = NoRulesNoteResource()
        auth = resource._meta.authorization
        bundle = resource.build_bundle(request=request)

        bundle.request.method = 'GET'
        self.assertEqual(len(auth.read_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.read_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'POST'
        self.assertRaises(NotImplementedError, auth.create_list, resource.get_object_list(bundle.request), bundle)
        self.assertTrue(auth.create_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'PUT'
        self.assertEqual(len(auth.update_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.update_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'DELETE'
        self.assertEqual(len(auth.delete_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.delete_detail(resource.get_object_list(bundle.request)[0], bundle))

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authorization.py" startline="160" endline="186" pcid="377">
    def test_change_perm(self):
        request = HttpRequest()
        request.user = self.user

        # give change permission
        request.user.user_permissions.add(self.change)

        resource = DjangoNoteResource()
        auth = resource._meta.authorization
        bundle = resource.build_bundle(request=request)

        bundle.request.method = 'GET'
        self.assertEqual(len(auth.read_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.read_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'POST'
        self.assertEqual(len(auth.create_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.create_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'PUT'
        self.assertEqual(len(auth.update_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.update_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'DELETE'
        self.assertEqual(len(auth.delete_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.delete_detail, resource.get_object_list(bundle.request)[0], bundle)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authorization.py" startline="214" endline="240" pcid="379">
    def test_all(self):
        request = HttpRequest()
        request.user = self.user

        request.user.user_permissions.add(self.add)
        request.user.user_permissions.add(self.change)
        request.user.user_permissions.add(self.delete)

        resource = DjangoNoteResource()
        auth = resource._meta.authorization
        bundle = resource.build_bundle(request=request)

        bundle.request.method = 'GET'
        self.assertEqual(len(auth.read_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.read_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'POST'
        self.assertEqual(len(auth.create_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.create_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'PUT'
        self.assertEqual(len(auth.update_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.update_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'DELETE'
        self.assertEqual(len(auth.delete_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.delete_detail(resource.get_object_list(bundle.request)[0], bundle))
</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authorization.py" startline="70" endline="92" pcid="373">
    def test_read_only(self):
        request = HttpRequest()
        resource = ReadOnlyNoteResource()
        auth = resource._meta.authorization
        bundle = resource.build_bundle(request=request)

        bundle.request.method = 'GET'
        self.assertEqual(len(auth.read_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.read_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'POST'
        self.assertEqual(len(auth.create_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.create_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'PUT'
        self.assertEqual(len(auth.update_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.update_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'DELETE'
        self.assertEqual(len(auth.delete_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.delete_detail, resource.get_object_list(bundle.request)[0], bundle)


</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authorization.py" startline="104" endline="130" pcid="375">
    def test_no_perms(self):
        # sanity check: user has no permissions
        self.assertFalse(self.user.get_all_permissions())

        request = HttpRequest()
        request.user = self.user
        # with no permissions, api is read-only
        resource = DjangoNoteResource()
        auth = resource._meta.authorization
        bundle = resource.build_bundle(request=request)

        bundle.request.method = 'GET'
        self.assertEqual(len(auth.read_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.read_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'POST'
        self.assertEqual(len(auth.create_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.create_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'PUT'
        self.assertEqual(len(auth.update_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.update_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'DELETE'
        self.assertEqual(len(auth.delete_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.delete_detail, resource.get_object_list(bundle.request)[0], bundle)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authorization.py" startline="131" endline="159" pcid="376">
    def test_add_perm(self):
        request = HttpRequest()
        request.user = self.user

        # give add permission
        request.user.user_permissions.add(self.add)

        request = HttpRequest()
        request.user = self.user
        resource = DjangoNoteResource()
        auth = resource._meta.authorization
        bundle = resource.build_bundle(request=request)

        bundle.request.method = 'GET'
        self.assertEqual(len(auth.read_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.read_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'POST'
        self.assertEqual(len(auth.create_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.create_detail(resource.get_object_list(bundle.request)[0], bundle))

        bundle.request.method = 'PUT'
        self.assertEqual(len(auth.update_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.update_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'DELETE'
        self.assertEqual(len(auth.delete_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.delete_detail, resource.get_object_list(bundle.request)[0], bundle)

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authorization.py" startline="187" endline="213" pcid="378">
    def test_delete_perm(self):
        request = HttpRequest()
        request.user = self.user

        # give delete permission
        request.user.user_permissions.add(self.delete)

        resource = DjangoNoteResource()
        auth = resource._meta.authorization
        bundle = resource.build_bundle(request=request)

        bundle.request.method = 'GET'
        self.assertEqual(len(auth.read_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.read_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'POST'
        self.assertEqual(len(auth.create_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.create_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'PUT'
        self.assertEqual(len(auth.update_list(resource.get_object_list(bundle.request), bundle)), 0)
        self.assertRaises(Unauthorized, auth.update_detail, resource.get_object_list(bundle.request)[0], bundle)

        bundle.request.method = 'DELETE'
        self.assertEqual(len(auth.delete_list(resource.get_object_list(bundle.request), bundle)), 4)
        self.assertTrue(auth.delete_detail(resource.get_object_list(bundle.request)[0], bundle))

</source>
</class>

<class classid="16" nclones="2" nlines="36" similarity="100">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/validation.py" startline="63" endline="104" pcid="387">
    def test_is_valid(self):
        valid = FormValidation(form_class=NoteForm)
        bundle = Bundle()
        self.assertEqual(valid.is_valid(bundle), {
            'is_active': [u'This field is required.'],
            'slug': [u'This field is required.'],
            '__all__': [u'Having no content makes for a very boring note.'],
            'title': [u'This field is required.'],
        })

        bundle = Bundle(data={
            'title': 'Foo.',
            'slug': '123456789012345678901234567890123456789012345678901234567890',
            'content': '',
            'is_active': True,
        })
        self.assertEqual(valid.is_valid(bundle), {
            'slug': [u'Ensure this value has at most 50 characters (it has 60).'],
            '__all__': [u'Having no content makes for a very boring note.'],
        })

        bundle = Bundle(data={
            'title': 'Foo.',
            'slug': 'bar',
            'content': '',
            'is_active': True,
        })
        self.assertEqual(valid.is_valid(bundle), {
            '__all__': [u'Having no content makes for a very boring note.'],
        })

        bundle = Bundle(data={
            'title': 'Foo.',
            'slug': 'bar',
            'content': 'This! Is! CONTENT!',
            'is_active': True,
        })
        self.assertEqual(valid.is_valid(bundle), {})
        # NOTE: Bundle data is left untouched!
        self.assertEqual(bundle.data['title'], 'Foo.')


</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/validation.py" startline="115" endline="154" pcid="390">
    def test_is_valid(self):
        valid = CleanedDataFormValidation(form_class=NoteForm)
        bundle = Bundle()
        self.assertEqual(valid.is_valid(bundle), {
            'is_active': [u'This field is required.'],
            'slug': [u'This field is required.'],
            '__all__': [u'Having no content makes for a very boring note.'],
            'title': [u'This field is required.'],
        })

        bundle = Bundle(data={
            'title': 'Foo.',
            'slug': '123456789012345678901234567890123456789012345678901234567890',
            'content': '',
            'is_active': True,
        })
        self.assertEqual(valid.is_valid(bundle), {
            'slug': [u'Ensure this value has at most 50 characters (it has 60).'],
            '__all__': [u'Having no content makes for a very boring note.'],
        })

        bundle = Bundle(data={
            'title': 'Foo.',
            'slug': 'bar',
            'content': '',
            'is_active': True,
        })
        self.assertEqual(valid.is_valid(bundle), {
            '__all__': [u'Having no content makes for a very boring note.'],
        })

        bundle = Bundle(data={
            'title': 'Foo.',
            'slug': 'bar',
            'content': 'This! Is! CONTENT!',
            'is_active': True,
        })
        self.assertEqual(valid.is_valid(bundle), {})
        # NOTE: Bundle data is modified!
        self.assertEqual(bundle.data['title'], u'FOO.')
</source>
</class>

<class classid="17" nclones="2" nlines="49" similarity="100">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/fields.py" startline="652" endline="708" pcid="446">
    fixtures = ['note_testdata.json']

    def test_init(self):
        field_1 = ToOneField(UserResource, 'author')
        self.assertEqual(field_1.instance_name, None)
        self.assertEqual(issubclass(field_1.to, UserResource), True)
        self.assertEqual(field_1.attribute, 'author')
        self.assertEqual(field_1.related_name, None)
        self.assertEqual(field_1.null, False)
        self.assertEqual(field_1.full, False)
        self.assertEqual(field_1.readonly, False)
        self.assertEqual(field_1.help_text, 'A single related resource. Can be either a URI or set of nested resource data.')

        field_2 = ToOneField(UserResource, 'author', null=True, help_text="Points to a User.")
        self.assertEqual(field_2.instance_name, None)
        self.assertEqual(issubclass(field_2.to, UserResource), True)
        self.assertEqual(field_2.attribute, 'author')
        self.assertEqual(field_2.related_name, None)
        self.assertEqual(field_2.null, True)
        self.assertEqual(field_2.full, False)
        self.assertEqual(field_2.readonly, False)
        self.assertEqual(field_2.help_text, 'Points to a User.')

        field_3 = ToOneField(UserResource, 'author', default=1, null=True, help_text="Points to a User.")
        self.assertEqual(field_3.instance_name, None)
        self.assertEqual(issubclass(field_3.to, UserResource), True)
        self.assertEqual(field_3.attribute, 'author')
        self.assertEqual(field_3.related_name, None)
        self.assertEqual(field_3.null, True)
        self.assertEqual(field_3.default, 1)
        self.assertEqual(field_3.full, False)
        self.assertEqual(field_3.readonly, False)
        self.assertEqual(field_3.help_text, 'Points to a User.')

        field_4 = ToOneField(UserResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.")
        self.assertEqual(field_4.instance_name, None)
        self.assertEqual(issubclass(field_4.to, UserResource), True)
        self.assertEqual(field_4.attribute, 'author')
        self.assertEqual(field_4.related_name, None)
        self.assertEqual(field_4.null, True)
        self.assertEqual(field_4.default, 1)
        self.assertEqual(field_4.full, False)
        self.assertEqual(field_4.readonly, True)
        self.assertEqual(field_4.help_text, 'Points to a User.')

        field_5 = ToOneField(UserResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in="list")
        self.assertEqual(field_5.use_in, 'list')

        field_6 = ToOneField(UserResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in="detail")
        self.assertEqual(field_6.use_in, 'detail')

        def use_in_callable(x):
            return True
        field_7 = ToOneField(UserResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in=use_in_callable)
        self.assertTrue(field_7.use_in is use_in_callable)

        field_8 = ToOneField(UserResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in="foo")
</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/fields.py" startline="1018" endline="1074" pcid="463">
        self.note_2.subjects.add(self.subject_3)

    def test_init(self):
        field_1 = ToManyField(SubjectResource, 'subjects')
        self.assertEqual(field_1.instance_name, None)
        self.assertEqual(issubclass(field_1.to, SubjectResource), True)
        self.assertEqual(field_1.attribute, 'subjects')
        self.assertEqual(field_1.related_name, None)
        self.assertEqual(field_1.null, False)
        self.assertEqual(field_1.full, False)
        self.assertEqual(field_1.readonly, False)
        self.assertEqual(field_1.help_text, 'Many related resources. Can be either a list of URIs or list of individually nested resource data.')

        field_2 = ToManyField(SubjectResource, 'subjects', null=True, help_text='Points to many Subjects.')
        self.assertEqual(field_2.instance_name, None)
        self.assertEqual(issubclass(field_2.to, SubjectResource), True)
        self.assertEqual(field_2.attribute, 'subjects')
        self.assertEqual(field_2.related_name, None)
        self.assertEqual(field_2.null, True)
        self.assertEqual(field_2.full, False)
        self.assertEqual(field_2.readonly, False)
        self.assertEqual(field_2.help_text, 'Points to many Subjects.')

        field_3 = ToManyField(SubjectResource, 'subjects', default=1, null=True, help_text='Points to many Subjects.')
        self.assertEqual(field_3.instance_name, None)
        self.assertEqual(issubclass(field_3.to, SubjectResource), True)
        self.assertEqual(field_3.attribute, 'subjects')
        self.assertEqual(field_3.related_name, None)
        self.assertEqual(field_3.null, True)
        self.assertEqual(field_3.default, 1)
        self.assertEqual(field_3.full, False)
        self.assertEqual(field_3.readonly, False)
        self.assertEqual(field_3.help_text, 'Points to many Subjects.')

        field_4 = ToManyField(SubjectResource, 'subjects', default=1, null=True, readonly=True, help_text='Points to many Subjects.')
        self.assertEqual(field_4.instance_name, None)
        self.assertEqual(issubclass(field_4.to, SubjectResource), True)
        self.assertEqual(field_4.attribute, 'subjects')
        self.assertEqual(field_4.related_name, None)
        self.assertEqual(field_4.null, True)
        self.assertEqual(field_4.default, 1)
        self.assertEqual(field_4.full, False)
        self.assertEqual(field_4.readonly, True)
        self.assertEqual(field_4.help_text, 'Points to many Subjects.')

        field_5 = ToManyField(SubjectResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in="list")
        self.assertEqual(field_5.use_in, 'list')

        field_6 = ToManyField(SubjectResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in="detail")
        self.assertEqual(field_6.use_in, 'detail')

        def use_in_callable(x):
            return True
        field_7 = ToManyField(SubjectResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in=use_in_callable)
        self.assertTrue(field_7.use_in is use_in_callable)

        field_8 = ToManyField(SubjectResource, 'author', default=1, null=True, readonly=True, help_text="Points to a User.", use_in="foo")
</source>
</class>

<class classid="18" nclones="2" nlines="12" similarity="75">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/fields.py" startline="905" endline="917" pcid="456">
        self.assertEqual(fk_bundle.obj.email, u'john@doe.com')

    def test_resource_from_uri(self):
        ur = UserResource()
        field_1 = ToOneField(UserResource, 'author')
        fk_bundle = field_1.resource_from_uri(ur, '/api/v1/users/1/')
        self.assertEqual(fk_bundle.data['username'], u'johndoe')
        self.assertEqual(fk_bundle.data['email'], u'john@doe.com')
        self.assertEqual(fk_bundle.obj.username, u'johndoe')
        self.assertEqual(fk_bundle.obj.email, u'john@doe.com')

        fk_bundle = field_1.resource_from_uri(ur, '/api/v1/users/1/', related_obj='Foo', related_name='Bar')
        self.assertEqual(fk_bundle.related_obj, None)
</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/fields.py" startline="939" endline="952" pcid="458">
        self.assertEqual(fk_bundle.related_name, 'Bar')

    def test_resource_from_pk(self):
        user = User.objects.get(pk=1)
        ur = UserResource()
        field_1 = ToOneField(UserResource, 'author')
        fk_bundle = field_1.resource_from_pk(ur, user)
        self.assertEqual(fk_bundle.data['username'], u'johndoe')
        self.assertEqual(fk_bundle.data['email'], u'john@doe.com')
        self.assertEqual(fk_bundle.obj.username, u'johndoe')
        self.assertEqual(fk_bundle.obj.email, u'john@doe.com')

        fk_bundle = field_1.resource_from_pk(ur, user, related_obj='Foo', related_name='Bar')
        self.assertEqual(fk_bundle.related_obj, None)
</source>
</class>

<class classid="19" nclones="2" nlines="21" similarity="78">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/serializers.py" startline="214" endline="238" pcid="496">
    def test_format_date(self):
        serializer = Serializer()
        self.assertEqual(serializer.format_date(datetime.date(2010, 12, 16)), '2010-12-16')

        serializer = Serializer(datetime_formatting='iso-8601')
        self.assertEqual(serializer.format_date(datetime.date(2010, 12, 16)), '2010-12-16')

        serializer = Serializer(datetime_formatting='rfc-2822')
        self.assertEqual(serializer.format_date(datetime.date(2010, 12, 16)), u'16 Dec 2010')

        serializer = Serializer(datetime_formatting='random-garbage')
        self.assertEqual(serializer.format_date(datetime.date(2010, 12, 16)), '2010-12-16')

        with self.settings(TASTYPIE_DATETIME_FORMATTING='iso-8601'):
            serializer = Serializer()
            self.assertEqual(serializer.format_date(datetime.date(2010, 12, 16)), '2010-12-16')

        with self.settings(TASTYPIE_DATETIME_FORMATTING='rfc-2822'):
            serializer = Serializer()
            self.assertEqual(serializer.format_date(datetime.date(2010, 12, 16)), u'16 Dec 2010')

        with self.settings(TASTYPIE_DATETIME_FORMATTING='random-garbage'):
            serializer = Serializer()
            self.assertEqual(serializer.format_date(datetime.date(2010, 12, 16)), '2010-12-16')

</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/serializers.py" startline="239" endline="270" pcid="497">
    def test_format_time(self):
        serializer = Serializer()
        self.assertEqual(serializer.format_time(datetime.time(2, 31, 33)), '02:31:33')

        serializer = Serializer(datetime_formatting='iso-8601')
        self.assertEqual(serializer.format_time(datetime.time(2, 31, 33)), '02:31:33')

        serializer = Serializer(datetime_formatting='iso-8601-strict')
        self.assertEqual(serializer.format_time(datetime.time(2, 31, 33, 10)), '02:31:33')

        serializer = Serializer(datetime_formatting='rfc-2822')
        self.assertEqual(serializer.format_time(datetime.time(2, 31, 33)), u'02:31:33 -0600')

        serializer = Serializer(datetime_formatting='random-garbage')
        self.assertEqual(serializer.format_time(datetime.time(2, 31, 33)), '02:31:33')

        with self.settings(TASTYPIE_DATETIME_FORMATTING='iso-8601'):
            serializer = Serializer()
            self.assertEqual(serializer.format_time(datetime.time(2, 31, 33)), '02:31:33')

        with self.settings(TASTYPIE_DATETIME_FORMATTING='iso-8601-strict'):
            serializer = Serializer()
            self.assertEqual(serializer.format_time(datetime.time(2, 31, 33, 10)), '02:31:33')

        with self.settings(TASTYPIE_DATETIME_FORMATTING='rfc-2822'):
            serializer = Serializer()
            self.assertEqual(serializer.format_time(datetime.time(2, 31, 33)), u'02:31:33 -0600')

        with self.settings(TASTYPIE_DATETIME_FORMATTING='random-garbage'):
            serializer = Serializer()
            self.assertEqual(serializer.format_time(datetime.time(2, 31, 33)), '02:31:33')

</source>
</class>

<class classid="20" nclones="2" nlines="16" similarity="75">
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authentication.py" startline="392" endline="413" pcid="562">
        })

    def test_is_authenticated(self):
        auth = OAuthAuthentication()

        # Invalid request.
        resp = auth.is_authenticated(self.request)
        self.assertEqual(resp.status_code, 401)

        # No username/api_key details should fail.
        self.request.REQUEST = self.request.GET = {
            'oauth_consumer_key': '123',
            'oauth_nonce': 'abc',
            'oauth_signature': '&',
            'oauth_signature_method': 'PLAINTEXT',
            'oauth_timestamp': str(int(time.time())),
            'oauth_token': 'foo',
        }
        self.request.META['Authorization'] = 'OAuth ' + ','.join(
            [key + '=' + value for key, value in self.request.REQUEST.items()])
        resp = auth.is_authenticated(self.request)
        self.assertEqual(resp, True)
</source>
<source file="systems/django-tastypie-0.14.4/tests/core/tests/authentication.py" startline="414" endline="431" pcid="563">
        self.assertEqual(self.request.user.pk, self.user.pk)

    def test_check_active_true(self):
        auth = OAuthAuthentication()

        # No username/api_key details should fail.
        self.request.REQUEST = self.request.GET = {
            'oauth_consumer_key': '123',
            'oauth_nonce': 'abc',
            'oauth_signature': '&',
            'oauth_signature_method': 'PLAINTEXT',
            'oauth_timestamp': str(int(time.time())),
            'oauth_token': 'bar',
        }
        self.request.META['Authorization'] = 'OAuth ' + ','.join(
            [key + '=' + value for key, value in self.request.REQUEST.items()])
        resp = auth.is_authenticated(self.request)
        self.assertFalse(resp)
</source>
</class>

</clones>
