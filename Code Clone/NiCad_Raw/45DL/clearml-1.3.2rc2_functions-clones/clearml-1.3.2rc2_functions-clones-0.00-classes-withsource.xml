<clones>
<systeminfo processor="nicad6" system="clearml-1.3.2rc2" granularity="functions" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="5797" npairs="93"/>
<runinfo ncompares="16949" cputime="83373"/>
<classinfo nclasses="26"/>

<class classid="1" nclones="2" nlines="11" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/debugging/trace.py" startline="91" endline="101" pcid="183">
        def _traced_call_int(*args, **kwargs):
            _log_stderr(name, fnc, args, kwargs, False)
            r = None
            try:
                ret = fnc(*args, **kwargs)
            except Exception as ex:
                r = ex
            _log_stderr(name, fnc, args, kwargs, True)
            if r:
                raise r
            return ret
</source>
<source file="systems/clearml-1.3.2rc2/clearml/debugging/trace.py" startline="106" endline="116" pcid="185">
    def _traced_call_int(*args, **kwargs):
        _log_stderr(name, fnc, args, kwargs, False)
        r = None
        try:
            ret = fnc(*args, **kwargs)
        except Exception as ex:
            r = ex
        _log_stderr(name, fnc, args, kwargs, True)
        if r:
            raise r
        return ret
</source>
</class>

<class classid="2" nclones="3" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="91" endline="103" pcid="418">
    def dates(self, value):
        if value is None:
            self._property_dates = None
            return

        self.assert_isinstance(value, "dates", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "dates", six.integer_types, is_array=True)
        self._property_dates = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="278" endline="290" pcid="1245">
    def dates(self, value):
        if value is None:
            self._property_dates = None
            return

        self.assert_isinstance(value, "dates", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "dates", six.integer_types, is_array=True)
        self._property_dates = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="406" endline="418" pcid="1255">
    def dates(self, value):
        if value is None:
            self._property_dates = None
            return

        self.assert_isinstance(value, "dates", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "dates", six.integer_types, is_array=True)
        self._property_dates = value

</source>
</class>

<class classid="3" nclones="2" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="450" endline="460" pcid="451">
    def entries(self, value):
        if value is None:
            self._property_entries = None
            return
        self.assert_isinstance(value, "entries", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Entry.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "entries", Entry, is_array=True)
        self._property_entries = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/queues.py" startline="344" endline="356" pcid="2557">
    def entries(self, value):
        if value is None:
            self._property_entries = None
            return

        self.assert_isinstance(value, "entries", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Entry.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "entries", Entry, is_array=True)
        self._property_entries = value


</source>
</class>

<class classid="4" nclones="6" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="466" endline="479" pcid="453">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="641" endline="654" pcid="702">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="1129" endline="1142" pcid="740">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="1902" endline="1915" pcid="802">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="546" endline="559" pcid="458">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="546" endline="558" pcid="695">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value

</source>
</class>

<class classid="5" nclones="2" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="1387" endline="1399" pcid="517">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Queue.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "queues", Queue, is_array=True)
        self._property_queues = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/queues.py" startline="1006" endline="1018" pcid="2605">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Queue.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "queues", Queue, is_array=True)
        self._property_queues = value


</source>
</class>

<class classid="6" nclones="2" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="2562" endline="2574" pcid="847">
    def models(self, value):
        if value is None:
            self._property_models = None
            return

        self.assert_isinstance(value, "models", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Model.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "models", Model, is_array=True)
        self._property_models = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="1782" endline="1794" pcid="2884">
    def models(self, value):
        if value is None:
            self._property_models = None
            return

        self.assert_isinstance(value, "models", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Model.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "models", Model, is_array=True)
        self._property_models = value


</source>
</class>

<class classid="7" nclones="2" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="124" endline="137" pcid="1233">
    def category(self, value):
        if value is None:
            self._property_category = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "category", enum.Enum)
        self._property_category = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="122" endline="135" pcid="3182">
    def category(self, value):
        if value is None:
            self._property_category = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "category", enum.Enum)
        self._property_category = value


</source>
</class>

<class classid="8" nclones="2" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="170" endline="182" pcid="1236">
    def aggregation(self, value):
        if value is None:
            self._property_aggregation = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "aggregation", enum.Enum)
        self._property_aggregation = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="171" endline="183" pcid="3185">
    def aggregation(self, value):
        if value is None:
            self._property_aggregation = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "aggregation", enum.Enum)
        self._property_aggregation = value

</source>
</class>

<class classid="9" nclones="2" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="1693" endline="1705" pcid="1352">
    def workers(self, value):
        if value is None:
            self._property_workers = None
            return

        self.assert_isinstance(value, "workers", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Worker.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "workers", Worker, is_array=True)
        self._property_workers = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="1645" endline="1657" pcid="3301">
    def workers(self, value):
        if value is None:
            self._property_workers = None
            return

        self.assert_isinstance(value, "workers", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Worker.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "workers", Worker, is_array=True)
        self._property_workers = value


</source>
</class>

<class classid="10" nclones="2" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="1974" endline="1985" pcid="1369">
    def items(self, value):
        if value is None:
            self._property_items = None
            return

        self.assert_isinstance(value, "items", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [StatItem.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "items", StatItem, is_array=True)
        self._property_items = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="1916" endline="1927" pcid="3318">
    def items(self, value):
        if value is None:
            self._property_items = None
            return

        self.assert_isinstance(value, "items", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [StatItem.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "items", StatItem, is_array=True)
        self._property_items = value

</source>
</class>

<class classid="11" nclones="2" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="617" endline="629" pcid="1453">
    def mode(self, value):
        if value is None:
            self._property_mode = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ArtifactModeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "mode", enum.Enum)
        self._property_mode = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="760" endline="773" pcid="1470">
    def mode(self, value):
        if value is None:
            self._property_mode = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ArtifactModeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "mode", enum.Enum)
        self._property_mode = value


</source>
</class>

<class classid="12" nclones="4" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="983" endline="995" pcid="1488">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="796" endline="808" pcid="3426">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="2413" endline="2424" pcid="1604">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="1988" endline="2000" pcid="3525">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value


</source>
</class>

<class classid="13" nclones="8" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="1783" endline="1795" pcid="1536">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="3208" endline="3220" pcid="3593">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6302" endline="6314" pcid="1854">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="4462" endline="4474" pcid="3681">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="1527" endline="1539" pcid="3474">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4241" endline="4253" pcid="1714">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="9154" endline="9166" pcid="3969">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="12323" endline="12335" pcid="2221">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
</class>

<class classid="14" nclones="2" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="1801" endline="1813" pcid="1538">
    def status(self, value):
        if value is None:
            self._property_status = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskStatusEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "status", enum.Enum)
        self._property_status = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="1545" endline="1557" pcid="3476">
    def status(self, value):
        if value is None:
            self._property_status = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskStatusEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "status", enum.Enum)
        self._property_status = value

</source>
</class>

<class classid="15" nclones="4" nlines="13" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="2164" endline="2182" pcid="1588">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="12408" endline="12426" pcid="2233">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4349" endline="4367" pcid="1730">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6387" endline="6405" pcid="1866">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
</class>

<class classid="16" nclones="5" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="2188" endline="2210" pcid="1590">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4373" endline="4395" pcid="1732">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="12432" endline="12454" pcid="2235">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6411" endline="6433" pcid="1868">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="5021" endline="5043" pcid="1782">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
</class>

<class classid="17" nclones="2" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6845" endline="6857" pcid="1900">
    def replace_hyperparams(self, value):
        if value is None:
            self._property_replace_hyperparams = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ReplaceHyperparamsEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "replace_hyperparams", enum.Enum)
        self._property_replace_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="4913" endline="4926" pcid="3719">
    def replace_hyperparams(self, value):
        if value is None:
            self._property_replace_hyperparams = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ReplaceHyperparamsEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "replace_hyperparams", enum.Enum)
        self._property_replace_hyperparams = value


</source>
</class>

<class classid="18" nclones="2" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="8376" endline="8388" pcid="1983">
    def tasks(self, value):
        if value is None:
            self._property_tasks = None
            return

        self.assert_isinstance(value, "tasks", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Task.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "tasks", Task, is_array=True)
        self._property_tasks = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="6236" endline="6248" pcid="3790">
    def tasks(self, value):
        if value is None:
            self._property_tasks = None
            return

        self.assert_isinstance(value, "tasks", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Task.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "tasks", Task, is_array=True)
        self._property_tasks = value


</source>
</class>

<class classid="19" nclones="2" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="822" endline="834" pcid="2324">
    def level(self, value):
        if value is None:
            self._property_level = None
            return
        if isinstance(value, six.string_types):
            try:
                value = LogLevelEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "level", enum.Enum)
        self._property_level = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="748" endline="760" pcid="4066">
    @level.setter
    def level(self, value):
        if value is None:
            self._property_level = None
            return
        if isinstance(value, six.string_types):
            try:
                value = LogLevelEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "level", enum.Enum)
        self._property_level = value
</source>
</class>

<class classid="20" nclones="2" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="2827" endline="2840" pcid="2467">
    def event_type(self, value):
        if value is None:
            self._property_event_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = EventTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "event_type", enum.Enum)
        self._property_event_type = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="2520" endline="2533" pcid="4196">
    @event_type.setter
    def event_type(self, value):
        if value is None:
            self._property_event_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = EventTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "event_type", enum.Enum)
        self._property_event_type = value

</source>
</class>

<class classid="21" nclones="4" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="3234" endline="3247" pcid="2499">
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="3033" endline="3046" pcid="4235">
    @key.setter
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="3459" endline="3472" pcid="2513">
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="2930" endline="2943" pcid="4228">
    @key.setter
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value

</source>
</class>

<class classid="22" nclones="2" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_tensorboard.py" startline="40" endline="58" pcid="5640">
def train(model, epoch, train_loader, args, optimizer, writer):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.data.item()))
            niter = epoch*len(train_loader)+batch_idx
            writer.add_scalar('Train/Loss', loss.data.item(), niter)


</source>
<source file="systems/clearml-1.3.2rc2/examples/frameworks/tensorboardx/pytorch_tensorboardX.py" startline="39" endline="57" pcid="5675">
def train(model, epoch, train_loader, args, optimizer, writer):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.data.item()))
            niter = epoch*len(train_loader)+batch_idx
            writer.add_scalar('Train/Loss', loss.data.item(), niter)


</source>
</class>

<class classid="23" nclones="2" nlines="20" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_tensorboard.py" startline="59" endline="81" pcid="5641">
def test(model, test_loader, args, optimizer, writer):
    model.eval()
    test_loss = 0
    correct = 0
    for niter, (data, target) in enumerate(test_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        output = model(data)
        test_loss += F.nll_loss(output, target, reduction='sum').data.item()  # sum up batch loss
        pred = output.data.max(1)[1]  # get the index of the max log-probability
        pred = pred.eq(target.data).cpu().sum()
        writer.add_scalar('Test/Loss', pred, niter)
        correct += pred
        if niter % 100 == 0:
            writer.add_image('test', data[0, :, :, :], niter)

    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
<source file="systems/clearml-1.3.2rc2/examples/frameworks/tensorboardx/pytorch_tensorboardX.py" startline="58" endline="80" pcid="5676">
def test(model, test_loader, args, optimizer, writer):
    model.eval()
    test_loss = 0
    correct = 0
    for niter, (data, target) in enumerate(test_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        output = model(data)
        test_loss += F.nll_loss(output, target, reduction='sum').data.item()  # sum up batch loss
        pred = output.data.max(1)[1]  # get the index of the max log-probability
        pred = pred.eq(target.data).cpu().sum()
        writer.add_scalar('Test/Loss', pred, niter)
        correct += pred
        if niter % 100 == 0:
            writer.add_image('test', data[0, :, :, :], niter)

    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
</class>

<class classid="24" nclones="2" nlines="15" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_mnist.py" startline="36" endline="52" pcid="5660">
def train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            Logger.current_logger().report_scalar(
                "train", "loss", iteration=(epoch * len(train_loader) + batch_idx), value=loss.item())
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))


</source>
<source file="systems/clearml-1.3.2rc2/examples/advanced/execute_remotely_example.py" startline="40" endline="56" pcid="5793">
def train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            Logger.current_logger().report_scalar(
                "train", "loss", iteration=(epoch * len(train_loader) + batch_idx), value=loss.item())
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))


</source>
</class>

<class classid="25" nclones="2" nlines="19" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_mnist.py" startline="53" endline="75" pcid="5661">
def test(args, model, device, test_loader, epoch):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    Logger.current_logger().report_scalar(
        "test", "loss", iteration=epoch, value=test_loss)
    Logger.current_logger().report_scalar(
        "test", "accuracy", iteration=epoch, value=(correct / len(test_loader.dataset)))
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
<source file="systems/clearml-1.3.2rc2/examples/advanced/execute_remotely_example.py" startline="57" endline="77" pcid="5794">
def test(args, model, device, test_loader, epoch):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()
    test_loss /= len(test_loader.dataset)
    Logger.current_logger().report_scalar(
        "test", "loss", iteration=epoch, value=test_loss)
    Logger.current_logger().report_scalar(
        "test", "accuracy", iteration=epoch, value=(correct / len(test_loader.dataset)))
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
</class>

<class classid="26" nclones="2" nlines="14" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/keras/legacy/keras_tensorboard.py" startline="26" endline="40" pcid="5669">
    def make_image(tensor):
        from PIL import Image
        import io
        tensor = np.stack((tensor, tensor, tensor), axis=2)
        height, width, channels = tensor.shape
        image = Image.fromarray(tensor)
        output = io.BytesIO()
        image.save(output, format='PNG')
        image_string = output.getvalue()
        output.close()
        return tf.Summary.Image(height=height,
                                width=width,
                                colorspace=channels,
                                encoded_image_string=image_string)

</source>
<source file="systems/clearml-1.3.2rc2/examples/frameworks/keras/keras_tensorboard.py" startline="27" endline="41" pcid="5671">
    def make_image(tensor):
        from PIL import Image
        import io
        tensor = np.stack((tensor, tensor, tensor), axis=2)
        height, width, channels = tensor.shape
        image = Image.fromarray(tensor)
        output = io.BytesIO()
        image.save(output, format='PNG')
        image_string = output.getvalue()
        output.close()
        return tf.Summary.Image(height=height,
                                width=width,
                                colorspace=channels,
                                encoded_image_string=image_string)

</source>
</class>

</clones>
