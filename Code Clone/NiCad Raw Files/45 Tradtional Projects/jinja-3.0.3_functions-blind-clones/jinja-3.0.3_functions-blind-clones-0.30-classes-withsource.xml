<clones>
<systeminfo processor="nicad6" system="jinja-3.0.3" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="580" npairs="37"/>
<runinfo ncompares="2506" cputime="107312"/>
<classinfo nclasses="7"/>

<class classid="1" nclones="6" nlines="15" similarity="73">
<source file="systems/jinja-3.0.3/tests/test_lexnparse.py" startline="647" endline="662" pcid="102">
    def test_lstrip_angle_bracket_simple(self, env):
        env = Environment(
            "<%",
            "%>",
            "${",
            "}",
            "<%#",
            "%>",
            "%",
            "##",
            lstrip_blocks=True,
            trim_blocks=True,
        )
        tmpl = env.from_string("""    <% if True %>hello    <% endif %>""")
        assert tmpl.render() == "hello    "

</source>
<source file="systems/jinja-3.0.3/tests/test_lexnparse.py" startline="663" endline="678" pcid="103">
    def test_lstrip_angle_bracket_comment(self, env):
        env = Environment(
            "<%",
            "%>",
            "${",
            "}",
            "<%#",
            "%>",
            "%",
            "##",
            lstrip_blocks=True,
            trim_blocks=True,
        )
        tmpl = env.from_string("""    <%# if True %>hello    <%# endif %>""")
        assert tmpl.render() == "hello    "

</source>
<source file="systems/jinja-3.0.3/tests/test_lexnparse.py" startline="679" endline="700" pcid="104">
    def test_lstrip_angle_bracket(self, env):
        env = Environment(
            "<%",
            "%>",
            "${",
            "}",
            "<%#",
            "%>",
            "%",
            "##",
            lstrip_blocks=True,
            trim_blocks=True,
        )
        tmpl = env.from_string(
            """\
    <%# regular comment %>
    <% for item in seq %>
${item} ## the rest of the stuff
   <% endfor %>"""
        )
        assert tmpl.render(seq=range(5)) == "".join(f"{x}\n" for x in range(5))

</source>
<source file="systems/jinja-3.0.3/tests/test_lexnparse.py" startline="701" endline="722" pcid="105">
    def test_lstrip_angle_bracket_compact(self, env):
        env = Environment(
            "<%",
            "%>",
            "${",
            "}",
            "<%#",
            "%>",
            "%",
            "##",
            lstrip_blocks=True,
            trim_blocks=True,
        )
        tmpl = env.from_string(
            """\
    <%#regular comment%>
    <%for item in seq%>
${item} ## the rest of the stuff
   <%endfor%>"""
        )
        assert tmpl.render(seq=range(5)) == "".join(f"{x}\n" for x in range(5))

</source>
<source file="systems/jinja-3.0.3/tests/test_lexnparse.py" startline="1016" endline="1030" pcid="137">
    def test_no_trim_php_syntax(self, env):
        env = Environment(
            "<?",
            "?>",
            "<?=",
            "?>",
            "<!--",
            "-->",
            lstrip_blocks=False,
            trim_blocks=True,
        )
        tmpl = env.from_string("    <? if True +?>\n\n    <? endif ?>")
        assert tmpl.render() == "    \n\n    "
        tmpl = env.from_string("    <!-- comment +-->\n\n    ")
        assert tmpl.render() == "    \n\n    "
</source>
<source file="systems/jinja-3.0.3/tests/test_lexnparse.py" startline="894" endline="914" pcid="122">
    def test_comment_syntax(self, env):
        env = Environment(
            "<!--",
            "-->",
            "${",
            "}",
            "<!--#",
            "-->",
            lstrip_blocks=True,
            trim_blocks=True,
        )
        tmpl = env.from_string(
            """\
<!--# I'm a comment, I'm not interesting -->\
<!-- for item in seq --->
    ${item}
<!--- endfor -->"""
        )
        assert tmpl.render(seq=range(5)) == "01234"


</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="90">
<source file="systems/jinja-3.0.3/tests/test_filters.py" startline="418" endline="430" pcid="256">
    def test_sum_attributes_nested(self, env):
        tmpl = env.from_string("""{{ values|sum('real.value') }}""")
        assert (
            tmpl.render(
                values=[
                    {"real": {"value": 23}},
                    {"real": {"value": 1}},
                    {"real": {"value": 18}},
                ]
            )
            == "42"
        )

</source>
<source file="systems/jinja-3.0.3/tests/test_async_filters.py" startline="197" endline="210" pcid="574">
def test_sum_attributes_nested(env_async):
    tmpl = env_async.from_string("""{{ values|sum('real.value') }}""")
    assert (
        tmpl.render(
            values=[
                {"real": {"value": 23}},
                {"real": {"value": 1}},
                {"real": {"value": 18}},
            ]
        )
        == "42"
    )


</source>
</class>

<class classid="3" nclones="4" nlines="11" similarity="72">
<source file="systems/jinja-3.0.3/tests/test_filters.py" startline="726" endline="738" pcid="293">
    def test_simple_select_attr(self, env):
        User = namedtuple("User", "name,is_active")
        env = Environment()
        users = [
            User("john", True),
            User("jane", True),
            User("mike", False),
        ]
        tmpl = env.from_string(
            '{{ users|selectattr("is_active")|map(attribute="name")|join("|") }}'
        )
        assert tmpl.render(users=users) == "john|jane"

</source>
<source file="systems/jinja-3.0.3/tests/test_filters.py" startline="752" endline="764" pcid="295">
    def test_func_select_attr(self, env):
        User = namedtuple("User", "id,name")
        env = Environment()
        users = [
            User(1, "john"),
            User(2, "jane"),
            User(3, "mike"),
        ]
        tmpl = env.from_string(
            '{{ users|selectattr("id", "odd")|map(attribute="name")|join("|") }}'
        )
        assert tmpl.render(users=users) == "john|mike"

</source>
<source file="systems/jinja-3.0.3/tests/test_filters.py" startline="739" endline="751" pcid="294">
    def test_simple_reject_attr(self, env):
        User = namedtuple("User", "name,is_active")
        env = Environment()
        users = [
            User("john", True),
            User("jane", True),
            User("mike", False),
        ]
        tmpl = env.from_string(
            '{{ users|rejectattr("is_active")|map(attribute="name")|join("|") }}'
        )
        assert tmpl.render(users=users) == "mike"

</source>
<source file="systems/jinja-3.0.3/tests/test_filters.py" startline="765" endline="777" pcid="296">
    def test_func_reject_attr(self, env):
        User = namedtuple("User", "id,name")
        env = Environment()
        users = [
            User(1, "john"),
            User(2, "jane"),
            User(3, "mike"),
        ]
        tmpl = env.from_string(
            '{{ users|rejectattr("id", "odd")|map(attribute="name")|join("|") }}'
        )
        assert tmpl.render(users=users) == "jane"

</source>
</class>

<class classid="4" nclones="4" nlines="11" similarity="100">
<source file="systems/jinja-3.0.3/tests/test_core_tags.py" startline="111" endline="127" pcid="318">
    def test_recursive(self, env):
        tmpl = env.from_string(
            """{% for item in seq recursive -%}
            [{{ item.a }}{% if item.b %}<{{ loop(item.b) }}>{% endif %}]
        {%- endfor %}"""
        )
        assert (
            tmpl.render(
                seq=[
                    dict(a=1, b=[dict(a=1), dict(a=2)]),
                    dict(a=2, b=[dict(a=1), dict(a=2)]),
                    dict(a=3, b=[dict(a="a")]),
                ]
            )
            == "[1<[1][2]>][2<[1][2]>][3<[a]>]"
        )

</source>
<source file="systems/jinja-3.0.3/tests/test_core_tags.py" startline="164" endline="180" pcid="321">
    def test_recursive_depth(self, env):
        tmpl = env.from_string(
            """{% for item in seq recursive -%}
        [{{ loop.depth }}:{{ item.a }}{% if item.b %}<{{ loop(item.b) }}>{% endif %}]
        {%- endfor %}"""
        )
        assert (
            tmpl.render(
                seq=[
                    dict(a=1, b=[dict(a=1), dict(a=2)]),
                    dict(a=2, b=[dict(a=1), dict(a=2)]),
                    dict(a=3, b=[dict(a="a")]),
                ]
            )
            == "[1:1<[2:1][2:2]>][1:2<[2:1][2:2]>][1:3<[2:a]>]"
        )

</source>
<source file="systems/jinja-3.0.3/tests/test_core_tags.py" startline="147" endline="163" pcid="320">
    def test_recursive_depth0(self, env):
        tmpl = env.from_string(
            """{% for item in seq recursive -%}
        [{{ loop.depth0 }}:{{ item.a }}{% if item.b %}<{{ loop(item.b) }}>{% endif %}]
        {%- endfor %}"""
        )
        assert (
            tmpl.render(
                seq=[
                    dict(a=1, b=[dict(a=1), dict(a=2)]),
                    dict(a=2, b=[dict(a=1), dict(a=2)]),
                    dict(a=3, b=[dict(a="a")]),
                ]
            )
            == "[0:1<[1:1][1:2]>][0:2<[1:1][1:2]>][0:3<[1:a]>]"
        )

</source>
<source file="systems/jinja-3.0.3/tests/test_core_tags.py" startline="128" endline="146" pcid="319">
    def test_recursive_lookaround(self, env):
        tmpl = env.from_string(
            """{% for item in seq recursive -%}
            [{{ loop.previtem.a if loop.previtem is defined else 'x' }}.{{
            item.a }}.{{ loop.nextitem.a if loop.nextitem is defined else 'x'
            }}{% if item.b %}<{{ loop(item.b) }}>{% endif %}]
        {%- endfor %}"""
        )
        assert (
            tmpl.render(
                seq=[
                    dict(a=1, b=[dict(a=1), dict(a=2)]),
                    dict(a=2, b=[dict(a=1), dict(a=2)]),
                    dict(a=3, b=[dict(a="a")]),
                ]
            )
            == "[x.1.2<[x.1.2][1.2.x]>][1.2.3<[x.1.2][1.2.x]>][2.3.x<[x.a.x]>]"
        )

</source>
</class>

<class classid="5" nclones="6" nlines="10" similarity="71">
<source file="systems/jinja-3.0.3/tests/test_inheritance.py" startline="109" endline="125" pcid="397">
    def test_super(self, env):
        env = Environment(
            loader=DictLoader(
                {
                    "a": "{% block intro %}INTRO{% endblock %}|"
                    "BEFORE|{% block data %}INNER{% endblock %}|AFTER",
                    "b": '{% extends "a" %}{% block data %}({{ '
                    "super() }}){% endblock %}",
                    "c": '{% extends "b" %}{% block intro %}--{{ '
                    "super() }}--{% endblock %}\n{% block data "
                    "%}[{{ super() }}]{% endblock %}",
                }
            )
        )
        tmpl = env.get_template("c")
        assert tmpl.render() == "--INTRO--|BEFORE|[(INNER)]|AFTER"

</source>
<source file="systems/jinja-3.0.3/tests/test_regression.py" startline="419" endline="431" pcid="478">
    def test_scopes_and_include(self):
        env = Environment(
            loader=DictLoader(
                {
                    "include.html": "{{ var }}",
                    "base.html": '{% include "include.html" %}',
                    "child.html": '{% extends "base.html" %}{% set var = 42 %}',
                }
            )
        )
        t = env.get_template("child.html")
        assert t.render() == "42"

</source>
<source file="systems/jinja-3.0.3/tests/test_inheritance.py" startline="335" endline="354" pcid="411">
    def test_duplicate_required_or_scoped(self, env):
        env = Environment(
            loader=DictLoader(
                {
                    "default1": "{% for item in seq %}[{% block item "
                    "scoped scoped %}}{{% endblock %}}]{{% endfor %}}",
                    "default2": "{% for item in seq %}[{% block item "
                    "required required %}}{{% endblock %}}]{{% endfor %}}",
                    "child": "{% if default %}{% extends default %}{% else %}"
                    "{% extends 'default1' %}{% endif %}{%- block x %}"
                    "CHILD{% endblock %}",
                }
            )
        )
        tmpl = env.get_template("child")
        with pytest.raises(TemplateSyntaxError):
            tmpl.render(default="default1", seq=list(range(3)))
            tmpl.render(default="default2", seq=list(range(3)))


</source>
<source file="systems/jinja-3.0.3/tests/test_inheritance.py" startline="210" endline="236" pcid="405">
    def test_scoped_block_after_inheritance(self, env):
        env = Environment(
            loader=DictLoader(
                {
                    "layout.html": """
            {% block useless %}{% endblock %}
            """,
                    "index.html": """
            {%- extends 'layout.html' %}
            {% from 'helpers.html' import foo with context %}
            {% block useless %}
                {% for x in [1, 2, 3] %}
                    {% block testing scoped %}
                        {{ foo(x) }}
                    {% endblock %}
                {% endfor %}
            {% endblock %}
            """,
                    "helpers.html": """
            {% macro foo(x) %}{{ the_foo + x }}{% endmacro %}
            """,
                }
            )
        )
        rv = env.get_template("index.html").render(the_foo=42).split()
        assert rv == ["43", "44", "45"]

</source>
<source file="systems/jinja-3.0.3/tests/test_inheritance.py" startline="148" endline="161" pcid="401">
    def test_dynamic_inheritance(self, env):
        env = Environment(
            loader=DictLoader(
                {
                    "default1": "DEFAULT1{% block x %}{% endblock %}",
                    "default2": "DEFAULT2{% block x %}{% endblock %}",
                    "child": "{% extends default %}{% block x %}CHILD{% endblock %}",
                }
            )
        )
        tmpl = env.get_template("child")
        for m in range(1, 3):
            assert tmpl.render(default=f"default{m}") == f"DEFAULT{m}CHILD"

</source>
<source file="systems/jinja-3.0.3/tests/test_inheritance.py" startline="311" endline="334" pcid="410">
    def test_required_with_scope(self, env):
        env = Environment(
            loader=DictLoader(
                {
                    "default1": "{% for item in seq %}[{% block item scoped required %}"
                    "{% endblock %}]{% endfor %}",
                    "child1": "{% extends 'default1' %}{% block item %}"
                    "{{ item }}{% endblock %}",
                    "default2": "{% for item in seq %}[{% block item required scoped %}"
                    "{% endblock %}]{% endfor %}",
                    "child2": "{% extends 'default2' %}{% block item %}"
                    "{{ item }}{% endblock %}",
                }
            )
        )
        t1 = env.get_template("child1")
        t2 = env.get_template("child2")

        assert t1.render(seq=list(range(3))) == "[0][1][2]"

        # scoped must come before required
        with pytest.raises(TemplateSyntaxError):
            t2.render(seq=list(range(3)))

</source>
</class>

<class classid="6" nclones="2" nlines="10" similarity="80">
<source file="systems/jinja-3.0.3/tests/test_regression.py" startline="14" endline="46" pcid="451">
    def test_assigned_scoping(self, env):
        t = env.from_string(
            """
        {%- for item in (1, 2, 3, 4) -%}
            [{{ item }}]
        {%- endfor %}
        {{- item -}}
        """
        )
        assert t.render(item=42) == "[1][2][3][4]42"

        t = env.from_string(
            """
        {%- for item in (1, 2, 3, 4) -%}
            [{{ item }}]
        {%- endfor %}
        {%- set item = 42 %}
        {{- item -}}
        """
        )
        assert t.render() == "[1][2][3][4]42"

        t = env.from_string(
            """
        {%- set item = 42 %}
        {%- for item in (1, 2, 3, 4) -%}
            [{{ item }}]
        {%- endfor %}
        {{- item -}}
        """
        )
        assert t.render() == "[1][2][3][4]42"

</source>
<source file="systems/jinja-3.0.3/tests/test_regression.py" startline="47" endline="83" pcid="452">
    def test_closure_scoping(self, env):
        t = env.from_string(
            """
        {%- set wrapper = "<FOO>" %}
        {%- for item in (1, 2, 3, 4) %}
            {%- macro wrapper() %}[{{ item }}]{% endmacro %}
            {{- wrapper() }}
        {%- endfor %}
        {{- wrapper -}}
        """
        )
        assert t.render() == "[1][2][3][4]<FOO>"

        t = env.from_string(
            """
        {%- for item in (1, 2, 3, 4) %}
            {%- macro wrapper() %}[{{ item }}]{% endmacro %}
            {{- wrapper() }}
        {%- endfor %}
        {%- set wrapper = "<FOO>" %}
        {{- wrapper -}}
        """
        )
        assert t.render() == "[1][2][3][4]<FOO>"

        t = env.from_string(
            """
        {%- for item in (1, 2, 3, 4) %}
            {%- macro wrapper() %}[{{ item }}]{% endmacro %}
            {{- wrapper() }}
        {%- endfor %}
        {{- wrapper -}}
        """
        )
        assert t.render(wrapper=23) == "[1][2][3][4]23"


</source>
</class>

<class classid="7" nclones="2" nlines="12" similarity="91">
<source file="systems/jinja-3.0.3/tests/test_security.py" startline="99" endline="112" pcid="537">
    def test_binary_operator_intercepting(self, env):
        def disable_op(left, right):
            raise TemplateRuntimeError("that operator so does not work")

        for expr, ctx, rv in ("1 + 2", {}, "3"), ("a + 2", {"a": 2}, "4"):
            env = SandboxedEnvironment()
            env.binop_table["+"] = disable_op
            t = env.from_string(f"{{{{ {expr} }}}}")
            assert t.render(ctx) == rv
            env.intercepted_binops = frozenset(["+"])
            t = env.from_string(f"{{{{ {expr} }}}}")
            with pytest.raises(TemplateRuntimeError):
                t.render(ctx)

</source>
<source file="systems/jinja-3.0.3/tests/test_security.py" startline="113" endline="127" pcid="539">
    def test_unary_operator_intercepting(self, env):
        def disable_op(arg):
            raise TemplateRuntimeError("that operator so does not work")

        for expr, ctx, rv in ("-1", {}, "-1"), ("-a", {"a": 2}, "-2"):
            env = SandboxedEnvironment()
            env.unop_table["-"] = disable_op
            t = env.from_string(f"{{{{ {expr} }}}}")
            assert t.render(ctx) == rv
            env.intercepted_unops = frozenset(["-"])
            t = env.from_string(f"{{{{ {expr} }}}}")
            with pytest.raises(TemplateRuntimeError):
                t.render(ctx)


</source>
</class>

</clones>
