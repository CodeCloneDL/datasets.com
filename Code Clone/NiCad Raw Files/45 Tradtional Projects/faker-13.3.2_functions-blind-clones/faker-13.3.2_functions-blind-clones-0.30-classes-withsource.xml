<clones>
<systeminfo processor="nicad6" system="faker-13.3.2" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1158" npairs="115"/>
<runinfo ncompares="5635" cputime="41708"/>
<classinfo nclasses="15"/>

<class classid="1" nclones="5" nlines="10" similarity="75">
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="12" endline="22" pcid="75">
    def test_what_is_not_method(self):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="not_a_method",
            name="name",
            obj=MagicMock,
            options=MagicMock(),
            lines=MagicMock(),
        )
        assert docstring.skipped

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="60" endline="72" pcid="79">
    def test_name_is_dotted_path_to_localized_provider_method(self):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="method",
            name="faker.providers.automotive.en_PH.Provider.protocol_license_plate",
            obj=MagicMock,
            options=MagicMock(),
            lines=MagicMock(),
        )
        assert not docstring.skipped
        assert docstring._method == "protocol_license_plate"
        assert docstring._locale == "en_PH"

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="47" endline="59" pcid="78">
    def test_name_is_dotted_path_to_standard_provider_method(self):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="method",
            name="faker.providers.barcode.Provider.upc_a",
            obj=MagicMock,
            options=MagicMock(),
            lines=MagicMock(),
        )
        assert not docstring.skipped
        assert docstring._method == "upc_a"
        assert docstring._locale == DEFAULT_LOCALE

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="34" endline="46" pcid="77">
    def test_name_is_dotted_path_to_base_provider_method(self):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="method",
            name="faker.providers.BaseProvider.bothify",
            obj=MagicMock,
            options=MagicMock(),
            lines=MagicMock(),
        )
        assert not docstring.skipped
        assert docstring._method == "bothify"
        assert docstring._locale == DEFAULT_LOCALE

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="23" endline="33" pcid="76">
    def test_name_is_not_dotted_path_to_provider_method(self):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="method",
            name="faker.sphinx.docstring.ProviderMethodDocString._parse",
            obj=MagicMock,
            options=MagicMock(),
            lines=MagicMock(),
        )
        assert docstring.skipped

</source>
</class>

<class classid="2" nclones="3" nlines="12" similarity="75">
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="155" endline="167" pcid="83">
    def test_parsing_empty_lines(self, mock_log_warning):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="method",
            name="faker.providers.BaseProvider.bothify",
            obj=MagicMock,
            options=MagicMock(),
            lines=[],
        )
        assert not docstring.skipped
        assert len(docstring._samples) == 1
        assert docstring._samples[0] == Sample(DEFAULT_SAMPLE_SIZE, DEFAULT_SEED, "")

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="169" endline="181" pcid="84">
    def test_parsing_single_line_non_sample(self, mock_log_warning):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="method",
            name="faker.providers.BaseProvider.bothify",
            obj=MagicMock,
            options=MagicMock(),
            lines=["lorem"],
        )
        assert not docstring.skipped
        assert len(docstring._samples) == 1
        assert docstring._samples[0] == Sample(DEFAULT_SAMPLE_SIZE, DEFAULT_SEED, "")

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_docstring.py" startline="183" endline="194" pcid="85">
    def test_parsing_single_line_valid_sample(self, mock_log_warning):
        docstring = ProviderMethodDocstring(
            app=MagicMock(),
            what="method",
            name="faker.providers.BaseProvider.bothify",
            obj=MagicMock,
            options=MagicMock(),
            lines=[":sample: a=1"],
        )
        assert not docstring.skipped
        assert docstring._samples == [Sample(5, 0, "a=1")]

</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="76">
<source file="systems/faker-13.3.2/tests/sphinx/test_validator.py" startline="34" endline="52" pcid="91">
    def test_ordereddict_variable_access_exception(self):
        validator = SampleCodeValidator("[OrderedDict]")
        assert not validator.errors

        validator = SampleCodeValidator("[OrderedDict, variable1]")
        assert not validator.errors

        validator = SampleCodeValidator("[OrderedDict, OrderedDict, OrderedDict, OrderedDict]")
        assert not validator.errors

        validator = SampleCodeValidator("[OrderedDict, OrderedDict, OrderedDict, OrderedDict, variable1]")
        assert not validator.errors

        validator = SampleCodeValidator("[OrderedDict, variable1, variable2]")
        assert validator.errors

        validator = SampleCodeValidator("[OrderedDict2, variable1]")
        assert validator.errors

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_validator.py" startline="67" endline="82" pcid="94">
    def test_ordereddict_constructor_exception(self):
        validator = SampleCodeValidator("OrderedDict()")
        assert not validator.errors

        validator = SampleCodeValidator("variable.method1(OrderedDict())")
        assert not validator.errors

        validator = SampleCodeValidator("variable.method1(OrderedDict2())")
        assert validator.errors

        validator = SampleCodeValidator("variable.method1(OrderedDict(), OrderedDict(), OrderedDict())")
        assert not validator.errors

        validator = SampleCodeValidator("variable.method1().method2(OrderedDict())")
        assert validator.errors

</source>
</class>

<class classid="4" nclones="2" nlines="16" similarity="87">
<source file="systems/faker-13.3.2/tests/sphinx/test_validator.py" startline="83" endline="100" pcid="95">
    def test_allowed_literal_types(self):
        commands = [
            "variable.method(12345)",
            'variable.method("12345")',
            'variable.method(b"12345")',
            "variable.method([1, 2, 3, 4, 5])",
            "variable.method((1, 2, 3, 4, 5))",
            "variable.method({1, 2, 3, 4, 5})",
            'variable.method({"value": 12345})',
            "variable.method(True)",
            "variable.method(False)",
            "variable.method(None)",
        ]

        for command in commands:
            validator = SampleCodeValidator(command)
            assert not validator.errors

</source>
<source file="systems/faker-13.3.2/tests/sphinx/test_validator.py" startline="151" endline="166" pcid="98">
    def test_other_prohibited_expressions(self):
        commands = [
            "variable if True else 1",
            "variable[1]",
            "variable[1:3]",
            "variable[1:3, 2]",
            "[True for _ in [1, 2, 3]]",
            "(True for _ in [1, 2, 3])",
            "{True for _ in [1, 2, 3]}",
            "{str(_): _ for _ in [1, 2, 3]}",
            "lambda x: x",
        ]

        for command in commands:
            validator = SampleCodeValidator(command)
            assert validator.errors
</source>
</class>

<class classid="5" nclones="2" nlines="10" similarity="90">
<source file="systems/faker-13.3.2/tests/test_factory.py" startline="29" endline="40" pcid="101">
    def test_command(self):
        from faker.cli import Command

        orig_stdout = sys.stdout
        try:
            sys.stdout = io.StringIO()
            command = Command(["faker", "address"])
            command.execute()
            assert sys.stdout.getvalue()
        finally:
            sys.stdout = orig_stdout

</source>
<source file="systems/faker-13.3.2/tests/test_factory.py" startline="41" endline="52" pcid="102">
    def test_command_custom_provider(self):
        from faker.cli import Command

        orig_stdout = sys.stdout
        try:
            sys.stdout = io.StringIO()
            command = Command(["faker", "foo", "-i", "tests.mymodule.en_US"])
            command.execute()
            assert sys.stdout.getvalue()
        finally:
            sys.stdout = orig_stdout

</source>
</class>

<class classid="6" nclones="2" nlines="19" similarity="89">
<source file="systems/faker-13.3.2/tests/test_factory.py" startline="53" endline="73" pcid="103">
    def test_cli_seed(self):
        from faker.cli import Command

        orig_stdout = sys.stdout
        try:
            sys.stdout = io.StringIO()
            base_args = ["faker", "address"]
            target_args = ["--seed", "967"]
            commands = [
                Command(base_args + target_args),
                Command(base_args + target_args),
            ]
            cli_output = [None] * 2
            for i in range(2):
                commands[i].execute()
                cli_output[i] = sys.stdout.getvalue()
            cli_output[1] = cli_output[1][len(cli_output[0]) :]
            assert cli_output[0][:10] == cli_output[1][:10]
        finally:
            sys.stdout = orig_stdout

</source>
<source file="systems/faker-13.3.2/tests/test_factory.py" startline="74" endline="94" pcid="104">
    def test_cli_seed_with_repeat(self):
        from faker.cli import Command

        orig_stdout = sys.stdout
        try:
            sys.stdout = io.StringIO()
            base_args = ["faker", "address", "-r", "3"]
            target_args = ["--seed", "967"]
            commands = [
                Command(base_args + target_args),
                Command(base_args + target_args),
            ]
            cli_output = [None] * 2
            for i in range(2):
                commands[i].execute()
                cli_output[i] = sys.stdout.getvalue()
            cli_output[1] = cli_output[1][len(cli_output[0]) :]
            assert cli_output[0] == cli_output[1]
        finally:
            sys.stdout = orig_stdout

</source>
</class>

<class classid="7" nclones="15" nlines="16" similarity="72">
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="42" endline="62" pcid="391">
    def test_first_name(self):
        # General first name
        name = self.fake.first_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ArProvider.first_names

        # Females first name
        name = self.fake.first_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in ArProvider.first_names
        assert name in ArProvider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in ArProvider.first_names
        assert name in ArProvider.first_names_male

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="505" endline="531" pcid="426">
    def test_first_name(self):
        # General first name
        name = self.fake.first_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.first_names

        # Females first name
        name = self.fake.first_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.first_names
        assert name in ZhCNProvider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.first_names
        assert name in ZhCNProvider.first_names_male

        # General first romanized name
        name = self.fake.first_romanized_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.first_romanized_names

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="870" endline="893" pcid="459">
    def test_first_names(self):
        # General first name
        name = self.fake.first_name()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.first_names

        # Female first name
        name = self.fake.first_name_female()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.first_names
        assert name in EnUSProvider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.first_names
        assert name in EnUSProvider.first_names_male

        # Nonbinary first name
        name = self.fake.first_name_nonbinary()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.first_names
        assert name in EnUSProvider.first_names_nonbinary

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="63" endline="90" pcid="392">
    def test_last_name(self):
        # There's no gender-specific last name in Arabic.
        assert not hasattr(ArProvider, "last_names_male")
        assert not hasattr(ArProvider, "last_names_female")
        # All last names apply for all genders.
        assert hasattr(ArProvider, "last_names")

        # General last name.
        name = self.fake.last_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ArProvider.last_names

        # Females last name.
        name = self.fake.last_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in ArProvider.last_names
        assert name in ArProvider.last_names

        # Male last name.
        name = self.fake.last_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in ArProvider.last_names
        assert name in ArProvider.last_names


</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="98" endline="118" pcid="394">
    def test_first_name(self):
        # General first name
        name = self.fake.first_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.first_names

        # Females first name
        name = self.fake.first_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.first_names
        assert name in AzAzProvider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.first_names
        assert name in AzAzProvider.first_names_male

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="651" endline="668" pcid="434">
    def test_first_name(self):
        # General first name
        name = self.fake.first_name()
        self.assertIsInstance(name, str)
        assert name in HyAmProvider.first_names

        # Female first name
        name = self.fake.first_name_female()
        self.assertIsInstance(name, str)
        assert name in HyAmProvider.first_names
        assert name in HyAmProvider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        self.assertIsInstance(name, str)
        assert name in HyAmProvider.first_names
        assert name in HyAmProvider.first_names_male

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="894" endline="914" pcid="460">
    def test_last_names(self):
        # General last name
        name = self.fake.last_name()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.last_names

        # Female last name
        name = self.fake.last_name_female()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.last_names

        # Male last name
        name = self.fake.last_name_male()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.last_names

        # Nonbinary last name
        name = self.fake.last_name_nonbinary()
        self.assertIsInstance(name, str)
        assert name in EnUSProvider.last_names

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="587" endline="613" pcid="430">
    def test_first_name(self):
        # General first name
        name = self.fake.first_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.first_names

        # Females first name
        name = self.fake.first_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.first_names
        assert name in ZhTWProvider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.first_names
        assert name in ZhTWProvider.first_names_male

        # General first romanized name
        name = self.fake.first_romanized_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.first_romanized_names

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="773" endline="790" pcid="446">
    def test_first_names(self):
        # General first name
        name = self.fake.first_name()
        self.assertIsInstance(name, str)
        assert name in EsCOProvider.first_names

        # Female first name
        name = self.fake.first_name_female()
        self.assertIsInstance(name, str)
        assert name in EsCOProvider.first_names
        assert name in EsCOProvider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        self.assertIsInstance(name, str)
        assert name in EsCOProvider.first_names
        assert name in EsCOProvider.first_names_male

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="119" endline="150" pcid="395">
    def test_last_name(self):
        # General last name.
        name = self.fake.last_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.last_names

        # Females last name.
        name = self.fake.last_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.last_names_female + AzAzProvider.last_names_unisex

        # Females only last name.
        name = self.fake.last_name_unique_to_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.last_names_female

        # Male last name.
        name = self.fake.last_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.last_names_male + AzAzProvider.last_names_unisex

        # Male only last name.
        name = self.fake.last_name_unique_to_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in AzAzProvider.last_names_male


</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="472" endline="504" pcid="425">
    def test_last_name(self):
        # There's no gender-specific last name in Chinese.
        assert not hasattr(ZhCNProvider, "last_names_male")
        assert not hasattr(ZhCNProvider, "last_names_female")
        assert not hasattr(ZhCNProvider, "last_romanized_names_male")
        assert not hasattr(ZhCNProvider, "last_romanized_names_female")
        # All last names apply for all genders.
        assert hasattr(ZhCNProvider, "last_names")

        # General last name.
        name = self.fake.last_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.last_names

        # Females last name.
        name = self.fake.last_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.last_names

        # Male last name.
        name = self.fake.last_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.last_names

        # General last romanized name
        name = self.fake.last_romanized_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhCNProvider.last_romanized_names

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="554" endline="586" pcid="429">
    def test_last_name(self):
        # There's no gender-specific last name in Chinese.
        assert not hasattr(ZhTWProvider, "last_names_male")
        assert not hasattr(ZhTWProvider, "last_names_female")
        assert not hasattr(ZhTWProvider, "last_romanized_names_male")
        assert not hasattr(ZhTWProvider, "last_romanized_names_female")
        # All last names apply for all genders.
        assert hasattr(ZhTWProvider, "last_names")

        # General last name.
        name = self.fake.last_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.last_names

        # Females last name.
        name = self.fake.last_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.last_names

        # Male last name.
        name = self.fake.last_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.last_names

        # General last romanized name
        name = self.fake.last_romanized_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in ZhTWProvider.last_romanized_names

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="669" endline="691" pcid="435">
    def test_last_name(self):
        # There's no gender-specific last name in Armenian.
        assert not hasattr(HyAmProvider, "last_names_male")
        assert not hasattr(HyAmProvider, "last_names_female")
        # All last names apply for all genders.
        assert hasattr(HyAmProvider, "last_names")

        # General last name.
        name = self.fake.last_name()
        self.assertIsInstance(name, str)
        assert name in HyAmProvider.last_names

        # Females last name.
        name = self.fake.last_name_female()
        self.assertIsInstance(name, str)
        assert name in HyAmProvider.last_names

        # Male last name.
        name = self.fake.last_name_male()
        self.assertIsInstance(name, str)
        assert name in HyAmProvider.last_names


</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="254" endline="264" pcid="401">
    def test_gender_first_names(self):
        female_name = self.fake.first_name_female()
        self.assertIsInstance(female_name, str)
        assert female_name in FiProvider.first_names_female
        male_name = self.fake.first_name_male()
        self.assertIsInstance(male_name, str)
        assert male_name in FiProvider.first_names_male
        first_name = self.fake.first_name()
        self.assertIsInstance(first_name, str)
        assert first_name in FiProvider.first_names

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="791" endline="806" pcid="447">
    def test_last_names(self):
        # General last name
        name = self.fake.last_name()
        self.assertIsInstance(name, str)
        assert name in EsCOProvider.last_names

        # Female last name
        name = self.fake.last_name_female()
        self.assertIsInstance(name, str)
        assert name in EsCOProvider.last_names

        # Male last name
        name = self.fake.last_name_male()
        self.assertIsInstance(name, str)
        assert name in EsCOProvider.last_names

</source>
</class>

<class classid="8" nclones="2" nlines="19" similarity="100">
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="392" endline="411" pcid="418">
    def test_name_male(self):
        male_name = self.fake.name_male()
        name_parts = male_name.split(" ")
        first_name, last_name = "", ""
        if len(name_parts) == 2:
            first_name = name_parts[0]
            last_name = name_parts[1]
        elif len(name_parts) == 4:
            first_name = name_parts[1]
            last_name = name_parts[2]
        elif len(name_parts) == 3:
            if name_parts[-1] in CsCZProvider.suffixes:
                first_name = name_parts[0]
                last_name = name_parts[1]
            else:
                first_name = name_parts[1]
                last_name = name_parts[2]
        assert first_name in CsCZProvider.first_names_male
        assert last_name in CsCZProvider.last_names_male

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="412" endline="432" pcid="419">
    def test_name_female(self):
        female_name = self.fake.name_female()
        name_parts = female_name.split(" ")
        first_name, last_name = "", ""
        if len(name_parts) == 2:
            first_name = name_parts[0]
            last_name = name_parts[1]
        elif len(name_parts) == 4:
            first_name = name_parts[1]
            last_name = name_parts[2]
        elif len(name_parts) == 3:
            if name_parts[-1] in CsCZProvider.suffixes:
                first_name = name_parts[0]
                last_name = name_parts[1]
            else:
                first_name = name_parts[1]
                last_name = name_parts[2]
        assert first_name in CsCZProvider.first_names_female
        assert last_name in CsCZProvider.last_names_female


</source>
</class>

<class classid="9" nclones="2" nlines="12" similarity="100">
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="532" endline="548" pcid="427">
    def test_name(self):
        # Full name
        name = self.fake.name()
        assert name
        self.assertIsInstance(name, str)
        assert name[0] in ZhCNProvider.last_names or name[:2] in ZhCNProvider.last_names
        assert name[1:] in ZhCNProvider.first_names or name[2:] in ZhCNProvider.first_names

        # Full romanized name
        name = self.fake.romanized_name()
        assert name
        self.assertIsInstance(name, str)
        first_romanized_name, last_romanized_name = name.split(" ")
        assert first_romanized_name in ZhCNProvider.first_romanized_names
        assert last_romanized_name in ZhCNProvider.last_romanized_names


</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="614" endline="630" pcid="431">
    def test_name(self):
        # Full name
        name = self.fake.name()
        assert name
        self.assertIsInstance(name, str)
        assert name[0] in ZhTWProvider.last_names or name[:2] in ZhTWProvider.last_names
        assert name[1:] in ZhTWProvider.first_names or name[2:] in ZhTWProvider.first_names

        # Full romanized name
        name = self.fake.romanized_name()
        assert name
        self.assertIsInstance(name, str)
        first_romanized_name, last_romanized_name = name.split(" ")
        assert first_romanized_name in ZhTWProvider.first_romanized_names
        assert last_romanized_name in ZhTWProvider.last_romanized_names


</source>
</class>

<class classid="10" nclones="2" nlines="16" similarity="82">
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="996" endline="1016" pcid="473">
    def test_first_name(self):
        # General first name
        name = self.fake.first_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in self.provider.first_names

        # Females first name
        name = self.fake.first_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in self.provider.first_names
        assert name in self.provider.first_names_female

        # Male first name
        name = self.fake.first_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in self.provider.first_names
        assert name in self.provider.first_names_male

</source>
<source file="systems/faker-13.3.2/tests/providers/test_person.py" startline="1017" endline="1042" pcid="474">
    def test_last_name(self):
        assert not hasattr(self.provider, "last_names_male")
        assert not hasattr(self.provider, "last_names_female")
        # All last names apply for all genders.
        assert hasattr(self.provider, "last_names")

        # General last name.
        name = self.fake.last_name()
        assert name
        self.assertIsInstance(name, str)
        assert name in self.provider.last_names

        # Females last name.
        name = self.fake.last_name_female()
        assert name
        self.assertIsInstance(name, str)
        assert name in self.provider.last_names
        assert name in self.provider.last_names

        # Male last name.
        name = self.fake.last_name_male()
        assert name
        self.assertIsInstance(name, str)
        assert name in self.provider.last_names


</source>
</class>

<class classid="11" nclones="2" nlines="17" similarity="77">
<source file="systems/faker-13.3.2/faker/sphinx/documentor.py" startline="116" endline="133" pcid="652">
def _write_standard_provider_docs():
    (DOCS_ROOT / "providers").mkdir(parents=True, exist_ok=True)
    for provider_name in STANDARD_PROVIDER_NAMES:
        with (DOCS_ROOT / "providers" / f"{provider_name}.rst").open("wb") as fh:
            provider_class = f"{provider_name}.Provider"
            provider_methods = _get_provider_methods(provider_class)
            _hide_edit_on_github(fh)
            _write_title(fh, f"``{provider_name}``")
            _write_includes(fh)
            _write(
                fh,
                PROVIDER_AUTODOC_TEMPLATE.format(
                    provider_class=provider_class,
                    provider_methods=provider_methods,
                ),
            )


</source>
<source file="systems/faker-13.3.2/faker/sphinx/documentor.py" startline="144" endline="163" pcid="654">
def _write_localized_provider_docs():
    (DOCS_ROOT / "locales").mkdir(parents=True, exist_ok=True)
    for locale in AVAILABLE_LOCALES:
        info = _get_localized_provider_info(locale)
        with (DOCS_ROOT / "locales" / "{}.rst".format(locale)).open("wb") as fh:
            _hide_edit_on_github(fh)
            _write_title(fh, f"Locale {locale}")
            _write_includes(fh)
            for provider_class, standard_provider_name in info:
                provider_methods = _get_provider_methods(provider_class)
                _write_title(fh, f"``{standard_provider_name}``", level=2)
                _write(
                    fh,
                    PROVIDER_AUTODOC_TEMPLATE.format(
                        provider_class=provider_class,
                        provider_methods=provider_methods,
                    ),
                )


</source>
</class>

<class classid="12" nclones="7" nlines="12" similarity="100">
<source file="systems/faker-13.3.2/faker/providers/date_time/sl_SI/__init__.py" startline="5" endline="17" pcid="850">
    def day_of_week(self) -> str:
        day = self.date("%w")
        DAY_NAMES = {
            "0": "Nedelja",
            "1": "Ponedeljek",
            "2": "Torek",
            "3": "Sreda",
            "4": "Četrtek",
            "5": "Petek",
            "6": "Sobota",
        }
        return DAY_NAMES[day]

</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/ko_KR/__init__.py" startline="5" endline="17" pcid="874">
    def day_of_week(self) -> str:
        day = self.date("%w")
        DAY_NAMES = {
            "0": "일요일",
            "1": "월요일",
            "2": "화요일",
            "3": "수요일",
            "4": "목요일",
            "5": "금요일",
            "6": "토요일",
        }
        return DAY_NAMES[day]

</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/hu_HU/__init__.py" startline="5" endline="18" pcid="885">
    def day_of_week(self) -> str:
        day = self.date("%w")
        DAY_NAMES = {
            "0": "hétfő",
            "1": "kedd",
            "2": "szerda",
            "3": "csütörtök",
            "4": "péntek",
            "5": "szombat",
            "6": "vasárnap",
        }

        return DAY_NAMES[day]

</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/fr_FR/__init__.py" startline="5" endline="17" pcid="887">
    def day_of_week(self) -> str:
        day = self.date("%w")
        DAY_NAMES = {
            "0": "Dimanche",
            "1": "Lundi",
            "2": "Mardi",
            "3": "Mercredi",
            "4": "Jeudi",
            "5": "Vendredi",
            "6": "Samedi",
        }
        return DAY_NAMES[day]

</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/id_ID/__init__.py" startline="5" endline="18" pcid="878">
    def day_of_week(self) -> str:
        day = self.date("%w")
        DAY_NAMES = {
            "0": "Senin",
            "1": "Selasa",
            "2": "Rabu",
            "3": "Kamis",
            "4": "Jumat",
            "5": "Sabtu",
            "6": "Minggu",
        }

        return DAY_NAMES[day]

</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/hr_HR/__init__.py" startline="5" endline="17" pcid="870">
    def day_of_week(self) -> str:
        day = self.date("%w")
        DAY_NAMES = {
            "0": "Nedjelja",
            "1": "Ponedjeljak",
            "2": "Utorak",
            "3": "Srijeda",
            "4": "Četvrtak",
            "5": "Petak",
            "6": "Subota",
        }
        return DAY_NAMES[day]

</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/hi_IN/__init__.py" startline="5" endline="18" pcid="901">
    def day_of_week(self) -> str:
        day = self.date("%w")
        DAY_NAMES = {
            "0": "सोमवार",
            "1": "मंगलवार",
            "2": "बुधवार",
            "3": "गुरुवार",
            "4": "जुम्मा",
            "5": "शनिवार",
            "6": "रविवार",
        }

        return DAY_NAMES[day]

</source>
</class>

<class classid="13" nclones="7" nlines="17" similarity="100">
<source file="systems/faker-13.3.2/faker/providers/date_time/sl_SI/__init__.py" startline="18" endline="34" pcid="851">
    def month_name(self) -> str:
        month = self.month()
        MONTH_NAMES = {
            "01": "Januar",
            "02": "Februar",
            "03": "Marec",
            "04": "April",
            "05": "Maj",
            "06": "Junij",
            "07": "Julij",
            "08": "Avgust",
            "09": "September",
            "10": "Oktober",
            "11": "November",
            "12": "December",
        }
        return MONTH_NAMES[month]
</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/ko_KR/__init__.py" startline="18" endline="34" pcid="875">
    def month_name(self) -> str:
        month = self.month()
        MONTH_NAMES = {
            "01": "1월",
            "02": "2월",
            "03": "3월",
            "04": "4월",
            "05": "5월",
            "06": "6월",
            "07": "7월",
            "08": "8월",
            "09": "9월",
            "10": "10월",
            "11": "11월",
            "12": "12월",
        }
        return MONTH_NAMES[month]
</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/hi_IN/__init__.py" startline="19" endline="36" pcid="902">
    def month_name(self) -> str:
        month = self.month()
        MONTH_NAMES = {
            "01": "जनवरी",
            "02": "फ़रवरी",
            "03": "मार्च",
            "04": "अप्रैल",
            "05": "मई",
            "06": "जून",
            "07": "जुलाई",
            "08": "अगस्त",
            "09": "सितंबर",
            "10": "अक्टूबर",
            "11": "नवंबर",
            "12": "दिसंबर",
        }

        return MONTH_NAMES[month]
</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/hr_HR/__init__.py" startline="18" endline="34" pcid="871">
    def month_name(self) -> str:
        month = self.month()
        MONTH_NAMES = {
            "01": "Siječanj",
            "02": "Veljača",
            "03": "Ožujak",
            "04": "Travanj",
            "05": "Svibanj",
            "06": "Lipanj",
            "07": "Srpanj",
            "08": "Kolovoz",
            "09": "Rujan",
            "10": "Listopad",
            "11": "Studeni",
            "12": "Prosinac",
        }
        return MONTH_NAMES[month]
</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/hu_HU/__init__.py" startline="19" endline="36" pcid="886">
    def month_name(self) -> str:
        month = self.month()
        MONTH_NAMES = {
            "01": "január",
            "02": "február",
            "03": "március",
            "04": "április",
            "05": "május",
            "06": "junius",
            "07": "julius",
            "08": "augusztus",
            "09": "szeptember",
            "10": "október",
            "11": "november",
            "12": "december",
        }

        return MONTH_NAMES[month]
</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/id_ID/__init__.py" startline="19" endline="36" pcid="879">
    def month_name(self) -> str:
        month = self.month()
        MONTH_NAMES = {
            "01": "Januari",
            "02": "Februari",
            "03": "Maret",
            "04": "April",
            "05": "Mei",
            "06": "Juni",
            "07": "Juli",
            "08": "Agustus",
            "09": "September",
            "10": "Oktober",
            "11": "November",
            "12": "Desember",
        }

        return MONTH_NAMES[month]
</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/fr_FR/__init__.py" startline="18" endline="34" pcid="888">
    def month_name(self) -> str:
        month = self.month()
        MONTH_NAMES = {
            "01": "Janvier",
            "02": "Février",
            "03": "Mars",
            "04": "Avril",
            "05": "Mai",
            "06": "Juin",
            "07": "Juillet",
            "08": "Août",
            "09": "Septembre",
            "10": "Octobre",
            "11": "Novembre",
            "12": "Décembre",
        }
        return MONTH_NAMES[month]
</source>
</class>

<class classid="14" nclones="2" nlines="12" similarity="84">
<source file="systems/faker-13.3.2/faker/providers/date_time/th_TH/__init__.py" startline="284" endline="307" pcid="861">
    def date(
        self,
        pattern: str = "%-d %b %Y",
        end_datetime: Optional[DateParseType] = None,
        thai_digit: bool = False,
        buddhist_era: bool = True,
    ) -> str:
        """
        Get a date string between January 1, 1970 and now
        :param pattern: format
        :param end_datetime: datetime
        :param thai_digit: use Thai digit or not (default: False)
        :param buddhist_era: use Buddist era or not (default: True)
        :example: '08 พ.ย. 2563'
        :example: '๐๘ พ.ย. 2563' (thai_digit = True)
        :example: '8 พฤศิจกายน 2020' (pattern: str = "%-d %B %Y", buddhist_era = False)
        """
        return thai_strftime(
            self.date_time(end_datetime=end_datetime),
            pattern,
            thai_digit,
            buddhist_era,
        )

</source>
<source file="systems/faker-13.3.2/faker/providers/date_time/th_TH/__init__.py" startline="308" endline="327" pcid="862">
    def time(
        self,
        pattern: str = "%H:%M:%S",
        end_datetime: Optional[DateParseType] = None,
        thai_digit: bool = False,
    ) -> str:
        """
        Get a time string (24h format by default)
        :param pattern: format
        :param end_datetime: datetime
        :param thai_digit: use Thai digit or not (default: False)
        :example: '15:02:34'
        :example: '๑๕:๐๒:๓๔' (thai_digit = True)
        """
        return thai_strftime(
            self.date_time(end_datetime=end_datetime),
            pattern,
            thai_digit,
        )

</source>
</class>

<class classid="15" nclones="2" nlines="14" similarity="100">
<source file="systems/faker-13.3.2/faker/providers/address/en_US/__init__.py" startline="505" endline="529" pcid="926">
    def postcode_in_state(self, state_abbr: Optional[str] = None) -> str:
        """
        :returns: A random postcode within the provided state abbreviation

        :param state_abbr: A state abbreviation
        """
        if state_abbr is None:
            state_abbr = self.random_element(self.states_abbr)

        if state_abbr in self.states_abbr:
            postcode = "%d" % (
                self.generator.random.randint(
                    self.states_postcode[state_abbr][0],
                    self.states_postcode[state_abbr][1],
                )
            )

            if len(postcode) == 4:
                postcode = "0%s" % postcode

            return postcode

        else:
            raise Exception("State Abbreviation not found in list")

</source>
<source file="systems/faker-13.3.2/faker/providers/address/hy_AM/__init__.py" startline="622" endline="644" pcid="956">
    def postcode_in_state(self, state_abbr: Optional[str] = None) -> str:
        """
        :example: '4703'
        """
        if state_abbr is None:
            state_abbr = self.random_element(self.states_abbr)

        if state_abbr in self.states_abbr:
            postcode = "%d" % (
                self.generator.random.randint(
                    self.states_postcode[state_abbr][0],
                    self.states_postcode[state_abbr][1],
                )
            )

            if len(postcode) == 3:
                postcode = "0%s" % postcode

            return postcode

        else:
            raise Exception("State Abbreviation not found in list")

</source>
</class>

</clones>
