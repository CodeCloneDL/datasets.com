<clones>
<systeminfo processor="nicad6" system="beets-1.6.0" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="2132" npairs="24"/>
<runinfo ncompares="10358" cputime="49081"/>
<classinfo nclasses="9"/>

<class classid="1" nclones="4" nlines="10" similarity="100">
<source file="systems/beets-1.6.0/test/test_sort.py" startline="107" endline="118" pcid="790">
    def test_sort_asc(self):
        q = ''
        sort = dbcore.query.FixedFieldSort("year", True)
        results = self.lib.items(q, sort)
        self.assertLessEqual(results[0]['year'], results[1]['year'])
        self.assertEqual(results[0]['year'], 2001)
        # same thing with query string
        q = 'year+'
        results2 = self.lib.items(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="208" endline="219" pcid="797">
    def test_sort_asc(self):
        q = ''
        sort = dbcore.query.FixedFieldSort("year", True)
        results = self.lib.albums(q, sort)
        self.assertLessEqual(results[0]['year'], results[1]['year'])
        self.assertEqual(results[0]['year'], 2001)
        # same thing with query string
        q = 'year+'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="119" endline="130" pcid="791">
    def test_sort_desc(self):
        q = ''
        sort = dbcore.query.FixedFieldSort("year", False)
        results = self.lib.items(q, sort)
        self.assertGreaterEqual(results[0]['year'], results[1]['year'])
        self.assertEqual(results[0]['year'], 2004)
        # same thing with query string
        q = 'year-'
        results2 = self.lib.items(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="220" endline="231" pcid="798">
    def test_sort_desc(self):
        q = ''
        sort = dbcore.query.FixedFieldSort("year", False)
        results = self.lib.albums(q, sort)
        self.assertGreaterEqual(results[0]['year'], results[1]['year'])
        self.assertEqual(results[0]['year'], 2005)
        # same thing with query string
        q = 'year-'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
</class>

<class classid="2" nclones="4" nlines="17" similarity="100">
<source file="systems/beets-1.6.0/test/test_sort.py" startline="131" endline="149" pcid="792">
    def test_sort_two_field_asc(self):
        q = ''
        s1 = dbcore.query.FixedFieldSort("album", True)
        s2 = dbcore.query.FixedFieldSort("year", True)
        sort = dbcore.query.MultipleSort()
        sort.add_sort(s1)
        sort.add_sort(s2)
        results = self.lib.items(q, sort)
        self.assertLessEqual(results[0]['album'], results[1]['album'])
        self.assertLessEqual(results[1]['album'], results[2]['album'])
        self.assertEqual(results[0]['album'], 'Baz')
        self.assertEqual(results[1]['album'], 'Baz')
        self.assertLessEqual(results[0]['year'], results[1]['year'])
        # same thing with query string
        q = 'album+ year+'
        results2 = self.lib.items(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="277" endline="296" pcid="802">
    def test_sort_two_field_asc(self):
        q = ''
        s1 = dbcore.query.SlowFieldSort("flex2", True)
        s2 = dbcore.query.SlowFieldSort("flex1", True)
        sort = dbcore.query.MultipleSort()
        sort.add_sort(s1)
        sort.add_sort(s2)
        results = self.lib.albums(q, sort)
        self.assertLessEqual(results[0]['flex2'], results[1]['flex2'])
        self.assertLessEqual(results[1]['flex2'], results[2]['flex2'])
        self.assertEqual(results[0]['flex2'], 'Flex2-A')
        self.assertEqual(results[1]['flex2'], 'Flex2-A')
        self.assertLessEqual(results[0]['flex1'], results[1]['flex1'])
        # same thing with query string
        q = 'flex2+ flex1+'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)


</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="232" endline="251" pcid="799">
    def test_sort_two_field_asc(self):
        q = ''
        s1 = dbcore.query.FixedFieldSort("genre", True)
        s2 = dbcore.query.FixedFieldSort("album", True)
        sort = dbcore.query.MultipleSort()
        sort.add_sort(s1)
        sort.add_sort(s2)
        results = self.lib.albums(q, sort)
        self.assertLessEqual(results[0]['genre'], results[1]['genre'])
        self.assertLessEqual(results[1]['genre'], results[2]['genre'])
        self.assertEqual(results[1]['genre'], 'Rock')
        self.assertEqual(results[2]['genre'], 'Rock')
        self.assertLessEqual(results[1]['album'], results[2]['album'])
        # same thing with query string
        q = 'genre+ album+'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)


</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="187" endline="206" pcid="796">
    def test_sort_two_field(self):
        q = ''
        s1 = dbcore.query.SlowFieldSort("flex2", False)
        s2 = dbcore.query.SlowFieldSort("flex1", True)
        sort = dbcore.query.MultipleSort()
        sort.add_sort(s1)
        sort.add_sort(s2)
        results = self.lib.items(q, sort)
        self.assertGreaterEqual(results[0]['flex2'], results[1]['flex2'])
        self.assertGreaterEqual(results[1]['flex2'], results[2]['flex2'])
        self.assertEqual(results[0]['flex2'], 'Flex2-A')
        self.assertEqual(results[1]['flex2'], 'Flex2-A')
        self.assertLessEqual(results[0]['flex1'], results[1]['flex1'])
        # same thing with query string
        q = 'flex2- flex1+'
        results2 = self.lib.items(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)


</source>
</class>

<class classid="3" nclones="4" nlines="10" similarity="100">
<source file="systems/beets-1.6.0/test/test_sort.py" startline="253" endline="264" pcid="800">
    def test_sort_asc(self):
        q = ''
        sort = dbcore.query.SlowFieldSort("flex1", True)
        results = self.lib.albums(q, sort)
        self.assertLessEqual(results[0]['flex1'], results[1]['flex1'])
        self.assertLessEqual(results[1]['flex1'], results[2]['flex1'])
        # same thing with query string
        q = 'flex1+'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="310" endline="322" pcid="804">
    def test_sort_desc(self):
        q = ''
        sort = dbcore.query.SlowFieldSort("path", False)
        results = self.lib.albums(q, sort)
        self.assertGreaterEqual(results[0]['path'], results[1]['path'])
        self.assertGreaterEqual(results[1]['path'], results[2]['path'])
        # same thing with query string
        q = 'path-'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)


</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="298" endline="309" pcid="803">
    def test_sort_asc(self):
        q = ''
        sort = dbcore.query.SlowFieldSort("path", True)
        results = self.lib.albums(q, sort)
        self.assertLessEqual(results[0]['path'], results[1]['path'])
        self.assertLessEqual(results[1]['path'], results[2]['path'])
        # same thing with query string
        q = 'path+'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
<source file="systems/beets-1.6.0/test/test_sort.py" startline="265" endline="276" pcid="801">
    def test_sort_desc(self):
        q = ''
        sort = dbcore.query.SlowFieldSort("flex1", False)
        results = self.lib.albums(q, sort)
        self.assertGreaterEqual(results[0]['flex1'], results[1]['flex1'])
        self.assertGreaterEqual(results[1]['flex1'], results[2]['flex1'])
        # same thing with query string
        q = 'flex1-'
        results2 = self.lib.albums(q)
        for r1, r2 in zip(results, results2):
            self.assertEqual(r1.id, r2.id)

</source>
</class>

<class classid="4" nclones="2" nlines="10" similarity="100">
<source file="systems/beets-1.6.0/test/test_logging.py" startline="186" endline="196" pcid="996">
        def listener1(self):
            try:
                self.test_case.assertEqual(self._log.level, log.INFO)
                self.t1_step = 1
                self.lock1.acquire()
                self.test_case.assertEqual(self._log.level, log.INFO)
                self.t1_step = 2
            except Exception:
                import sys
                self.exc_info = sys.exc_info()

</source>
<source file="systems/beets-1.6.0/test/test_logging.py" startline="197" endline="207" pcid="997">
        def listener2(self):
            try:
                self.test_case.assertEqual(self._log.level, log.DEBUG)
                self.t2_step = 1
                self.lock2.acquire()
                self.test_case.assertEqual(self._log.level, log.DEBUG)
                self.t2_step = 2
            except Exception:
                import sys
                self.exc_info = sys.exc_info()

</source>
</class>

<class classid="5" nclones="2" nlines="10" similarity="100">
<source file="systems/beets-1.6.0/test/test_albumtypes.py" startline="38" endline="50" pcid="1151">
    def test_renames_types(self):
        """Tests if the plugin correctly renames the specified types."""
        self._set_config(
            types=[('ep', 'EP'), ('remix', 'Remix')],
            ignore_va=[],
            bracket='()'
        )
        album = self._create_album(album_types=['ep', 'remix'])
        subject = AlbumTypesPlugin()
        result = subject._atypes(album)
        self.assertEqual('(EP)(Remix)', result)
        return

</source>
<source file="systems/beets-1.6.0/test/test_albumtypes.py" startline="63" endline="75" pcid="1153">
    def test_respects_type_order(self):
        """Tests if the types are returned in the same order as config."""
        self._set_config(
            types=[('remix', 'Remix'), ('ep', 'EP')],
            ignore_va=[],
            bracket='()'
        )
        album = self._create_album(album_types=['ep', 'remix'])
        subject = AlbumTypesPlugin()
        result = subject._atypes(album)
        self.assertEqual('(Remix)(EP)', result)
        return

</source>
</class>

<class classid="6" nclones="2" nlines="10" similarity="100">
<source file="systems/beets-1.6.0/test/test_discogs.py" startline="232" endline="246" pcid="1191">
    def test_parse_tracklist_subtracks_dot(self):
        """Test standard Discogs position 12.2.9#5: "sub tracks, dots"."""
        release = self._make_release_from_positions(['1', '2.1', '2.2', '3'])
        d = DiscogsPlugin().get_album_info(release)

        self.assertEqual(d.mediums, 1)
        self.assertEqual(len(d.tracks), 3)

        release = self._make_release_from_positions(['A1', 'A2.1', 'A2.2',
                                                     'A3'])
        d = DiscogsPlugin().get_album_info(release)

        self.assertEqual(d.mediums, 1)
        self.assertEqual(len(d.tracks), 3)

</source>
<source file="systems/beets-1.6.0/test/test_discogs.py" startline="247" endline="261" pcid="1192">
    def test_parse_tracklist_subtracks_letter(self):
        """Test standard Discogs position 12.2.9#5: "sub tracks, letter"."""
        release = self._make_release_from_positions(['A1', 'A2a', 'A2b', 'A3'])
        d = DiscogsPlugin().get_album_info(release)

        self.assertEqual(d.mediums, 1)
        self.assertEqual(len(d.tracks), 3)

        release = self._make_release_from_positions(['A1', 'A2.a', 'A2.b',
                                                     'A3'])
        d = DiscogsPlugin().get_album_info(release)

        self.assertEqual(d.mediums, 1)
        self.assertEqual(len(d.tracks), 3)

</source>
</class>

<class classid="7" nclones="2" nlines="11" similarity="100">
<source file="systems/beets-1.6.0/test/test_embedart.py" startline="147" endline="159" pcid="1214">
    def test_reject_different_art(self):
        self._setup_data(self.abbey_artpath)
        album = self.add_album_fixture()
        item = album.items()[0]
        self.run_command('embedart', '-y', '-f', self.abbey_artpath)
        config['embedart']['compare_threshold'] = 20
        self.run_command('embedart', '-y', '-f', self.abbey_differentpath)
        mediafile = MediaFile(syspath(item.path))

        self.assertEqual(mediafile.images[0].data, self.image_data,
                         'Image written is not {}'.format(
                         displayable_path(self.abbey_artpath)))

</source>
<source file="systems/beets-1.6.0/test/test_embedart.py" startline="161" endline="173" pcid="1215">
    def test_accept_similar_art(self):
        self._setup_data(self.abbey_similarpath)
        album = self.add_album_fixture()
        item = album.items()[0]
        self.run_command('embedart', '-y', '-f', self.abbey_artpath)
        config['embedart']['compare_threshold'] = 20
        self.run_command('embedart', '-y', '-f', self.abbey_similarpath)
        mediafile = MediaFile(syspath(item.path))

        self.assertEqual(mediafile.images[0].data, self.image_data,
                         'Image written is not {}'.format(
                         displayable_path(self.abbey_similarpath)))

</source>
</class>

<class classid="8" nclones="2" nlines="11" similarity="100">
<source file="systems/beets-1.6.0/test/test_library.py" startline="311" endline="322" pcid="1425">
    def test_albumtype_query_path(self):
        self.i.comp = True
        self.lib.add_album([self.i])
        self.i.albumtype = 'sometype'
        self.lib.directory = b'one'
        self.lib.path_formats = [
            ('default', 'two'),
            ('albumtype:sometype', 'four'),
            ('comp:true', 'three'),
        ]
        self.assertEqual(self.i.destination(), np('one/four'))

</source>
<source file="systems/beets-1.6.0/test/test_library.py" startline="323" endline="334" pcid="1426">
    def test_albumtype_path_fallback_to_comp(self):
        self.i.comp = True
        self.lib.add_album([self.i])
        self.i.albumtype = 'sometype'
        self.lib.directory = b'one'
        self.lib.path_formats = [
            ('default', 'two'),
            ('albumtype:anothertype', 'four'),
            ('comp:true', 'three'),
        ]
        self.assertEqual(self.i.destination(), np('one/three'))

</source>
</class>

<class classid="9" nclones="2" nlines="13" similarity="100">
<source file="systems/beets-1.6.0/test/test_convert.py" startline="50" endline="65" pcid="1793">
    def assertFileTag(self, path, tag):  # noqa
        """Assert that the path is a file and the files content ends with `tag`.
        """
        display_tag = tag
        tag = tag.encode('utf-8')
        self.assertTrue(os.path.isfile(path),
                        '{} is not a file'.format(
                            util.displayable_path(path)))
        with open(path, 'rb') as f:
            f.seek(-len(display_tag), os.SEEK_END)
            self.assertEqual(f.read(), tag,
                             '{} is not tagged with {}'
                             .format(
                                 util.displayable_path(path),
                                 display_tag))

</source>
<source file="systems/beets-1.6.0/test/test_convert.py" startline="66" endline="83" pcid="1794">
    def assertNoFileTag(self, path, tag):  # noqa
        """Assert that the path is a file and the files content does not
        end with `tag`.
        """
        display_tag = tag
        tag = tag.encode('utf-8')
        self.assertTrue(os.path.isfile(path),
                        '{} is not a file'.format(
                            util.displayable_path(path)))
        with open(path, 'rb') as f:
            f.seek(-len(tag), os.SEEK_END)
            self.assertNotEqual(f.read(), tag,
                                '{} is unexpectedly tagged with {}'
                                .format(
                                    util.displayable_path(path),
                                    display_tag))


</source>
</class>

</clones>
