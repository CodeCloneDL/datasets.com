<clones>
<systeminfo processor="nicad6" system="aws-cli-2.4.27" granularity="functions" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="14307" npairs="58"/>
<runinfo ncompares="742667" cputime="149004"/>
<classinfo nclasses="58"/>

<class classid="1" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/utils/botocore/__init__.py" startline="469" endline="497" pcid="152">
    def wait(self, check, *args, **kwargs):
        """
        Wait until the check succeeds the configured number of times

        :type check: callable
        :param check: A callable that returns True or False to indicate
        if the check succeeded or failed.

        :type args: list
        :param args: Any ordered arguments to be passed to the check.

        :type kwargs: dict
        :param kwargs: Any keyword arguments to be passed to the check.
        """
        attempts = 0
        successes = 0
        if self.delay_initial_poll:
            time.sleep(self.delay)
        while attempts < self.max_attempts:
            attempts += 1
            if check(*args, **kwargs):
                successes += 1
                if successes >= self.min_successes:
                    return
            else:
                time.sleep(self.delay)
        fail_msg = self._fail_message(attempts, successes)
        raise ConsistencyWaiterException(fail_msg)

</source>
<source file="systems/aws-cli-2.4.27/awscli/testutils.py" startline="976" endline="1004" pcid="9991">
    def wait(self, check, *args, **kwargs):
        """
        Wait until the check succeeds the configured number of times

        :type check: callable
        :param check: A callable that returns True or False to indicate
        if the check succeeded or failed.

        :type args: list
        :param args: Any ordered arguments to be passed to the check.

        :type kwargs: dict
        :param kwargs: Any keyword arguments to be passed to the check.
        """
        attempts = 0
        successes = 0
        if self.delay_initial_poll:
            time.sleep(self.delay)
        while attempts < self.max_attempts:
            attempts += 1
            if check(*args, **kwargs):
                successes += 1
                if successes >= self.min_successes:
                    return
            else:
                time.sleep(self.delay)
        fail_msg = self._fail_message(attempts, successes)
        raise ConsistencyWaiterException(fail_msg)

</source>
</class>

<class classid="2" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="60" endline="74" pcid="299">
    def create_role(self, policy_document, policy_arn=None):
        name = self.random_name()
        response = self.iam.create_role(
            RoleName=name,
            AssumeRolePolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(self.iam.delete_role, RoleName=name)
        if policy_arn:
            self.iam.attach_role_policy(RoleName=name, PolicyArn=policy_arn)
            self.addCleanup(
                self.iam.detach_role_policy, RoleName=name,
                PolicyArn=policy_arn
            )
        return response['Role']

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="174" endline="188" pcid="379">
    def create_role(self, policy_document, policy_arn=None):
        name = self.random_name()
        response = self.iam.create_role(
            RoleName=name,
            AssumeRolePolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(self.iam.delete_role, RoleName=name)
        if policy_arn:
            self.iam.attach_role_policy(RoleName=name, PolicyArn=policy_arn)
            self.addCleanup(
                self.iam.detach_role_policy, RoleName=name,
                PolicyArn=policy_arn
            )
        return response['Role']

</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="75" endline="91" pcid="300">
    def create_user(self, policy_arns):
        name = self.random_name()
        user = self.iam.create_user(UserName=name)['User']
        self.addCleanup(self.iam.delete_user, UserName=name)

        for arn in policy_arns:
            self.iam.attach_user_policy(
                UserName=name,
                PolicyArn=arn
            )
            self.addCleanup(
                self.iam.detach_user_policy,
                UserName=name, PolicyArn=arn
            )

        return user

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="189" endline="205" pcid="380">
    def create_user(self, policy_arns):
        name = self.random_name()
        user = self.iam.create_user(UserName=name)['User']
        self.addCleanup(self.iam.delete_user, UserName=name)

        for arn in policy_arns:
            self.iam.attach_user_policy(
                UserName=name,
                PolicyArn=arn
            )
            self.addCleanup(
                self.iam.detach_user_policy,
                UserName=name, PolicyArn=arn
            )

        return user

</source>
</class>

<class classid="4" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/integration/test_assume_role.py" startline="129" endline="149" pcid="303">
    def create_assume_policy(self, role_arn):
        policy_document = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": role_arn,
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        name = self.random_name()
        response = self.iam.create_policy(
            PolicyName=name,
            PolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(
            self.iam.delete_policy, PolicyArn=response['Policy']['Arn']
        )
        return response['Policy']['Arn']

</source>
<source file="systems/aws-cli-2.4.27/tests/integration/botocore/test_credentials.py" startline="250" endline="270" pcid="384">
    def create_assume_policy(self, role_arn):
        policy_document = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": role_arn,
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        name = self.random_name()
        response = self.iam.create_policy(
            PolicyName=name,
            PolicyDocument=json.dumps(policy_document)
        )
        self.addCleanup(
            self.iam.delete_policy, PolicyArn=response['Policy']['Arn']
        )
        return response['Policy']['Arn']

</source>
</class>

<class classid="5" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="21" endline="38" pcid="914">
    def test_tcp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol tcp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '6',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="21" endline="38" pcid="966">
    def test_tcp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol tcp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '6',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="6" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="39" endline="56" pcid="915">
    def test_udp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol udp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '17',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="39" endline="56" pcid="967">
    def test_udp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol udp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '17',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="7" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="57" endline="74" pcid="916">
    def test_icmp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol icmp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="57" endline="74" pcid="968">
    def test_icmp(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol icmp'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="8" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="75" endline="92" pcid="917">
    def test_all(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol all'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '-1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="75" endline="92" pcid="969">
    def test_all(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol all'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '-1',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="9" nclones="2" nlines="17" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_replace_network_acl_entry.py" startline="93" endline="110" pcid="918">
    def test_number(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol 99'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '99',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/functional/ec2/test_create_network_acl_entry.py" startline="93" endline="110" pcid="970">
    def test_number(self):
        cmdline = self.prefix
        cmdline += ' --network-acl-id acl-12345678'
        cmdline += ' --rule-number 100'
        cmdline += ' --protocol 99'
        cmdline += ' --rule-action allow'
        cmdline += ' --ingress'
        cmdline += ' --port-range From=22,To=22'
        cmdline += ' --cidr-block 0.0.0.0/0'
        result = {'NetworkAclId': 'acl-12345678',
                  'RuleNumber': 100,
                  'Protocol': '99',
                  'RuleAction': 'allow',
                  'Egress': False,
                  'CidrBlock': '0.0.0.0/0',
                  'PortRange': {'From': 22, 'To': 22}}
        self.assert_params_for_cmd(cmdline, result)

</source>
</class>

<class classid="10" nclones="2" nlines="25" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/codeartifact/test_codeartifact_login.py" startline="301" endline="332" pcid="1279">
        for command in commands:
            self.assertIn(' '.join(command), stdout)

    def _assert_pypi_rc_has_expected_content(
        self, pypi_rc_str, server, repo_url=None, username=None, password=None
    ):
        pypi_rc = RawConfigParser()
        pypi_rc.read_string(pypi_rc_str)

        self.assertIn('distutils', pypi_rc.sections())
        self.assertIn('index-servers', pypi_rc.options('distutils'))
        index_servers = pypi_rc.get('distutils', 'index-servers')
        index_servers = [
            index_server.strip()
            for index_server
            in index_servers.split('\n')
            if index_server.strip() != ''
        ]
        self.assertIn(server, index_servers)

        if repo_url or username or password:
            self.assertIn(server, pypi_rc.sections())

        if repo_url:
            self.assertIn('repository', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'repository'), repo_url)

        if username:
            self.assertIn('username', pypi_rc.options(server))
            self.assertEqual(pypi_rc.get(server, 'username'), username)

        if password:
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codeartifact/test_adapter_login.py" startline="558" endline="589" pcid="7414">
        self.auth_token = 'auth-token'
        self.expiration = (datetime.now(tzlocal()) + relativedelta(years=1)
                           + relativedelta(months=9)).replace(microsecond=0)
        self.endpoint = 'https://{domain}-{domainOwner}.codeartifact.aws.' \
            'a2z.com/{format}/{repository}/'.format(
                domain=self.domain,
                domainOwner=self.domain_owner,
                format=self.package_format,
                repository=self.repository
            )
        self.default_pypi_rc = self.DEFAULT_PYPI_RC_FMT.format(
            repository_endpoint=self.endpoint,
            auth_token=self.auth_token
        )
        self.subprocess_utils = mock.Mock()
        self.test_pypi_rc_path = self.file_creator.full_path('pypirc')
        if not os.path.isdir(os.path.dirname(self.test_pypi_rc_path)):
            os.makedirs(os.path.dirname(self.test_pypi_rc_path))

        self.test_subject = TwineLogin(
            self.auth_token,
            self.expiration,
            self.endpoint,
            self.domain,
            self.repository,
            self.subprocess_utils,
            self.test_pypi_rc_path
        )

    def tearDown(self):
        self.file_creator.remove_all()

</source>
</class>

<class classid="11" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_neptune.py" startline="51" endline="67" pcid="2003">
    def test_copy_db_cluster_snapshot(self):
        params = {
            'SourceDBClusterSnapshotIdentifier': 'source-db',
            'TargetDBClusterSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CopyDBClusterSnapshotResponse>'
            b'<CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_cluster_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/botocore/test_docdb.py" startline="53" endline="69" pcid="2283">
    def test_copy_db_cluster_snapshot(self):
        params = {
            'SourceDBClusterSnapshotIdentifier': 'source-db',
            'TargetDBClusterSnapshotIdentifier': 'target-db',
            'SourceRegion': 'us-east-1'
        }
        response_body = (
            b'<CopyDBClusterSnapshotResponse>'
            b'<CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResult>'
            b'</CopyDBClusterSnapshotResponse>'
        )
        self.http_stubber.add_response(body=response_body)
        with self.http_stubber:
            self.client.copy_db_cluster_snapshot(**params)
            sent_request = self.http_stubber.requests[0]
            self.assert_presigned_url_injected_in_request(sent_request.body)
</source>
</class>

<class classid="12" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_deregister_instances_from_load_balancer.py" startline="20" endline="31" pcid="2737">
    def test_shorthand(self):
        command = self.prefix + ' --load-balancer-name foo'
        command += ' --instances id1 id2 id3'
        expected_params = {
            'LoadBalancerName': 'foo',
            'Instances': [
                {'InstanceId': 'id1'},
                {'InstanceId': 'id2'},
                {'InstanceId': 'id3'}
            ]
        }
        self.assert_params_for_cmd(command, expected_params)
</source>
<source file="systems/aws-cli-2.4.27/tests/functional/elb/test_describe_instance_health.py" startline="20" endline="31" pcid="2738">
    def test_shorthand(self):
        command = self.prefix + ' --load-balancer-name foo'
        command += ' --instances id1 id2 id3'
        expected_params = {
            'LoadBalancerName': 'foo',
            'Instances': [
                {'InstanceId': 'id1'},
                {'InstanceId': 'id2'},
                {'InstanceId': 'id3'}
            ]
        }
        self.assert_params_for_cmd(command, expected_params)
</source>
</class>

<class classid="13" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_utils.py" startline="469" endline="481" pcid="3296">
    def test_read_with_amount_size(self):
        filename = os.path.join(self.tempdir, 'foo')
        with open(filename, 'wb') as f:
            f.write(b'onetwothreefourfivesixseveneightnineten')
        chunk = ReadFileChunk.from_filename(
            filename, start_byte=11, chunk_size=4
        )
        self.assertEqual(chunk.read(1), b'f')
        self.assertEqual(chunk.read(1), b'o')
        self.assertEqual(chunk.read(1), b'u')
        self.assertEqual(chunk.read(1), b'r')
        self.assertEqual(chunk.read(1), b'')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_s3transfer.py" startline="147" endline="159" pcid="3566">
    def test_read_with_amount_size(self):
        filename = os.path.join(self.tempdir, 'foo')
        with open(filename, 'wb') as f:
            f.write(b'onetwothreefourfivesixseveneightnineten')
        chunk = ReadFileChunk.from_filename(
            filename, start_byte=11, chunk_size=4
        )
        self.assertEqual(chunk.read(1), b'f')
        self.assertEqual(chunk.read(1), b'o')
        self.assertEqual(chunk.read(1), b'u')
        self.assertEqual(chunk.read(1), b'r')
        self.assertEqual(chunk.read(1), b'')

</source>
</class>

<class classid="14" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_download.py" startline="425" endline="435" pcid="3462">
    def get_call_args(self, **kwargs):
        default_call_args = {
            'fileobj': self.filename,
            'bucket': self.bucket,
            'key': self.key,
            'extra_args': self.extra_args,
            'subscribers': self.subscribers,
        }
        default_call_args.update(kwargs)
        return CallArgs(**default_call_args)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/s3transfer/test_upload.py" startline="490" endline="500" pcid="3660">
    def get_call_args(self, **kwargs):
        default_call_args = {
            'fileobj': self.filename,
            'bucket': self.bucket,
            'key': self.key,
            'extra_args': self.extra_args,
            'subscribers': self.subscribers,
        }
        default_call_args.update(kwargs)
        return CallArgs(**default_call_args)

</source>
</class>

<class classid="15" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="350" endline="360" pcid="4122">
    def setUp(self):
        super(TestDocumentStructure, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Member': {'shape': 'String',
                               'documentation': 'This is its member.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="254" endline="264" pcid="4195">
    def setUp(self):
        super(TestDocumentStructure, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Member': {'shape': 'String',
                               'documentation': 'This is its member.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
</class>

<class classid="16" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_example.py" startline="388" endline="399" pcid="4125">
    def setUp(self):
        super(TestDocumentRecursiveShape, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Foo': {
                        'shape': 'Structure',
                        'documentation': 'This is a recursive structure.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/test_params.py" startline="285" endline="296" pcid="4198">
    def setUp(self):
        super(TestDocumentRecursiveShape, self).setUp()
        self.add_shape(
            {'Structure': {
                'type': 'structure',
                'members': {
                    'Foo': {
                        'shape': 'Structure',
                        'documentation': 'This is a recursive structure.'}}}})
        self.add_shape_to_params(
            'Foo', 'Structure', 'This describes the structure.')

</source>
</class>

<class classid="17" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_docstringparser.py" startline="187" endline="198" pcid="4248">
    def test_write_strips_nested_white_space(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)
        self.doc.handle_data.assert_called_once_with('foo')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_docstringparser.py" startline="187" endline="198" pcid="9181">
    def test_write_strips_nested_white_space(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)
        self.doc.handle_data.assert_called_once_with('foo')

</source>
</class>

<class classid="18" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_docstringparser.py" startline="199" endline="212" pcid="4249">
    def test_write_only_strips_until_text_is_found(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child_2.add_child(parser.DataNode(' '))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)

        calls = [mock.call('foo'), mock.call(' ')]
        self.doc.handle_data.assert_has_calls(calls)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_docstringparser.py" startline="199" endline="212" pcid="9182">
    def test_write_only_strips_until_text_is_found(self):
        self.node.add_child(parser.DataNode('  '))
        tag_child = parser.TagNode('foo')
        tag_child.add_child(parser.DataNode('  '))
        tag_child_2 = parser.TagNode('foo')
        tag_child_2.add_child(parser.DataNode(' foo'))
        tag_child_2.add_child(parser.DataNode(' '))
        tag_child.add_child(tag_child_2)
        self.node.add_child(tag_child)

        self.node.write(self.doc)

        calls = [mock.call('foo'), mock.call(' ')]
        self.doc.handle_data.assert_has_calls(calls)
</source>
</class>

<class classid="19" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_style.py" startline="31" endline="44" pcid="4250">
    def test_spaces(self):
        style = ReSTStyle(None, 4)
        self.assertEqual(style.spaces(), '')
        style.indent()
        self.assertEqual(style.spaces(), '    ')
        style.indent()
        self.assertEqual(style.spaces(), '        ')
        style.dedent()
        self.assertEqual(style.spaces(), '    ')
        style.dedent()
        self.assertEqual(style.spaces(), '')
        style.dedent()
        self.assertEqual(style.spaces(), '')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_style.py" startline="30" endline="43" pcid="9183">
    def test_spaces(self):
        style = ReSTStyle(None, 4)
        self.assertEqual(style.spaces(), '')
        style.indent()
        self.assertEqual(style.spaces(), '    ')
        style.indent()
        self.assertEqual(style.spaces(), '        ')
        style.dedent()
        self.assertEqual(style.spaces(), '    ')
        style.dedent()
        self.assertEqual(style.spaces(), '')
        style.dedent()
        self.assertEqual(style.spaces(), '')

</source>
</class>

<class classid="20" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/docs/bcdoc/test_document.py" startline="72" endline="93" pcid="4301">
    def test_add_new_section(self):
        section = self.doc_structure.add_new_section('mysection')

        # Ensure the name of the section is correct
        self.assertEqual(section.name, 'mysection')

        # Ensure we can get the section.
        self.assertEqual(
            self.doc_structure.get_section('mysection'), section)

        # Ensure the path is correct
        self.assertEqual(section.path, ['mydoc', 'mysection'])

        # Ensure some of the necessary attributes are passed to the
        # the section.
        self.assertEqual(section.style.indentation,
                         self.doc_structure.style.indentation)
        self.assertEqual(section.translation_map,
                         self.doc_structure.translation_map)
        self.assertEqual(section.hrefs,
                         self.doc_structure.hrefs)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/bcdoc/test_document.py" startline="71" endline="92" pcid="9234">
    def test_add_new_section(self):
        section = self.doc_structure.add_new_section('mysection')

        # Ensure the name of the section is correct
        self.assertEqual(section.name, 'mysection')

        # Ensure we can get the section.
        self.assertEqual(
            self.doc_structure.get_section('mysection'), section)

        # Ensure the path is correct
        self.assertEqual(section.path, ['mydoc', 'mysection'])

        # Ensure some of the necessary attributes are passed to the
        # the section.
        self.assertEqual(section.style.indentation,
                         self.doc_structure.style.indentation)
        self.assertEqual(section.translation_map,
                         self.doc_structure.translation_map)
        self.assertEqual(section.hrefs,
                         self.doc_structure.hrefs)

</source>
</class>

<class classid="21" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/response_parsing/test_response_parsing.py" startline="92" endline="108" pcid="4381">
def _convert_bytes_to_str(parsed):
    if isinstance(parsed, dict):
        new_dict = {}
        for key, value in parsed.items():
            new_dict[key] = _convert_bytes_to_str(value)
        return new_dict
    elif isinstance(parsed, bytes):
        return parsed.decode('utf-8')
    elif isinstance(parsed, list):
        new_list = []
        for item in parsed:
            new_list.append(_convert_bytes_to_str(item))
        return new_list
    else:
        return parsed


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_protocols.py" startline="269" endline="285" pcid="6188">


def _convert_bytes_to_str(parsed):
    if isinstance(parsed, dict):
        new_dict = {}
        for key, value in parsed.items():
            new_dict[key] = _convert_bytes_to_str(value)
        return new_dict
    elif isinstance(parsed, bytes):
        return parsed.decode('utf-8')
    elif isinstance(parsed, list):
        new_list = []
        for item in parsed:
            new_list.append(_convert_bytes_to_str(item))
        return new_list
    else:
        return parsed
</source>
</class>

<class classid="22" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="104" endline="118" pcid="5490">
    def close_log_file_handler(self, tempdir, filename):
        logger = logging.getLogger('botocore')
        handlers = logger.handlers
        for handler in handlers[:]:
            if hasattr(handler, 'stream') and handler.stream.name == filename:
                handler.stream.close()
                logger.removeHandler(handler)
                os.remove(filename)
                # logging has an atexit handler that will try to flush/close
                # the file.  By setting this flag to False, we'll prevent it
                # from raising an exception, which is fine because we're
                # handling the closing of the file ourself.
                logging.raiseExceptions = False
        shutil.rmtree(tempdir)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="68" endline="82" pcid="5955">
    def close_log_file_handler(self, tempdir, filename):
        logger = logging.getLogger('botocore')
        handlers = logger.handlers
        for handler in handlers[:]:
            if hasattr(handler, 'stream') and handler.stream.name == filename:
                handler.stream.close()
                logger.removeHandler(handler)
                os.remove(filename)
                # logging has an atexit handler that will try to flush/close
                # the file.  By setting this flag to False, we'll prevent it
                # from raising an exception, which is fine because we're
                # handling the closing of the file ourself.
                logging.raiseExceptions = False
        shutil.rmtree(tempdir)

</source>
</class>

<class classid="23" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="193" endline="203" pcid="5501">
    def test_file_logger(self):
        tempdir = tempfile.mkdtemp()
        temp_file = os.path.join(tempdir, 'file_logger')
        self.session.set_file_logger(logging.DEBUG, temp_file)
        self.addCleanup(self.close_log_file_handler, tempdir, temp_file)
        self.session.get_credentials()
        self.assertTrue(os.path.isfile(temp_file))
        with open(temp_file) as logfile:
            s = logfile.read()
        self.assertTrue('Looking for credentials' in s)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="179" endline="189" pcid="5967">
    def test_file_logger(self):
        tempdir = tempfile.mkdtemp()
        temp_file = os.path.join(tempdir, 'file_logger')
        self.session.set_file_logger(logging.DEBUG, temp_file)
        self.addCleanup(self.close_log_file_handler, tempdir, temp_file)
        self.session.get_credentials()
        self.assertTrue(os.path.isfile(temp_file))
        with open(temp_file) as logfile:
            s = logfile.read()
        self.assertTrue('Looking for credentials' in s)

</source>
</class>

<class classid="24" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="209" endline="221" pcid="5503">
    def test_full_config_merges_creds_file_data(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            full_config = self.session.full_config
            self.assertEqual(full_config['profiles']['newprofile'],
                             {'aws_access_key_id': 'FROM_CREDS_FILE_1',
                              'aws_secret_access_key': 'FROM_CREDS_FILE_2'})

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="195" endline="207" pcid="5969">
    def test_full_config_merges_creds_file_data(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            full_config = self.session.full_config
            self.assertEqual(full_config['profiles']['newprofile'],
                             {'aws_access_key_id': 'FROM_CREDS_FILE_1',
                              'aws_secret_access_key': 'FROM_CREDS_FILE_2'})

</source>
</class>

<class classid="25" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="222" endline="234" pcid="5504">
    def test_path_not_in_available_profiles(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            profiles = self.session.available_profiles
            self.assertEqual(
                set(profiles),
                set(['foo', 'default', 'newprofile']))

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="208" endline="220" pcid="5970">
    def test_path_not_in_available_profiles(self):
        with temporary_file('w') as f:
            self.session.set_config_variable('credentials_file', f.name)
            f.write('[newprofile]\n')
            f.write('aws_access_key_id=FROM_CREDS_FILE_1\n')
            f.write('aws_secret_access_key=FROM_CREDS_FILE_2\n')
            f.flush()

            profiles = self.session.available_profiles
            self.assertEqual(
                set(profiles),
                set(['foo', 'default', 'newprofile']))

</source>
</class>

<class classid="26" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="279" endline="290" pcid="5510">
    def test_register_with_unique_id(self):
        calls = []
        handler = lambda **kwargs: calls.append(kwargs)
        self.session.register('foo', handler, unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls[0]['event_name'], 'foo')
        calls = []
        self.session.unregister('foo', unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls, [])


</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="267" endline="278" pcid="5976">
    def test_register_with_unique_id(self):
        calls = []
        handler = lambda **kwargs: calls.append(kwargs)
        self.session.register('foo', handler, unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls[0]['event_name'], 'foo')
        calls = []
        self.session.unregister('foo', unique_id='bar')
        self.session.emit('foo')
        self.assertEqual(calls, [])


</source>
</class>

<class classid="27" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="480" endline="493" pcid="5533">
    def test_credential_provider_not_called_when_creds_provided(self):
        cred_provider = mock.Mock()
        self.session.register_component(
            'credential_provider', cred_provider)
        self.session.create_client(
            'sts', 'us-west-2',
            aws_access_key_id='foo',
            aws_secret_access_key='bar',
            aws_session_token='baz')
        self.assertFalse(cred_provider.load_credentials.called,
                         "Credential provider was called even though "
                         "explicit credentials were provided to the "
                         "create_client call.")

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="477" endline="490" pcid="5998">
    def test_credential_provider_not_called_when_creds_provided(self):
        cred_provider = mock.Mock()
        self.session.register_component(
            'credential_provider', cred_provider)
        self.session.create_client(
            'sts', 'us-west-2',
            aws_access_key_id='foo',
            aws_secret_access_key='bar',
            aws_session_token='baz')
        self.assertFalse(cred_provider.load_credentials.called,
                         "Credential provider was called even though "
                         "explicit credentials were provided to the "
                         "create_client call.")

</source>
</class>

<class classid="28" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="494" endline="507" pcid="5534">
    def test_cred_provider_called_when_partial_creds_provided(self):
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id='foo',
                aws_secret_access_key=None
            )
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id=None,
                aws_secret_access_key='foo',
            )

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="491" endline="504" pcid="5999">
    def test_cred_provider_called_when_partial_creds_provided(self):
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id='foo',
                aws_secret_access_key=None
            )
        with self.assertRaises(botocore.exceptions.PartialCredentialsError):
            self.session.create_client(
                'sts', 'us-west-2',
                aws_access_key_id=None,
                aws_secret_access_key='foo',
            )

</source>
</class>

<class classid="29" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="542" endline="558" pcid="5538">
    def test_create_client_with_merging_client_configs(self, client_creator):
        config = botocore.config.Config(region_name='us-west-2')
        other_config = botocore.config.Config(region_name='us-east-1')
        self.session.set_default_client_config(config)
        self.session.create_client('sts', config=other_config)

        # Grab the client config used in creating the client
        used_client_config = (
            client_creator.return_value.create_client.call_args[1][
                'client_config'])
        # Check that the client configs were merged
        self.assertEqual(used_client_config.region_name, 'us-east-1')
        # Make sure that the client config used is not the default client
        # config or the one passed in. It should be a new config.
        self.assertIsNot(used_client_config, config)
        self.assertIsNot(used_client_config, other_config)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="531" endline="547" pcid="6002">
    def test_create_client_with_merging_client_configs(self, client_creator):
        config = botocore.config.Config(region_name='us-west-2')
        other_config = botocore.config.Config(region_name='us-east-1')
        self.session.set_default_client_config(config)
        self.session.create_client('sts', config=other_config)

        # Grab the client config used in creating the client
        used_client_config = (
            client_creator.return_value.create_client.call_args[1][
                'client_config'])
        # Check that the client configs were merged
        self.assertEqual(used_client_config.region_name, 'us-east-1')
        # Make sure that the client config used is not the default client
        # config or the one passed in. It should be a new config.
        self.assertIsNot(used_client_config, config)
        self.assertIsNot(used_client_config, other_config)

</source>
</class>

<class classid="30" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="564" endline="580" pcid="5540">
    def test_create_client_with_region_and_client_config(self):
        config = botocore.config.Config()
        # Use a client config with no region configured.
        ec2_client = self.session.create_client(
            'ec2', region_name='us-west-2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # If the region name is changed, it should not change the
        # region of the client
        config.region_name = 'us-east-1'
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # Now make a new client with the updated client config.
        ec2_client = self.session.create_client(
            'ec2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-east-1')

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="553" endline="569" pcid="6004">
    def test_create_client_with_region_and_client_config(self):
        config = botocore.config.Config()
        # Use a client config with no region configured.
        ec2_client = self.session.create_client(
            'ec2', region_name='us-west-2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # If the region name is changed, it should not change the
        # region of the client
        config.region_name = 'us-east-1'
        self.assertEqual(ec2_client.meta.region_name, 'us-west-2')

        # Now make a new client with the updated client config.
        ec2_client = self.session.create_client(
            'ec2', config=config)
        self.assertEqual(ec2_client.meta.region_name, 'us-east-1')

</source>
</class>

<class classid="31" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session.py" startline="777" endline="794" pcid="5566">
        self.assertIs(self.components.get_component('foo'), second)

    def test_lazy_registration_factory_does_not_remove_from_list_on_error(self):
        class ArbitraryError(Exception):
            pass

        def bad_factory():
            raise ArbitraryError("Factory raises an exception.")

        self.components.lazy_register_component('foo', bad_factory)

        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')

        # Trying again should raise the same exception,
        # not an ValueError("Unknown component")
        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/botocore/test_session_legacy.py" startline="699" endline="716" pcid="6020">
        self.assertIs(self.components.get_component('foo'), second)

    def test_lazy_registration_factory_does_not_remove_from_list_on_error(self):
        class ArbitraryError(Exception):
            pass

        def bad_factory():
            raise ArbitraryError("Factory raises an exception.")

        self.components.lazy_register_component('foo', bad_factory)

        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')

        # Trying again should raise the same exception,
        # not an ValueError("Unknown component")
        with self.assertRaises(ArbitraryError):
            self.components.get_component('foo')
</source>
</class>

<class classid="32" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="23" endline="37" pcid="6932">
    def test_s3_location(self):
        cmd = self.prefix + '--s3-location bucket=b,key=k,bundleType=zip'
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="172" endline="186" pcid="6943">
    def test_s3_location(self):
        cmd = self.prefix + '--s3-location bucket=b,key=k,bundleType=zip'
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="33" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="38" endline="55" pcid="6933">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="187" endline="204" pcid="6944">
    def test_s3_location_with_etag(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="34" nclones="2" nlines="14" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="56" endline="73" pcid="6934">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="205" endline="222" pcid="6945">
    def test_s3_location_with_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="35" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="74" endline="92" pcid="6935">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="223" endline="241" pcid="6946">
    def test_s3_location_with_etag_and_version(self):
        cmd = self.prefix + (
            '--s3-location bucket=b,key=k,'
            'bundleType=zip,eTag=1234,version=abcd')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="36" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="93" endline="111" pcid="6936">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="242" endline="260" pcid="6947">
    def test_s3_location_json(self):
        cmd = self.prefix + (
            '--s3-location {"bucket":"b","key":"k",'
            '"bundleType":"zip","eTag":"1234","version":"abcd"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'S3',
                's3Location': {
                    'bucket': 'b',
                    'key': 'k',
                    'bundleType': 'zip',
                    'eTag': '1234',
                    'version': 'abcd'
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="37" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="124" endline="139" pcid="6939">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="273" endline="288" pcid="6950">
    def test_github_location_with_etag(self):
        cmd = self.prefix + (
            '--github-location repository=foo/bar,'
            'commitId=1234')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="38" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="140" endline="155" pcid="6940">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/codedeploy/test_locationargs.py" startline="289" endline="304" pcid="6951">
    def test_github_location_json(self):
        cmd = self.prefix + (
            '--github-location {"repository":"foo/bar",'
            '"commitId":"1234"}')
        result = {
            'applicationName': 'foo',
            'revision': {
                'revisionType': 'GitHub',
                'gitHubLocation': {
                    'repository': 'foo/bar',
                    'commitId': '1234',
                }
            }
        }
        self.assert_params_for_cmd(cmd, result)

</source>
</class>

<class classid="39" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="350" endline="360" pcid="7680">
        del result['JobFlowRole']
        del result['ServiceRole']
        self.assert_params_for_cmd(cmd, result)

    def test_cluster_with_service_role_and_instance_profile(self):
        cmd = ('emr create-cluster --release-label emr-4.0.0'
               ' --service-role ServiceRole --ec2-attributes '
               'InstanceProfile=Ec2_InstanceProfile '
               '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['JobFlowRole'] = 'Ec2_InstanceProfile'
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="376" endline="386" pcid="7778">
        cmd = ('emr create-cluster --ami-version 3.0.4'
               ' --service-role ServiceRole --ec2-attributes '
               'InstanceProfile=Ec2_InstanceProfile '
               '--instance-groups ' + DEFAULT_INSTANCE_GROUPS_ARG)
        result = copy.deepcopy(DEFAULT_RESULT)
        result['JobFlowRole'] = 'Ec2_InstanceProfile'
        result['ServiceRole'] = 'ServiceRole'
        self.assert_params_for_cmd(cmd, result)

    def test_mutual_exclusive_use_default_roles_and_service_role(self):
        cmd = (DEFAULT_CMD +
</source>
</class>

<class classid="40" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="361" endline="371" pcid="7681">
        result['ServiceRole'] = 'ServiceRole'
        self.assert_params_for_cmd(cmd, result)

    def test_mutual_exclusive_use_default_roles_and_service_role(self):
        cmd = (DEFAULT_CMD +
               '--ec2-attributes InstanceProfile=Ec2_InstanceProfile')
        expected_error_msg = (
            '\naws: error: You cannot specify both --use-default-roles '
            'and --ec2-attributes InstanceProfile options together. Either '
            'choose --use-default-roles or use both --service-role <roleName>'
            ' and --ec2-attributes InstanceProfile=<profileName>.\n')
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="387" endline="397" pcid="7779">
               '--ec2-attributes InstanceProfile=Ec2_InstanceProfile')
        expected_error_msg = (
            '\naws: error: You cannot specify both --use-default-roles '
            'and --ec2-attributes InstanceProfile options together. Either '
            'choose --use-default-roles or use both --service-role <roleName>'
            ' and --ec2-attributes InstanceProfile=<profileName>.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_mutual_exclusive_use_default_roles_and_instance_profile(self):
        cmd = (DEFAULT_CMD + '--service-role ServiceRole '
</source>
</class>

<class classid="41" nclones="2" nlines="12" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="810" endline="825" pcid="7719">

        self.assert_params_for_cmd(cmd, result)

    def test_bootstrap_actions_exceed_maximum_error(self):
        cmd = DEFAULT_CMD + ' --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 18):
            cmd += ba_cmd

        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)

        self.assertEquals(expected_error_msg, result[1])

    def test_bootstrap_actions_exceed_maximum_with_applications_error(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="822" endline="837" pcid="7816">
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 18):
            cmd += ba_cmd

        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)

        self.assertEquals(expected_error_msg, result[1])

    def test_bootstrap_actions_exceed_maximum_with_applications_error(self):
        cmd = DEFAULT_CMD + ' --applications Name=GANGLIA Name=HBASE' +\
            ' Name=IMPALA,Args=arg1,arg2 --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 15):
            cmd += ba_cmd
</source>
</class>

<class classid="42" nclones="2" nlines="15" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="826" endline="845" pcid="7720">
        cmd = DEFAULT_CMD + ' --bootstrap-actions'
        ba_cmd = ' Path=s3://test/ba1,Name=ba1,Args=arg1,arg2,arg3'
        for i in range(1, 20):
            cmd += ba_cmd
        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_boostrap_actions_with_default_fields(self):
        cmd = DEFAULT_CMD + (
            ' --bootstrap-actions Path=s3://test/ba1 Path=s3://test/ba2')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['BootstrapActions'] = \
            [
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba1'}
                 },
                {'Name': 'Bootstrap action',
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="838" endline="857" pcid="7817">
        expected_error_msg = '\naws: error: maximum number of ' +\
                             'bootstrap actions for a cluster exceeded.\n'
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_boostrap_actions_with_default_fields(self):
        cmd = DEFAULT_CMD + (
            ' --bootstrap-actions Path=s3://test/ba1 Path=s3://test/ba2')
        result = copy.deepcopy(DEFAULT_RESULT)
        result['BootstrapActions'] = \
            [
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba1'}
                 },
                {'Name': 'Bootstrap action',
                 'ScriptBootstrapAction':
                    {'Path': 's3://test/ba2'}
                 }
        ]
</source>
</class>

<class classid="43" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="865" endline="883" pcid="7724">
                 "ScriptBootstrapAction":
                    {"Path": "s3://mybucket/test2",
                     "Args": ["arg1", "arg2"]}
                 }
        ]
        self.assert_params_for_cmd(cmd, result)

    # Steps test cases
    def test_wrong_step_type_error(self):
        cmd = DEFAULT_CMD + '--steps Type=unknown'
        expected_error_msg = (
            '\naws: error: The step type unknown is not supported.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_default_step_type_name_action_on_failure(self):
        cmd = DEFAULT_CMD + '--steps Jar=s3://mybucket/mytest.jar'
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = [CUSTOM_JAR_STEP]
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="990" endline="1008" pcid="7834">
             'IMPALA_BACKEND_PORT=22001,IMPALA_MEM_LIMIT=70%']
        ba_list = [INSTALL_GANGLIA_BA, INSTALL_HBASE_BA,
                   impala_ba]
        step_list = [INSTALL_HIVE_STEP, INSTALL_PIG_STEP, INSTALL_HBASE_STEP]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = step_list
        result['BootstrapActions'] = ba_list
        result['NewSupportedProducts'] = [INSTALL_MAPR_PRODUCT]
        self.assert_params_for_cmd(cmd, result)

    # Steps test cases
    def test_wrong_step_type_error(self):
        cmd = DEFAULT_CMD + '--steps Type=unknown'
        expected_error_msg = (
            '\naws: error: The step type unknown is not supported.\n')
        result = self.run_cmd(cmd, 252)
        self.assertEquals(expected_error_msg, result[1])

    def test_default_step_type_name_action_on_failure(self):
</source>
</class>

<class classid="44" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="900" endline="912" pcid="7727">
            {'Name': 'Custom',
             'ActionOnFailure': 'TERMINATE_CLUSTER',
             'HadoopJarStep':
                {'Jar': 's3://mybucket/mytest.jar',
                 'Args': ['arg1', 'arg2'],
                 'MainClass': 'mymainclass'}
             }
        ]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = expected_steps
        self.assert_params_for_cmd(cmd, result)

    def test_streaming_step_with_default_fields(self):
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1025" endline="1037" pcid="7837">
            'Args=arg1,arg2,MainClass=mymainclass,'
            'ActionOnFailure=TERMINATE_CLUSTER')
        expected_steps = [
            {'Name': 'Custom',
             'ActionOnFailure': 'TERMINATE_CLUSTER',
             'HadoopJarStep':
                {'Jar': 's3://mybucket/mytest.jar',
                 'Args': ['arg1', 'arg2'],
                 'MainClass': 'mymainclass'}
             }
        ]
        result = copy.deepcopy(DEFAULT_RESULT)
        result['Steps'] = expected_steps
</source>
</class>

<class classid="45" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="991" endline="1004" pcid="7736">
        result['Steps'] = [PIG_STEP]
        self.assert_params_for_cmd(cmd, result)

    @patch('awscli.customizations.emr.emrutils.call')
    def test_constructed_result(self, call_patch):
        call_patch.return_value = CREATE_CLUSTER_RESULT
        cmd = DEFAULT_CMD
        result = self.run_cmd(cmd, expected_rc=0)
        result_json = json.loads(result[0])
        self.assertEquals(result_json, CONSTRUCTED_RESULT)

    def test_all_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes EmrManagedMasterSecurityGroup=sg-master1,'
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1232" endline="1245" pcid="7853">
    def test_missing_applications_with_hbase(self):
        cmd = DEFAULT_CMD +\
            '--steps Jar=s3://test/customJar.jar ' +\
            'Type=HIVE,Args=-f,s3://test/hive ' +\
            'Type=PIG,Args=-f,s3://test/pig ' +\
            'Type=IMPALA,Args=--impala-script,s3://test/impala ' +\
            'Type=Streaming,Args=-files,s3://test/mapper.py,-mapper,' +\
            'mapper.py,-reducer,aggregator,-input,s3://test/input,-output,' +\
            's3://test/output' + ' --applications Name=Hive Name=Pig' +\
            ' --restore-from-hbase-backup Dir=s3://myBucket/myDir'

        expected_error_msg1 = (
            '\naws: error: Some of the steps require the following'
            ' applications to be installed: Hbase, Impala. '
</source>
</class>

<class classid="46" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1005" endline="1017" pcid="7737">
            'EmrManagedSlaveSecurityGroup=sg-slave1,'
            'ServiceAccessSecurityGroup=sg-service-access,'
            'AdditionalMasterSecurityGroups='
            '[sg-addMaster1,sg-addMaster2,sg-addMaster3,'
            'sg-addMaster4],AdditionalSlaveSecurityGroups=[sg-addSlave1,'
            'sg-addSlave2,sg-addSlave3,sg-addSlave4]')

        result = copy.deepcopy(DEFAULT_RESULT)
        instances = result['Instances']
        instances['EmrManagedMasterSecurityGroup'] = \
            EMR_MANAGED_MASTER_SECURITY_GROUP
        instances['EmrManagedSlaveSecurityGroup'] = \
            EMR_MANAGED_SLAVE_SECURITY_GROUP
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1246" endline="1258" pcid="7854">
            'Please install the applications using --applications.\n')
        expected_error_msg2 = (
            '\naws: error: Some of the steps require the following'
            ' applications to be installed: Impala, Hbase. '
            'Please install the applications using --applications.\n')
        result = self.run_cmd(cmd, 252)

        if(result[1] == expected_error_msg1 or
           result[1] == expected_error_msg2):
            self.assertTrue(True)
        else:
            self.assertTrue(False)

</source>
</class>

<class classid="47" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_release_label.py" startline="1018" endline="1033" pcid="7738">
        instances['ServiceAccessSecurityGroup'] = \
            SERVICE_ACCESS_SECURITY_GROUP
        instances['AdditionalMasterSecurityGroups'] = \
            ADDITIONAL_MASTER_SECURITY_GROUPS
        instances['AdditionalSlaveSecurityGroups'] = \
            ADDITIONAL_SLAVE_SECURITY_GROUPS

        self.assert_params_for_cmd(cmd, result)

    def test_emr_managed_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes EmrManagedMasterSecurityGroup=sg-master1,'
            'EmrManagedSlaveSecurityGroup=sg-slave1,'
            'ServiceAccessSecurityGroup=sg-service-access')

        result = copy.deepcopy(DEFAULT_RESULT)
</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/emr/test_create_cluster_ami_version.py" startline="1259" endline="1274" pcid="7855">
    @patch('awscli.customizations.emr.emrutils.call')
    def test_constructed_result(self, call_patch):
        call_patch.return_value = CREATE_CLUSTER_RESULT
        cmd = DEFAULT_CMD
        result = self.run_cmd(cmd, expected_rc=0)
        result_json = json.loads(result[0])
        self.assertEquals(result_json, CONSTRUCTED_RESULT)

    def test_all_security_groups(self):
        cmd = DEFAULT_CMD + (
            '--ec2-attributes EmrManagedMasterSecurityGroup=sg-master1,'
            'EmrManagedSlaveSecurityGroup=sg-slave1,'
            'ServiceAccessSecurityGroup=sg-service-access,'
            'AdditionalMasterSecurityGroups='
            '[sg-addMaster1,sg-addMaster2,sg-addMaster3,'
            'sg-addMaster4],AdditionalSlaveSecurityGroups=[sg-addSlave1,'
</source>
</class>

<class classid="48" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1406" endline="1420" pcid="8570">
    def test_print_failure_result(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'
        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)

</source>
<source file="systems/aws-cli-2.4.27/tests/unit/customizations/s3/test_results.py" startline="1472" endline="1486" pcid="8576">
    def test_print_failure_result(self):
        transfer_type = 'upload'
        src = 'file'
        dest = 's3://mybucket/mykey'
        failure_result = FailureResult(
            transfer_type=transfer_type, src=src, dest=dest,
            exception=Exception('my exception'))

        self.result_printer(failure_result)

        ref_failure_statement = (
            'upload failed: file to s3://mybucket/mykey my exception\n'
        )
        self.assertEqual(self.error_file.getvalue(), ref_failure_statement)

</source>
</class>

<class classid="49" nclones="2" nlines="18" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/style.py" startline="232" endline="255" pcid="10376">
    def end_a(self):
        self.doc.do_translation = False
        if self.a_href:
            last_write = self.doc.pop_write()
            last_write = last_write.rstrip(' ')
            if last_write and last_write != '`':
                if ':' in last_write:
                    last_write = last_write.replace(':', r'\:')
                self.doc.push_write(last_write)
                self.doc.push_write(' <%s>`__' % self.a_href)
            elif last_write == '`':
                # Look at start_a().  It will do a self.doc.write('`')
                # which is the start of the link title.  If that is the
                # case then there was no link text.  We should just
                # use an inline link.  The syntax of this is
                # `<http://url>`_
                self.doc.push_write('`<%s>`__' % self.a_href)
            else:
                self.doc.push_write(self.a_href)
                self.doc.hrefs[self.a_href] = self.a_href
                self.doc.write('`__')
            self.a_href = None
        self.doc.write(' ')

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/style.py" startline="232" endline="255" pcid="13973">
    def end_a(self):
        self.doc.do_translation = False
        if self.a_href:
            last_write = self.doc.pop_write()
            last_write = last_write.rstrip(' ')
            if last_write and last_write != '`':
                if ':' in last_write:
                    last_write = last_write.replace(':', r'\:')
                self.doc.push_write(last_write)
                self.doc.push_write(' <%s>`__' % self.a_href)
            elif last_write == '`':
                # Look at start_a().  It will do a self.doc.write('`')
                # which is the start of the link title.  If that is the
                # case then there was no link text.  We should just
                # use an inline link.  The syntax of this is
                # `<http://url>`_
                self.doc.push_write('`<%s>`__' % self.a_href)
            else:
                self.doc.push_write(self.a_href)
                self.doc.hrefs[self.a_href] = self.a_href
                self.doc.write('`__')
            self.a_href = None
        self.doc.write(' ')

</source>
</class>

<class classid="50" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="66" endline="80" pcid="10415">
    def add_tag(self, tag, attrs=None, is_start=True):
        if not self._doc_has_handler(tag, is_start):
            self.unhandled_tags.append(tag)
            return

        if is_start:
            if tag == 'li':
                node = LineItemNode(attrs)
            else:
                node = TagNode(tag, attrs)
            self.current_node.add_child(node)
            self.current_node = node
        else:
            self.current_node = self.current_node.parent

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="66" endline="80" pcid="14012">
    def add_tag(self, tag, attrs=None, is_start=True):
        if not self._doc_has_handler(tag, is_start):
            self.unhandled_tags.append(tag)
            return

        if is_start:
            if tag == 'li':
                node = LineItemNode(attrs)
            else:
                node = TagNode(tag, attrs)
            self.current_node.add_child(node)
            self.current_node = node
        else:
            self.current_node = self.current_node.parent

</source>
</class>

<class classid="51" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="154" endline="172" pcid="10431">
    def _lstrip(self, node):
        """
        Traverses the tree, stripping out whitespace until text data is found
        :param node: The node to strip
        :return: True if non-whitespace data was found, False otherwise
        """
        for child in node.children:
            if isinstance(child, DataNode):
                child.lstrip()
                if child.data:
                    return True
            else:
                found = self._lstrip(child)
                if found:
                    return True

        return False


</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="154" endline="172" pcid="14028">
    def _lstrip(self, node):
        """
        Traverses the tree, stripping out whitespace until text data is found
        :param node: The node to strip
        :return: True if non-whitespace data was found, False otherwise
        """
        for child in node.children:
            if isinstance(child, DataNode):
                child.lstrip()
                if child.data:
                    return True
            else:
                found = self._lstrip(child)
                if found:
                    return True

        return False


</source>
</class>

<class classid="52" nclones="2" nlines="13" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/docstringparser.py" startline="186" endline="200" pcid="10434">
    def write(self, doc):
        if not self.data:
            return

        if self.data.isspace():
            str_data = ' '
        else:
            end_space = self.data[-1].isspace()
            words = self.data.split()
            words = doc.translate_words(words)
            str_data = ' '.join(words)
            if end_space:
                str_data += ' '

        doc.handle_data(str_data)
</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/docstringparser.py" startline="186" endline="200" pcid="14031">
    def write(self, doc):
        if not self.data:
            return

        if self.data.isspace():
            str_data = ' '
        else:
            end_space = self.data[-1].isspace()
            words = self.data.split()
            words = doc.translate_words(words)
            str_data = ' '.join(words)
            if end_space:
                str_data += ' '

        doc.handle_data(str_data)
</source>
</class>

<class classid="53" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="24" endline="34" pcid="10435">
    def __init__(self, target='man'):
        self.style = ReSTStyle(self)
        self.target = target
        self.parser = DocStringParser(self)
        self.keep_data = True
        self.do_translation = False
        self.translation_map = {}
        self.hrefs = {}
        self._writes = []
        self._last_doc_string = None

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="24" endline="34" pcid="14219">
    def __init__(self, target='man'):
        self.style = ReSTStyle(self)
        self.target = target
        self.parser = DocStringParser(self)
        self.keep_data = True
        self.do_translation = False
        self.translation_map = {}
        self.hrefs = {}
        self._writes = []
        self._last_doc_string = None

</source>
</class>

<class classid="54" nclones="2" nlines="11" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="87" endline="98" pcid="10445">
    def include_doc_string(self, doc_string):
        if doc_string:
            try:
                start = len(self._writes)
                self.parser.feed(doc_string)
                self.parser.close()
                end = len(self._writes)
                self._last_doc_string = (start, end)
            except Exception:
                LOG.debug('Error parsing doc string', exc_info=True)
                LOG.debug(doc_string)

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="87" endline="98" pcid="14229">
    def include_doc_string(self, doc_string):
        if doc_string:
            try:
                start = len(self._writes)
                self.parser.feed(doc_string)
                self.parser.close()
                end = len(self._writes)
                self._last_doc_string = (start, end)
            except Exception:
                LOG.debug('Error parsing doc string', exc_info=True)
                LOG.debug(doc_string)

</source>
</class>

<class classid="55" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="107" endline="129" pcid="10447">
    def __init__(self, name, section_names=None, target='man', context=None):
        """Provides a Hierarichial structure to a ReSTDocument

        You can write to it similiar to as you can to a ReSTDocument but
        has an innate structure for more orginaztion and abstraction.

        :param name: The name of the document
        :param section_names: A list of sections to be included
            in the document.
        :param target: The target documentation of the Document structure
        :param context: A dictionary of data to store with the strucuture. These
            are only stored per section not the entire structure.
        """
        super(DocumentStructure, self).__init__(target=target)
        self._name = name
        self._structure = OrderedDict()
        self._path = [self._name]
        self._context = {}
        if context is not None:
            self._context = context
        if section_names is not None:
            self._generate_structure(section_names)

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="107" endline="129" pcid="14231">
    def __init__(self, name, section_names=None, target='man', context=None):
        """Provides a Hierarichial structure to a ReSTDocument

        You can write to it similiar to as you can to a ReSTDocument but
        has an innate structure for more orginaztion and abstraction.

        :param name: The name of the document
        :param section_names: A list of sections to be included
            in the document.
        :param target: The target documentation of the Document structure
        :param context: A dictionary of data to store with the strucuture. These
            are only stored per section not the entire structure.
        """
        super(DocumentStructure, self).__init__(target=target)
        self._name = name
        self._structure = OrderedDict()
        self._path = [self._name]
        self._context = {}
        if context is not None:
            self._context = context
        if section_names is not None:
            self._generate_structure(section_names)

</source>
</class>

<class classid="56" nclones="2" nlines="10" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/docs/bcdoc/restdoc.py" startline="193" endline="210" pcid="10457">
    def flush_structure(self):
        """Flushes a doc structure to a ReSTructed string

        The document is flushed out in a DFS style where sections and their
        subsections' values are added to the string as they are visited.
        """
        # We are at the root flush the links at the beginning of the
        # document
        if len(self.path) == 1:
            if self.hrefs:
                self.style.new_paragraph()
                for refname, link in self.hrefs.items():
                    self.style.link_target_definition(refname, link)
        value = self.getvalue()
        for name, section in self._structure.items():
            value += section.flush_structure()
        return value

</source>
<source file="systems/aws-cli-2.4.27/awscli/bcdoc/restdoc.py" startline="193" endline="210" pcid="14241">
    def flush_structure(self):
        """Flushes a doc structure to a ReSTructed string

        The document is flushed out in a DFS style where sections and their
        subsections' values are added to the string as they are visited.
        """
        # We are at the root flush the links at the beginning of the
        # document
        if len(self.path) == 1:
            if self.hrefs:
                self.style.new_paragraph()
                for refname, link in self.hrefs.items():
                    self.style.link_target_definition(refname, link)
        value = self.getvalue()
        for name, section in self._structure.items():
            value += section.flush_structure()
        return value

</source>
</class>

<class classid="57" nclones="2" nlines="24" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="91" endline="119" pcid="11342">

    def _crt_request_from_aws_request(self, aws_request):
        url_parts = urlsplit(aws_request.url)
        crt_path = url_parts.path if url_parts.path else '/'
        if aws_request.params:
            array = []
            for (param, value) in aws_request.params.items():
                value = str(value)
                array.append('%s=%s' % (param, value))
            crt_path = crt_path + '?' + '&'.join(array)
        elif url_parts.query:
            crt_path = '%s?%s' % (crt_path, url_parts.query)

        crt_headers = awscrt.http.HttpHeaders(aws_request.headers.items())

        # CRT requires body (if it exists) to be an I/O stream.
        crt_body_stream = None
        if aws_request.body:
            if hasattr(aws_request.body, 'seek'):
                crt_body_stream = aws_request.body
            else:
                crt_body_stream = BytesIO(aws_request.body)

        crt_request = awscrt.http.HttpRequest(
            method=aws_request.method,
            path=crt_path,
            headers=crt_headers,
            body_stream=crt_body_stream)
        return crt_request
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="279" endline="307" pcid="11354">
        future.result()
        self._apply_signing_changes(request, crt_request)

    def _crt_request_from_aws_request(self, aws_request):
        url_parts = urlsplit(aws_request.url)
        crt_path = url_parts.path if url_parts.path else '/'
        if aws_request.params:
            array = []
            for (param, value) in aws_request.params.items():
                value = str(value)
                array.append('%s=%s' % (param, value))
            crt_path = crt_path + '?' + '&'.join(array)
        elif url_parts.query:
            crt_path = '%s?%s' % (crt_path, url_parts.query)

        crt_headers = awscrt.http.HttpHeaders(aws_request.headers.items())

        # CRT requires body (if it exists) to be an I/O stream.
        crt_body_stream = None
        if aws_request.body:
            if hasattr(aws_request.body, 'seek'):
                crt_body_stream = aws_request.body
            else:
                crt_body_stream = BytesIO(aws_request.body)

        crt_request = awscrt.http.HttpRequest(
            method=aws_request.method,
            path=crt_path,
            headers=crt_headers,
</source>
</class>

<class classid="58" nclones="2" nlines="16" similarity="100">
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="404" endline="445" pcid="11366">
                 expires=DEFAULT_EXPIRES):
        super().__init__(credentials, service_name, region_name)
        self._expiration_in_seconds = expires

    def _modify_request_before_signing(self, request):
        super()._modify_request_before_signing(request)

        # We automatically set this header, so if it's the auto-set value we
        # want to get rid of it since it doesn't make sense for presigned urls.
        content_type = request.headers.get('content-type')
        if content_type == 'application/x-www-form-urlencoded; charset=utf-8':
            del request.headers['content-type']

        # Now parse the original query string to a dict, inject our new query
        # params, and serialize back to a query string.
        url_parts = urlsplit(request.url)
        # parse_qs makes each value a list, but in our case we know we won't
        # have repeated keys so we know we have single element lists which we
        # can convert back to scalar values.
        query_dict = dict(
            [(k, v[0]) for k, v in
             parse_qs(url_parts.query, keep_blank_values=True).items()])
        # The spec is particular about this.  It *has* to be:
        # https://<endpoint>?<operation params>&<auth params>
        # You can't mix the two types of params together, i.e just keep doing
        # new_query_params.update(op_params)
        # new_query_params.update(auth_params)
        # percent_encode_sequence(new_query_params)
        if request.data:
            # We also need to move the body params into the query string. To
            # do this, we first have to convert it to a dict.
            query_dict.update(_get_body_as_dict(request))
            request.data = ''
        new_query_string = percent_encode_sequence(query_dict)
        # url_parts is a tuple (and therefore immutable) so we need to create
        # a new url_parts with the new query string.
        # <part>   - <index>
        # scheme   - 0
        # netloc   - 1
        # path     - 2
        # query    - 3  <-- we're replacing this.
        # fragment - 4
</source>
<source file="systems/aws-cli-2.4.27/awscli/botocore/crt/auth.py" startline="494" endline="535" pcid="11371">
                 expires=DEFAULT_EXPIRES):
        super().__init__(credentials, service_name, region_name)
        self._expiration_in_seconds = expires

    def _modify_request_before_signing(self, request):
        super()._modify_request_before_signing(request)

        # We automatically set this header, so if it's the auto-set value we
        # want to get rid of it since it doesn't make sense for presigned urls.
        content_type = request.headers.get('content-type')
        if content_type == 'application/x-www-form-urlencoded; charset=utf-8':
            del request.headers['content-type']

        # Now parse the original query string to a dict, inject our new query
        # params, and serialize back to a query string.
        url_parts = urlsplit(request.url)
        # parse_qs makes each value a list, but in our case we know we won't
        # have repeated keys so we know we have single element lists which we
        # can convert back to scalar values.
        query_dict = dict(
            [(k, v[0]) for k, v in
             parse_qs(url_parts.query, keep_blank_values=True).items()])
        # The spec is particular about this.  It *has* to be:
        # https://<endpoint>?<operation params>&<auth params>
        # You can't mix the two types of params together, i.e just keep doing
        # new_query_params.update(op_params)
        # new_query_params.update(auth_params)
        # percent_encode_sequence(new_query_params)
        if request.data:
            # We also need to move the body params into the query string. To
            # do this, we first have to convert it to a dict.
            query_dict.update(_get_body_as_dict(request))
            request.data = ''
        new_query_string = percent_encode_sequence(query_dict)
        # url_parts is a tuple (and therefore immutable) so we need to create
        # a new url_parts with the new query string.
        # <part>   - <index>
        # scheme   - 0
        # netloc   - 1
        # path     - 2
        # query    - 3  <-- we're replacing this.
        # fragment - 4
</source>
</class>

</clones>
