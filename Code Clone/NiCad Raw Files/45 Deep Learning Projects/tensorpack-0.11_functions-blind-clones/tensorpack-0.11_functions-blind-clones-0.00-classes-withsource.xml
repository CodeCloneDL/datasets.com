<clones>
<systeminfo processor="nicad6" system="tensorpack-0.11" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1386" npairs="2"/>
<runinfo ncompares="3764" cputime="41698"/>
<classinfo nclasses="2"/>

<class classid="1" nclones="2" nlines="10" similarity="100">
<source file="systems/tensorpack-0.11/tensorpack/dataflow/imgaug/imgaug_test.py" startline="115" endline="127" pcid="181">
    def test_legacy_usage(self):
        augmentors = self._get_augs()

        img = _rand_image()
        orig = img.copy()
        newimg, tfms = augmentors.augment_return_params(img)
        newimg2 = augmentors.augment_with_params(orig, tfms)
        self.assertTrue(np.allclose(newimg, newimg2))
        self.assertEqual(newimg2.shape[0], 30)

        coords = np.asarray([[0, 0], [10, 12]], dtype="float32")
        augmentors.augment_coords(coords, tfms)

</source>
<source file="systems/tensorpack-0.11/tensorpack/dataflow/imgaug/imgaug_test.py" startline="142" endline="155" pcid="183">
    def test_legacy_augs_legacy_usage(self):
        augmentors = self._get_augs_with_legacy()

        img = _rand_image()
        orig = img.copy()
        newimg, tfms = augmentors.augment_return_params(img)
        newimg2 = augmentors.augment_with_params(orig, tfms)
        self.assertTrue(np.allclose(newimg, newimg2))
        self.assertEqual(newimg2.shape[0], 30)

        coords = np.asarray([[0, 0], [10, 12]], dtype="float32")
        augmentors.augment_coords(coords, tfms)


</source>
</class>

<class classid="2" nclones="2" nlines="11" similarity="100">
<source file="systems/tensorpack-0.11/tensorpack/models/pool.py" startline="19" endline="34" pcid="332">
def MaxPooling(
        inputs,
        pool_size,
        strides=None,
        padding='valid',
        data_format='channels_last'):
    """
    Same as `tf.layers.MaxPooling2D`. Default strides is equal to pool_size.
    """
    if strides is None:
        strides = pool_size
    layer = tf.layers.MaxPooling2D(pool_size, strides, padding=padding, data_format=data_format)
    ret = layer.apply(inputs, scope=tf.get_variable_scope())
    return tf.identity(ret, name='output')


</source>
<source file="systems/tensorpack-0.11/tensorpack/models/pool.py" startline="39" endline="54" pcid="333">
def AvgPooling(
        inputs,
        pool_size,
        strides=None,
        padding='valid',
        data_format='channels_last'):
    """
    Same as `tf.layers.AveragePooling2D`. Default strides is equal to pool_size.
    """
    if strides is None:
        strides = pool_size
    layer = tf.layers.AveragePooling2D(pool_size, strides, padding=padding, data_format=data_format)
    ret = layer.apply(inputs, scope=tf.get_variable_scope())
    return tf.identity(ret, name='output')


</source>
</class>

</clones>
