<clones>
<systeminfo processor="nicad6" system="coach-1.0.0" granularity="functions" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1771" npairs="3"/>
<runinfo ncompares="7146" cputime="60874"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="15" similarity="100">
<source file="systems/coach-1.0.0/rl_coach/tests/test_dist_coach.py" startline="11" endline="35" pcid="782">
def generate_config(image, memory_backend, s3_end_point, s3_bucket_name, s3_creds_file, config_file):
    """
    Generate the s3 config file to be used and also the dist-coach-config.template to be used for the test
    It reads the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` env vars and fails if they are not provided.
    """
    # Write s3 creds
    aws_config = ConfigParser({
        'aws_access_key_id': os.environ.get('AWS_ACCESS_KEY_ID'),
        'aws_secret_access_key': os.environ.get('AWS_SECRET_ACCESS_KEY')
    }, default_section='default')
    with open(s3_creds_file, 'w') as f:
        aws_config.write(f)

    coach_config = ConfigParser({
        'image': image,
        'memory_backend': memory_backend,
        'data_store': 's3',
        's3_end_point': s3_end_point,
        's3_bucket_name': s3_bucket_name,
        's3_creds_file': s3_creds_file
    }, default_section="coach")
    with open(config_file, 'w') as f:
        coach_config.write(f)


</source>
<source file="systems/coach-1.0.0/rl_coach/tests/trace_tests.py" startline="174" endline="198" pcid="860">
def generate_config(image, memory_backend, s3_end_point, s3_bucket_name, s3_creds_file, config_file):
    """
    Generate the s3 config file to be used and also the dist-coach-config.template to be used for the test
    It reads the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` env vars and fails if they are not provided.
    """
    # Write s3 creds
    aws_config = ConfigParser({
        'aws_access_key_id': os.environ.get('AWS_ACCESS_KEY_ID'),
        'aws_secret_access_key': os.environ.get('AWS_SECRET_ACCESS_KEY')
    }, default_section='default')
    with open(s3_creds_file, 'w') as f:
        aws_config.write(f)

    coach_config = ConfigParser({
        'image': image,
        'memory_backend': memory_backend,
        'data_store': 's3',
        's3_end_point': s3_end_point,
        's3_bucket_name': s3_bucket_name,
        's3_creds_file': s3_creds_file
    }, default_section="coach")
    with open(config_file, 'w') as f:
        coach_config.write(f)


</source>
</class>

<class classid="2" nclones="2" nlines="15" similarity="100">
<source file="systems/coach-1.0.0/rl_coach/architectures/mxnet_components/middlewares/fc_middleware.py" startline="39" endline="68" pcid="1510">
    def schemes(self) -> dict:
        """
        Schemes are the pre-defined network architectures of various depths and complexities that can be used for the
        Middleware. Are used to create Block when FCMiddleware is initialised.

        :return: dictionary of schemes, with key of type MiddlewareScheme enum and value being list of mxnet.gluon.Block.
        """
        return {
            MiddlewareScheme.Empty:
                [],

            # Use for PPO
            MiddlewareScheme.Shallow:
                [
                    Dense(units=64)
                ],

            # Use for DQN
            MiddlewareScheme.Medium:
                [
                    Dense(units=512)
                ],

            MiddlewareScheme.Deep:
                [
                    Dense(units=128),
                    Dense(units=128),
                    Dense(units=128)
                ]
        }
</source>
<source file="systems/coach-1.0.0/rl_coach/architectures/mxnet_components/middlewares/lstm_middleware.py" startline="50" endline="80" pcid="1512">
    def schemes(self) -> dict:
        """
        Schemes are the pre-defined network architectures of various depths and complexities that can be used for the
        Middleware. Are used to create Block when LSTMMiddleware is initialised, and are applied before the LSTM.

        :return: dictionary of schemes, with key of type MiddlewareScheme enum and value being list of mxnet.gluon.Block.
        """
        return {
            MiddlewareScheme.Empty:
                [],

            # Use for PPO
            MiddlewareScheme.Shallow:
                [
                    Dense(units=64)
                ],

            # Use for DQN
            MiddlewareScheme.Medium:
                [
                    Dense(units=512)
                ],

            MiddlewareScheme.Deep:
                [
                    Dense(units=128),
                    Dense(units=128),
                    Dense(units=128)
                ]
        }

</source>
</class>

<class classid="3" nclones="2" nlines="14" similarity="100">
<source file="systems/coach-1.0.0/rl_coach/architectures/tensorflow_components/middlewares/fc_middleware.py" startline="55" endline="78" pcid="1623">
    def schemes(self):
        return {
            MiddlewareScheme.Empty:
                [],

            # ppo
            MiddlewareScheme.Shallow:
                [
                    self.dense_layer(64)
                ],

            # dqn
            MiddlewareScheme.Medium:
                [
                    self.dense_layer(512)
                ],

            MiddlewareScheme.Deep: \
                [
                    self.dense_layer(128),
                    self.dense_layer(128),
                    self.dense_layer(128)
                ]
        }
</source>
<source file="systems/coach-1.0.0/rl_coach/architectures/tensorflow_components/middlewares/lstm_middleware.py" startline="77" endline="100" pcid="1627">
    def schemes(self):
        return {
            MiddlewareScheme.Empty:
                [],

            # ppo
            MiddlewareScheme.Shallow:
                [
                    self.dense_layer(64)
                ],

            # dqn
            MiddlewareScheme.Medium:
                [
                    self.dense_layer(512)
                ],

            MiddlewareScheme.Deep: \
                [
                    self.dense_layer(128),
                    self.dense_layer(128),
                    self.dense_layer(128)
                ]
        }
</source>
</class>

</clones>
