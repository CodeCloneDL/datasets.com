<clones>
<systeminfo processor="nicad6" system="raster-vision-0.13.1" granularity="functions" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1063" npairs="1"/>
<runinfo ncompares="3066" cputime="48301"/>
<classinfo nclasses="1"/>

<class classid="1" nclones="2" nlines="11" similarity="100">
<source file="systems/raster-vision-0.13.1/tests/pipeline/test_file_system.py" startline="136" endline="150" pcid="290">
    def setUp(self):
        # Setup mock S3 bucket.
        self.mock_s3 = mock_s3()
        self.mock_s3.start()
        self.s3 = boto3.client('s3')
        self.bucket_name = 'mock_bucket'
        self.s3.create_bucket(Bucket=self.bucket_name)

        self.content_str = 'hello'
        self.file_name = 'hello.txt'
        self.s3_path = 's3://{}/{}'.format(self.bucket_name, self.file_name)

        self.tmp_dir = rv_config.get_tmp_dir()
        self.local_path = os.path.join(self.tmp_dir.name, self.file_name)

</source>
<source file="systems/raster-vision-0.13.1/tests/pipeline/test_file_system.py" startline="181" endline="195" pcid="294">
    def setUp(self):
        # Setup mock S3 bucket.
        self.mock_s3 = mock_s3()
        self.mock_s3.start()
        self.s3 = boto3.client('s3')
        self.bucket_name = 'mock_bucket'
        self.s3.create_bucket(Bucket=self.bucket_name)

        self.content_str = 'hello'
        self.file_name = 'hello.txt'
        self.s3_path = 's3://{}/{}'.format(self.bucket_name, self.file_name)

        self.tmp_dir = rv_config.get_tmp_dir()
        self.local_path = os.path.join(self.tmp_dir.name, self.file_name)

</source>
</class>

</clones>
