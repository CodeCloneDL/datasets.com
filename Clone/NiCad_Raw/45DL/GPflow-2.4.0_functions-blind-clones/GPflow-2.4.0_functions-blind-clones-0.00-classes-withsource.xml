<clones>
<systeminfo processor="nicad6" system="GPflow-2.4.0" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="539" npairs="3"/>
<runinfo ncompares="836" cputime="39567"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="20" similarity="100">
<source file="systems/GPflow-2.4.0/tests/gpflow/likelihoods/test_switched_likelihood.py" startline="62" endline="88" pcid="145">
def test_switched_likelihood_predict_log_density(
    Y_list: Sequence[TensorType],
    F_list: Sequence[TensorType],
    Fvar_list: Sequence[TensorType],
    Y_label: Sequence[TensorType],
) -> None:
    Y_perm = list(range(3 + 4 + 5))
    np.random.shuffle(Y_perm)
    # shuffle the original data
    Y_sw = np.hstack([np.concatenate(Y_list), np.concatenate(Y_label)])[Y_perm, :3]
    F_sw = np.concatenate(F_list)[Y_perm, :]
    Fvar_sw = np.concatenate(Fvar_list)[Y_perm, :]

    likelihoods = [Gaussian()] * 3
    for lik in likelihoods:
        lik.variance = np.exp(np.random.randn(1)).squeeze().astype(np.float32)
    switched_likelihood = SwitchedLikelihood(likelihoods)

    switched_results = switched_likelihood.predict_log_density(F_sw, Fvar_sw, Y_sw)
    # likelihood
    results = [
        lik.predict_log_density(f, fvar, y)
        for lik, y, f, fvar in zip(likelihoods, Y_list, F_list, Fvar_list)
    ]
    assert_allclose(switched_results, np.concatenate(results)[Y_perm])


</source>
<source file="systems/GPflow-2.4.0/tests/gpflow/likelihoods/test_switched_likelihood.py" startline="93" endline="118" pcid="146">
def test_switched_likelihood_variational_expectations(
    Y_list: Sequence[TensorType],
    F_list: Sequence[TensorType],
    Fvar_list: Sequence[TensorType],
    Y_label: Sequence[TensorType],
) -> None:
    Y_perm = list(range(3 + 4 + 5))
    np.random.shuffle(Y_perm)
    # shuffle the original data
    Y_sw = np.hstack([np.concatenate(Y_list), np.concatenate(Y_label)])[Y_perm, :3]
    F_sw = np.concatenate(F_list)[Y_perm, :]
    Fvar_sw = np.concatenate(Fvar_list)[Y_perm, :]

    likelihoods = [Gaussian()] * 3
    for lik in likelihoods:
        lik.variance = np.exp(np.random.randn(1)).squeeze().astype(np.float32)
    switched_likelihood = SwitchedLikelihood(likelihoods)

    switched_results = switched_likelihood.variational_expectations(F_sw, Fvar_sw, Y_sw)
    results = [
        lik.variational_expectations(f, fvar, y)
        for lik, y, f, fvar in zip(likelihoods, Y_list, F_list, Fvar_list)
    ]
    assert_allclose(switched_results, np.concatenate(results)[Y_perm])


</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/GPflow-2.4.0/tests/gpflow/likelihoods/test_likelihoods.py" startline="261" endline="272" pcid="171">
def test_montecarlo_variational_expectation(
    likelihood_var: float, mu: TensorType, var: TensorType, y: TensorType
) -> None:
    likelihood_gaussian_mc, likelihood_gaussian = _make_montecarlo_likelihoods(likelihood_var)
    assert_allclose(
        likelihood_gaussian_mc.variational_expectations(mu, var, y),
        likelihood_gaussian.variational_expectations(mu, var, y),
        rtol=5e-4,
        atol=1e-4,
    )


</source>
<source file="systems/GPflow-2.4.0/tests/gpflow/likelihoods/test_likelihoods.py" startline="275" endline="286" pcid="172">
def test_montecarlo_predict_log_density(
    likelihood_var: float, mu: TensorType, var: TensorType, y: TensorType
) -> None:
    likelihood_gaussian_mc, likelihood_gaussian = _make_montecarlo_likelihoods(likelihood_var)
    assert_allclose(
        likelihood_gaussian_mc.predict_log_density(mu, var, y),
        likelihood_gaussian.predict_log_density(mu, var, y),
        rtol=5e-4,
        atol=1e-4,
    )


</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="100">
<source file="systems/GPflow-2.4.0/tests/gpflow/kernels/test_coregion.py" startline="127" endline="140" pcid="389">
def test_likelihood_variance() -> None:
    vgp0, vgp1, cvgp = _prepare_models()
    assert_allclose(
        vgp0.likelihood.variance.numpy(),
        cvgp.likelihood.likelihoods[0].variance.numpy(),
        atol=1e-2,
    )
    assert_allclose(
        vgp1.likelihood.variance.numpy(),
        cvgp.likelihood.likelihoods[1].variance.numpy(),
        atol=1e-2,
    )


</source>
<source file="systems/GPflow-2.4.0/tests/gpflow/kernels/test_coregion.py" startline="155" endline="168" pcid="391">
def test_mean_values() -> None:
    vgp0, vgp1, cvgp = _prepare_models()
    assert_allclose(
        vgp0.mean_function.c.numpy(),
        cvgp.mean_function.meanfunctions[0].c.numpy(),
        atol=1.0e-4,
    )
    assert_allclose(
        vgp1.mean_function.c.numpy(),
        cvgp.mean_function.meanfunctions[1].c.numpy(),
        atol=1.0e-4,
    )


</source>
</class>

</clones>
