<clones>
<systeminfo processor="nicad6" system="pyod-0.9.8" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="926" npairs="169"/>
<runinfo ncompares="1127" cputime="44934"/>
<classinfo nclasses="13"/>

<class classid="1" nclones="2" nlines="41" similarity="100">
<source file="systems/pyod-0.9.8/pyod/models/copod.py" startline="216" endline="299" pcid="88">
    def explain_outlier(self, ind, columns=None, cutoffs=None,
                        feature_names=None, file_name=None,
                        file_type=None):  # pragma: no cover
        """Plot dimensional outlier graph for a given data point within
        the dataset.

        Parameters
        ----------
        ind : int
            The index of the data point one wishes to obtain
            a dimensional outlier graph for.

        columns : list
            Specify a list of features/dimensions for plotting. If not 
            specified, use all features.
        
        cutoffs : list of floats in (0., 1), optional (default=[0.95, 0.99])
            The significance cutoff bands of the dimensional outlier graph.
        
        feature_names : list of strings
            The display names of all columns of the dataset,
            to show on the x-axis of the plot.

        file_name : string
            The name to save the figure

        file_type : string
            The file type to save the figure

        Returns
        -------
        Plot : matplotlib plot
            The dimensional outlier graph for data point with index ind.
        """
        if columns is None:
            columns = list(range(self.O.shape[1]))
            column_range = range(1, self.O.shape[1] + 1)
        else:
            column_range = range(1, len(columns) + 1)

        cutoffs = [1 - self.contamination,
                   0.99] if cutoffs is None else cutoffs

        # plot outlier scores
        plt.scatter(column_range, self.O[ind, columns], marker='^', c='black',
                    label='Outlier Score')

        for i in cutoffs:
            plt.plot(column_range,
                     np.quantile(self.O[:, columns], q=i, axis=0),
                     '--',
                     label='{percentile} Cutoff Band'.format(percentile=i))
        plt.xlim([1, max(column_range)])
        plt.ylim([0, int(self.O[:, columns].max().max()) + 1])
        plt.ylabel('Dimensional Outlier Score')
        plt.xlabel('Dimension')

        ticks = list(column_range)
        if feature_names is not None:
            assert len(feature_names) == len(ticks), \
                "Length of feature_names does not match dataset dimensions."
            plt.xticks(ticks, labels=feature_names)
        else:
            plt.xticks(ticks)

        plt.yticks(range(0, int(self.O[:, columns].max().max()) + 1))
        plt.xlim(0.95, ticks[-1] + 0.05)
        label = 'Outlier' if self.labels_[ind] == 1 else 'Inlier'
        plt.title(
            'Outlier score breakdown for sample #{index} ({label})'.format(
                index=ind + 1, label=label))
        plt.legend()
        plt.tight_layout()

        # save the file if specified
        if file_name is not None:
            if file_type is not None:
                plt.savefig(file_name + '.' + file_type, dpi=300)
            # if not specified, save as png
            else:
                plt.savefig(file_name + '.' + 'png', dpi=300)
        plt.show()

        # todo: consider returning results
</source>
<source file="systems/pyod-0.9.8/pyod/models/ecod.py" startline="218" endline="301" pcid="127">
    def explain_outlier(self, ind, columns=None, cutoffs=None,
                        feature_names=None, file_name=None,
                        file_type=None):  # pragma: no cover
        """Plot dimensional outlier graph for a given data point within
        the dataset.

        Parameters
        ----------
        ind : int
            The index of the data point one wishes to obtain
            a dimensional outlier graph for.

        columns : list
            Specify a list of features/dimensions for plotting. If not
            specified, use all features.

        cutoffs : list of floats in (0., 1), optional (default=[0.95, 0.99])
            The significance cutoff bands of the dimensional outlier graph.

        feature_names : list of strings
            The display names of all columns of the dataset,
            to show on the x-axis of the plot.

        file_name : string
            The name to save the figure

        file_type : string
            The file type to save the figure

        Returns
        -------
        Plot : matplotlib plot
            The dimensional outlier graph for data point with index ind.
        """
        if columns is None:
            columns = list(range(self.O.shape[1]))
            column_range = range(1, self.O.shape[1] + 1)
        else:
            column_range = range(1, len(columns) + 1)

        cutoffs = [1 - self.contamination,
                   0.99] if cutoffs is None else cutoffs

        # plot outlier scores
        plt.scatter(column_range, self.O[ind, columns], marker='^', c='black',
                    label='Outlier Score')

        for i in cutoffs:
            plt.plot(column_range,
                     np.quantile(self.O[:, columns], q=i, axis=0),
                     '--',
                     label='{percentile} Cutoff Band'.format(percentile=i))
        plt.xlim([1, max(column_range)])
        plt.ylim([0, int(self.O[:, columns].max().max()) + 1])
        plt.ylabel('Dimensional Outlier Score')
        plt.xlabel('Dimension')

        ticks = list(column_range)
        if feature_names is not None:
            assert len(feature_names) == len(ticks), \
                "Length of feature_names does not match dataset dimensions."
            plt.xticks(ticks, labels=feature_names)
        else:
            plt.xticks(ticks)

        plt.yticks(range(0, int(self.O[:, columns].max().max()) + 1))
        plt.xlim(0.95, ticks[-1] + 0.05)
        label = 'Outlier' if self.labels_[ind] == 1 else 'Inlier'
        plt.title(
            'Outlier score breakdown for sample #{index} ({label})'.format(
                index=ind + 1, label=label))
        plt.legend()
        plt.tight_layout()

        # save the file if specified
        if file_name is not None:
            if file_type is not None:
                plt.savefig(file_name + '.' + file_type, dpi=300)
            # if not specified, save as png
            else:
                plt.savefig(file_name + '.' + 'png', dpi=300)
        plt.show()

        # todo: consider returning results
</source>
</class>

<class classid="2" nclones="9" nlines="10" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_loci.py" startline="29" endline="40" pcid="221">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = LOCI(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_loda.py" startline="28" endline="39" pcid="772">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.75
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = LODA(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_knn.py" startline="30" endline="41" pcid="380">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = KNN(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_cof.py" startline="28" endline="39" pcid="458">
    def setUp(self):
        self.n_train = 100
        self.n_test = 50
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = COF(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_feature_bagging.py" startline="29" endline="40" pcid="526">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = FeatureBagging(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_hbos.py" startline="30" endline="41" pcid="577">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = HBOS(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_sod.py" startline="28" endline="39" pcid="887">
    def setUp(self):
        self.n_train = 100
        self.n_test = 50
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = SOD(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_lof.py" startline="28" endline="39" pcid="643">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = LOF(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_abod.py" startline="28" endline="39" pcid="724">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = ABOD(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
</class>

<class classid="3" nclones="15" nlines="13" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_suod.py" startline="66" endline="79" pcid="239">

    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'model_') and
                self.clf.model_ is not None)
</source>
<source file="systems/pyod-0.9.8/pyod/test/test_lmdd.py" startline="43" endline="56" pcid="834">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, 'dis_measure_') and
                self.clf.dis_measure_ is not None)
        assert (hasattr(self.clf, 'n_iter_') and
                self.clf.n_iter_ is not None)
        assert (hasattr(self.clf, 'random_state_') and
                self.clf.random_state_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_auto_encoder_torch.py" startline="39" endline="52" pcid="710">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'model') and
                self.clf.model is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_lscp.py" startline="64" endline="77" pcid="492">

    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'detector_list') and
                self.clf.detector_list is not None)
</source>
<source file="systems/pyod-0.9.8/pyod/test/test_vae.py" startline="41" endline="54" pcid="444">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'model_') and
                self.clf.model_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_abod.py" startline="40" endline="53" pcid="725">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'tree_') and
                self.clf.tree_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_deepsvdd.py" startline="46" endline="59" pcid="695">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'model_') and
                self.clf.model_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_sod.py" startline="62" endline="75" pcid="889">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, 'alpha_') and
                self.clf.alpha_ is not None)
        assert (hasattr(self.clf, 'ref_set_') and
                self.clf.ref_set_ is not None)
        assert (hasattr(self.clf, 'n_neighbors_') and
                self.clf.n_neighbors_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_so_gaal.py" startline="48" endline="61" pcid="818">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'discriminator') and
                self.clf.discriminator is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_mo_gaal.py" startline="47" endline="60" pcid="661">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'discriminator') and
                self.clf.discriminator is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_loda.py" startline="40" endline="53" pcid="773">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'projections_') and
                self.clf.projections_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_lof.py" startline="40" endline="53" pcid="644">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'n_neighbors_') and
                self.clf.n_neighbors_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_auto_encoder.py" startline="39" endline="52" pcid="255">
    def test_parameters(self):
        assert(hasattr(self.clf, 'decision_scores_') and
                    self.clf.decision_scores_ is not None)
        assert(hasattr(self.clf, 'labels_') and
                    self.clf.labels_ is not None)
        assert(hasattr(self.clf, 'threshold_') and
                    self.clf.threshold_ is not None)
        assert(hasattr(self.clf, '_mu') and
                    self.clf._mu is not None)
        assert(hasattr(self.clf, '_sigma') and
                    self.clf._sigma is not None)
        assert(hasattr(self.clf, 'model_') and
                    self.clf.model_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_loda.py" startline="142" endline="155" pcid="788">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'projections_') and
                self.clf.projections_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_xgbod.py" startline="61" endline="74" pcid="344">

    def test_parameters(self):
        assert (hasattr(self.clf, 'clf_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, '_scalar') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'n_detector_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'X_train_add_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
</source>
</class>

<class classid="4" nclones="3" nlines="12" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_auto_encoder.py" startline="25" endline="38" pcid="254">
    def setUp(self):
        self.n_train = 6000
        self.n_test = 1000
        self.n_features = 300
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            n_features=self.n_features, contamination=self.contamination,
            random_state=42)

        self.clf = AutoEncoder(epochs=5, contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_vae.py" startline="27" endline="40" pcid="443">
    def setUp(self):
        self.n_train = 6000
        self.n_test = 1000
        self.n_features = 300
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            n_features=self.n_features, contamination=self.contamination,
            random_state=42)

        self.clf = VAE(epochs=5, contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_auto_encoder_torch.py" startline="25" endline="38" pcid="709">
    def setUp(self):
        self.n_train = 3000
        self.n_test = 1000
        self.n_features = 200
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            n_features=self.n_features, contamination=self.contamination,
            random_state=42)

        self.clf = AutoEncoder(epochs=3, contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
</class>

<class classid="5" nclones="2" nlines="15" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_data.py" startline="86" endline="105" pcid="273">
        assert_allclose(X_test, X_test2)
        assert_allclose(y_train, y_train2)
        assert_allclose(y_test, y_test2)

    def test_data_generate_cluster(self):
        X_train, X_test, y_train, y_test = \
            generate_data_clusters(n_train=self.n_train,
                                   n_test=self.n_test,
                                   n_features=2,
                                   contamination=self.contamination,
                                   random_state=self.random_state)

        assert_equal(y_train.shape[0], X_train.shape[0])
        assert_equal(y_test.shape[0], X_test.shape[0])

        assert (self.n_train - X_train.shape[0] <= 1)
        assert_equal(X_train.shape[1], 2)

        assert (self.n_test - X_test.shape[0] <= 1)
        assert_equal(X_test.shape[1], 2)
</source>
<source file="systems/pyod-0.9.8/pyod/test/test_data.py" startline="187" endline="206" pcid="278">
        assert_equal(X_train.shape[1], 2)

        assert (self.n_test - X_test.shape[0] <= 1)
        assert_equal(X_test.shape[1], 2)

        out_perc = (np.sum(y_train) + np.sum(y_test)) / (
                self.n_train + self.n_test)
        assert_allclose(self.contamination, out_perc, atol=0.01)

    def test_data_generate_categorical(self):
        X_train, X_test, y_train, y_test = \
            generate_data_categorical(n_train=self.n_train,
                                      n_test=self.n_test,
                                      n_features=2,
                                      contamination=self.contamination,
                                      random_state=self.random_state)

        assert_equal(y_train.shape[0], X_train.shape[0])
        assert_equal(y_test.shape[0], X_test.shape[0])

</source>
</class>

<class classid="6" nclones="2" nlines="10" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_copod.py" startline="28" endline="39" pcid="326">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test, n_features=10,
            contamination=self.contamination, random_state=42)

        self.clf = COPOD(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_ecod.py" startline="28" endline="39" pcid="609">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test, n_features=10,
            contamination=self.contamination, random_state=42)

        self.clf = ECOD(contamination=self.contamination)
        self.clf.fit(self.X_train)

</source>
</class>

<class classid="7" nclones="2" nlines="11" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_knn.py" startline="42" endline="53" pcid="381">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_knn.py" startline="220" endline="231" pcid="408">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)

</source>
</class>

<class classid="8" nclones="2" nlines="12" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_copod_parallel.py" startline="28" endline="43" pcid="426">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test, n_features=10,
            contamination=self.contamination, random_state=42)

        self.clf = COPOD(contamination=self.contamination, n_jobs=2)
        self.clf.fit(self.X_train)

        # get a copy from the single thread copy
        self.clf_ = COPOD(contamination=self.contamination)
        self.clf_.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_ecod.py" startline="146" endline="161" pcid="626">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test, n_features=10,
            contamination=self.contamination, random_state=42)

        self.clf = ECOD(contamination=self.contamination, n_jobs=2)
        self.clf.fit(self.X_train)

        # get a copy from the single thread copy
        self.clf_ = ECOD(contamination=self.contamination)
        self.clf_.fit(self.X_train)

</source>
</class>

<class classid="9" nclones="2" nlines="12" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_cof.py" startline="137" endline="150" pcid="473">
    def test_check_parameters(self):
        with assert_raises(ValueError):
            COF(contamination=0.1, n_neighbors=-1)
        with assert_raises(ValueError):
            COF(contamination=10., n_neighbors=5)
        with assert_raises(TypeError):
            COF(contamination=0.1, n_neighbors='not int')
        with assert_raises(TypeError):
            COF(contamination='not float', n_neighbors=5)
        cof_ = COF(contamination=0.1, n_neighbors=10000)
        cof_.fit(self.X_train)
        assert self.X_train.shape[0] > cof_.n_neighbors_

    # todo: fix clone issue
</source>
<source file="systems/pyod-0.9.8/pyod/test/test_cof.py" startline="250" endline="262" pcid="489">
    def test_check_parameters(self):
        with assert_raises(ValueError):
            COF(contamination=0.1, n_neighbors=-1)
        with assert_raises(ValueError):
            COF(contamination=10., n_neighbors=5)
        with assert_raises(TypeError):
            COF(contamination=0.1, n_neighbors='not int')
        with assert_raises(TypeError):
            COF(contamination='not float', n_neighbors=5)
        cof_ = COF(contamination=0.1, n_neighbors=10000)
        cof_.fit(self.X_train)
        assert self.X_train.shape[0] > cof_.n_neighbors_

</source>
</class>

<class classid="10" nclones="4" nlines="10" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_cof.py" startline="160" endline="171" pcid="476">
    def setUp(self):
        self.n_train = 100
        self.n_test = 50
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = COF(contamination=self.contamination, method="memory")
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_hbos.py" startline="140" endline="151" pcid="592">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.75
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = HBOS(contamination=self.contamination, n_bins="auto")
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_abod.py" startline="130" endline="141" pcid="739">
    def setUp(self):
        self.n_train = 50
        self.n_test = 50
        self.contamination = 0.2
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = ABOD(contamination=self.contamination, method='default')
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_loda.py" startline="130" endline="141" pcid="787">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.75
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = LODA(contamination=self.contamination, n_bins='auto')
        self.clf.fit(self.X_train)

</source>
</class>

<class classid="11" nclones="4" nlines="15" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_feature_bagging.py" startline="41" endline="56" pcid="527">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'estimators_') and
                self.clf.estimators_ is not None)
        assert (hasattr(self.clf, 'estimators_features_') and
                self.clf.estimators_features_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_hbos.py" startline="42" endline="57" pcid="578">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'hist_') and
                self.clf.hist_ is not None)
        assert (hasattr(self.clf, 'bin_edges_') and
                self.clf.bin_edges_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_hbos.py" startline="152" endline="167" pcid="593">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'hist_') and
                self.clf.hist_ is not None)
        assert (hasattr(self.clf, 'bin_edges_') and
                self.clf.bin_edges_ is not None)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_pca.py" startline="41" endline="56" pcid="801">
    def test_parameters(self):
        assert (hasattr(self.clf, 'decision_scores_') and
                self.clf.decision_scores_ is not None)
        assert (hasattr(self.clf, 'labels_') and
                self.clf.labels_ is not None)
        assert (hasattr(self.clf, 'threshold_') and
                self.clf.threshold_ is not None)
        assert (hasattr(self.clf, '_mu') and
                self.clf._mu is not None)
        assert (hasattr(self.clf, '_sigma') and
                self.clf._sigma is not None)
        assert (hasattr(self.clf, 'selected_components_') and
                self.clf.selected_components_ is not None)
        assert (hasattr(self.clf, 'selected_w_components_') and
                self.clf.selected_w_components_ is not None)

</source>
</class>

<class classid="12" nclones="4" nlines="10" similarity="100">
<source file="systems/pyod-0.9.8/pyod/test/test_cblof.py" startline="28" endline="39" pcid="543">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = CBLOF(contamination=self.contamination, random_state=42)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_iforest.py" startline="31" endline="42" pcid="849">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = IForest(contamination=self.contamination, random_state=42)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_lmdd.py" startline="27" endline="38" pcid="832">
    def setUp(self):
        self.n_train = 100
        self.n_test = 50
        self.contamination = 0.1
        self.roc_floor = 0.6
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = LMDD(contamination=self.contamination, random_state=42)
        self.clf.fit(self.X_train)

</source>
<source file="systems/pyod-0.9.8/pyod/test/test_mcd.py" startline="28" endline="39" pcid="755">
    def setUp(self):
        self.n_train = 200
        self.n_test = 100
        self.contamination = 0.1
        self.roc_floor = 0.8
        self.X_train, self.y_train, self.X_test, self.y_test = generate_data(
            n_train=self.n_train, n_test=self.n_test,
            contamination=self.contamination, random_state=42)

        self.clf = MCD(contamination=self.contamination, random_state=42)
        self.clf.fit(self.X_train)

</source>
</class>

<class classid="13" nclones="2" nlines="20" similarity="100">
<source file="systems/pyod-0.9.8/examples/data/mat_file_conversion.py" startline="27" endline="52" pcid="922">
def read_arff(file_path, misplaced_list):
    misplaced = False
    for item in misplaced_list:
        if item in file_path:
            misplaced = True

    file = arff.load(open(file_path))
    data_value = np.asarray(file['data'])
    attributes = file['attributes']

    X = data_value[:, 0:-2]
    if not misplaced:
        y = data_value[:, -1]
    else:
        y = data_value[:, -2]
    y[y == 'no'] = 0
    y[y == 'yes'] = 1
    y = y.astype('float').astype('int').ravel()

    if y.sum() > len(y):
        print(attributes)
        raise ValueError('wrong sum')

    return X, y, attributes


</source>
<source file="systems/pyod-0.9.8/examples/data/mat_file_conversion.py" startline="94" endline="119" pcid="923">
def read_arff(file_path, misplaced_list):
    misplaced = False
    for item in misplaced_list:
        if item in file_path:
            misplaced = True

    file = arff.load(open(file_path))
    data_value = np.asarray(file['data'])
    attributes = file['attributes']

    X = data_value[:, 0:-2]
    if not misplaced:
        y = data_value[:, -1]
    else:
        y = data_value[:, -2]
    y[y == 'no'] = 0
    y[y == 'yes'] = 1
    y = y.astype('float').astype('int').ravel()

    if y.sum() > len(y):
        print(attributes)
        raise ValueError('wrong sum')

    return X, y, attributes


</source>
</class>

</clones>
