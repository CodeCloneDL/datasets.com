<clones>
<systeminfo processor="nicad6" system="imgaug-0.4.0" granularity="functions" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="5585" npairs="5"/>
<runinfo ncompares="102261" cputime="82954"/>
<classinfo nclasses="5"/>

<class classid="1" nclones="2" nlines="10" similarity="100">
<source file="systems/imgaug-0.4.0/imgaug/parameters.py" startline="2894" endline="2907" pcid="1045">
    def _draw_samples(self, size, random_state):
        assert len(size) in [2, 3], (
            "Expected requested noise to have shape (H, W) or (H, W, C), "
            "got shape %s." % (size,))
        height, width = size[0:2]
        nb_channels = 1 if len(size) == 2 else size[2]

        channels = [self._draw_samples_hw(height, width, random_state)
                    for _ in np.arange(nb_channels)]

        if len(size) == 2:
            return channels[0]
        return np.stack(channels, axis=-1)

</source>
<source file="systems/imgaug-0.4.0/imgaug/parameters.py" startline="3098" endline="3115" pcid="1051">
    def _draw_samples(self, size, random_state):
        # code here is similar to:
        #   http://www.redblobgames.com/articles/noise/2d/
        #   http://www.redblobgames.com/articles/noise/2d/2d-noise.js

        assert len(size) in [2, 3], (
            "Expected requested noise to have shape (H, W) or (H, W, C), "
            "got shape %s." % (size,))
        height, width = size[0:2]
        nb_channels = 1 if len(size) == 2 else size[2]

        channels = [self._draw_samples_hw(height, width, random_state)
                    for _ in np.arange(nb_channels)]

        if len(size) == 2:
            return channels[0]
        return np.stack(channels, axis=-1)

</source>
</class>

<class classid="2" nclones="2" nlines="17" similarity="100">
<source file="systems/imgaug-0.4.0/checks/check_multicore_pool.py" startline="354" endline="374" pcid="1185">
def draw_grid(images_aug, keypoints_aug):
    if keypoints_aug is None:
        keypoints_aug = []
        for bidx in range(len(images_aug)):
            keypoints_aug.append([None for image in images_aug[bidx]])

    images_kps_batches = []
    for bidx in range(len(images_aug)):
        images_kps_batch = []
        for image, kps in zip(images_aug[bidx], keypoints_aug[bidx]):
            if kps is None:
                image_kps = image
            else:
                image_kps = kps.draw_on_image(image, size=5, color=[255, 0, 0])
            images_kps_batch.append(image_kps)
        images_kps_batches.extend(images_kps_batch)

    grid = ia.draw_grid(images_kps_batches, cols=len(images_aug[0]))
    return grid


</source>
<source file="systems/imgaug-0.4.0/checks/check_background_augmentation.py" startline="284" endline="304" pcid="1217">
def draw_grid(images_aug, keypoints_aug):
    if keypoints_aug is None:
        keypoints_aug = []
        for bidx in range(len(images_aug)):
            keypoints_aug.append([None for image in images_aug[bidx]])

    images_kps_batches = []
    for bidx in range(len(images_aug)):
        images_kps_batch = []
        for image, kps in zip(images_aug[bidx], keypoints_aug[bidx]):
            if kps is None:
                image_kps = image
            else:
                image_kps = kps.draw_on_image(image, size=5, color=[255, 0, 0])
            images_kps_batch.append(image_kps)
        images_kps_batches.extend(images_kps_batch)

    grid = ia.draw_grid(images_kps_batches, cols=len(images_aug[0]))
    return grid


</source>
</class>

<class classid="3" nclones="2" nlines="17" similarity="100">
<source file="systems/imgaug-0.4.0/test/augmenters/test_blend.py" startline="973" endline="994" pcid="3228">

    def test_zero_sized_axes(self):
        shapes = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 1, 0),
            (1, 0, 0),
            (0, 1, 1),
            (1, 0, 1)
        ]

        for shape in shapes:
            with self.subTest(shape=shape):
                image = np.full(shape, 0, dtype=np.uint8)
                aug = iaa.BlendAlpha(1.0, iaa.Add(1), iaa.Add(100))

                image_aug = aug(image=image)

                assert np.all(image_aug == 1)
                assert image_aug.dtype.name == "uint8"
                assert image_aug.shape == shape
</source>
<source file="systems/imgaug-0.4.0/test/augmenters/test_blend.py" startline="1690" endline="1711" pcid="3316">

    def test_zero_sized_axes(self):
        shapes = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 1, 0),
            (1, 0, 0),
            (0, 1, 1),
            (1, 0, 1)
        ]

        for shape in shapes:
            with self.subTest(shape=shape):
                image = np.full(shape, 0, dtype=np.uint8)
                aug = iaa.BlendAlpha(1.0, iaa.Add(1), iaa.Add(100))

                image_aug = aug(image=image)

                assert np.all(image_aug == 1)
                assert image_aug.dtype.name == "uint8"
                assert image_aug.shape == shape
</source>
</class>

<class classid="4" nclones="2" nlines="14" similarity="100">
<source file="systems/imgaug-0.4.0/test/augmenters/test_blend.py" startline="995" endline="1013" pcid="3229">

    def test_unusual_channel_numbers(self):
        shapes = [
            (1, 1, 4),
            (1, 1, 5),
            (1, 1, 512),
            (1, 1, 513)
        ]

        for shape in shapes:
            with self.subTest(shape=shape):
                image = np.full(shape, 0, dtype=np.uint8)
                aug = iaa.BlendAlpha(1.0, iaa.Add(1), iaa.Add(100))

                image_aug = aug(image=image)

                assert np.all(image_aug == 1)
                assert image_aug.dtype.name == "uint8"
                assert image_aug.shape == shape
</source>
<source file="systems/imgaug-0.4.0/test/augmenters/test_blend.py" startline="1712" endline="1730" pcid="3317">

    def test_unusual_channel_numbers(self):
        shapes = [
            (1, 1, 4),
            (1, 1, 5),
            (1, 1, 512),
            (1, 1, 513)
        ]

        for shape in shapes:
            with self.subTest(shape=shape):
                image = np.full(shape, 0, dtype=np.uint8)
                aug = iaa.BlendAlpha(1.0, iaa.Add(1), iaa.Add(100))

                image_aug = aug(image=image)

                assert np.all(image_aug == 1)
                assert image_aug.dtype.name == "uint8"
                assert image_aug.shape == shape
</source>
</class>

<class classid="5" nclones="2" nlines="14" similarity="100">
<source file="systems/imgaug-0.4.0/test/augmenters/test_blend.py" startline="2988" endline="3004" pcid="3406">

    def test_batch_contains_no_images(self):
        hms = ia.HeatmapsOnImage(np.zeros((5, 5), dtype=np.float32),
                                 shape=(6, 8, 3))
        batch = _BatchInAugmentation(heatmaps=[hms])
        gen = iaa.CheckerboardMaskGen(nb_rows=3, nb_cols=2)
        mask = gen.draw_masks(batch, random_state=1)[0]

        expected = np.full((6, 8), 1.0, dtype=np.float32)
        expected[0:2, 0:4] = 1.0
        expected[0:2, 4:8] = 0.0
        expected[2:4, 0:4] = 0.0
        expected[2:4, 4:8] = 1.0
        expected[4:6, 0:4] = 1.0
        expected[4:6, 4:8] = 0.0
        assert np.allclose(mask, expected)

</source>
<source file="systems/imgaug-0.4.0/test/augmenters/test_blend.py" startline="3132" endline="3148" pcid="3417">

    def test_batch_contains_no_images(self):
        hms = ia.HeatmapsOnImage(np.zeros((5, 5), dtype=np.float32),
                                 shape=(6, 8, 3))
        batch = _BatchInAugmentation(heatmaps=[hms])
        gen = iaa.CheckerboardMaskGen(nb_rows=3, nb_cols=2)
        mask = gen.draw_masks(batch, random_state=1)[0]

        expected = np.full((6, 8), 1.0, dtype=np.float32)
        expected[0:2, 0:4] = 1.0
        expected[0:2, 4:8] = 0.0
        expected[2:4, 0:4] = 0.0
        expected[2:4, 4:8] = 1.0
        expected[4:6, 0:4] = 1.0
        expected[4:6, 4:8] = 0.0
        assert np.allclose(mask, expected)

</source>
</class>

</clones>
