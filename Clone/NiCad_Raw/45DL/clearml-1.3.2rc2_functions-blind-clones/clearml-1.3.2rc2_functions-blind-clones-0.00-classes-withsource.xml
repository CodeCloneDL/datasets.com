<clones>
<systeminfo processor="nicad6" system="clearml-1.3.2rc2" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="5797" npairs="936"/>
<runinfo ncompares="16727" cputime="98558"/>
<classinfo nclasses="39"/>

<class classid="1" nclones="2" nlines="11" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/debugging/trace.py" startline="91" endline="101" pcid="183">
        def _traced_call_int(*args, **kwargs):
            _log_stderr(name, fnc, args, kwargs, False)
            r = None
            try:
                ret = fnc(*args, **kwargs)
            except Exception as ex:
                r = ex
            _log_stderr(name, fnc, args, kwargs, True)
            if r:
                raise r
            return ret
</source>
<source file="systems/clearml-1.3.2rc2/clearml/debugging/trace.py" startline="106" endline="116" pcid="185">
    def _traced_call_int(*args, **kwargs):
        _log_stderr(name, fnc, args, kwargs, False)
        r = None
        try:
            ret = fnc(*args, **kwargs)
        except Exception as ex:
            r = ex
        _log_stderr(name, fnc, args, kwargs, True)
        if r:
            raise r
        return ret
</source>
</class>

<class classid="2" nclones="2" nlines="13" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="59" endline="72" pcid="414">
    def __init__(
        self,
        queue=None,
        dates=None,
        avg_waiting_times=None,
        queue_lengths=None,
        **kwargs
    ):
        super(QueueMetrics, self).__init__(**kwargs)
        self.queue = queue
        self.dates = dates
        self.avg_waiting_times = avg_waiting_times
        self.queue_lengths = queue_lengths

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="10712" endline="10725" pcid="2113">
    def __init__(
        self,
        reset=None,
        dequeued=None,
        deleted_models=None,
        urls=None,
        **kwargs
    ):
        super(ResetManyResponse, self).__init__(**kwargs)
        self.reset = reset
        self.dequeued = dequeued
        self.deleted_models = deleted_models
        self.urls = urls

</source>
</class>

<class classid="3" nclones="5" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="91" endline="103" pcid="418">
    def dates(self, value):
        if value is None:
            self._property_dates = None
            return

        self.assert_isinstance(value, "dates", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "dates", six.integer_types, is_array=True)
        self._property_dates = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="126" endline="139" pcid="422">
    def queue_lengths(self, value):
        if value is None:
            self._property_queue_lengths = None
            return

        self.assert_isinstance(value, "queue_lengths", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "queue_lengths", six.integer_types, is_array=True)
        self._property_queue_lengths = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="424" endline="437" pcid="1257">
    def counts(self, value):
        if value is None:
            self._property_counts = None
            return

        self.assert_isinstance(value, "counts", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "counts", six.integer_types, is_array=True)
        self._property_counts = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="406" endline="418" pcid="1255">
    def dates(self, value):
        if value is None:
            self._property_dates = None
            return

        self.assert_isinstance(value, "dates", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "dates", six.integer_types, is_array=True)
        self._property_dates = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="278" endline="290" pcid="1245">
    def dates(self, value):
        if value is None:
            self._property_dates = None
            return

        self.assert_isinstance(value, "dates", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(value, "dates", six.integer_types, is_array=True)
        self._property_dates = value

</source>
</class>

<class classid="4" nclones="2" nlines="23" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="333" endline="356" pcid="435">
    def __init__(
        self,
        id=None,
        name=None,
        user=None,
        company=None,
        created=None,
        tags=None,
        system_tags=None,
        entries=None,
        metadata=None,
        **kwargs
    ):
        super(Queue, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.user = user
        self.company = company
        self.created = created
        self.tags = tags
        self.system_tags = system_tags
        self.entries = entries
        self.metadata = metadata

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="1124" endline="1147" pcid="496">
    def __init__(
        self,
        name=None,
        id=None,
        tags=None,
        system_tags=None,
        page=None,
        page_size=None,
        order_by=None,
        search_text=None,
        only_fields=None,
        **kwargs
    ):
        super(GetAllRequest, self).__init__(**kwargs)
        self.name = name
        self.id = id
        self.tags = tags
        self.system_tags = system_tags
        self.page = page
        self.page_size = page_size
        self.order_by = order_by
        self.search_text = search_text
        self.only_fields = only_fields

</source>
</class>

<class classid="5" nclones="26" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="450" endline="460" pcid="451">
    def entries(self, value):
        if value is None:
            self._property_entries = None
            return
        self.assert_isinstance(value, "entries", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Entry.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "entries", Entry, is_array=True)
        self._property_entries = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="1693" endline="1705" pcid="1352">
    def workers(self, value):
        if value is None:
            self._property_workers = None
            return

        self.assert_isinstance(value, "workers", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Worker.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "workers", Worker, is_array=True)
        self._property_workers = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="1974" endline="1985" pcid="1369">
    def items(self, value):
        if value is None:
            self._property_items = None
            return

        self.assert_isinstance(value, "items", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [StatItem.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "items", StatItem, is_array=True)
        self._property_items = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="983" endline="995" pcid="1488">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="2413" endline="2424" pcid="1604">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="8376" endline="8388" pcid="1983">
    def tasks(self, value):
        if value is None:
            self._property_tasks = None
            return

        self.assert_isinstance(value, "tasks", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Task.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "tasks", Task, is_array=True)
        self._property_tasks = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/queues.py" startline="344" endline="356" pcid="2557">
    def entries(self, value):
        if value is None:
            self._property_entries = None
            return

        self.assert_isinstance(value, "entries", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Entry.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "entries", Entry, is_array=True)
        self._property_entries = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/queues.py" startline="1006" endline="1018" pcid="2605">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Queue.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "queues", Queue, is_array=True)
        self._property_queues = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/queues.py" startline="1487" endline="1499" pcid="2634">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [QueueMetrics.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "queues", QueueMetrics, is_array=True)
        self._property_queues = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/auth.py" startline="407" endline="419" pcid="2720">
    def credentials(self, value):
        if value is None:
            self._property_credentials = None
            return

        self.assert_isinstance(value, "credentials", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [CredentialKey.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "credentials", CredentialKey, is_array=True)
        self._property_credentials = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="1782" endline="1794" pcid="2884">
    def models(self, value):
        if value is None:
            self._property_models = None
            return

        self.assert_isinstance(value, "models", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Model.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "models", Model, is_array=True)
        self._property_models = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/projects.py" startline="1516" endline="1528" pcid="3092">
    def projects(self, value):
        if value is None:
            self._property_projects = None
            return

        self.assert_isinstance(value, "projects", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [ProjectsGetAllResponseSingle.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "projects", ProjectsGetAllResponseSingle, is_array=True)
        self._property_projects = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/projects.py" startline="2255" endline="2267" pcid="3142">
    def metrics(self, value):
        if value is None:
            self._property_metrics = None
            return

        self.assert_isinstance(value, "metrics", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [MetricVariantResult.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "metrics", MetricVariantResult, is_array=True)
        self._property_metrics = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="293" endline="305" pcid="3196">
    def stats(self, value):
        if value is None:
            self._property_stats = None
            return

        self.assert_isinstance(value, "stats", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [AggregationStats.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "stats", AggregationStats, is_array=True)
        self._property_stats = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="352" endline="364" pcid="3201">
    def metrics(self, value):
        if value is None:
            self._property_metrics = None
            return

        self.assert_isinstance(value, "metrics", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [MetricStats.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "metrics", MetricStats, is_array=True)
        self._property_metrics = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="689" endline="700" pcid="3229">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [QueueEntry.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "queues", QueueEntry, is_array=True)
        self._property_queues = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="1645" endline="1657" pcid="3301">
    def workers(self, value):
        if value is None:
            self._property_workers = None
            return

        self.assert_isinstance(value, "workers", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Worker.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "workers", Worker, is_array=True)
        self._property_workers = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="1752" endline="1764" pcid="3307">
    def categories(self, value):
        if value is None:
            self._property_categories = None
            return

        self.assert_isinstance(value, "categories", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [MetricsCategory.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "categories", MetricsCategory, is_array=True)
        self._property_categories = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="1916" endline="1927" pcid="3318">
    def items(self, value):
        if value is None:
            self._property_items = None
            return

        self.assert_isinstance(value, "items", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [StatItem.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "items", StatItem, is_array=True)
        self._property_items = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="2034" endline="2046" pcid="3323">
    def workers(self, value):
        if value is None:
            self._property_workers = None
            return

        self.assert_isinstance(value, "workers", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [WorkerStats.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "workers", WorkerStats, is_array=True)
        self._property_workers = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="796" endline="808" pcid="3426">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="1988" endline="2000" pcid="3525">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Artifact.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "artifacts", Artifact, is_array=True)
        self._property_artifacts = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="6236" endline="6248" pcid="3790">
    def tasks(self, value):
        if value is None:
            self._property_tasks = None
            return

        self.assert_isinstance(value, "tasks", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Task.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "tasks", Task, is_array=True)
        self._property_tasks = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="1156" endline="1167" pcid="4083">
    @metrics.setter
    def metrics(self, value):
        if value is None:
            self._property_metrics = None
            return

        self.assert_isinstance(value, "metrics", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [TaskMetric.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "metrics", TaskMetric, is_array=True)
        self._property_metrics = value
</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="2562" endline="2574" pcid="847">
    def models(self, value):
        if value is None:
            self._property_models = None
            return

        self.assert_isinstance(value, "models", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Model.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "models", Model, is_array=True)
        self._property_models = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="1387" endline="1399" pcid="517">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [Queue.from_dict(v) if isinstance(v, dict) else v for v in value]
        else:
            self.assert_isinstance(value, "queues", Queue, is_array=True)
        self._property_queues = value


</source>
</class>

<class classid="6" nclones="18" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="466" endline="479" pcid="453">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="546" endline="558" pcid="695">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="1129" endline="1142" pcid="740">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="1902" endline="1915" pcid="802">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/projects.py" startline="2945" endline="2960" pcid="1175">
    def metrics(self, value):
        if value is None:
            self._property_metrics = None
            return

        self.assert_isinstance(value, "metrics", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetricVariantResult.from_dict(v) if isinstance(v, dict) else v
                for v in value
            ]
        else:
            self.assert_isinstance(value, "metrics", MetricVariantResult, is_array=True)
        self._property_metrics = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="296" endline="311" pcid="1247">
    def stats(self, value):
        if value is None:
            self._property_stats = None
            return

        self.assert_isinstance(value, "stats", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                AggregationStats.from_dict(v) if isinstance(v, dict) else v
                for v in value
            ]
        else:
            self.assert_isinstance(value, "stats", AggregationStats, is_array=True)
        self._property_stats = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="355" endline="369" pcid="1252">
    def metrics(self, value):
        if value is None:
            self._property_metrics = None
            return

        self.assert_isinstance(value, "metrics", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetricStats.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metrics", MetricStats, is_array=True)
        self._property_metrics = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="711" endline="724" pcid="1280">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                QueueEntry.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "queues", QueueEntry, is_array=True)
        self._property_queues = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="1799" endline="1814" pcid="1358">
    def categories(self, value):
        if value is None:
            self._property_categories = None
            return

        self.assert_isinstance(value, "categories", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetricsCategory.from_dict(v) if isinstance(v, dict) else v
                for v in value
            ]
        else:
            self.assert_isinstance(value, "categories", MetricsCategory, is_array=True)
        self._property_categories = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="2092" endline="2106" pcid="1374">
    def workers(self, value):
        if value is None:
            self._property_workers = None
            return

        self.assert_isinstance(value, "workers", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                WorkerStats.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "workers", WorkerStats, is_array=True)
        self._property_workers = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="1885" endline="1899" pcid="546">
    def queues(self, value):
        if value is None:
            self._property_queues = None
            return

        self.assert_isinstance(value, "queues", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                QueueMetrics.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "queues", QueueMetrics, is_array=True)
        self._property_queues = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/auth.py" startline="417" endline="430" pcid="632">
    def credentials(self, value):
        if value is None:
            self._property_credentials = None
            return

        self.assert_isinstance(value, "credentials", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                CredentialKey.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "credentials", CredentialKey, is_array=True)
        self._property_credentials = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="808" endline="821" pcid="1473">
    def input(self, value):
        if value is None:
            self._property_input = None
            return

        self.assert_isinstance(value, "input", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                TaskModelItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "input", TaskModelItem, is_array=True)
        self._property_input = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="827" endline="841" pcid="1475">
    def output(self, value):
        if value is None:
            self._property_output = None
            return

        self.assert_isinstance(value, "output", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                TaskModelItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "output", TaskModelItem, is_array=True)
        self._property_output = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4892" endline="4905" pcid="1772">
    def artifacts(self, value):
        if value is None:
            self._property_artifacts = None
            return

        self.assert_isinstance(value, "artifacts", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                ArtifactId.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "artifacts", ArtifactId, is_array=True)
        self._property_artifacts = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="1255" endline="1268" pcid="2341">
    def metrics(self, value):
        if value is None:
            self._property_metrics = None
            return

        self.assert_isinstance(value, "metrics", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                TaskMetric.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metrics", TaskMetric, is_array=True)
        self._property_metrics = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/queues.py" startline="546" endline="559" pcid="458">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="641" endline="654" pcid="702">
    def metadata(self, value):
        if value is None:
            self._property_metadata = None
            return
        self.assert_isinstance(value, "metadata", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                MetadataItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(value, "metadata", MetadataItem, is_array=True)
        self._property_metadata = value


</source>
</class>

<class classid="7" nclones="2" nlines="33" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="917" endline="950" pcid="712">
    def __init__(
        self,
        uri,
        name,
        comment=None,
        tags=None,
        system_tags=None,
        framework=None,
        design=None,
        labels=None,
        ready=False,
        public=False,
        project=None,
        parent=None,
        task=None,
        metadata=None,
        **kwargs
    ):
        super(CreateRequest, self).__init__(**kwargs)
        self.uri = uri
        self.name = name
        self.comment = comment
        self.tags = tags
        self.system_tags = system_tags
        self.framework = framework
        self.design = design
        self.labels = labels
        self.ready = ready
        self.public = public
        self.project = project
        self.parent = parent
        self.task = task
        self.metadata = metadata

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="12241" endline="12274" pcid="2213">
    def __init__(
        self,
        name,
        type,
        tags=None,
        system_tags=None,
        comment=None,
        parent=None,
        project=None,
        output_dest=None,
        execution=None,
        script=None,
        hyperparams=None,
        configuration=None,
        models=None,
        container=None,
        **kwargs
    ):
        super(ValidateRequest, self).__init__(**kwargs)
        self.name = name
        self.tags = tags
        self.system_tags = system_tags
        self.type = type
        self.comment = comment
        self.parent = parent
        self.project = project
        self.output_dest = output_dest
        self.execution = execution
        self.script = script
        self.hyperparams = hyperparams
        self.configuration = configuration
        self.models = models
        self.container = container

</source>
</class>

<class classid="8" nclones="2" nlines="21" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/models.py" startline="3967" endline="3988" pcid="933">
    def __init__(
        self,
        task,
        uri=None,
        name=None,
        comment=None,
        tags=None,
        system_tags=None,
        override_model_id=None,
        iteration=None,
        **kwargs
    ):
        super(UpdateForTaskRequest, self).__init__(**kwargs)
        self.task = task
        self.uri = uri
        self.name = name
        self.comment = comment
        self.tags = tags
        self.system_tags = system_tags
        self.override_model_id = override_model_id
        self.iteration = iteration

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="11654" endline="11675" pcid="2188">
    def __init__(
        self,
        task,
        name=None,
        tags=None,
        system_tags=None,
        comment=None,
        project=None,
        output__error=None,
        created=None,
        **kwargs
    ):
        super(UpdateRequest, self).__init__(**kwargs)
        self.task = task
        self.name = name
        self.tags = tags
        self.system_tags = system_tags
        self.comment = comment
        self.project = project
        self.output__error = output__error
        self.created = created

</source>
</class>

<class classid="9" nclones="8" nlines="15" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/projects.py" startline="928" endline="943" pcid="1034">
    def __init__(
        self,
        name,
        description=None,
        tags=None,
        system_tags=None,
        default_output_destination=None,
        **kwargs
    ):
        super(CreateRequest, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.tags = tags
        self.system_tags = system_tags
        self.default_output_destination = default_output_destination

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="1234" endline="1249" pcid="2339">
    def __init__(
        self,
        metrics,
        iters=None,
        navigate_earlier=None,
        refresh=None,
        scroll_id=None,
        **kwargs
    ):
        super(DebugImagesRequest, self).__init__(**kwargs)
        self.metrics = metrics
        self.iters = iters
        self.navigate_earlier = navigate_earlier
        self.refresh = refresh
        self.scroll_id = scroll_id

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="5295" endline="5310" pcid="1798">
    def __init__(
        self,
        ids,
        move_to_trash=False,
        force=False,
        return_file_urls=None,
        delete_output_models=None,
        **kwargs
    ):
        super(DeleteManyRequest, self).__init__(**kwargs)
        self.ids = ids
        self.move_to_trash = move_to_trash
        self.force = force
        self.return_file_urls = return_file_urls
        self.delete_output_models = delete_output_models

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="10552" endline="10567" pcid="2102">
    def __init__(
        self,
        ids,
        force=False,
        clear_all=False,
        return_file_urls=None,
        delete_output_models=None,
        **kwargs
    ):
        super(ResetManyRequest, self).__init__(**kwargs)
        self.ids = ids
        self.force = force
        self.clear_all = clear_all
        self.return_file_urls = return_file_urls
        self.delete_output_models = delete_output_models

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="9958" endline="9973" pcid="2056">
    def __init__(
        self,
        ids,
        status_reason=None,
        status_message=None,
        force=False,
        publish_model=None,
        **kwargs
    ):
        super(PublishManyRequest, self).__init__(**kwargs)
        self.ids = ids
        self.status_reason = status_reason
        self.status_message = status_message
        self.force = force
        self.publish_model = publish_model

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="2243" endline="2258" pcid="2419">
    def __init__(
        self,
        task,
        order=None,
        scroll_id=None,
        batch_size=None,
        event_type=None,
        **kwargs
    ):
        super(GetTaskEventsRequest, self).__init__(**kwargs)
        self.task = task
        self.order = order
        self.scroll_id = scroll_id
        self.batch_size = batch_size
        self.event_type = event_type

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="9759" endline="9774" pcid="2040">
    def __init__(
        self,
        task,
        force=False,
        publish_model=None,
        status_reason=None,
        status_message=None,
        **kwargs
    ):
        super(PublishRequest, self).__init__(**kwargs)
        self.force = force
        self.publish_model = publish_model
        self.task = task
        self.status_reason = status_reason
        self.status_message = status_message

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="2591" endline="2606" pcid="2445">
    def __init__(
        self,
        task,
        batch_size=None,
        navigate_earlier=None,
        from_timestamp=None,
        order=None,
        **kwargs
    ):
        super(GetTaskLogRequest, self).__init__(**kwargs)
        self.task = task
        self.batch_size = batch_size
        self.navigate_earlier = navigate_earlier
        self.from_timestamp = from_timestamp
        self.order = order

</source>
</class>

<class classid="10" nclones="3" nlines="15" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/projects.py" startline="1198" endline="1213" pcid="1055">
    def __init__(
        self,
        deleted=None,
        disassociated_tasks=None,
        urls=None,
        deleted_models=None,
        deleted_tasks=None,
        **kwargs
    ):
        super(DeleteResponse, self).__init__(**kwargs)
        self.deleted = deleted
        self.disassociated_tasks = disassociated_tasks
        self.urls = urls
        self.deleted_models = deleted_models
        self.deleted_tasks = deleted_tasks

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="1054" endline="1069" pcid="1489">
    def __init__(
        self,
        metric=None,
        variant=None,
        value=None,
        min_value=None,
        max_value=None,
        **kwargs
    ):
        super(LastMetricsEvent, self).__init__(**kwargs)
        self.metric = metric
        self.variant = variant
        self.value = value
        self.min_value = min_value
        self.max_value = max_value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="5461" endline="5476" pcid="1809">
    def __init__(
        self,
        deleted=None,
        updated_children=None,
        updated_models=None,
        deleted_models=None,
        urls=None,
        **kwargs
    ):
        super(DeleteManyResponse, self).__init__(**kwargs)
        self.deleted = deleted
        self.updated_children = updated_children
        self.updated_models = updated_models
        self.deleted_models = deleted_models
        self.urls = urls

</source>
</class>

<class classid="11" nclones="2" nlines="13" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/projects.py" startline="1810" endline="1827" pcid="1095">
    def projects(self, value):
        if value is None:
            self._property_projects = None
            return

        self.assert_isinstance(value, "projects", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                ProjectsGetAllResponseSingle.from_dict(v) if isinstance(v, dict) else v
                for v in value
            ]
        else:
            self.assert_isinstance(
                value, "projects", ProjectsGetAllResponseSingle, is_array=True
            )
        self._property_projects = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="3394" endline="3409" pcid="1670">
    def new_task_input_models(self, value):
        if value is None:
            self._property_new_task_input_models = None
            return

        self.assert_isinstance(value, "new_task_input_models", (list, tuple))
        if any(isinstance(v, dict) for v in value):
            value = [
                TaskModelItem.from_dict(v) if isinstance(v, dict) else v for v in value
            ]
        else:
            self.assert_isinstance(
                value, "new_task_input_models", TaskModelItem, is_array=True
            )
        self._property_new_task_input_models = value

</source>
</class>

<class classid="12" nclones="3" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/projects.py" startline="3411" endline="3428" pcid="1206">
    def __init__(
        self,
        project,
        name=None,
        description=None,
        tags=None,
        system_tags=None,
        default_output_destination=None,
        **kwargs
    ):
        super(UpdateRequest, self).__init__(**kwargs)
        self.project = project
        self.name = name
        self.description = description
        self.tags = tags
        self.system_tags = system_tags
        self.default_output_destination = default_output_destination

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="217" endline="234" pcid="2266">
    def __init__(
        self,
        task,
        timestamp=None,
        iter=None,
        metric=None,
        variant=None,
        values=None,
        **kwargs
    ):
        super(MetricsVectorEvent, self).__init__(**kwargs)
        self.timestamp = timestamp
        self.task = task
        self.iter = iter
        self.metric = metric
        self.variant = variant
        self.values = values

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="65" endline="82" pcid="2252">
    def __init__(
        self,
        task,
        timestamp=None,
        iter=None,
        metric=None,
        variant=None,
        value=None,
        **kwargs
    ):
        super(MetricsScalarEvent, self).__init__(**kwargs)
        self.timestamp = timestamp
        self.task = task
        self.iter = iter
        self.metric = metric
        self.variant = variant
        self.value = value

</source>
</class>

<class classid="13" nclones="27" nlines="12" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="124" endline="137" pcid="1233">
    def category(self, value):
        if value is None:
            self._property_category = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "category", enum.Enum)
        self._property_category = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="171" endline="183" pcid="3185">
    def aggregation(self, value):
        if value is None:
            self._property_aggregation = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "aggregation", enum.Enum)
        self._property_aggregation = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="4913" endline="4926" pcid="3719">
    def replace_hyperparams(self, value):
        if value is None:
            self._property_replace_hyperparams = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ReplaceHyperparamsEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "replace_hyperparams", enum.Enum)
        self._property_replace_hyperparams = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="1527" endline="1539" pcid="3474">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="9154" endline="9166" pcid="3969">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="170" endline="182" pcid="1236">
    def aggregation(self, value):
        if value is None:
            self._property_aggregation = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "aggregation", enum.Enum)
        self._property_aggregation = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="3459" endline="3472" pcid="2513">
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="3234" endline="3247" pcid="2499">
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="1545" endline="1557" pcid="3476">
    def status(self, value):
        if value is None:
            self._property_status = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskStatusEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "status", enum.Enum)
        self._property_status = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="617" endline="629" pcid="1453">
    def mode(self, value):
        if value is None:
            self._property_mode = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ArtifactModeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "mode", enum.Enum)
        self._property_mode = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="2827" endline="2840" pcid="2467">
    def event_type(self, value):
        if value is None:
            self._property_event_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = EventTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "event_type", enum.Enum)
        self._property_event_type = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="3208" endline="3220" pcid="3593">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="4462" endline="4474" pcid="3681">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="3033" endline="3046" pcid="4235">
    @key.setter
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="760" endline="773" pcid="1470">
    def mode(self, value):
        if value is None:
            self._property_mode = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ArtifactModeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "mode", enum.Enum)
        self._property_mode = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="1783" endline="1795" pcid="1536">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="822" endline="834" pcid="2324">
    def level(self, value):
        if value is None:
            self._property_level = None
            return
        if isinstance(value, six.string_types):
            try:
                value = LogLevelEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "level", enum.Enum)
        self._property_level = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="12323" endline="12335" pcid="2221">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="2930" endline="2943" pcid="4228">
    @key.setter
    def key(self, value):
        if value is None:
            self._property_key = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ScalarKeyEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "key", enum.Enum)
        self._property_key = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="1801" endline="1813" pcid="1538">
    def status(self, value):
        if value is None:
            self._property_status = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskStatusEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "status", enum.Enum)
        self._property_status = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="2574" endline="2586" pcid="1618">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ModelTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4241" endline="4253" pcid="1714">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="122" endline="135" pcid="3182">
    def category(self, value):
        if value is None:
            self._property_category = None
            return
        if isinstance(value, six.string_types):
            try:
                value = AggregationType(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "category", enum.Enum)
        self._property_category = value


</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="2520" endline="2533" pcid="4196">
    @event_type.setter
    def event_type(self, value):
        if value is None:
            self._property_event_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = EventTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "event_type", enum.Enum)
        self._property_event_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6302" endline="6314" pcid="1854">
    def type(self, value):
        if value is None:
            self._property_type = None
            return
        if isinstance(value, six.string_types):
            try:
                value = TaskTypeEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "type", enum.Enum)
        self._property_type = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6845" endline="6857" pcid="1900">
    def replace_hyperparams(self, value):
        if value is None:
            self._property_replace_hyperparams = None
            return
        if isinstance(value, six.string_types):
            try:
                value = ReplaceHyperparamsEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "replace_hyperparams", enum.Enum)
        self._property_replace_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/events.py" startline="748" endline="760" pcid="4066">
    @level.setter
    def level(self, value):
        if value is None:
            self._property_level = None
            return
        if isinstance(value, six.string_types):
            try:
                value = LogLevelEnum(value)
            except ValueError:
                pass
        else:
            self.assert_isinstance(value, "level", enum.Enum)
        self._property_level = value
</source>
</class>

<class classid="14" nclones="2" nlines="11" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="1178" endline="1192" pcid="1316">
    def gpu_memory_free(self, value):
        if value is None:
            self._property_gpu_memory_free = None
            return

        self.assert_isinstance(value, "gpu_memory_free", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(
            value, "gpu_memory_free", six.integer_types, is_array=True
        )
        self._property_gpu_memory_free = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/workers.py" startline="1198" endline="1212" pcid="1318">
    def gpu_memory_used(self, value):
        if value is None:
            self._property_gpu_memory_used = None
            return

        self.assert_isinstance(value, "gpu_memory_used", (list, tuple))
        value = [
            int(v) if isinstance(v, float) and v.is_integer() else v for v in value
        ]

        self.assert_isinstance(
            value, "gpu_memory_used", six.integer_types, is_array=True
        )
        self._property_gpu_memory_used = value

</source>
</class>

<class classid="15" nclones="2" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="895" endline="912" pcid="1476">
    def __init__(
        self,
        queue=None,
        parameters=None,
        model_desc=None,
        model_labels=None,
        framework=None,
        artifacts=None,
        **kwargs
    ):
        super(Execution, self).__init__(**kwargs)
        self.queue = queue
        self.parameters = parameters
        self.model_desc = model_desc
        self.model_labels = model_labels
        self.framework = framework
        self.artifacts = artifacts

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4714" endline="4731" pcid="1755">
    def __init__(
        self,
        deleted=None,
        updated_children=None,
        updated_models=None,
        frames=None,
        events=None,
        urls=None,
        **kwargs
    ):
        super(DeleteResponse, self).__init__(**kwargs)
        self.deleted = deleted
        self.updated_children = updated_children
        self.updated_models = updated_models
        self.frames = frames
        self.events = events
        self.urls = urls

</source>
</class>

<class classid="16" nclones="4" nlines="13" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="2164" endline="2182" pcid="1588">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6387" endline="6405" pcid="1866">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="12408" endline="12426" pcid="2233">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4349" endline="4367" pcid="1730">
    def hyperparams(self, value):
        if value is None:
            self._property_hyperparams = None
            return

        self.assert_isinstance(value, "hyperparams", dict)
        self.assert_isinstance(
            value.keys(), "hyperparams_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(), "hyperparams_values", (SectionParams, dict), is_array=True
        )
        value = dict(
            (k, SectionParams(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_hyperparams = value

</source>
</class>

<class classid="17" nclones="5" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="2188" endline="2210" pcid="1590">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="5021" endline="5043" pcid="1782">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="6411" endline="6433" pcid="1868">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="12432" endline="12454" pcid="2235">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4373" endline="4395" pcid="1732">
    def configuration(self, value):
        if value is None:
            self._property_configuration = None
            return

        self.assert_isinstance(value, "configuration", dict)
        self.assert_isinstance(
            value.keys(), "configuration_keys", six.string_types, is_array=True
        )
        self.assert_isinstance(
            value.values(),
            "configuration_values",
            (ConfigurationItem, dict),
            is_array=True,
        )

        value = dict(
            (k, ConfigurationItem(**v) if isinstance(v, dict) else v)
            for k, v in value.items()
        )

        self._property_configuration = value

</source>
</class>

<class classid="18" nclones="4" nlines="19" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="4527" endline="4546" pcid="1740">
    def __init__(
        self,
        task,
        move_to_trash=False,
        force=False,
        status_reason=None,
        status_message=None,
        return_file_urls=None,
        delete_output_models=None,
        **kwargs
    ):
        super(DeleteRequest, self).__init__(**kwargs)
        self.move_to_trash = move_to_trash
        self.force = force
        self.task = task
        self.status_reason = status_reason
        self.status_message = status_message
        self.return_file_urls = return_file_urls
        self.delete_output_models = delete_output_models

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/tasks.py" startline="10160" endline="10179" pcid="2070">
    def __init__(
        self,
        task,
        force=False,
        clear_all=False,
        status_reason=None,
        status_message=None,
        return_file_urls=None,
        delete_output_models=None,
        **kwargs
    ):
        super(ResetRequest, self).__init__(**kwargs)
        self.force = force
        self.clear_all = clear_all
        self.task = task
        self.status_reason = status_reason
        self.status_message = status_message
        self.return_file_urls = return_file_urls
        self.delete_output_models = delete_output_models

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="369" endline="388" pcid="2280">
    def __init__(
        self,
        task,
        timestamp=None,
        iter=None,
        metric=None,
        variant=None,
        key=None,
        url=None,
        **kwargs
    ):
        super(MetricsImageEvent, self).__init__(**kwargs)
        self.timestamp = timestamp
        self.task = task
        self.iter = iter
        self.metric = metric
        self.variant = variant
        self.key = key
        self.url = url

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_13/events.py" startline="541" endline="560" pcid="2296">
    def __init__(
        self,
        task,
        timestamp=None,
        iter=None,
        metric=None,
        variant=None,
        plot_str=None,
        skip_validation=None,
        **kwargs
    ):
        super(MetricsPlotEvent, self).__init__(**kwargs)
        self.timestamp = timestamp
        self.task = task
        self.iter = iter
        self.metric = metric
        self.variant = variant
        self.plot_str = plot_str
        self.skip_validation = skip_validation

</source>
</class>

<class classid="19" nclones="2" nlines="11" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/queues.py" startline="230" endline="241" pcid="2541">
    def __init__(
            self, id=None, name=None, user=None, company=None, created=None, tags=None, system_tags=None, entries=None, **kwargs):
        super(Queue, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.user = user
        self.company = company
        self.created = created
        self.tags = tags
        self.system_tags = system_tags
        self.entries = entries

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="688" endline="699" pcid="3410">
    def __init__(
            self, queue=None, parameters=None, model=None, model_desc=None, model_labels=None, framework=None, docker_cmd=None, artifacts=None, **kwargs):
        super(Execution, self).__init__(**kwargs)
        self.queue = queue
        self.parameters = parameters
        self.model = model
        self.model_desc = model_desc
        self.model_labels = model_labels
        self.framework = framework
        self.docker_cmd = docker_cmd
        self.artifacts = artifacts

</source>
</class>

<class classid="20" nclones="3" nlines="20" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="180" endline="200" pcid="2738">
    def __init__(
            self, id=None, name=None, user=None, company=None, created=None, task=None, parent=None, project=None, comment=None, tags=None, system_tags=None, framework=None, design=None, labels=None, uri=None, ready=None, ui_cache=None, **kwargs):
        super(Model, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.user = user
        self.company = company
        self.created = created
        self.task = task
        self.parent = parent
        self.project = project
        self.comment = comment
        self.tags = tags
        self.system_tags = system_tags
        self.framework = framework
        self.design = design
        self.labels = labels
        self.uri = uri
        self.ready = ready
        self.ui_cache = ui_cache

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="1401" endline="1421" pcid="2847">
    def __init__(
            self, name=None, user=None, ready=None, tags=None, system_tags=None, only_fields=None, page=None, page_size=None, project=None, order_by=None, task=None, id=None, search_text=None, framework=None, uri=None, _all_=None, _any_=None, **kwargs):
        super(GetAllRequest, self).__init__(**kwargs)
        self.name = name
        self.user = user
        self.ready = ready
        self.tags = tags
        self.system_tags = system_tags
        self.only_fields = only_fields
        self.page = page
        self.page_size = page_size
        self.project = project
        self.order_by = order_by
        self.task = task
        self.id = id
        self.search_text = search_text
        self.framework = framework
        self.uri = uri
        self._all_ = _all_
        self._any_ = _any_

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="5508" endline="5528" pcid="3753">
    def __init__(
            self, id=None, name=None, user=None, project=None, page=None, page_size=None, order_by=None, type=None, tags=None, system_tags=None, status=None, only_fields=None, parent=None, status_changed=None, search_text=None, _all_=None, _any_=None, **kwargs):
        super(GetAllRequest, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.user = user
        self.project = project
        self.page = page
        self.page_size = page_size
        self.order_by = order_by
        self.type = type
        self.tags = tags
        self.system_tags = system_tags
        self.status = status
        self.only_fields = only_fields
        self.parent = parent
        self.status_changed = status_changed
        self.search_text = search_text
        self._all_ = _all_
        self._any_ = _any_

</source>
</class>

<class classid="21" nclones="2" nlines="16" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="522" endline="538" pcid="2773">
    def __init__(
            self, uri, name, comment=None, tags=None, system_tags=None, framework=None, design=None, labels=None, ready=False, public=False, project=None, parent=None, task=None, **kwargs):
        super(CreateRequest, self).__init__(**kwargs)
        self.uri = uri
        self.name = name
        self.comment = comment
        self.tags = tags
        self.system_tags = system_tags
        self.framework = framework
        self.design = design
        self.labels = labels
        self.ready = ready
        self.public = public
        self.project = project
        self.parent = parent
        self.task = task

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="3143" endline="3159" pcid="3585">
    def __init__(
            self, name, type, tags=None, system_tags=None, comment=None, parent=None, input=None, project=None, output_dest=None, execution=None, script=None, hyperparams=None, configuration=None, **kwargs):
        super(CreateRequest, self).__init__(**kwargs)
        self.name = name
        self.tags = tags
        self.system_tags = system_tags
        self.type = type
        self.comment = comment
        self.parent = parent
        self.project = project
        self.input = input
        self.output_dest = output_dest
        self.execution = execution
        self.script = script
        self.hyperparams = hyperparams
        self.configuration = configuration

</source>
</class>

<class classid="22" nclones="2" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="965" endline="982" pcid="2813">
    def __init__(
            self, model, uri=None, name=None, comment=None, tags=None, system_tags=None, framework=None, design=None, labels=None, ready=None, project=None, parent=None, task=None, iteration=None, **kwargs):
        super(EditRequest, self).__init__(**kwargs)
        self.model = model
        self.uri = uri
        self.name = name
        self.comment = comment
        self.tags = tags
        self.system_tags = system_tags
        self.framework = framework
        self.design = design
        self.labels = labels
        self.ready = ready
        self.project = project
        self.parent = parent
        self.task = task
        self.iteration = iteration

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="4370" endline="4387" pcid="3669">
    def __init__(
            self, task, force=False, name=None, tags=None, system_tags=None, type=None, comment=None, parent=None, project=None, output_dest=None, execution=None, hyperparams=None, configuration=None, script=None, **kwargs):
        super(EditRequest, self).__init__(**kwargs)
        self.task = task
        self.force = force
        self.name = name
        self.tags = tags
        self.system_tags = system_tags
        self.type = type
        self.comment = comment
        self.parent = parent
        self.project = project
        self.output_dest = output_dest
        self.execution = execution
        self.hyperparams = hyperparams
        self.configuration = configuration
        self.script = script

</source>
</class>

<class classid="23" nclones="2" nlines="14" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="2541" endline="2555" pcid="2921">
    def __init__(
            self, model, name=None, comment=None, tags=None, system_tags=None, ready=False, created=None, ui_cache=None, project=None, task=None, iteration=None, **kwargs):
        super(UpdateRequest, self).__init__(**kwargs)
        self.model = model
        self.name = name
        self.comment = comment
        self.tags = tags
        self.system_tags = system_tags
        self.ready = ready
        self.created = created
        self.ui_cache = ui_cache
        self.project = project
        self.task = task
        self.iteration = iteration

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="2307" endline="2321" pcid="3531">
    def __init__(
            self, task, new_task_name=None, new_task_comment=None, new_task_tags=None, new_task_system_tags=None, new_task_parent=None, new_task_project=None, new_task_hyperparams=None, new_task_configuration=None, execution_overrides=None, validate_references=None, **kwargs):
        super(CloneRequest, self).__init__(**kwargs)
        self.task = task
        self.new_task_name = new_task_name
        self.new_task_comment = new_task_comment
        self.new_task_tags = new_task_tags
        self.new_task_system_tags = new_task_system_tags
        self.new_task_parent = new_task_parent
        self.new_task_project = new_task_project
        self.new_task_hyperparams = new_task_hyperparams
        self.new_task_configuration = new_task_configuration
        self.execution_overrides = execution_overrides
        self.validate_references = validate_references

</source>
</class>

<class classid="24" nclones="2" nlines="11" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/models.py" startline="2837" endline="2848" pcid="2949">
    def __init__(
            self, task, uri=None, name=None, comment=None, tags=None, system_tags=None, override_model_id=None, iteration=None, **kwargs):
        super(UpdateForTaskRequest, self).__init__(**kwargs)
        self.task = task
        self.uri = uri
        self.name = name
        self.comment = comment
        self.tags = tags
        self.system_tags = system_tags
        self.override_model_id = override_model_id
        self.iteration = iteration

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/tasks.py" startline="8541" endline="8552" pcid="3936">
    def __init__(
            self, task, name=None, tags=None, system_tags=None, comment=None, project=None, output__error=None, created=None, **kwargs):
        super(UpdateRequest, self).__init__(**kwargs)
        self.task = task
        self.name = name
        self.tags = tags
        self.system_tags = system_tags
        self.comment = comment
        self.project = project
        self.output__error = output__error
        self.created = created

</source>
</class>

<class classid="25" nclones="2" nlines="13" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/projects.py" startline="138" endline="151" pcid="2980">
    def __init__(
            self, id=None, name=None, description=None, user=None, company=None, created=None, tags=None, system_tags=None, default_output_destination=None, last_update=None, **kwargs):
        super(Project, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.user = user
        self.company = company
        self.created = created
        self.tags = tags
        self.system_tags = system_tags
        self.default_output_destination = default_output_destination
        self.last_update = last_update

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/projects.py" startline="510" endline="523" pcid="3011">
    def __init__(
            self, id=None, name=None, description=None, user=None, company=None, created=None, tags=None, system_tags=None, default_output_destination=None, stats=None, **kwargs):
        super(ProjectsGetAllResponseSingle, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.user = user
        self.company = company
        self.created = created
        self.tags = tags
        self.system_tags = system_tags
        self.default_output_destination = default_output_destination
        self.stats = stats

</source>
</class>

<class classid="26" nclones="2" nlines="15" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/projects.py" startline="1175" endline="1190" pcid="3065">
    def __init__(
            self, id=None, name=None, description=None, tags=None, system_tags=None, order_by=None, page=None, page_size=None, search_text=None, only_fields=None, _all_=None, _any_=None, **kwargs):
        super(GetAllRequest, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.tags = tags
        self.system_tags = system_tags
        self.order_by = order_by
        self.page = page
        self.page_size = page_size
        self.search_text = search_text
        self.only_fields = only_fields
        self._all_ = _all_
        self._any_ = _any_

</source>
<source file="systems/clearml-1.3.2rc2/clearml/backend_api/services/v2_9/workers.py" startline="522" endline="537" pcid="3207">
    def __init__(
            self, id=None, user=None, company=None, ip=None, register_time=None, last_activity_time=None, last_report_time=None, task=None, project=None, queue=None, queues=None, tags=None, **kwargs):
        super(Worker, self).__init__(**kwargs)
        self.id = id
        self.user = user
        self.company = company
        self.ip = ip
        self.register_time = register_time
        self.last_activity_time = last_activity_time
        self.last_report_time = last_report_time
        self.task = task
        self.project = project
        self.queue = queue
        self.queues = queues
        self.tags = tags

</source>
</class>

<class classid="27" nclones="2" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/binding/args.py" startline="38" endline="61" pcid="4569">
    def parse_args(self, args=None, namespace=None):
        if PatchArgumentParser._recursion_guard:
            return (
                {}
                if not PatchArgumentParser._original_parse_args
                else PatchArgumentParser._original_parse_args(self, args=args, namespace=namespace)
            )

        PatchArgumentParser._recursion_guard = True
        try:
            result = PatchArgumentParser._patched_parse_args(
                PatchArgumentParser._original_parse_args, self, args=args, namespace=namespace
            )
        except Exception as e:
            result = (
                {}
                if not PatchArgumentParser._original_parse_args
                else PatchArgumentParser._original_parse_args(self, args=args, namespace=namespace)
            )
            warnings.warn("Failed patching argparse arguments: %s" % e)
        finally:
            PatchArgumentParser._recursion_guard = False
        return result

</source>
<source file="systems/clearml-1.3.2rc2/clearml/binding/args.py" startline="63" endline="86" pcid="4570">
    def parse_known_args(self, args=None, namespace=None):
        if PatchArgumentParser._recursion_guard:
            return (
                {}
                if not PatchArgumentParser._original_parse_args
                else PatchArgumentParser._original_parse_known_args(self, args=args, namespace=namespace)
            )

        PatchArgumentParser._recursion_guard = True
        try:
            result = PatchArgumentParser._patched_parse_args(
                PatchArgumentParser._original_parse_known_args, self, args=args, namespace=namespace
            )
        except Exception as e:
            result = (
                {}
                if not PatchArgumentParser._original_parse_args
                else PatchArgumentParser._original_parse_known_args(self, args=args, namespace=namespace)
            )
            warnings.warn("Failed patching argparse arguments: %s" % e)
        finally:
            PatchArgumentParser._recursion_guard = False
        return result

</source>
</class>

<class classid="28" nclones="2" nlines="21" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/binding/frameworks/xgboost_bind.py" startline="56" endline="82" pcid="4632">
    def _save(original_fn, obj, f, *args, **kwargs):
        ret = original_fn(obj, f, *args, **kwargs)
        if not PatchXGBoostModelIO.__main_task:
            return ret

        if isinstance(f, six.string_types):
            filename = f
        elif hasattr(f, 'name'):
            filename = f.name
            # noinspection PyBroadException
            try:
                f.flush()
            except Exception:
                pass
        else:
            filename = None

        # give the model a descriptive name based on the file name
        # noinspection PyBroadException
        try:
            model_name = Path(filename).stem
        except Exception:
            model_name = None
        WeightsFileHandler.create_output_model(obj, filename, Framework.xgboost, PatchXGBoostModelIO.__main_task,
                                               singlefile=True, model_name=model_name)
        return ret

</source>
<source file="systems/clearml-1.3.2rc2/clearml/binding/frameworks/lightgbm_bind.py" startline="44" endline="70" pcid="4656">
    def _save(original_fn, obj, f, *args, **kwargs):
        ret = original_fn(obj, f, *args, **kwargs)
        if not PatchLIGHTgbmModelIO.__main_task:
            return ret

        if isinstance(f, six.string_types):
            filename = f
        elif hasattr(f, 'name'):
            filename = f.name
            # noinspection PyBroadException
            try:
                f.flush()
            except Exception:
                pass
        else:
            filename = None

        # give the model a descriptive name based on the file name
        # noinspection PyBroadException
        try:
            model_name = Path(filename).stem
        except Exception:
            model_name = None
        WeightsFileHandler.create_output_model(obj, filename, Framework.lightgbm, PatchLIGHTgbmModelIO.__main_task,
                                               singlefile=True, model_name=model_name)
        return ret

</source>
</class>

<class classid="29" nclones="4" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="1889" endline="1917" pcid="4984">
def nvmlDeviceGetSupportedMemoryClocks(handle):
    # first call to get the size
    c_count = c_uint(0)
    fn = _nvmlGetFunctionPointer("nvmlDeviceGetSupportedMemoryClocks")
    ret = fn(handle, byref(c_count), None)

    if (ret == NVML_SUCCESS):
        # special case, no clocks
        return []
    elif (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        # typical case
        clocks_array = c_uint * c_count.value
        c_clocks = clocks_array()

        # make the call again
        ret = fn(handle, byref(c_count), c_clocks)
        _nvmlCheckReturn(ret)

        procs = []
        for i in range(c_count.value):
            procs.append(c_clocks[i])

        return procs
    else:
        # error case
        raise NVMLError(ret)


# Added in 4.304
</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="3023" endline="3049" pcid="5099">
def nvmlDeviceGetActiveVgpus(handle):
    # first call to get the size
    c_vgpu_count = c_uint(0)

    fn = _nvmlGetFunctionPointer("nvmlDeviceGetActiveVgpus")
    ret = fn(handle, byref(c_vgpu_count), None)

    if (ret == NVML_SUCCESS):
        # special case, no active vGPUs
        return []
    elif (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        # typical case
        vgpu_instance_array = _nvmlVgpuInstance_t * c_vgpu_count.value
        c_vgpu_instances = vgpu_instance_array()

        # make the call again
        ret = fn(handle, byref(c_vgpu_count), c_vgpu_instances)
        _nvmlCheckReturn(ret)
        vgpus = []
        for i in range(c_vgpu_count.value):
            vgpus.append(c_vgpu_instances[i])
        return vgpus
    else:
        # error case
        raise NVMLError(ret)


</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="2884" endline="2910" pcid="5087">
def nvmlDeviceGetSupportedVgpus(handle):
    # first call to get the size
    c_vgpu_count = c_uint(0)

    fn = _nvmlGetFunctionPointer("nvmlDeviceGetSupportedVgpus")
    ret = fn(handle, byref(c_vgpu_count), None)

    if (ret == NVML_SUCCESS):
        # special case, no supported vGPUs
        return []
    elif (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        # typical case
        vgpu_type_ids_array = _nvmlVgpuTypeId_t * c_vgpu_count.value
        c_vgpu_type_ids = vgpu_type_ids_array()

        # make the call again
        ret = fn(handle, byref(c_vgpu_count), c_vgpu_type_ids)
        _nvmlCheckReturn(ret)
        vgpus = []
        for i in range(c_vgpu_count.value):
            vgpus.append(c_vgpu_type_ids[i])
        return vgpus
    else:
        # error case
        raise NVMLError(ret)


</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="2911" endline="2937" pcid="5088">
def nvmlDeviceGetCreatableVgpus(handle):
    # first call to get the size
    c_vgpu_count = c_uint(0)

    fn = _nvmlGetFunctionPointer("nvmlDeviceGetCreatableVgpus")
    ret = fn(handle, byref(c_vgpu_count), None)

    if (ret == NVML_SUCCESS):
        # special case, no supported vGPUs
        return []
    elif (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        # typical case
        vgpu_type_ids_array = _nvmlVgpuTypeId_t * c_vgpu_count.value
        c_vgpu_type_ids = vgpu_type_ids_array()

        # make the call again
        ret = fn(handle, byref(c_vgpu_count), c_vgpu_type_ids)
        _nvmlCheckReturn(ret)
        vgpus = []
        for i in range(c_vgpu_count.value):
            vgpus.append(c_vgpu_type_ids[i])
        return vgpus
    else:
        # error case
        raise NVMLError(ret)


</source>
</class>

<class classid="30" nclones="2" nlines="21" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="2222" endline="2256" pcid="5020">
def nvmlDeviceGetComputeRunningProcesses(handle):
    # first call to get the size
    c_count = c_uint(0)
    fn = _nvmlGetFunctionPointer("nvmlDeviceGetComputeRunningProcesses")
    ret = fn(handle, byref(c_count), None)

    if (ret == NVML_SUCCESS):
        # special case, no running processes
        return []
    elif (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        # typical case
        # oversize the array incase more processes are created
        c_count.value = c_count.value * 2 + 5
        proc_array = c_nvmlProcessInfo_t * c_count.value
        c_procs = proc_array()

        # make the call again
        ret = fn(handle, byref(c_count), c_procs)
        _nvmlCheckReturn(ret)

        procs = []
        for i in range(c_count.value):
            # use an alternative struct for this object
            obj = nvmlStructToFriendlyObject(c_procs[i])
            if (obj.usedGpuMemory == NVML_VALUE_NOT_AVAILABLE_ulonglong.value):
                # special case for WDDM on Windows, see comment above
                obj.usedGpuMemory = None
            procs.append(obj)

        return procs
    else:
        # error case
        raise NVMLError(ret)


</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="2257" endline="2291" pcid="5021">
def nvmlDeviceGetGraphicsRunningProcesses(handle):
    # first call to get the size
    c_count = c_uint(0)
    fn = _nvmlGetFunctionPointer("nvmlDeviceGetGraphicsRunningProcesses")
    ret = fn(handle, byref(c_count), None)

    if (ret == NVML_SUCCESS):
        # special case, no running processes
        return []
    elif (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        # typical case
        # oversize the array incase more processes are created
        c_count.value = c_count.value * 2 + 5
        proc_array = c_nvmlProcessInfo_t * c_count.value
        c_procs = proc_array()

        # make the call again
        ret = fn(handle, byref(c_count), c_procs)
        _nvmlCheckReturn(ret)

        procs = []
        for i in range(c_count.value):
            # use an alternative struct for this object
            obj = nvmlStructToFriendlyObject(c_procs[i])
            if (obj.usedGpuMemory == NVML_VALUE_NOT_AVAILABLE_ulonglong.value):
                # special case for WDDM on Windows, see comment above
                obj.usedGpuMemory = None
            procs.append(obj)

        return procs
    else:
        # error case
        raise NVMLError(ret)


</source>
</class>

<class classid="31" nclones="4" nlines="18" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="3234" endline="3260" pcid="5118">
def nvmlDeviceGetEncoderSessions(handle):
    # first call to get the size
    c_session_count = c_uint(0)

    fn = _nvmlGetFunctionPointer("nvmlDeviceGetEncoderSessions")
    ret = fn(handle, byref(c_session_count), None)

    if (ret == NVML_SUCCESS):
        if (c_session_count.value != 0):
            # typical case
            session_array = c_nvmlEncoderSession_t * c_session_count.value
            c_sessions = session_array()

            # make the call again
            ret = fn(handle, byref(c_session_count), c_sessions)
            _nvmlCheckReturn(ret)
            sessions = []
            for i in range(c_session_count.value):
                sessions.append(c_sessions[i])
            return sessions
        else:
            return []  # no active sessions
    else:
        # error case
        raise NVMLError(ret)


</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="3306" endline="3332" pcid="5122">
def nvmlVgpuInstanceGetEncoderSessions(vgpuInstance):
    # first call to get the size
    c_session_count = c_uint(0)

    fn = _nvmlGetFunctionPointer("nvmlVgpuInstanceGetEncoderSessions")
    ret = fn(vgpuInstance, byref(c_session_count), None)

    if (ret == NVML_SUCCESS):
        if (c_session_count.value != 0):
            # typical case
            session_array = c_nvmlEncoderSession_t * c_session_count.value
            c_sessions = session_array()

            # make the call again
            ret = fn(vgpuInstance, byref(c_session_count), c_sessions)
            _nvmlCheckReturn(ret)
            sessions = []
            for i in range(c_session_count.value):
                sessions.append(c_sessions[i])
            return sessions
        else:
            return []  # no active sessions
    else:
        # error case
        raise NVMLError(ret)


</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="3269" endline="3295" pcid="5120">
def nvmlDeviceGetFBCSessions(handle):
    # first call to get the size
    c_session_count = c_uint(0)

    fn = _nvmlGetFunctionPointer("nvmlDeviceGetFBCSessions")
    ret = fn(handle, byref(c_session_count), None)

    if (ret == NVML_SUCCESS):
        if (c_session_count.value != 0):
            # typical case
            session_array = c_nvmlFBCSession_t * c_session_count.value
            c_sessions = session_array()

            # make the call again
            ret = fn(handle, byref(c_session_count), c_sessions)
            _nvmlCheckReturn(ret)
            sessions = []
            for i in range(c_session_count.value):
                sessions.append(c_sessions[i])
            return sessions
        else:
            return []  # no active sessions
    else:
        # error case
        raise NVMLError(ret)


</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="3341" endline="3367" pcid="5124">
def nvmlVgpuInstanceGetFBCSessions(vgpuInstance):
    # first call to get the size
    c_session_count = c_uint(0)

    fn = _nvmlGetFunctionPointer("nvmlVgpuInstanceGetFBCSessions")
    ret = fn(vgpuInstance, byref(c_session_count), None)

    if (ret == NVML_SUCCESS):
        if (c_session_count.value != 0):
            # typical case
            session_array = c_nvmlFBCSession_t * c_session_count.value
            c_sessions = session_array()

            # make the call again
            ret = fn(vgpuInstance, byref(c_session_count), c_sessions)
            _nvmlCheckReturn(ret)
            sessions = []
            for i in range(c_session_count.value):
                sessions.append(c_sessions[i])
            return sessions
        else:
            return []  # no active sessions
    else:
        # error case
        raise NVMLError(ret)


</source>
</class>

<class classid="32" nclones="2" nlines="11" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="3391" endline="3405" pcid="5126">
def nvmlVgpuInstanceGetMetadata(vgpuInstance):
    fn = _nvmlGetFunctionPointer("nvmlVgpuInstanceGetMetadata")
    c_vgpuMetadata = c_nvmlVgpuMetadata_t()
    c_bufferSize = c_uint(0)
    # Make the first NVML API call to get the c_bufferSize value.
    # We have already allocated required buffer above.
    ret = fn(vgpuInstance, byref(c_vgpuMetadata), byref(c_bufferSize))
    if (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        ret = fn(vgpuInstance, byref(c_vgpuMetadata), byref(c_bufferSize))
        _nvmlCheckReturn(ret)
    else:
        raise NVMLError(ret)
    return c_vgpuMetadata


</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/gpu/pynvml.py" startline="3406" endline="3420" pcid="5127">
def nvmlDeviceGetVgpuMetadata(handle):
    fn = _nvmlGetFunctionPointer("nvmlDeviceGetVgpuMetadata")
    c_vgpuPgpuMetadata = c_nvmlVgpuPgpuMetadata_t()
    c_bufferSize = c_uint(0)
    # Make the first NVML API call to get the c_bufferSize value.
    # We have already allocated required buffer above.
    ret = fn(handle, byref(c_vgpuPgpuMetadata), byref(c_bufferSize))
    if (ret == NVML_ERROR_INSUFFICIENT_SIZE):
        ret = fn(handle, byref(c_vgpuPgpuMetadata), byref(c_bufferSize))
        _nvmlCheckReturn(ret)
    else:
        raise NVMLError(ret)
    return c_vgpuPgpuMetadata


</source>
</class>

<class classid="33" nclones="2" nlines="10" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/utilities/plotlympl/mplexporter/renderers/base.py" startline="46" endline="56" pcid="5372">

    @contextmanager
    def draw_figure(self, fig, props):
        if hasattr(self, "_current_fig") and self._current_fig is not None:
            warnings.warn("figure embedded in figure: something is wrong")
        self._current_fig = fig
        self._fig_props = props
        self.open_figure(fig=fig, props=props)
        yield
        self.close_figure(fig=fig)
        self._current_fig = None
</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/plotlympl/mplexporter/renderers/base.py" startline="58" endline="68" pcid="5373">

    @contextmanager
    def draw_axes(self, ax, props):
        if hasattr(self, "_current_ax") and self._current_ax is not None:
            warnings.warn("axes embedded in axes: something is wrong")
        self._current_ax = ax
        self._ax_props = props
        self.open_axes(ax=ax, props=props)
        yield
        self.close_axes(ax=ax)
        self._current_ax = None
</source>
</class>

<class classid="34" nclones="2" nlines="13" similarity="100">
<source file="systems/clearml-1.3.2rc2/clearml/utilities/plotlympl/mplexporter/renderers/vincent_renderer.py" startline="12" endline="28" pcid="5412">
    def draw_line(self, data, coordinates, style, label, mplobj=None):
        import vincent  # only import if VincentRenderer is used
        if coordinates != 'data':
            warnings.warn("Only data coordinates supported. Skipping this")
        linedata = {'x': data[:, 0],
                    'y': data[:, 1]}
        line = vincent.Line(linedata, iter_idx='x',
                            width=self.figwidth, height=self.figheight)

        # TODO: respect the other style settings
        line.scales['color'].range = [style['color']]

        if self.chart is None:
            self.chart = line
        else:
            warnings.warn("Multiple plot elements not yet supported")

</source>
<source file="systems/clearml-1.3.2rc2/clearml/utilities/plotlympl/mplexporter/renderers/vincent_renderer.py" startline="29" endline="46" pcid="5413">
    def draw_markers(self, data, coordinates, style, label, mplobj=None):
        import vincent  # only import if VincentRenderer is used
        if coordinates != 'data':
            warnings.warn("Only data coordinates supported. Skipping this")
        markerdata = {'x': data[:, 0],
                      'y': data[:, 1]}
        markers = vincent.Scatter(markerdata, iter_idx='x',
                                  width=self.figwidth, height=self.figheight)

        # TODO: respect the other style settings
        markers.scales['color'].range = [style['facecolor']]

        if self.chart is None:
            self.chart = markers
        else:
            warnings.warn("Multiple plot elements not yet supported")


</source>
</class>

<class classid="35" nclones="2" nlines="17" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_tensorboard.py" startline="40" endline="58" pcid="5640">
def train(model, epoch, train_loader, args, optimizer, writer):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.data.item()))
            niter = epoch*len(train_loader)+batch_idx
            writer.add_scalar('Train/Loss', loss.data.item(), niter)


</source>
<source file="systems/clearml-1.3.2rc2/examples/frameworks/tensorboardx/pytorch_tensorboardX.py" startline="39" endline="57" pcid="5675">
def train(model, epoch, train_loader, args, optimizer, writer):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.data.item()))
            niter = epoch*len(train_loader)+batch_idx
            writer.add_scalar('Train/Loss', loss.data.item(), niter)


</source>
</class>

<class classid="36" nclones="2" nlines="20" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_tensorboard.py" startline="59" endline="81" pcid="5641">
def test(model, test_loader, args, optimizer, writer):
    model.eval()
    test_loss = 0
    correct = 0
    for niter, (data, target) in enumerate(test_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        output = model(data)
        test_loss += F.nll_loss(output, target, reduction='sum').data.item()  # sum up batch loss
        pred = output.data.max(1)[1]  # get the index of the max log-probability
        pred = pred.eq(target.data).cpu().sum()
        writer.add_scalar('Test/Loss', pred, niter)
        correct += pred
        if niter % 100 == 0:
            writer.add_image('test', data[0, :, :, :], niter)

    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
<source file="systems/clearml-1.3.2rc2/examples/frameworks/tensorboardx/pytorch_tensorboardX.py" startline="58" endline="80" pcid="5676">
def test(model, test_loader, args, optimizer, writer):
    model.eval()
    test_loss = 0
    correct = 0
    for niter, (data, target) in enumerate(test_loader):
        if args.cuda:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data), Variable(target)
        output = model(data)
        test_loss += F.nll_loss(output, target, reduction='sum').data.item()  # sum up batch loss
        pred = output.data.max(1)[1]  # get the index of the max log-probability
        pred = pred.eq(target.data).cpu().sum()
        writer.add_scalar('Test/Loss', pred, niter)
        correct += pred
        if niter % 100 == 0:
            writer.add_image('test', data[0, :, :, :], niter)

    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
</class>

<class classid="37" nclones="2" nlines="15" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_mnist.py" startline="36" endline="52" pcid="5660">
def train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            Logger.current_logger().report_scalar(
                "train", "loss", iteration=(epoch * len(train_loader) + batch_idx), value=loss.item())
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))


</source>
<source file="systems/clearml-1.3.2rc2/examples/advanced/execute_remotely_example.py" startline="40" endline="56" pcid="5793">
def train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            Logger.current_logger().report_scalar(
                "train", "loss", iteration=(epoch * len(train_loader) + batch_idx), value=loss.item())
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))


</source>
</class>

<class classid="38" nclones="2" nlines="19" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/pytorch/pytorch_mnist.py" startline="53" endline="75" pcid="5661">
def test(args, model, device, test_loader, epoch):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    Logger.current_logger().report_scalar(
        "test", "loss", iteration=epoch, value=test_loss)
    Logger.current_logger().report_scalar(
        "test", "accuracy", iteration=epoch, value=(correct / len(test_loader.dataset)))
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
<source file="systems/clearml-1.3.2rc2/examples/advanced/execute_remotely_example.py" startline="57" endline="77" pcid="5794">
def test(args, model, device, test_loader, epoch):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()
    test_loss /= len(test_loader.dataset)
    Logger.current_logger().report_scalar(
        "test", "loss", iteration=epoch, value=test_loss)
    Logger.current_logger().report_scalar(
        "test", "accuracy", iteration=epoch, value=(correct / len(test_loader.dataset)))
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


</source>
</class>

<class classid="39" nclones="2" nlines="14" similarity="100">
<source file="systems/clearml-1.3.2rc2/examples/frameworks/keras/legacy/keras_tensorboard.py" startline="26" endline="40" pcid="5669">
    def make_image(tensor):
        from PIL import Image
        import io
        tensor = np.stack((tensor, tensor, tensor), axis=2)
        height, width, channels = tensor.shape
        image = Image.fromarray(tensor)
        output = io.BytesIO()
        image.save(output, format='PNG')
        image_string = output.getvalue()
        output.close()
        return tf.Summary.Image(height=height,
                                width=width,
                                colorspace=channels,
                                encoded_image_string=image_string)

</source>
<source file="systems/clearml-1.3.2rc2/examples/frameworks/keras/keras_tensorboard.py" startline="27" endline="41" pcid="5671">
    def make_image(tensor):
        from PIL import Image
        import io
        tensor = np.stack((tensor, tensor, tensor), axis=2)
        height, width, channels = tensor.shape
        image = Image.fromarray(tensor)
        output = io.BytesIO()
        image.save(output, format='PNG')
        image_string = output.getvalue()
        output.close()
        return tf.Summary.Image(height=height,
                                width=width,
                                colorspace=channels,
                                encoded_image_string=image_string)

</source>
</class>

</clones>
