<clones>
<systeminfo processor="nicad6" system="ipython-8.1.1" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1420" npairs="3"/>
<runinfo ncompares="3240" cputime="48762"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="11" similarity="100">
<source file="systems/ipython-8.1.1/IPython/core/tests/test_inputtransformer2.py" startline="376" endline="390" pcid="1097">
def test_side_effects_I():
    count = 0
    def counter(lines):
        nonlocal count
        count += 1
        return lines

    counter.has_side_effects = True

    manager = ipt2.TransformerManager()
    manager.cleanup_transforms.insert(0, counter)
    assert manager.check_complete("a=1\n") == ('complete', None)
    assert count == 0


</source>
<source file="systems/ipython-8.1.1/IPython/core/tests/test_inputtransformer2.py" startline="393" endline="405" pcid="1099">
def test_side_effects_II():
    count = 0
    def counter(lines):
        nonlocal count
        count += 1
        return lines

    counter.has_side_effects = True

    manager = ipt2.TransformerManager()
    manager.line_transforms.insert(0, counter)
    assert manager.check_complete("b=1\n") == ('complete', None)
    assert count == 0
</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/ipython-8.1.1/IPython/core/tests/test_inputsplitter.py" startline="170" endline="181" pcid="1132">
    def test_indent4(self):
        isp = self.isp
        # whitespace after ':' should not screw up indent level
        isp.push('if 1: \n    x=1')
        self.assertEqual(isp.get_indent_spaces(), 4)
        isp.push('y=2\n')
        self.assertEqual(isp.get_indent_spaces(), 0)
        isp.push('if 1:\t\n    x=1')
        self.assertEqual(isp.get_indent_spaces(), 4)
        isp.push('y=2\n')
        self.assertEqual(isp.get_indent_spaces(), 0)

</source>
<source file="systems/ipython-8.1.1/IPython/core/tests/test_inputsplitter.py" startline="212" endline="223" pcid="1136">
    def test_dedent_raise(self):
        isp = self.isp # shorthand
        # should NOT cause dedent
        isp.push('if 1:\n    raised = 4')
        self.assertEqual(isp.get_indent_spaces(), 4)
        isp.push('if 1:\n     raise TypeError()')
        self.assertEqual(isp.get_indent_spaces(), 0)
        isp.push('if 1:\n     raise')
        self.assertEqual(isp.get_indent_spaces(), 0)
        isp.push('if 1:\n     raise      ')
        self.assertEqual(isp.get_indent_spaces(), 0)

</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="100">
<source file="systems/ipython-8.1.1/IPython/terminal/shortcuts.py" startline="96" endline="110" pcid="1319">
    def preceding_text(pattern):
        try:
            return _preceding_text_cache[pattern]
        except KeyError:
            pass
        m = re.compile(pattern)

        def _preceding_text():
            app = get_app()
            return bool(m.match(app.current_buffer.document.current_line_before_cursor))

        condition = Condition(_preceding_text)
        _preceding_text_cache[pattern] = condition
        return condition

</source>
<source file="systems/ipython-8.1.1/IPython/terminal/shortcuts.py" startline="111" endline="126" pcid="1321">
    def following_text(pattern):
        try:
            return _following_text_cache[pattern]
        except KeyError:
            pass
        m = re.compile(pattern)

        def _following_text():
            app = get_app()
            return bool(m.match(app.current_buffer.document.current_line_after_cursor))

        condition = Condition(_following_text)
        _following_text_cache[pattern] = condition
        return condition

    # auto match
</source>
</class>

</clones>
