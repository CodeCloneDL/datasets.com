<clones>
<systeminfo processor="nicad6" system="kivy-2.1.0" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="3572" npairs="18"/>
<runinfo ncompares="22511" cputime="75631"/>
<classinfo nclasses="16"/>

<class classid="1" nclones="2" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/kivy/tests/test_widget.py" startline="63" endline="75" pcid="491">
    def test_position(self):
        wid = self.root
        wid.x = 50
        self.assertEqual(wid.x, 50)
        self.assertEqual(wid.pos, [50, 0])
        wid.y = 60
        self.assertEqual(wid.y, 60)
        self.assertEqual(wid.pos, [50, 60])
        wid.pos = (0, 0)
        self.assertEqual(wid.pos, [0, 0])
        self.assertEqual(wid.x, 0)
        self.assertEqual(wid.y, 0)

</source>
<source file="systems/kivy-2.1.0/kivy/tests/test_widget.py" startline="76" endline="88" pcid="492">
    def test_size(self):
        wid = self.root
        wid.width = 50
        self.assertEqual(wid.width, 50)
        self.assertEqual(wid.size, [50, 100])
        wid.height = 60
        self.assertEqual(wid.height, 60)
        self.assertEqual(wid.size, [50, 60])
        wid.size = (100, 100)
        self.assertEqual(wid.size, [100, 100])
        self.assertEqual(wid.width, 100)
        self.assertEqual(wid.height, 100)

</source>
</class>

<class classid="2" nclones="2" nlines="15" similarity="100">
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_scrollview.py" startline="149" endline="169" pcid="592">
    def test_scrollbar_horizontal(self):
        EventLoop.ensure_window()
        win = EventLoop.window
        grid = _TestGrid()
        scroll = _TestScrollbarHorizontal()
        scroll.add_widget(grid)
        win.add_widget(scroll)

        # get widgets ready
        EventLoop.idle()

        left, right = scroll.to_window(scroll.x, scroll.right)
        bottom, top = scroll.to_window(scroll.y, scroll.top)

        points = [
            [left, bottom, right, bottom, 'bottom', 'right', False],
            [left, top, right, top, 'top', 'right', False]
        ]
        self.process_points(scroll, points)
        self.render(scroll)

</source>
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_scrollview.py" startline="170" endline="190" pcid="593">
    def test_scrollbar_vertical(self):
        EventLoop.ensure_window()
        win = EventLoop.window
        grid = _TestGrid()
        scroll = _TestScrollbarVertical()
        scroll.add_widget(grid)
        win.add_widget(scroll)

        # get widgets ready
        EventLoop.idle()

        left, right = scroll.to_window(scroll.x, scroll.right)
        bottom, top = scroll.to_window(scroll.y, scroll.top)

        points = [
            [right, top, right, bottom, 'bottom', 'right', False],
            [left, top, left, bottom, 'bottom', 'left', False]
        ]
        self.process_points(scroll, points)
        self.render(scroll)

</source>
</class>

<class classid="3" nclones="2" nlines="14" similarity="100">
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_boxlayout.py" startline="45" endline="61" pcid="632">
    def test_boxlayout_spacing(self):
        from kivy.uix.boxlayout import BoxLayout
        r = self.render
        b = self.box

        layout = BoxLayout(spacing=20)
        layout.add_widget(b(1, 0, 0))
        layout.add_widget(b(0, 1, 0))
        layout.add_widget(b(0, 0, 1))
        r(layout)

        layout = BoxLayout(spacing=20, orientation='vertical')
        layout.add_widget(b(1, 0, 0))
        layout.add_widget(b(0, 1, 0))
        layout.add_widget(b(0, 0, 1))
        r(layout)

</source>
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_boxlayout.py" startline="62" endline="78" pcid="633">
    def test_boxlayout_padding(self):
        from kivy.uix.boxlayout import BoxLayout
        r = self.render
        b = self.box

        layout = BoxLayout(padding=20)
        layout.add_widget(b(1, 0, 0))
        layout.add_widget(b(0, 1, 0))
        layout.add_widget(b(0, 0, 1))
        r(layout)

        layout = BoxLayout(padding=20, orientation='vertical')
        layout.add_widget(b(1, 0, 0))
        layout.add_widget(b(0, 1, 0))
        layout.add_widget(b(0, 0, 1))
        r(layout)

</source>
</class>

<class classid="4" nclones="2" nlines="13" similarity="100">
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_anchorlayout.py" startline="34" endline="50" pcid="653">
    def test_anchorlayout_x(self):
        from kivy.uix.anchorlayout import AnchorLayout
        r = self.render
        b = self.box

        layout = AnchorLayout(anchor_x='left')
        layout.add_widget(b(1, 0, 0))
        r(layout)

        layout = AnchorLayout(anchor_x='center')
        layout.add_widget(b(1, 0, 0))
        r(layout)

        layout = AnchorLayout(anchor_x='right')
        layout.add_widget(b(1, 0, 0))
        r(layout)

</source>
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_anchorlayout.py" startline="51" endline="67" pcid="654">
    def test_anchorlayout_y(self):
        from kivy.uix.anchorlayout import AnchorLayout
        r = self.render
        b = self.box

        layout = AnchorLayout(anchor_y='bottom')
        layout.add_widget(b(1, 0, 0))
        r(layout)

        layout = AnchorLayout(anchor_y='center')
        layout.add_widget(b(1, 0, 0))
        r(layout)

        layout = AnchorLayout(anchor_y='top')
        layout.add_widget(b(1, 0, 0))
        r(layout)

</source>
</class>

<class classid="5" nclones="3" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_widget.py" startline="41" endline="53" pcid="956">
    def test_add_widget_index_0(self):
        from kivy.uix.widget import Widget
        from kivy.uix.button import Button
        r = self.render
        root = Widget()
        a = Button(text='Hello')
        b = Button(text='World', pos=(50, 10))
        c = Button(text='Kivy', pos=(10, 50))
        root.add_widget(a)
        root.add_widget(b)
        root.add_widget(c, 0)
        r(root)

</source>
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_widget.py" startline="54" endline="66" pcid="957">
    def test_add_widget_index_1(self):
        from kivy.uix.widget import Widget
        from kivy.uix.button import Button
        r = self.render
        root = Widget()
        a = Button(text='Hello')
        b = Button(text='World', pos=(50, 10))
        c = Button(text='Kivy', pos=(10, 50))
        root.add_widget(a)
        root.add_widget(b)
        root.add_widget(c, 1)
        r(root)

</source>
<source file="systems/kivy-2.1.0/kivy/tests/test_uix_widget.py" startline="67" endline="79" pcid="958">
    def test_add_widget_index_2(self):
        from kivy.uix.widget import Widget
        from kivy.uix.button import Button
        r = self.render
        root = Widget()
        a = Button(text='Hello')
        b = Button(text='World', pos=(50, 10))
        c = Button(text='Kivy', pos=(10, 50))
        root.add_widget(a)
        root.add_widget(b)
        root.add_widget(c, 2)
        r(root)

</source>
</class>

<class classid="6" nclones="2" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/kivy/input/providers/hidinput.py" startline="437" endline="449" pcid="1164">

            def assign_coord(point, value, invert, coords):
                cx, cy = coords
                if invert:
                    value = 1. - value
                if rotation == 0:
                    point[cx] = value
                elif rotation == 90:
                    point[cy] = value
                elif rotation == 180:
                    point[cx] = 1. - value
                elif rotation == 270:
                    point[cy] = 1. - value
</source>
<source file="systems/kivy-2.1.0/kivy/input/providers/mtdev.py" startline="188" endline="200" pcid="1237">
            device = kwargs.get('device')
            drs = kwargs.get('default_ranges').get
            touches = {}
            touches_sent = []
            point = {}
            l_points = {}

            def assign_coord(point, value, invert, coords):
                cx, cy = coords
                if invert:
                    value = 1. - value
                if rotation == 0:
                    point[cx] = value
</source>
</class>

<class classid="7" nclones="2" nlines="13" similarity="100">
<source file="systems/kivy-2.1.0/kivy/input/providers/mouse.py" startline="206" endline="219" pcid="1187">
    def start(self):
        '''Start the mouse provider'''
        if not EventLoop.window:
            return
        fbind = EventLoop.window.fbind
        fbind('on_mouse_down', self.on_mouse_press)
        fbind('on_mouse_move', self.on_mouse_motion)
        fbind('on_mouse_up', self.on_mouse_release)
        fbind('on_rotate', self.update_touch_graphics)
        fbind('system_size', self.update_touch_graphics)
        if not self.disable_hover:
            self._start_hover_events()
        self._running = True

</source>
<source file="systems/kivy-2.1.0/kivy/input/providers/mouse.py" startline="229" endline="242" pcid="1189">
    def stop(self):
        '''Stop the mouse provider'''
        if not EventLoop.window:
            return
        funbind = EventLoop.window.funbind
        funbind('on_mouse_down', self.on_mouse_press)
        funbind('on_mouse_move', self.on_mouse_motion)
        funbind('on_mouse_up', self.on_mouse_release)
        funbind('on_rotate', self.update_touch_graphics)
        funbind('system_size', self.update_touch_graphics)
        if not self.disable_hover:
            self._stop_hover_events()
        self._running = False

</source>
</class>

<class classid="8" nclones="2" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/kivy/storage/jsonstore.py" startline="75" endline="87" pcid="1260">
    def store_find(self, filters):
        for key, values in iteritems(self._data):
            found = True
            for fkey, fvalue in iteritems(filters):
                if fkey not in values:
                    found = False
                    break
                if values[fkey] != fvalue:
                    found = False
                    break
            if found:
                yield key, values

</source>
<source file="systems/kivy-2.1.0/kivy/storage/dictstore.py" startline="81" endline="93" pcid="1270">
    def store_find(self, filters):
        for key, values in iteritems(self._data):
            found = True
            for fkey, fvalue in iteritems(filters):
                if fkey not in values:
                    found = False
                    break
                if values[fkey] != fvalue:
                    found = False
                    break
            if found:
                yield key, values

</source>
</class>

<class classid="9" nclones="2" nlines="10" similarity="100">
<source file="systems/kivy-2.1.0/kivy/uix/behaviors/drag.py" startline="205" endline="216" pcid="1344">
                super(DragBehavior, self).on_touch_up(touch)
        return self._get_uid() in touch.ud

    def _do_touch_up(self, touch, *largs):
        super(DragBehavior, self).on_touch_up(touch)
        # don't forget about grab event!
        for x in touch.grab_list[:]:
            touch.grab_list.remove(x)
            x = x()
            if not x:
                continue
            touch.grab_current = x
</source>
<source file="systems/kivy-2.1.0/kivy/uix/carousel.py" startline="611" endline="622" pcid="1955">
                Clock.schedule_once(partial(self._do_touch_up, touch), .1)
            else:
                self._start_animation()

        else:
            if self._touch is not touch and self.uid not in touch.ud:
                super(Carousel, self).on_touch_up(touch)
        return self._get_uid() in touch.ud

    def _do_touch_up(self, touch, *largs):
        super(Carousel, self).on_touch_up(touch)
        # don't forget about grab event!
</source>
</class>

<class classid="10" nclones="2" nlines="10" similarity="100">
<source file="systems/kivy-2.1.0/kivy/uix/pagelayout.py" startline="82" endline="93" pcid="1400">
    def __init__(self, **kwargs):
        super(PageLayout, self).__init__(**kwargs)

        trigger = self._trigger_layout
        fbind = self.fbind
        fbind('border', trigger)
        fbind('page', trigger)
        fbind('parent', trigger)
        fbind('children', trigger)
        fbind('size', trigger)
        fbind('pos', trigger)

</source>
<source file="systems/kivy-2.1.0/kivy/uix/stacklayout.py" startline="139" endline="149" pcid="1870">

    def __init__(self, **kwargs):
        super(StackLayout, self).__init__(**kwargs)
        trigger = self._trigger_layout
        fbind = self.fbind
        fbind('padding', trigger)
        fbind('spacing', trigger)
        fbind('children', trigger)
        fbind('orientation', trigger)
        fbind('size', trigger)
        fbind('pos', trigger)
</source>
</class>

<class classid="11" nclones="2" nlines="11" similarity="100">
<source file="systems/kivy-2.1.0/kivy/uix/anchorlayout.py" startline="67" endline="78" pcid="1461">
    def __init__(self, **kwargs):
        super(AnchorLayout, self).__init__(**kwargs)
        fbind = self.fbind
        update = self._trigger_layout
        fbind('children', update)
        fbind('parent', update)
        fbind('padding', update)
        fbind('anchor_x', update)
        fbind('anchor_y', update)
        fbind('size', update)
        fbind('pos', update)

</source>
<source file="systems/kivy-2.1.0/kivy/uix/boxlayout.py" startline="144" endline="155" pcid="2124">
    def __init__(self, **kwargs):
        super(BoxLayout, self).__init__(**kwargs)
        update = self._trigger_layout
        fbind = self.fbind
        fbind('spacing', update)
        fbind('padding', update)
        fbind('children', update)
        fbind('orientation', update)
        fbind('parent', update)
        fbind('size', update)
        fbind('pos', update)

</source>
</class>

<class classid="12" nclones="2" nlines="17" similarity="100">
<source file="systems/kivy-2.1.0/kivy/uix/recycleview/__init__.py" startline="393" endline="413" pcid="1603">
        return self._data_model

    def _set_data_model(self, value):
        data_model = self._data_model
        if value is data_model:
            return
        if data_model is not None:
            self._data_model = None
            data_model.detach_recycleview()

        if value is None:
            return True

        if not isinstance(value, RecycleDataModelBehavior):
            raise ValueError(
                'Expected object based on RecycleDataModelBehavior, got {}'.
                format(value.__class__))

        self._data_model = value
        value.attach_recycleview(self)
        self.refresh_from_data()
</source>
<source file="systems/kivy-2.1.0/kivy/uix/recycleview/__init__.py" startline="425" endline="445" pcid="1605">
        return self._view_adapter

    def _set_view_adapter(self, value):
        view_adapter = self._view_adapter
        if value is view_adapter:
            return
        if view_adapter is not None:
            self._view_adapter = None
            view_adapter.detach_recycleview()

        if value is None:
            return True

        if not isinstance(value, RecycleDataAdapter):
            raise ValueError(
                'Expected object based on RecycleAdapter, got {}'.
                format(value.__class__))

        self._view_adapter = value
        value.attach_recycleview(self)
        self.refresh_from_layout()
</source>
</class>

<class classid="13" nclones="2" nlines="11" similarity="100">
<source file="systems/kivy-2.1.0/kivy/uix/scrollview.py" startline="295" endline="308" pcid="2019">
    '''

    def _get_vbar(self):
        # must return (y, height) in %
        # calculate the viewport size / scrollview size %
        if self._viewport is None:
            return 0, 1.
        vh = self._viewport.height
        h = self.height
        if vh < h or vh == 0:
            return 0, 1.
        ph = max(0.01, h / float(vh))
        sy = min(1.0, max(0.0, self.scroll_y))
        py = (1. - ph) * sy
</source>
<source file="systems/kivy-2.1.0/kivy/uix/scrollview.py" startline="324" endline="337" pcid="2020">
    '''

    def _get_hbar(self):
        # must return (x, width) in %
        # calculate the viewport size / scrollview size %
        if self._viewport is None:
            return 0, 1.
        vw = self._viewport.width
        w = self.width
        if vw < w or vw == 0:
            return 0, 1.
        pw = max(0.01, w / float(vw))
        sx = min(1.0, max(0.0, self.scroll_x))
        px = (1. - pw) * sx
</source>
</class>

<class classid="14" nclones="2" nlines="14" similarity="100">
<source file="systems/kivy-2.1.0/kivy/uix/scrollview.py" startline="617" endline="632" pcid="2031">
        self._update_effect_y_bounds()

    def _update_effect_x(self, *args):
        vp = self._viewport
        if not vp or not self.effect_x:
            return

        if self.effect_x.is_manual:
            sw = vp.width - self._effect_x_start_width
        else:
            sw = vp.width - self.width
        if sw < 1 and not (self.always_overscroll and self.do_scroll_x):
            return
        if sw != 0:
            sx = self.effect_x.scroll / sw
            self.scroll_x = -sx
</source>
<source file="systems/kivy-2.1.0/kivy/uix/scrollview.py" startline="633" endline="648" pcid="2032">
        self._trigger_update_from_scroll()

    def _update_effect_y(self, *args):
        vp = self._viewport
        if not vp or not self.effect_y:
            return
        if self.effect_y.is_manual:
            sh = vp.height - self._effect_y_start_height
        else:
            sh = vp.height - self.height

        if sh < 1 and not (self.always_overscroll and self.do_scroll_y):
            return
        if sh != 0:
            sy = self.effect_y.scroll / sh
            self.scroll_y = -sy
</source>
</class>

<class classid="15" nclones="2" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/examples/tutorials/pong/steps/step5/main.py" startline="40" endline="58" pcid="3104">
    def update(self, dt):
        self.ball.move()

        # bounce of paddles
        self.player1.bounce_ball(self.ball)
        self.player2.bounce_ball(self.ball)

        # bounce ball off bottom or top
        if (self.ball.y < self.y) or (self.ball.top > self.top):
            self.ball.velocity_y *= -1

        # went of to a side to score point?
        if self.ball.x < self.x:
            self.player2.score += 1
            self.serve_ball(vel=(4, 0))
        if self.ball.right > self.width:
            self.player1.score += 1
            self.serve_ball(vel=(-4, 0))

</source>
<source file="systems/kivy-2.1.0/examples/tutorials/pong/main.py" startline="47" endline="65" pcid="3118">
    def update(self, dt):
        self.ball.move()

        # bounce ball off paddles
        self.player1.bounce_ball(self.ball)
        self.player2.bounce_ball(self.ball)

        # bounce ball off bottom or top
        if (self.ball.y < self.y) or (self.ball.top > self.top):
            self.ball.velocity_y *= -1

        # went off a side to score point?
        if self.ball.x < self.x:
            self.player2.score += 1
            self.serve_ball(vel=(4, 0))
        if self.ball.right > self.width:
            self.player1.score += 1
            self.serve_ball(vel=(-4, 0))

</source>
</class>

<class classid="16" nclones="2" nlines="14" similarity="100">
<source file="systems/kivy-2.1.0/examples/demo/touchtracer/main.py" startline="40" endline="55" pcid="3238">
def calculate_points(x1, y1, x2, y2, steps=5):
    dx = x2 - x1
    dy = y2 - y1
    dist = sqrt(dx * dx + dy * dy)
    if dist < steps:
        return
    o = []
    m = dist / steps
    for i in range(1, int(m)):
        mi = i / m
        lastx = x1 + dx * mi
        lasty = y1 + dy * mi
        o.extend([lastx, lasty])
    return o


</source>
<source file="systems/kivy-2.1.0/examples/widgets/colorpicker.py" startline="118" endline="133" pcid="3383">
def calculate_points(x1, y1, x2, y2, steps=5):
    dx = x2 - x1
    dy = y2 - y1
    dist = sqrt(dx * dx + dy * dy)
    if dist < steps:
        return
    o = []
    m = dist / steps
    for i in range(1, int(m)):
        mi = i / m
        lastx = x1 + dx * mi
        lasty = y1 + dy * mi
        o.extend([lastx, lasty])
    return o


</source>
</class>

</clones>
