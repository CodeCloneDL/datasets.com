<clones>
<systeminfo processor="nicad6" system="locust-2.8.4" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="414" npairs="1"/>
<runinfo ncompares="341" cputime="40389"/>
<classinfo nclasses="1"/>

<class classid="1" nclones="2" nlines="14" similarity="100">
<source file="systems/locust-2.8.4/locust/test/test_locust_class.py" startline="177" endline="194" pcid="203">
    def test_on_stop_interrupt(self):
        class MyTasks(TaskSet):
            t2_executed = False
            on_stop_executed = False

            def on_stop(self):
                self.on_stop_executed = True

            @task
            def t2(self):
                self.t2_executed = True
                self.interrupt(reschedule=False)

        ts = MyTasks(self.locust)
        self.assertRaises(RescheduleTask, lambda: ts.run())
        self.assertTrue(ts.t2_executed)
        self.assertTrue(ts.on_stop_executed)

</source>
<source file="systems/locust-2.8.4/locust/test/test_locust_class.py" startline="195" endline="212" pcid="206">
    def test_on_stop_interrupt_reschedule(self):
        class MyTasks(TaskSet):
            t2_executed = False
            on_stop_executed = False

            def on_stop(self):
                self.on_stop_executed = True

            @task
            def t2(self):
                self.t2_executed = True
                self.interrupt(reschedule=True)

        ts = MyTasks(self.locust)
        self.assertRaises(RescheduleTaskImmediately, lambda: ts.run())
        self.assertTrue(ts.t2_executed)
        self.assertTrue(ts.on_stop_executed)

</source>
</class>

</clones>
