<clones>
<systeminfo processor="nicad6" system="yowsup-3.3.0" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1783" npairs="3"/>
<runinfo ncompares="1595" cputime="41886"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="14" similarity="100">
<source file="systems/yowsup-3.3.0/yowsup/axolotl/manager.py" startline="165" endline="180" pcid="73">
    def decrypt_pkmsg(self, senderid, data, unpad):
        logger.debug("decrypt_pkmsg(senderid=%s, data=(omitted), unpad=%s)" % (senderid, unpad))
        pkmsg = PreKeyWhisperMessage(serialized=data)
        try:
            plaintext = self._get_session_cipher(senderid).decryptPkmsg(pkmsg)
            return self._unpad(plaintext) if unpad else plaintext
        except NoSessionException:
            raise exceptions.NoSessionException()
        except InvalidKeyIdException:
            raise exceptions.InvalidKeyIdException()
        except InvalidMessageException:
            raise exceptions.InvalidMessageException()
        except DuplicateMessageException:
            raise exceptions.DuplicateMessageException()


</source>
<source file="systems/yowsup-3.3.0/yowsup/axolotl/manager.py" startline="181" endline="196" pcid="74">
    def decrypt_msg(self, senderid, data, unpad):
        logger.debug("decrypt_msg(senderid=%s, data=[omitted], unpad=%s)" % (senderid, unpad))
        msg = WhisperMessage(serialized=data)
        try:
            plaintext = self._get_session_cipher(senderid).decryptMsg(msg)

            return self._unpad(plaintext) if unpad else plaintext
        except NoSessionException:
            raise exceptions.NoSessionException()
        except InvalidKeyIdException:
            raise exceptions.InvalidKeyIdException()
        except InvalidMessageException:
            raise exceptions.InvalidMessageException()
        except DuplicateMessageException:
            raise exceptions.DuplicateMessageException()

</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/yowsup-3.3.0/yowsup/layers/axolotl/layer_receive.py" startline="99" endline="112" pcid="910">
    def handlePreKeyWhisperMessage(self, node):
        pkMessageProtocolEntity = EncryptedMessageProtocolEntity.fromProtocolTreeNode(node)
        enc = pkMessageProtocolEntity.getEnc(EncProtocolEntity.TYPE_PKMSG)
        plaintext = self.manager.decrypt_pkmsg(pkMessageProtocolEntity.getAuthor(False), enc.getData(),
                                               enc.getVersion() == 2)

        if enc.getVersion() == 2:
            self.parseAndHandleMessageProto(pkMessageProtocolEntity, plaintext)

        node = pkMessageProtocolEntity.toProtocolTreeNode()
        node.addChild((ProtoProtocolEntity(plaintext, enc.getMediaType())).toProtocolTreeNode())

        self.toUpper(node)

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/axolotl/layer_receive.py" startline="113" endline="127" pcid="911">
    def handleWhisperMessage(self, node):
        encMessageProtocolEntity = EncryptedMessageProtocolEntity.fromProtocolTreeNode(node)

        enc = encMessageProtocolEntity.getEnc(EncProtocolEntity.TYPE_MSG)
        plaintext = self.manager.decrypt_msg(encMessageProtocolEntity.getAuthor(False), enc.getData(),
                                             enc.getVersion() == 2)

        if enc.getVersion() == 2:
            self.parseAndHandleMessageProto(encMessageProtocolEntity, plaintext)

        node = encMessageProtocolEntity.toProtocolTreeNode()
        node.addChild((ProtoProtocolEntity(plaintext, enc.getMediaType())).toProtocolTreeNode())

        self.toUpper(node)

</source>
</class>

<class classid="3" nclones="2" nlines="10" similarity="100">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_notifications/protocolentities/test_notification.py" startline="7" endline="17" pcid="1241">
    def setUp(self):
        self.ProtocolEntity = NotificationProtocolEntity
        attribs = {
            "t": "12345",
            "from": "from_jid",
            "offline": "0",
            "type": "notif_type",
            "id": "message-id",
            "notify": "notify_name"
        }
        self.node = ProtocolTreeNode("notification", attribs)
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/test_message.py" startline="7" endline="19" pcid="1355">
    def setUp(self):
        self.ProtocolEntity = MessageProtocolEntity
        # ORDER_MATTERS for node.toString() to output return attribs in same order
        attribs = {
            "type": "message_type",
            "id": "message-id",
            "t": "12345",
            "offline": "0",
            "from": "from_jid",
            "notify": "notify_name"
        }
        self.node = ProtocolTreeNode("message", attribs)

</source>
</class>

</clones>
