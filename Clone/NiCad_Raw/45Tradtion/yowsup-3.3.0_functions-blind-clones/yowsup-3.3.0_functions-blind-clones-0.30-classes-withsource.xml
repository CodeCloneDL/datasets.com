<clones>
<systeminfo processor="nicad6" system="yowsup-3.3.0" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1783" npairs="43"/>
<runinfo ncompares="9887" cputime="46224"/>
<classinfo nclasses="15"/>

<class classid="1" nclones="2" nlines="14" similarity="100">
<source file="systems/yowsup-3.3.0/yowsup/axolotl/manager.py" startline="165" endline="180" pcid="73">
    def decrypt_pkmsg(self, senderid, data, unpad):
        logger.debug("decrypt_pkmsg(senderid=%s, data=(omitted), unpad=%s)" % (senderid, unpad))
        pkmsg = PreKeyWhisperMessage(serialized=data)
        try:
            plaintext = self._get_session_cipher(senderid).decryptPkmsg(pkmsg)
            return self._unpad(plaintext) if unpad else plaintext
        except NoSessionException:
            raise exceptions.NoSessionException()
        except InvalidKeyIdException:
            raise exceptions.InvalidKeyIdException()
        except InvalidMessageException:
            raise exceptions.InvalidMessageException()
        except DuplicateMessageException:
            raise exceptions.DuplicateMessageException()


</source>
<source file="systems/yowsup-3.3.0/yowsup/axolotl/manager.py" startline="181" endline="196" pcid="74">
    def decrypt_msg(self, senderid, data, unpad):
        logger.debug("decrypt_msg(senderid=%s, data=[omitted], unpad=%s)" % (senderid, unpad))
        msg = WhisperMessage(serialized=data)
        try:
            plaintext = self._get_session_cipher(senderid).decryptMsg(msg)

            return self._unpad(plaintext) if unpad else plaintext
        except NoSessionException:
            raise exceptions.NoSessionException()
        except InvalidKeyIdException:
            raise exceptions.InvalidKeyIdException()
        except InvalidMessageException:
            raise exceptions.InvalidMessageException()
        except DuplicateMessageException:
            raise exceptions.DuplicateMessageException()

</source>
</class>

<class classid="2" nclones="2" nlines="13" similarity="76">
<source file="systems/yowsup-3.3.0/yowsup/demos/cli/layer.py" startline="185" endline="202" pcid="188">
    def profile_setPicture(self, path):
        if self.assertConnected():
            with PILOptionalModule(failMessage = "No PIL library installed, try install pillow") as imp:
                Image = imp("Image")
                def onSuccess(resultIqEntity, originalIqEntity):
                    self.output("Profile picture updated successfully")

                def onError(errorIqEntity, originalIqEntity):
                    logger.error("Error updating profile picture")

                #example by @aesedepece in https://github.com/tgalal/yowsup/pull/781
                #modified to support python3
                src = Image.open(path)
                pictureData = src.resize((640, 640)).tobytes("jpeg", "RGB")
                picturePreview = src.resize((96, 96)).tobytes("jpeg", "RGB")
                iq = SetPictureIqProtocolEntity(self.getOwnJid(), picturePreview, pictureData)
                self._sendIq(iq, onSuccess, onError)

</source>
<source file="systems/yowsup-3.3.0/yowsup/demos/cli/layer.py" startline="288" endline="307" pcid="205">
    def group_picture(self, group_jid, path):
        if self.assertConnected():
            with PILOptionalModule(failMessage = self.__class__.FAIL_OPT_PILLOW) as imp:
                Image = imp("Image")

                def onSuccess(resultIqEntity, originalIqEntity):
                    self.output("Group picture updated successfully")

                def onError(errorIqEntity, originalIqEntity):
                    logger.error("Error updating Group picture")

                #example by @aesedepece in https://github.com/tgalal/yowsup/pull/781
                #modified to support python3
                src = Image.open(path)
                pictureData = src.resize((640, 640)).tobytes("jpeg", "RGB")
                picturePreview = src.resize((96, 96)).tobytes("jpeg", "RGB")
                iq = SetPictureIqProtocolEntity(self.aliasToJid(group_jid), picturePreview, pictureData)
                self._sendIq(iq, onSuccess, onError)


</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="75">
<source file="systems/yowsup-3.3.0/yowsup/demos/common/sink_worker.py" startline="57" endline="69" pcid="281">
            return None

        return enc_data

    def _decrypt(self, ciphertext, ref_key, media_info):
        length_kb = int(math.ceil(len(ciphertext) / 1024))
        progress = self._create_progress_iterator(range(length_kb), length_kb, "Decrypt        ")
        try:
            plaintext = self._media_cipher.decrypt(ciphertext, ref_key, media_info)
            progress.update(length_kb)
            return plaintext
        except Exception as e:
            progress.set_description("Decrypt Error  ")
</source>
<source file="systems/yowsup-3.3.0/yowsup/demos/common/sink_worker.py" startline="70" endline="83" pcid="282">
            logger.error(e)

        return None

    def _write(self, data, filename):
        length_kb = int(math.ceil(len(data) / 1024))
        progress = self._create_progress_iterator(range(length_kb), length_kb, "Write          ")
        try:
            with open(filename, 'wb') as f:
                f.write(data)
            progress.update(length_kb)
            return filename
        except Exception as e:
            progress.set_description("Write error    ")
</source>
</class>

<class classid="4" nclones="2" nlines="12" similarity="76">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/layer.py" startline="129" endline="138" pcid="477">
    def recvNotification(self, node):
        if node["type"] == "w:gp2":
            if node.getChild("subject"):
                self.toUpper(SubjectGroupsNotificationProtocolEntity.fromProtocolTreeNode(node))
            elif node.getChild("create"):
                self.toUpper(CreateGroupsNotificationProtocolEntity.fromProtocolTreeNode(node))
            elif node.getChild("remove"):
                self.toUpper(RemoveGroupsNotificationProtocolEntity.fromProtocolTreeNode(node))
            elif node.getChild("add"):
                self.toUpper(AddGroupsNotificationProtocolEntity.fromProtocolTreeNode(node))
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_contacts/layer.py" startline="19" endline="32" pcid="1119">
    def recvNotification(self, node):
        if node["type"] == "contacts":
            if node.getChild("remove"):
                self.toUpper(RemoveContactNotificationProtocolEntity.fromProtocolTreeNode(node))
            elif node.getChild("add"):
                self.toUpper(AddContactNotificationProtocolEntity.fromProtocolTreeNode(node))
            elif node.getChild("update"):
                self.toUpper(UpdateContactNotificationProtocolEntity.fromProtocolTreeNode(node))
            elif node.getChild("sync"):
                self.toUpper(ContactsSyncNotificationProtocolEntity.fromProtocolTreeNode(node))
            else:
                logger.warning("Unsupported notification type: %s " % node["type"])
                logger.debug("Unsupported notification node: %s" % node)

</source>
</class>

<class classid="5" nclones="2" nlines="12" similarity="76">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/protocolentities/iq_result_groups_info.py" startline="24" endline="37" pcid="520">
    def setGroupProps(self, groupId, creationTimestamp, creatorJid,
                      subject, subjectTime, subjectOwnerJid,
                      participants):

        assert type(participants) is dict, "Participants must be a dict {jid => type?}"

        self.groupId = groupId
        self.creationTimestamp = int(creationTimestamp)
        self.creatorJid = creatorJid
        self.subject = subject
        self.subjectTime = int(subjectTime)
        self.subjectOwnerJid = subjectOwnerJid
        self.participants = participants

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/protocolentities/notification_groups_create.py" startline="31" endline="46" pcid="590">
    def setGroupProps(self, createType, key, groupId, creationTimestamp, creatorJid,
                      subject, subjectTime, subjectOwnerJid,
                      participants):

        assert type(participants) is dict, "Participants must be a dict {jid => type?}"

        self.createType = createType
        self.groupId = groupId
        self.creationTimestamp = int(creationTimestamp)
        self.creatorJid = creatorJid
        self.subject = subject
        self.subjectTime = int(subjectTime)
        self.subjectOwnerJid = subjectOwnerJid
        self.participants = participants
        self._key = key

</source>
</class>

<class classid="6" nclones="3" nlines="19" similarity="72">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/protocolentities/iq_result_groups_info.py" startline="77" endline="99" pcid="530">
    def toProtocolTreeNode(self):
        node = super(InfoGroupsResultIqProtocolEntity, self).toProtocolTreeNode()
        groupNode = ProtocolTreeNode("group", {
            "subject": self.getSubject(),
            "creation": str(self.getCreationTimestamp()),
            "creator": self.getCreatorJid(),
            "s_t": self.getSubjectTimestamp(),
            "s_o": self.getSubjectOwnerJid(),
            "id": self.getGroupId()
        })

        participants = []
        for jid, _type in self.getParticipants().items():
            pnode = ProtocolTreeNode("participant", {"jid": jid})
            if _type:
                pnode["type"] = _type
            participants.append(pnode)

        groupNode.addChildren(participants)
        node.addChild(groupNode)

        return node

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/protocolentities/iq_result_groups_list.py" startline="42" endline="67" pcid="543">

    def toProtocolTreeNode(self):
        node = super(ListGroupsResultIqProtocolEntity, self).toProtocolTreeNode()

        groupsNodes = []
        for group in self.groupsList:
            groupNode = ProtocolTreeNode("group", {
                "id":       group.getId(),
                "creator":    group.getCreator(),
                "subject":  group.getSubject(),
                "s_o":      group.getSubjectOwner(),
                "s_t":      str(group.getSubjectTime()),
                "creation": str(group.getCreationTime())
                },
            )
            participants = []
            for jid, _type in group.getParticipants().items():
                pnode = ProtocolTreeNode("participant", {"jid": jid})
                if _type:
                    pnode["type"] = _type
                participants.append(pnode)
            groupNode.addChildren(participants)
            groupsNodes.append(groupNode)

        node.addChild(ProtocolTreeNode("groups", children = groupsNodes))
        return node
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/protocolentities/notification_groups_create.py" startline="99" endline="123" pcid="603">
    def toProtocolTreeNode(self):
        node = super(CreateGroupsNotificationProtocolEntity, self).toProtocolTreeNode()
        createNode = ProtocolTreeNode("create", {"type": self.getCreatetype(), "key": self.key})
        groupNode = ProtocolTreeNode("group", {
            "subject": self.getSubject(),
            "creation": str(self.getCreationTimestamp()),
            "creator": self.getCreatorJid(),
            "s_t": self.getSubjectTimestamp(),
            "s_o": self.getSubjectOwnerJid(),
            "id": self.getGroupId()
        })

        participants = []
        for jid, _type in self.getParticipants().items():
            pnode = ProtocolTreeNode("participant", {"jid": jid})
            if _type:
                pnode["type"] = _type
            participants.append(pnode)

        groupNode.addChildren(participants)
        createNode.addChild(groupNode)
        node.addChild(createNode)

        return node

</source>
</class>

<class classid="7" nclones="2" nlines="10" similarity="90">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/protocolentities/notification_groups_add.py" startline="28" endline="40" pcid="537">
    def toProtocolTreeNode(self):
        node = super(AddGroupsNotificationProtocolEntity, self).toProtocolTreeNode()
        addNode = ProtocolTreeNode("add")
        participants = []
        for jid in self.getParticipants():
            pnode = ProtocolTreeNode("participant", {"jid": jid})
            participants.append(pnode)

        addNode.addChildren(participants)
        node.addChild(addNode)

        return node

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_groups/protocolentities/notification_groups_remove.py" startline="34" endline="46" pcid="572">
    def toProtocolTreeNode(self):
        node = super(RemoveGroupsNotificationProtocolEntity, self).toProtocolTreeNode()
        removeNode = ProtocolTreeNode("remove", {"subject": self.subject})
        participants = []
        for jid in self.getParticipants():
            pnode = ProtocolTreeNode("participant", {"jid": jid})
            participants.append(pnode)

        removeNode.addChildren(participants)
        node.addChild(removeNode)

        return node

</source>
</class>

<class classid="8" nclones="4" nlines="17" similarity="76">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_media/protocolentities/test_message_media_extendedtext.py" startline="7" endline="26" pcid="670">
    def setUp(self):
        super(ExtendedTextMediaMessageProtocolEntityTest, self).setUp()
        self.ProtocolEntity = ExtendedTextMediaMessageProtocolEntity

        m = Message()
        media_message = Message.ExtendedTextMessage()
        media_message.canonical_url = "url"
        media_message.text = "text"
        media_message.matched_text = "matched_text"
        media_message.description = "desc"
        media_message.title = "title"
        media_message.jpeg_thumbnail = b"thumb"
        m.extended_text_message.MergeFrom(media_message)

        proto_node = self.node.getChild("proto")
        proto_node["mediatype"] = "url"
        proto_node.setData(m.SerializeToString())

        self._entity = ExtendedTextMediaMessageProtocolEntity\
            .fromProtocolTreeNode(self.node)  # type: ExtendedTextMediaMessageProtocolEntity
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_media/protocolentities/test_message_media_downloadable_image.py" startline="7" endline="23" pcid="752">
class ImageDownloadableMediaMessageProtocolEntityTest(MediaMessageProtocolEntityTest):
    def setUp(self):
        super(ImageDownloadableMediaMessageProtocolEntityTest, self).setUp()
        self.ProtocolEntity = ImageDownloadableMediaMessageProtocolEntity
        proto_node = self.node.getChild("proto")
        m = Message()
        media_message = Message.ImageMessage()
        media_message.url = "url"
        media_message.mimetype = "image/jpeg"
        media_message.caption = "caption"
        media_message.file_sha256 = b"SHA256"
        media_message.file_length = 123
        media_message.height = 20
        media_message.width = 20
        media_message.media_key = b"MEDIA_KEY"
        media_message.jpeg_thumbnail = b"THUMBNAIL"
        m.image_message.MergeFrom(media_message)
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_media/protocolentities/test_message_media_downloadable_video.py" startline="7" endline="27" pcid="735">
class VideoDownloadableMediaMessageProtocolEntityTest(MediaMessageProtocolEntityTest):
    def setUp(self):
        super(VideoDownloadableMediaMessageProtocolEntityTest, self).setUp()
        self.ProtocolEntity = VideoDownloadableMediaMessageProtocolEntity
        proto_node = self.node.getChild("proto")
        m = Message()
        media_message = Message.VideoMessage()
        media_message.url = "url"
        media_message.mimetype = "video/mp4"
        media_message.caption = "caption"
        media_message.file_sha256 = b"shaval"
        media_message.file_length = 4
        media_message.width = 1
        media_message.height = 2
        media_message.seconds = 3
        media_message.media_key = b"MEDIA_KEY"
        media_message.jpeg_thumbnail = b"THUMBNAIL"
        media_message.gif_attribution = 0
        media_message.gif_playback = False
        media_message.streaming_sidecar = b''
        m.video_message.MergeFrom(media_message)
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_media/protocolentities/test_message_media_downloadable_audio.py" startline="7" endline="21" pcid="777">
    def setUp(self):
        super(AudioDownloadableMediaMessageProtocolEntityTest, self).setUp()
        self.ProtocolEntity = AudioDownloadableMediaMessageProtocolEntity
        proto_node = self.node.getChild("proto")
        m = Message()
        media_message = Message.AudioMessage()
        media_message.url = "url"
        media_message.mimetype = "audio/ogg"
        media_message.file_sha256 = b"SHA256"
        media_message.file_length = 123
        media_message.media_key = b"MEDIA_KEY"
        media_message.seconds = 24
        media_message.ptt = True
        m.audio_message.MergeFrom(media_message)
        proto_node.setData(m.SerializeToString())
</source>
</class>

<class classid="9" nclones="2" nlines="12" similarity="84">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_media/protocolentities/test_message_media_location.py" startline="7" endline="22" pcid="728">
    def setUp(self):
        super(LocationMediaMessageProtocolEntityTest, self).setUp()
        self.ProtocolEntity = LocationMediaMessageProtocolEntity

        m = Message()
        location_message = Message.LocationMessage()
        location_message.degrees_latitude = 30.089037
        location_message.degrees_longitude = 31.319488
        location_message.name = "kaos"
        location_message.url = "kaos_url"

        m.location_message.MergeFrom(location_message)

        proto_node = self.node.getChild("proto")
        proto_node["mediatype"] = "location"
        proto_node.setData(m.SerializeToString())
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_media/protocolentities/test_message_media_contact.py" startline="7" endline="17" pcid="736">
    def setUp(self):
        super(ContactMediaMessageProtocolEntityTest, self).setUp()
        self.ProtocolEntity = ContactMediaMessageProtocolEntity
        m = Message()
        contact_message = Message.ContactMessage()
        contact_message.display_name = "abc"
        contact_message.vcard = b"VCARD_DATA"
        m.contact_message.MergeFrom(contact_message)
        proto_node = self.node.getChild("proto")
        proto_node["mediatype"] = "contact"
        proto_node.setData(m.SerializeToString())
</source>
</class>

<class classid="10" nclones="2" nlines="10" similarity="100">
<source file="systems/yowsup-3.3.0/yowsup/layers/axolotl/layer_receive.py" startline="99" endline="112" pcid="910">
    def handlePreKeyWhisperMessage(self, node):
        pkMessageProtocolEntity = EncryptedMessageProtocolEntity.fromProtocolTreeNode(node)
        enc = pkMessageProtocolEntity.getEnc(EncProtocolEntity.TYPE_PKMSG)
        plaintext = self.manager.decrypt_pkmsg(pkMessageProtocolEntity.getAuthor(False), enc.getData(),
                                               enc.getVersion() == 2)

        if enc.getVersion() == 2:
            self.parseAndHandleMessageProto(pkMessageProtocolEntity, plaintext)

        node = pkMessageProtocolEntity.toProtocolTreeNode()
        node.addChild((ProtoProtocolEntity(plaintext, enc.getMediaType())).toProtocolTreeNode())

        self.toUpper(node)

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/axolotl/layer_receive.py" startline="113" endline="127" pcid="911">
    def handleWhisperMessage(self, node):
        encMessageProtocolEntity = EncryptedMessageProtocolEntity.fromProtocolTreeNode(node)

        enc = encMessageProtocolEntity.getEnc(EncProtocolEntity.TYPE_MSG)
        plaintext = self.manager.decrypt_msg(encMessageProtocolEntity.getAuthor(False), enc.getData(),
                                             enc.getVersion() == 2)

        if enc.getVersion() == 2:
            self.parseAndHandleMessageProto(encMessageProtocolEntity, plaintext)

        node = encMessageProtocolEntity.toProtocolTreeNode()
        node.addChild((ProtoProtocolEntity(plaintext, enc.getMediaType())).toProtocolTreeNode())

        self.toUpper(node)

</source>
</class>

<class classid="11" nclones="3" nlines="10" similarity="80">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_calls/protocolentities/test_call.py" startline="7" endline="17" pcid="1050">
    def setUp(self):
        self.ProtocolEntity = CallProtocolEntity
        children = [ProtocolTreeNode("offer", {"call-id": "call_id"})]
        attribs = {
            "t": "12345",
            "from": "from_jid",
            "offline": "0",
            "id": "message_id",
            "notify": "notify_name"
        }
        self.node = ProtocolTreeNode("call", attribs, children)
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/test_message.py" startline="7" endline="19" pcid="1355">
    def setUp(self):
        self.ProtocolEntity = MessageProtocolEntity
        # ORDER_MATTERS for node.toString() to output return attribs in same order
        attribs = {
            "type": "message_type",
            "id": "message-id",
            "t": "12345",
            "offline": "0",
            "from": "from_jid",
            "notify": "notify_name"
        }
        self.node = ProtocolTreeNode("message", attribs)

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_notifications/protocolentities/test_notification.py" startline="7" endline="17" pcid="1241">
    def setUp(self):
        self.ProtocolEntity = NotificationProtocolEntity
        attribs = {
            "t": "12345",
            "from": "from_jid",
            "offline": "0",
            "type": "notif_type",
            "id": "message-id",
            "notify": "notify_name"
        }
        self.node = ProtocolTreeNode("notification", attribs)
</source>
</class>

<class classid="12" nclones="2" nlines="11" similarity="81">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_presence/protocolentities/presence.py" startline="49" endline="60" pcid="1202">
    def __str__(self):
        out  = "Presence:\n"
        if self._type:
            out += "Type: %s\n" % self._type
        if self.name:
            out += "Name: %s\n" % self.name
        if self._from:
            out += "From: %s\n" % self._from
        if self.last:
            out += "Last seen: %s\n" % self.last
        return out

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_iq/protocolentities/iq.py" startline="57" endline="68" pcid="1314">
    def __str__(self):
        out  = "Iq:\n"
        out += "ID: %s\n" % self._id
        out += "Type: %s\n" % self._type
        if self.xmlns:
            out += "xmlns: %s\n" % self.xmlns
        if self.to:
            out += "to: %s\n" % self.to
        elif self._from:
            out += "from: %s\n" % self._from
        return out

</source>
</class>

<class classid="13" nclones="10" nlines="15" similarity="70">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_image.py" startline="14" endline="27" pcid="1395">

    def __str__(self):
        attrs = []
        if self.width is not None:
            attrs.append(("width", self.width))
        if self.height is not None:
            attrs.append(("height", self.height))
        if self.caption is not None:
            attrs.append(("caption", self.caption))
        if self.jpeg_thumbnail is not None:
            attrs.append(("jpeg_thumbnail", "[binary data]"))
        attrs.append(("downloadable", self.downloadablemedia_attributes))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_message_key.py" startline="8" endline="20" pcid="1549">
    def __str__(self):
        attrs = []
        if self.remote_jid is not None:
            attrs.append(("remote_jid", self.remote_jid))
        if self.from_me is not None:
            attrs.append(("from_me", self.from_me))
        if self.id is not None:
            attrs.append(("id", self.id))
        if self.participant is not None:
            attrs.append(("participant", self.participant))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_extendedtext.py" startline="14" endline="32" pcid="1408">
    def __str__(self):
        attrs = []
        if self.text is not None:
            attrs.append(("text", self.text))
        if self.matched_text is not None:
            attrs.append(("matched_text", self.matched_text))
        if self.canonical_url is not None:
            attrs.append(("canonical_url", self.canonical_url))
        if self.description is not None:
            attrs.append(("description", self.description))
        if self.title is not None:
            attrs.append(("title", self.title))
        if self.jpeg_thumbnail is not None:
            attrs.append(("jpeg_thumbnail", "[binary data]"))
        if self.context_info is not None:
            attrs.append(("context_info", self.context_info))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_document.py" startline="14" endline="29" pcid="1462">

    def __str__(self):
        attrs = []
        if self.file_name is not None:
            attrs.append(("file_name", self.file_name))
        if self.file_length is not None:
            attrs.append(("file_length", self.file_length))
        if self.title is not None:
            attrs.append(("title", self.title))
        if self.page_count is not None:
            attrs.append(("page_count", self.page_count))
        if self.jpeg_thumbnail is not None:
            attrs.append(("jpeg_thumbnail", self.jpeg_thumbnail))
        attrs.append(("downloadable", self.downloadablemedia_attributes))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_audio.py" startline="17" endline="28" pcid="1559">

    def __str__(self):
        attrs = []
        if self.seconds is not None:
            attrs.append(("seconds", self.seconds))
        if self.ptt is not None:
            attrs.append(("ptt", self.ptt))
        if self._streaming_sidecar is not None:
            attrs.append(("streaming_sidecar", "[binary data]"))
        attrs.append(("downloadable", self.downloadablemedia_attributes))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_sticker.py" startline="8" endline="19" pcid="1424">
    def __str__(self):
        attrs = []
        if self.width is not None:
            attrs.append(("width", self.width))
        if self.height is not None:
            attrs.append(("height", self.height))
        if self.png_thumbnail is not None:
            attrs.append(("png_thumbnail", self.png_thumbnail))
        attrs.append(("downloadable", self.downloadablemedia_attributes))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_context_info.py" startline="19" endline="37" pcid="1602">
    def __str__(self):
        attribs = []
        if self._stanza_id is not None:
            attribs.append(("stanza_id", self.stanza_id))
        if self._participant is not None:
            attribs.append(("participant", self.participant))
        if self.quoted_message is not None:
            attribs.append(("quoted_message", self.quoted_message))
        if self._remote_jid is not None:
            attribs.append(("remote_jid", self.remote_jid))
        if self.mentioned_jid is not None and len(self.mentioned_jid):
            attribs.append(("mentioned_jid", self.mentioned_jid))
        if self.edit_version is not None:
            attribs.append(("edit_version", self.edit_version))
        if self.revoke_message is not None:
            attribs.append(("revoke_message", self.revoke_message))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attribs)))

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_video.py" startline="14" endline="35" pcid="1434">
    def __str__(self):
        attrs = []
        if self.width is not None:
            attrs.append(("width", self.width))
        if self.height is not None:
            attrs.append(("height", self.height))
        if self.seconds is not None:
            attrs.append(("seconds", self.seconds))
        if self.gif_playback is not None:
            attrs.append(("gif_playback", self.gif_playback))
        if self.jpeg_thumbnail is not None:
            attrs.append(("jpeg_thumbnail", "[binary data]"))
        if self.gif_attribution is not None:
            attrs.append(("gif_attribution", self.gif_attribution))
        if self.caption is not None:
            attrs.append(("caption", self.caption))
        if self.streaming_sidecar is not None:
            attrs.append(("streaming_sidecar", "[binary data]"))
        attrs.append(("downloadable", self.downloadablemedia_attributes))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_message.py" startline="40" endline="66" pcid="1477">
        self._protocol = protocol  # type: ProtocolAttributes

    def __str__(self):
        attrs = []
        if self.conversation is not None:
            attrs.append(("conversation", self.conversation))
        if self.image is not None:
            attrs.append(("image", self.image))
        if self.contact is not None:
            attrs.append(("contact", self.contact))
        if self.location is not None:
            attrs.append(("location", self.location))
        if self.extended_text is not None:
            attrs.append(("extended_text", self.extended_text))
        if self.document is not None:
            attrs.append(("document", self.document))
        if self.audio is not None:
            attrs.append(("audio", self.audio))
        if self.video is not None:
            attrs.append(("video", self.video))
        if self.sticker is not None:
            attrs.append(("sticker", self.sticker))
        if self._sender_key_distribution_message is not None:
            attrs.append(("sender_key_distribution_message", self.sender_key_distribution_message))
        if self._protocol is not None:
            attrs.append(("protocol", self.protocol))

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/attributes_location.py" startline="33" endline="59" pcid="1525">
    def __str__(self):
        attrs = []
        if self.degrees_latitude is not None:
            attrs.append(("degrees_latitude", self.degrees_latitude))
        if self.degrees_longitude is not None:
            attrs.append(("degrees_longitude", self.degrees_longitude))
        if self.name is not None:
            attrs.append(("name", self.name))
        if self.address is not None:
            attrs.append(("address", self.address))
        if self.url is not None:
            attrs.append(("url", self.url))
        if self.duration is not None:
            attrs.append(("duration", self.duration))
        if self.accuracy_in_meters is not None:
            attrs.append(("accuracy_in_meters", self.accuracy_in_meters))
        if self.speed_in_mps is not None:
            attrs.append(("speed_in_mps", self.speed_in_mps))
        if self.degrees_clockwise_from_magnetic_north is not None:
            attrs.append(("degrees_clockwise_from_magnetic_north", self.degrees_clockwise_from_magnetic_north))
        if self.axolotl_sender_key_distribution_message is not None:
            attrs.append(("axolotl_sender_key_distribution_message", "[binary data]"))
        if self.jpeg_thumbnail is not None:
            attrs.append(("jpeg_thumbnail", "[binary data]"))

        return "[%s]" % " ".join((map(lambda item: "%s=%s" % item, attrs)))

</source>
</class>

<class classid="14" nclones="5" nlines="18" similarity="70">
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/converter.py" startline="87" endline="113" pcid="1577">
            self.proto_to_contextinfo(proto.context_info) if proto.HasField("context_info") else None
        )

    def location_to_proto(self, location_attributes):
        # type: (LocationAttributes) -> Message.LocationMessage
        location_message = Message.LocationMessage()
        if location_attributes.degrees_latitude is not None:
            location_message.degrees_latitude = location_attributes.degrees_latitude
        if location_attributes.degrees_longitude is not None:
            location_message.degrees_longitude = location_attributes.degrees_longitude
        if location_attributes.name is not None:
            location_message.name = location_attributes.name
        if location_attributes.address is not None:
            location_message.address = location_attributes.address
        if location_attributes.url is not None:
            location_message.url = location_attributes.url
        if location_attributes.duration is not None:
            location_message.duration = location_attributes.duration
        if location_attributes.accuracy_in_meters is not None:
            location_message.accuracy_in_meters = location_attributes.accuracy_in_meters
        if location_attributes.speed_in_mps is not None:
            location_message.speed_in_mps = location_attributes.speed_in_mps
        if location_attributes.degrees_clockwise_from_magnetic_north is not None:
            location_message.degrees_clockwise_from_magnetic_north = \
                location_attributes.degrees_clockwise_from_magnetic_north
        if location_attributes.axolotl_sender_key_distribution_message is not None:
            location_message._axolotl_sender_key_distribution_message = \
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/converter.py" startline="230" endline="251" pcid="1587">
            self.proto_to_downloadablemedia(proto),
            proto.seconds,
            proto.ptt
        )

    def video_to_proto(self, video_attributes):
        # type: (VideoAttributes) -> Message.VideoMessage
        m = Message.VideoMessage()
        if video_attributes.width is not None:
            m.width = video_attributes.width
        if video_attributes.height is not None:
            m.height = video_attributes.height
        if video_attributes.seconds is not None:
            m.seconds = video_attributes.seconds
        if video_attributes.gif_playback is not None:
            m.gif_playback = video_attributes.gif_playback
        if video_attributes.jpeg_thumbnail is not None:
            m.jpeg_thumbnail = video_attributes.jpeg_thumbnail
        if video_attributes.gif_attribution is not None:
            m.gif_attribution = video_attributes.gif_attribution
        if video_attributes.caption is not None:
            m.caption = video_attributes.caption
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/converter.py" startline="155" endline="173" pcid="1581">
            proto.width, proto.height,
            proto.caption if proto.HasField("caption") else None,
            proto.jpeg_thumbnail if proto.HasField("jpeg_thumbnail") else None
        )

    def extendedtext_to_proto(self, extendedtext_attributes):
        # type: (ExtendedTextAttributes) -> Message.ExtendedTextMessage
        m = Message.ExtendedTextMessage()
        if extendedtext_attributes.text is not None:
            m.text = extendedtext_attributes.text
        if extendedtext_attributes.matched_text is not None:
            m.matched_text = extendedtext_attributes.matched_text
        if extendedtext_attributes.canonical_url is not None:
            m.canonical_url = extendedtext_attributes.canonical_url
        if extendedtext_attributes.description is not None:
            m.description = extendedtext_attributes.description
        if extendedtext_attributes.title is not None:
            m.title = extendedtext_attributes.title
        if extendedtext_attributes.jpeg_thumbnail is not None:
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/converter.py" startline="186" endline="202" pcid="1583">
            proto.title if proto.HasField("title") else None,
            proto.jpeg_thumbnail if proto.HasField("jpeg_thumbnail") else None,
            self.proto_to_contextinfo(proto.context_info) if proto.HasField("context_info") else None
        )

    def document_to_proto(self, document_attributes):
        # type: (DocumentAttributes) -> Message.DocumentMessage

        m = Message.DocumentMessage()
        if document_attributes.file_name is not None:
            m.file_name = document_attributes.file_name
        if document_attributes.file_length is not None:
            m.file_length = document_attributes.file_length
        if document_attributes.title is not None:
            m.title = document_attributes.title
        if document_attributes.page_count is not None:
            m.page_count = document_attributes.page_count
</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/protocol_messages/protocolentities/attributes/converter.py" startline="313" endline="331" pcid="1595">
    def proto_to_media(self, proto):
        return MediaAttributes(
            context_info=proto.context_info if proto.HasField("context_info") else None
        )

    def contextinfo_to_proto(self, contextinfo_attributes):
        # type: (ContextInfoAttributes) -> ContextInfo
        cxt_info = ContextInfo()
        if contextinfo_attributes.stanza_id is not None:
            cxt_info.stanza_id = contextinfo_attributes.stanza_id
        if contextinfo_attributes.participant is not None:
            cxt_info.participant = contextinfo_attributes.participant
        if contextinfo_attributes.quoted_message:
            cxt_info.quoted_message.MergeFrom(self.message_to_proto(contextinfo_attributes.quoted_message))
        if contextinfo_attributes.remote_jid is not None:
            cxt_info.remote_jid = contextinfo_attributes.remote_jid
        if contextinfo_attributes.mentioned_jid is not None and len(contextinfo_attributes.mentioned_jid):
            cxt_info.mentioned_jid[:] = contextinfo_attributes.mentioned_jid
        if contextinfo_attributes.edit_version is not None:
</source>
</class>

<class classid="15" nclones="2" nlines="12" similarity="75">
<source file="systems/yowsup-3.3.0/yowsup/layers/interface/interface.py" startline="27" endline="39" pcid="1720">
    def __init__(self):
        super(YowInterfaceLayer, self).__init__()
        self.reconnect = False
        self.entity_callbacks = {}
        self.iqRegistry = {}
        # self.receiptsRegistry = {}
        members = inspect.getmembers(self, predicate=inspect.ismethod)
        for m in members:
            if hasattr(m[1], "entity_callback"):
                fname = m[0]
                fn = m[1]
                self.entity_callbacks[fn.entity_callback] = getattr(self, fname)

</source>
<source file="systems/yowsup-3.3.0/yowsup/layers/__init__.py" startline="45" endline="57" pcid="1743">
    def __init__(self):
        self.setLayers(None, None)
        self.interface = None
        self.event_callbacks = {}
        self.__stack = None
        self.lock = threading.Lock()
        members = inspect.getmembers(self, predicate=inspect.ismethod)
        for m in members:
            if hasattr(m[1], "event_callback"):
                fname = m[0]
                fn = m[1]
                self.event_callbacks[fn.event_callback] = getattr(self, fname)

</source>
</class>

</clones>
