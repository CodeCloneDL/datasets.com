<clones>
<systeminfo processor="nicad6" system="fastapi-0.75.0" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="1186" npairs="53"/>
<runinfo ncompares="480" cputime="38388"/>
<classinfo nclasses="13"/>

<class classid="1" nclones="2" nlines="12" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_infer_param_optionality.py" startline="107" endline="123" pcid="95">
def test_schema_1():
    """Check that the user_id is a required path parameter under /users"""
    response = client.get("/openapi.json")
    assert response.status_code == 200, response.text
    r = response.json()

    d = {
        "required": True,
        "schema": {"title": "User Id", "type": "string"},
        "name": "user_id",
        "in": "path",
    }

    assert d in r["paths"]["/users/{user_id}"]["get"]["parameters"]
    assert d in r["paths"]["/users/{user_id}/items/"]["get"]["parameters"]


</source>
<source file="systems/fastapi-0.75.0/tests/test_infer_param_optionality.py" startline="124" endline="138" pcid="96">
def test_schema_2():
    """Check that the user_id is an optional query parameter under /items"""
    response = client.get("/openapi.json")
    assert response.status_code == 200, response.text
    r = response.json()

    d = {
        "required": False,
        "schema": {"title": "User Id", "type": "string"},
        "name": "user_id",
        "in": "query",
    }

    assert d in r["paths"]["/items/{item_id}"]["get"]["parameters"]
    assert d in r["paths"]["/items/"]["get"]["parameters"]
</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial004.py" startline="103" endline="112" pcid="281">
def test_query_params_str_validations():
    response = client.post("/items/", json={"name": "Foo", "price": 42})
    assert response.status_code == 200, response.text
    assert response.json() == {
        "name": "Foo",
        "price": 42,
        "description": None,
        "tax": None,
        "tags": [],
    }
</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_path_operation_configurations/test_tutorial005.py" startline="103" endline="112" pcid="468">
def test_query_params_str_validations():
    response = client.post("/items/", json={"name": "Foo", "price": 42})
    assert response.status_code == 200, response.text
    assert response.json() == {
        "name": "Foo",
        "price": 42,
        "description": None,
        "tax": None,
        "tags": [],
    }
</source>
</class>

<class classid="3" nclones="2" nlines="10" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_body_updates/test_tutorial001_py310.py" startline="149" endline="160" pcid="360">
def test_get(client: TestClient):
    response = client.get("/items/baz")
    assert response.status_code == 200, response.text
    assert response.json() == {
        "name": "Baz",
        "description": None,
        "price": 50.2,
        "tax": 10.5,
        "tags": [],
    }


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_body_updates/test_tutorial001_py39.py" startline="149" endline="160" pcid="364">
def test_get(client: TestClient):
    response = client.get("/items/baz")
    assert response.status_code == 200, response.text
    assert response.json() == {
        "name": "Baz",
        "description": None,
        "price": 50.2,
        "tax": 10.5,
        "tags": [],
    }


</source>
</class>

<class classid="4" nclones="2" nlines="10" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_body_updates/test_tutorial001_py310.py" startline="162" endline="172" pcid="361">
def test_put(client: TestClient):
    response = client.put(
        "/items/bar", json={"name": "Barz", "price": 3, "description": None}
    )
    assert response.json() == {
        "name": "Barz",
        "description": None,
        "price": 3,
        "tax": 10.5,
        "tags": [],
    }
</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_body_updates/test_tutorial001_py39.py" startline="162" endline="172" pcid="365">
def test_put(client: TestClient):
    response = client.put(
        "/items/bar", json={"name": "Barz", "price": 3, "description": None}
    )
    assert response.json() == {
        "name": "Barz",
        "description": None,
        "price": 3,
        "tax": 10.5,
        "tags": [],
    }
</source>
</class>

<class classid="5" nclones="4" nlines="16" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_dependencies/test_tutorial006.py" startline="86" endline="104" pcid="406">
def test_get_no_headers():
    response = client.get("/items/")
    assert response.status_code == 422, response.text
    assert response.json() == {
        "detail": [
            {
                "loc": ["header", "x-token"],
                "msg": "field required",
                "type": "value_error.missing",
            },
            {
                "loc": ["header", "x-key"],
                "msg": "field required",
                "type": "value_error.missing",
            },
        ]
    }


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_bigger_applications/test_main.py" startline="439" endline="457" pcid="676">
def test_put_no_header():
    response = client.put("/items/foo")
    assert response.status_code == 422, response.text
    assert response.json() == {
        "detail": [
            {
                "loc": ["query", "token"],
                "msg": "field required",
                "type": "value_error.missing",
            },
            {
                "loc": ["header", "x-token"],
                "msg": "field required",
                "type": "value_error.missing",
            },
        ]
    }


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_dependencies/test_tutorial012.py" startline="141" endline="159" pcid="412">
def test_get_no_headers_users():
    response = client.get("/users/")
    assert response.status_code == 422, response.text
    assert response.json() == {
        "detail": [
            {
                "loc": ["header", "x-token"],
                "msg": "field required",
                "type": "value_error.missing",
            },
            {
                "loc": ["header", "x-key"],
                "msg": "field required",
                "type": "value_error.missing",
            },
        ]
    }


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_dependencies/test_tutorial012.py" startline="122" endline="140" pcid="411">
def test_get_no_headers_items():
    response = client.get("/items/")
    assert response.status_code == 422, response.text
    assert response.json() == {
        "detail": [
            {
                "loc": ["header", "x-token"],
                "msg": "field required",
                "type": "value_error.missing",
            },
            {
                "loc": ["header", "x-key"],
                "msg": "field required",
                "type": "value_error.missing",
            },
        ]
    }


</source>
</class>

<class classid="6" nclones="3" nlines="10" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_dependencies/test_tutorial006.py" startline="119" endline="128" pcid="409">
def test_get_valid_headers():
    response = client.get(
        "/items/",
        headers={
            "X-Token": "fake-super-secret-token",
            "X-Key": "fake-super-secret-key",
        },
    )
    assert response.status_code == 200, response.text
    assert response.json() == [{"item": "Foo"}, {"item": "Bar"}]
</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_dependencies/test_tutorial012.py" startline="188" endline="199" pcid="417">
def test_get_valid_headers_items():
    response = client.get(
        "/items/",
        headers={
            "X-Token": "fake-super-secret-token",
            "X-Key": "fake-super-secret-key",
        },
    )
    assert response.status_code == 200, response.text
    assert response.json() == [{"item": "Portal Gun"}, {"item": "Plumbus"}]


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_dependencies/test_tutorial012.py" startline="200" endline="209" pcid="418">
def test_get_valid_headers_users():
    response = client.get(
        "/users/",
        headers={
            "X-Token": "fake-super-secret-token",
            "X-Key": "fake-super-secret-key",
        },
    )
    assert response.status_code == 200, response.text
    assert response.json() == [{"username": "Rick"}, {"username": "Morty"}]
</source>
</class>

<class classid="7" nclones="2" nlines="10" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_path_operation_configurations/test_tutorial005_py39.py" startline="112" endline="121" pcid="458">
def test_query_params_str_validations(client: TestClient):
    response = client.post("/items/", json={"name": "Foo", "price": 42})
    assert response.status_code == 200, response.text
    assert response.json() == {
        "name": "Foo",
        "price": 42,
        "description": None,
        "tax": None,
        "tags": [],
    }
</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_path_operation_configurations/test_tutorial005_py310.py" startline="112" endline="121" pcid="466">
def test_query_params_str_validations(client: TestClient):
    response = client.post("/items/", json={"name": "Foo", "price": 42})
    assert response.status_code == 200, response.text
    assert response.json() == {
        "name": "Foo",
        "price": 42,
        "description": None,
        "tax": None,
        "tags": [],
    }
</source>
</class>

<class classid="8" nclones="7" nlines="21" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases_peewee/test_sql_databases_peewee.py" startline="399" endline="421" pcid="556">
def test_create_item(client):
    item = {"title": "Foo", "description": "Something that fights"}
    response = client.post("/users/1/items/", json=item)
    assert response.status_code == 200, response.text
    item_data = response.json()
    assert item["title"] == item_data["title"]
    assert item["description"] == item_data["description"]
    assert "id" in item_data
    assert "owner_id" in item_data
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_middleware_py310.py" startline="353" endline="375" pcid="626">
def test_create_item(client):
    item = {"title": "Foo", "description": "Something that fights"}
    response = client.post("/users/1/items/", json=item)
    assert response.status_code == 200, response.text
    item_data = response.json()
    assert item["title"] == item_data["title"]
    assert item["description"] == item_data["description"]
    assert "id" in item_data
    assert "owner_id" in item_data
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_middleware.py" startline="340" endline="362" pcid="618">
def test_create_item(client):
    item = {"title": "Foo", "description": "Something that fights"}
    response = client.post("/users/1/items/", json=item)
    assert response.status_code == 200, response.text
    item_data = response.json()
    assert item["title"] == item_data["title"]
    assert item["description"] == item_data["description"]
    assert "id" in item_data
    assert "owner_id" in item_data
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases.py" startline="344" endline="366" pcid="634">
def test_create_item(client):
    item = {"title": "Foo", "description": "Something that fights"}
    response = client.post("/users/1/items/", json=item)
    assert response.status_code == 200, response.text
    item_data = response.json()
    assert item["title"] == item_data["title"]
    assert item["description"] == item_data["description"]
    assert "id" in item_data
    assert "owner_id" in item_data
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_py39.py" startline="352" endline="374" pcid="593">
def test_create_item(client):
    item = {"title": "Foo", "description": "Something that fights"}
    response = client.post("/users/1/items/", json=item)
    assert response.status_code == 200, response.text
    item_data = response.json()
    assert item["title"] == item_data["title"]
    assert item["description"] == item_data["description"]
    assert "id" in item_data
    assert "owner_id" in item_data
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_py310.py" startline="352" endline="374" pcid="610">
def test_create_item(client):
    item = {"title": "Foo", "description": "Something that fights"}
    response = client.post("/users/1/items/", json=item)
    assert response.status_code == 200, response.text
    item_data = response.json()
    assert item["title"] == item_data["title"]
    assert item["description"] == item_data["description"]
    assert "id" in item_data
    assert "owner_id" in item_data
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_middleware_py39.py" startline="353" endline="375" pcid="601">
def test_create_item(client):
    item = {"title": "Foo", "description": "Something that fights"}
    response = client.post("/users/1/items/", json=item)
    assert response.status_code == 200, response.text
    item_data = response.json()
    assert item["title"] == item_data["title"]
    assert item["description"] == item_data["description"]
    assert "id" in item_data
    assert "owner_id" in item_data
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]
    response = client.get("/users/1")
    assert response.status_code == 200, response.text
    user_data = response.json()
    item_to_check = [it for it in user_data["items"] if it["id"] == item_data["id"]][0]
    assert item_to_check["title"] == item["title"]
    assert item_to_check["description"] == item["description"]


</source>
</class>

<class classid="9" nclones="3" nlines="13" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_testing_databases.py" startline="8" endline="23" pcid="585">
def test_testing_dbs(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./test.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app.tests import test_sql_app

    # Ensure import side effects are re-executed
    importlib.reload(test_sql_app)
    test_sql_app.test_create_user()
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)
</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_testing_databases_py310.py" startline="11" endline="26" pcid="603">
def test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./test.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app_py310.tests import test_sql_app

    # Ensure import side effects are re-executed
    importlib.reload(test_sql_app)
    test_sql_app.test_create_user()
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)
</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_testing_databases_py39.py" startline="11" endline="26" pcid="586">
def test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./test.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app_py39.tests import test_sql_app

    # Ensure import side effects are re-executed
    importlib.reload(test_sql_app)
    test_sql_app.test_create_user()
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)
</source>
</class>

<class classid="10" nclones="5" nlines="14" similarity="100">
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_py39.py" startline="289" endline="307" pcid="587">
def get_client(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./sql_app.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app_py39 import main

    # Ensure import side effects are re-executed
    importlib.reload(main)
    with TestClient(main.app) as c:
        yield c
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases.py" startline="287" endline="305" pcid="628">
def client(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./sql_app.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app import main

    # Ensure import side effects are re-executed
    importlib.reload(main)
    with TestClient(main.app) as c:
        yield c
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_middleware_py310.py" startline="289" endline="308" pcid="620">
def client(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./sql_app.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app_py310 import alt_main

    # Ensure import side effects are re-executed
    importlib.reload(alt_main)

    with TestClient(alt_main.app) as c:
        yield c
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_middleware_py39.py" startline="289" endline="308" pcid="595">
def client(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./sql_app.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app_py39 import alt_main

    # Ensure import side effects are re-executed
    importlib.reload(alt_main)

    with TestClient(alt_main.app) as c:
        yield c
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)


</source>
<source file="systems/fastapi-0.75.0/tests/test_tutorial/test_sql_databases/test_sql_databases_py310.py" startline="289" endline="307" pcid="604">
def get_client(tmp_path_factory: pytest.TempPathFactory):
    tmp_path = tmp_path_factory.mktemp("data")
    cwd = os.getcwd()
    os.chdir(tmp_path)
    test_db = Path("./sql_app.db")
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    # Import while creating the client to create the DB after starting the test session
    from docs_src.sql_databases.sql_app_py310 import main

    # Ensure import side effects are re-executed
    importlib.reload(main)
    with TestClient(main.app) as c:
        yield c
    if test_db.is_file():  # pragma: nocover
        test_db.unlink()
    os.chdir(cwd)


</source>
</class>

<class classid="11" nclones="2" nlines="12" similarity="100">
<source file="systems/fastapi-0.75.0/docs_src/app_testing/app_b_py310/test_main.py" startline="30" endline="43" pcid="917">
def test_create_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "coneofsilence"},
        json={"id": "foobar", "title": "Foo Bar", "description": "The Foo Barters"},
    )
    assert response.status_code == 200
    assert response.json() == {
        "id": "foobar",
        "title": "Foo Bar",
        "description": "The Foo Barters",
    }


</source>
<source file="systems/fastapi-0.75.0/docs_src/app_testing/app_b/test_main.py" startline="30" endline="43" pcid="923">
def test_create_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "coneofsilence"},
        json={"id": "foobar", "title": "Foo Bar", "description": "The Foo Barters"},
    )
    assert response.status_code == 200
    assert response.json() == {
        "id": "foobar",
        "title": "Foo Bar",
        "description": "The Foo Barters",
    }


</source>
</class>

<class classid="12" nclones="2" nlines="12" similarity="100">
<source file="systems/fastapi-0.75.0/docs_src/app_testing/app_b_py310/test_main.py" startline="54" endline="65" pcid="919">
def test_create_existing_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "coneofsilence"},
        json={
            "id": "foo",
            "title": "The Foo ID Stealers",
            "description": "There goes my stealer",
        },
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "Item already exists"}
</source>
<source file="systems/fastapi-0.75.0/docs_src/app_testing/app_b/test_main.py" startline="54" endline="65" pcid="925">
def test_create_existing_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "coneofsilence"},
        json={
            "id": "foo",
            "title": "The Foo ID Stealers",
            "description": "There goes my stealer",
        },
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "Item already exists"}
</source>
</class>

<class classid="13" nclones="3" nlines="15" similarity="100">
<source file="systems/fastapi-0.75.0/docs_src/sql_databases/sql_app/tests/test_sql_app.py" startline="32" endline="47" pcid="956">
def test_create_user():
    response = client.post(
        "/users/",
        json={"email": "deadpool@example.com", "password": "chimichangas4life"},
    )
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["email"] == "deadpool@example.com"
    assert "id" in data
    user_id = data["id"]

    response = client.get(f"/users/{user_id}")
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["email"] == "deadpool@example.com"
    assert data["id"] == user_id
</source>
<source file="systems/fastapi-0.75.0/docs_src/sql_databases/sql_app_py310/tests/test_sql_app.py" startline="32" endline="47" pcid="970">
def test_create_user():
    response = client.post(
        "/users/",
        json={"email": "deadpool@example.com", "password": "chimichangas4life"},
    )
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["email"] == "deadpool@example.com"
    assert "id" in data
    user_id = data["id"]

    response = client.get(f"/users/{user_id}")
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["email"] == "deadpool@example.com"
    assert data["id"] == user_id
</source>
<source file="systems/fastapi-0.75.0/docs_src/sql_databases/sql_app_py39/tests/test_sql_app.py" startline="32" endline="47" pcid="984">
def test_create_user():
    response = client.post(
        "/users/",
        json={"email": "deadpool@example.com", "password": "chimichangas4life"},
    )
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["email"] == "deadpool@example.com"
    assert "id" in data
    user_id = data["id"]

    response = client.get(f"/users/{user_id}")
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["email"] == "deadpool@example.com"
    assert data["id"] == user_id
</source>
</class>

</clones>
