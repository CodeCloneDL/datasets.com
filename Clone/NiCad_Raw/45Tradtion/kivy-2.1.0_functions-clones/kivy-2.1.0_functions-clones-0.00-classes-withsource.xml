<clones>
<systeminfo processor="nicad6" system="kivy-2.1.0" granularity="functions" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="3572" npairs="4"/>
<runinfo ncompares="29067" cputime="66788"/>
<classinfo nclasses="4"/>

<class classid="1" nclones="2" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/kivy/input/providers/hidinput.py" startline="437" endline="449" pcid="1164">

            def assign_coord(point, value, invert, coords):
                cx, cy = coords
                if invert:
                    value = 1. - value
                if rotation == 0:
                    point[cx] = value
                elif rotation == 90:
                    point[cy] = value
                elif rotation == 180:
                    point[cx] = 1. - value
                elif rotation == 270:
                    point[cy] = 1. - value
</source>
<source file="systems/kivy-2.1.0/kivy/input/providers/mtdev.py" startline="188" endline="200" pcid="1237">
            device = kwargs.get('device')
            drs = kwargs.get('default_ranges').get
            touches = {}
            touches_sent = []
            point = {}
            l_points = {}

            def assign_coord(point, value, invert, coords):
                cx, cy = coords
                if invert:
                    value = 1. - value
                if rotation == 0:
                    point[cx] = value
</source>
</class>

<class classid="2" nclones="2" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/kivy/storage/jsonstore.py" startline="75" endline="87" pcid="1260">
    def store_find(self, filters):
        for key, values in iteritems(self._data):
            found = True
            for fkey, fvalue in iteritems(filters):
                if fkey not in values:
                    found = False
                    break
                if values[fkey] != fvalue:
                    found = False
                    break
            if found:
                yield key, values

</source>
<source file="systems/kivy-2.1.0/kivy/storage/dictstore.py" startline="81" endline="93" pcid="1270">
    def store_find(self, filters):
        for key, values in iteritems(self._data):
            found = True
            for fkey, fvalue in iteritems(filters):
                if fkey not in values:
                    found = False
                    break
                if values[fkey] != fvalue:
                    found = False
                    break
            if found:
                yield key, values

</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="100">
<source file="systems/kivy-2.1.0/examples/tutorials/pong/steps/step5/main.py" startline="40" endline="58" pcid="3104">
    def update(self, dt):
        self.ball.move()

        # bounce of paddles
        self.player1.bounce_ball(self.ball)
        self.player2.bounce_ball(self.ball)

        # bounce ball off bottom or top
        if (self.ball.y < self.y) or (self.ball.top > self.top):
            self.ball.velocity_y *= -1

        # went of to a side to score point?
        if self.ball.x < self.x:
            self.player2.score += 1
            self.serve_ball(vel=(4, 0))
        if self.ball.right > self.width:
            self.player1.score += 1
            self.serve_ball(vel=(-4, 0))

</source>
<source file="systems/kivy-2.1.0/examples/tutorials/pong/main.py" startline="47" endline="65" pcid="3118">
    def update(self, dt):
        self.ball.move()

        # bounce ball off paddles
        self.player1.bounce_ball(self.ball)
        self.player2.bounce_ball(self.ball)

        # bounce ball off bottom or top
        if (self.ball.y < self.y) or (self.ball.top > self.top):
            self.ball.velocity_y *= -1

        # went off a side to score point?
        if self.ball.x < self.x:
            self.player2.score += 1
            self.serve_ball(vel=(4, 0))
        if self.ball.right > self.width:
            self.player1.score += 1
            self.serve_ball(vel=(-4, 0))

</source>
</class>

<class classid="4" nclones="2" nlines="14" similarity="100">
<source file="systems/kivy-2.1.0/examples/demo/touchtracer/main.py" startline="40" endline="55" pcid="3238">
def calculate_points(x1, y1, x2, y2, steps=5):
    dx = x2 - x1
    dy = y2 - y1
    dist = sqrt(dx * dx + dy * dy)
    if dist < steps:
        return
    o = []
    m = dist / steps
    for i in range(1, int(m)):
        mi = i / m
        lastx = x1 + dx * mi
        lasty = y1 + dy * mi
        o.extend([lastx, lasty])
    return o


</source>
<source file="systems/kivy-2.1.0/examples/widgets/colorpicker.py" startline="118" endline="133" pcid="3383">
def calculate_points(x1, y1, x2, y2, steps=5):
    dx = x2 - x1
    dy = y2 - y1
    dist = sqrt(dx * dx + dy * dy)
    if dist < steps:
        return
    o = []
    m = dist / steps
    for i in range(1, int(m)):
        mi = i / m
        lastx = x1 + dx * mi
        lasty = y1 + dy * mi
        o.extend([lastx, lasty])
    return o


</source>
</class>

</clones>
