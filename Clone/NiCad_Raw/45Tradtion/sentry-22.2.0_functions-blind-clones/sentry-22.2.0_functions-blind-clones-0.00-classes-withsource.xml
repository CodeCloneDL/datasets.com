<clones>
<systeminfo processor="nicad6" system="sentry-22.2.0" granularity="functions-blind" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="12453" npairs="227"/>
<runinfo ncompares="535595" cputime="144717"/>
<classinfo nclasses="154"/>

<class classid="1" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/mediators/sentry_app_installation_tokens/destroyer.py" startline="25" endline="36" pcid="421">
    def audit(self):
        from sentry.utils.audit import create_audit_entry

        if self.request and self.generate_audit:
            create_audit_entry(
                request=self.request,
                organization=self.organization,
                target_object=self.api_token.id,
                event=AuditLogEntryEvent.INTERNAL_INTEGRATION_REMOVE_TOKEN,
                data={"sentry_app": self.sentry_app.name},
            )

</source>
<source file="systems/sentry-22.2.0/src/sentry/mediators/sentry_app_installation_tokens/creator.py" startline="47" endline="58" pcid="429">
    def audit(self):
        from sentry.utils.audit import create_audit_entry

        if self.request and self.generate_audit:
            create_audit_entry(
                request=self.request,
                organization=self.organization,
                target_object=self.api_token.id,
                event=AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD_TOKEN,
                data={"sentry_app": self.sentry_app.name},
            )

</source>
</class>

<class classid="2" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/mediators/sentry_apps/internal_creator.py" startline="55" endline="66" pcid="477">
    def audit(self):
        from sentry.utils.audit import create_audit_entry

        if self.request:
            create_audit_entry(
                request=self.request,
                organization=self.organization,
                target_object=self.organization.id,
                event=AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD,
                data={"name": self.sentry_app.name},
            )

</source>
<source file="systems/sentry-22.2.0/src/sentry/mediators/sentry_apps/creator.py" startline="123" endline="134" pcid="513">
    def audit(self):
        from sentry.utils.audit import create_audit_entry

        if self.request:
            create_audit_entry(
                request=self.request,
                organization=self.organization,
                target_object=self.organization.id,
                event=AuditLogEntryEvent.SENTRY_APP_ADD,
                data={"sentry_app": self.sentry_app.name},
            )

</source>
</class>

<class classid="3" nclones="2" nlines="33" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/migrations/0237_recreate_subscriptions_in_snuba.py" startline="12" endline="56" pcid="1371">
def migrate_subscriptions(apps, schema_editor):
    QuerySubscription = apps.get_model("sentry", "QuerySubscription")
    AppSnubaQueryEventType = apps.get_model("sentry", "SnubaQueryEventType")

    for subscription in RangeQuerySetWrapperWithProgressBar(
        QuerySubscription.objects.select_related("snuba_query").all()
    ):
        if subscription.subscription_id is not None:
            # The migration apps don't build this property, so manually set it.
            raw_event_types = AppSnubaQueryEventType.objects.filter(
                snuba_query=subscription.snuba_query
            ).all()
            event_types = [SnubaQueryEventType.EventType(ev.type) for ev in raw_event_types]
            setattr(subscription.snuba_query, "event_types", event_types)

            subscription_id = None
            try:
                subscription_id = _create_in_snuba(subscription)
            except Exception as e:
                logging.exception(f"failed to recreate {subscription.subscription_id}: {e}")
                continue

            try:
                _delete_from_snuba(
                    QueryDatasets(subscription.snuba_query.dataset),
                    subscription.subscription_id,
                )
            except Exception as e:
                try:
                    # Delete the subscription we just created to avoid orphans
                    _delete_from_snuba(
                        QueryDatasets(subscription.snuba_query.dataset),
                        subscription_id,
                    )
                except Exception as oe:
                    logging.exception(f"failed to delete orphan {subscription_id}: {oe}")

                logging.exception(f"failed to delete {subscription.subscription_id}: {e}")
                continue

            QuerySubscription.objects.filter(id=subscription.id).update(
                subscription_id=subscription_id
            )


</source>
<source file="systems/sentry-22.2.0/src/sentry/migrations/0233_recreate_subscriptions_in_snuba.py" startline="12" endline="56" pcid="1374">
def migrate_subscriptions(apps, schema_editor):
    QuerySubscription = apps.get_model("sentry", "QuerySubscription")
    AppSnubaQueryEventType = apps.get_model("sentry", "SnubaQueryEventType")

    for subscription in RangeQuerySetWrapperWithProgressBar(
        QuerySubscription.objects.select_related("snuba_query").all()
    ):
        if subscription.subscription_id is not None:
            # The migration apps don't build this property, so manually set it.
            raw_event_types = AppSnubaQueryEventType.objects.filter(
                snuba_query=subscription.snuba_query
            ).all()
            event_types = [SnubaQueryEventType.EventType(ev.type) for ev in raw_event_types]
            setattr(subscription.snuba_query, "event_types", event_types)

            subscription_id = None
            try:
                subscription_id = _create_in_snuba(subscription)
            except Exception as e:
                logging.exception(f"failed to recreate {subscription.subscription_id}: {e}")
                continue

            try:
                _delete_from_snuba(
                    QueryDatasets(subscription.snuba_query.dataset),
                    subscription.subscription_id,
                )
            except Exception as e:
                try:
                    # Delete the subscription we just created to avoid orphans
                    _delete_from_snuba(
                        QueryDatasets(subscription.snuba_query.dataset),
                        subscription_id,
                    )
                except Exception as oe:
                    logging.exception(f"failed to delete orphan {subscription_id}: {oe}")

                logging.exception(f"failed to delete {subscription.subscription_id}: {e}")
                continue

            QuerySubscription.objects.filter(id=subscription.id).update(
                subscription_id=subscription_id
            )


</source>
</class>

<class classid="4" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/utils/distutils/commands/build_js_sdk_registry.py" startline="21" endline="32" pcid="1629">
def dump_registry(path, data):
    fn = os.path.join(LOADER_FOLDER, path + ".json")
    directory = os.path.dirname(fn)
    try:
        os.makedirs(directory)
    except OSError:
        pass
    with open(fn, "wt", encoding="utf-8") as f:
        f.write(json.dumps(data, indent=2))
        f.write("\n")


</source>
<source file="systems/sentry-22.2.0/src/sentry/utils/integrationdocs.py" startline="48" endline="59" pcid="1840">
def dump_doc(path, data):
    fn = os.path.join(DOC_FOLDER, path + ".json")
    directory = os.path.dirname(fn)
    try:
        os.makedirs(directory)
    except OSError:
        pass
    with open(fn, "wt", encoding="utf-8") as f:
        f.write(json.dumps(data, indent=2))
        f.write("\n")


</source>
</class>

<class classid="5" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/incidents/endpoints/bases.py" startline="55" endline="72" pcid="1983">
    def convert_args(self, request: Request, alert_rule_trigger_id, *args, **kwargs):
        args, kwargs = super().convert_args(request, *args, **kwargs)
        organization = kwargs["organization"]
        alert_rule = kwargs["alert_rule"]

        if not features.has("organizations:incidents", organization, actor=request.user):
            raise ResourceDoesNotExist

        try:
            kwargs["alert_rule_trigger"] = AlertRuleTrigger.objects.get(
                alert_rule=alert_rule, id=alert_rule_trigger_id
            )
        except AlertRuleTrigger.DoesNotExist:
            raise ResourceDoesNotExist

        return args, kwargs


</source>
<source file="systems/sentry-22.2.0/src/sentry/incidents/endpoints/bases.py" startline="74" endline="89" pcid="1984">
    def convert_args(self, request: Request, alert_rule_trigger_action_id, *args, **kwargs):
        args, kwargs = super().convert_args(request, *args, **kwargs)
        organization = kwargs["organization"]
        trigger = kwargs["alert_rule_trigger"]

        if not features.has("organizations:incidents", organization, actor=request.user):
            raise ResourceDoesNotExist

        try:
            kwargs["alert_rule_trigger_action"] = AlertRuleTriggerAction.objects.get(
                alert_rule_trigger=trigger, id=alert_rule_trigger_action_id
            )
        except AlertRuleTriggerAction.DoesNotExist:
            raise ResourceDoesNotExist

        return args, kwargs
</source>
</class>

<class classid="6" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/plugins/providers/dummy/repository.py" startline="8" endline="19" pcid="2097">
    def get_config(self):
        return [
            {
                "name": "name",
                "label": "Repository Name",
                "type": "text",
                "placeholder": "e.g. getsentry/sentry",
                "help": "Enter your repository name.",
                "required": True,
            }
        ]

</source>
<source file="systems/sentry-22.2.0/src/sentry_plugins/bitbucket/repository_provider.py" startline="17" endline="28" pcid="4705">
    def get_config(self):
        return [
            {
                "name": "name",
                "label": "Repository Name",
                "type": "text",
                "placeholder": "e.g. getsentry/sentry",
                "help": "Enter your repository name, including the owner.",
                "required": True,
            }
        ]

</source>
</class>

<class classid="7" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/plugins/base/project_api_urls.py" startline="17" endline="40" pcid="2123">
def load_plugin_urls(plugins):
    urlpatterns = []
    for plugin in plugins:
        urls = plugin.get_project_urls()
        if not urls:
            continue
        try:
            # a plugin's get_project_urls should return an iterable of url()'s,
            # which can either be URLResolver or URLPattern
            for u in urls:
                if not isinstance(u, (URLResolver, URLPattern)):
                    raise TypeError(
                        "url must be URLResolver or URLPattern, not {!r}: {!r}".format(
                            type(u).__name__, u
                        )
                    )
        except Exception:
            logger.exception("routes.failed", extra={"plugin": type(plugin).__name__})
        else:
            urlpatterns.append(url(r"^%s/" % re.escape(plugin.slug), include(urls)))

    return urlpatterns


</source>
<source file="systems/sentry-22.2.0/src/sentry/plugins/base/group_api_urls.py" startline="17" endline="40" pcid="2129">
def load_plugin_urls(plugins):
    urlpatterns = []
    for plugin in plugins:
        urls = plugin.get_group_urls()
        if not urls:
            continue
        try:
            # a plugin's get_group_urls should return an iterable of url()'s,
            # which can either be RegexURLResolver or RegexURLPattern
            for u in urls:
                if not isinstance(u, (URLResolver, URLPattern)):
                    raise TypeError(
                        "url must be URLResolver or URLPattern, not {!r}: {!r}".format(
                            type(u).__name__, u
                        )
                    )
        except Exception:
            logger.exception("routes.failed", extra={"plugin": type(plugin).__name__})
        else:
            urlpatterns.append(url(r"^%s/" % re.escape(plugin.slug), include(urls)))

    return urlpatterns


</source>
</class>

<class classid="8" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/api/bases/sentryapps.py" startline="209" endline="223" pcid="2606">
    def convert_args(self, request: Request, sentry_app_slug, *args, **kwargs):
        try:
            sentry_app = SentryApp.objects.get(slug=sentry_app_slug)
        except SentryApp.DoesNotExist:
            raise Http404

        self.check_object_permissions(request, sentry_app)

        with configure_scope() as scope:
            scope.set_tag("sentry_app", sentry_app.slug)

        kwargs["sentry_app"] = sentry_app
        return (args, kwargs)


</source>
<source file="systems/sentry-22.2.0/src/sentry/api/bases/sentryapps.py" startline="311" endline="325" pcid="2611">
    def convert_args(self, request: Request, uuid, *args, **kwargs):
        try:
            installation = SentryAppInstallation.objects.get(uuid=uuid)
        except SentryAppInstallation.DoesNotExist:
            raise Http404

        self.check_object_permissions(request, installation)

        with configure_scope() as scope:
            scope.set_tag("sentry_app_installation", installation.uuid)

        kwargs["installation"] = installation
        return (args, kwargs)


</source>
</class>

<class classid="9" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/api/endpoints/organization_code_mapping_codeowners.py" startline="13" endline="27" pcid="2681">
    def convert_args(self, request: Request, organization_slug, config_id, *args, **kwargs):
        args, kwargs = super().convert_args(request, organization_slug, config_id, *args, **kwargs)

        try:
            kwargs["config"] = RepositoryProjectPathConfig.objects.get(
                id=config_id,
                organization_integration__in=OrganizationIntegration.objects.filter(
                    organization=kwargs["organization"]
                ).values_list("id", flat=True),
            )
        except RepositoryProjectPathConfig.DoesNotExist:
            raise Http404

        return (args, kwargs)

</source>
<source file="systems/sentry-22.2.0/src/sentry/api/endpoints/organization_code_mapping_details.py" startline="20" endline="34" pcid="2981">
    def convert_args(self, request: Request, organization_slug, config_id, *args, **kwargs):
        args, kwargs = super().convert_args(request, organization_slug, config_id, *args, **kwargs)

        try:
            kwargs["config"] = RepositoryProjectPathConfig.objects.get(
                id=config_id,
                organization_integration__in=OrganizationIntegration.objects.filter(
                    organization=kwargs["organization"]
                ).values_list("id", flat=True),
            )
        except RepositoryProjectPathConfig.DoesNotExist:
            raise Http404

        return (args, kwargs)

</source>
</class>

<class classid="10" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/api/endpoints/project_team_details.py" startline="25" endline="44" pcid="2702">
    def post(self, request: Request, project, team_slug) -> Response:
        """
        Give a team access to a project
        ```````````````````````````````
        :pparam string organization_slug: the slug of the organization.
        :pparam string project_slug: the slug of the project.
        :pparam string team_slug: the slug of the team.
        :auth: required
        """
        try:
            team = Team.objects.get(organization_id=project.organization_id, slug=team_slug)
        except Team.DoesNotExist:
            raise Http404
        if not request.access.has_team_scope(team, "project:write"):
            return Response(
                {"detail": ["You do not have permission to perform this action."]}, status=403
            )
        project.add_team(team)
        return Response(serialize(project, request.user, ProjectWithTeamSerializer()), status=201)

</source>
<source file="systems/sentry-22.2.0/src/sentry/api/endpoints/project_team_details.py" startline="45" endline="65" pcid="2703">
    def delete(self, request: Request, project, team_slug) -> Response:
        """
        Revoke a team's access to a project
        ```````````````````````````````````
        :pparam string organization_slug: the slug of the organization.
        :pparam string project_slug: the slug of the project.
        :pparam string team_slug: the slug of the team.
        :auth: required
        """
        try:
            team = Team.objects.get(organization_id=project.organization_id, slug=team_slug)
        except Team.DoesNotExist:
            raise Http404

        if not request.access.has_team_scope(team, "project:write"):
            return Response(
                {"detail": ["You do not have permission to perform this action."]}, status=403
            )
        project.remove_team(team)

        return Response(serialize(project, request.user, ProjectWithTeamSerializer()), status=200)
</source>
</class>

<class classid="11" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/api/endpoints/user_notification_settings_details.py" startline="21" endline="41" pcid="2891">
    def get(self, request: Request, user: User) -> Response:
        """
        Get the Notification Settings for a given User.
        ````````````````````````````````
        :pparam string user_id: A User's `user_id` or "me" for current user.
        :qparam string type: If set, filter the NotificationSettings to this type.

        :auth required:
        """

        type_option = validate_type_option(request.GET.get("type"))

        return Response(
            serialize(
                user,
                request.user,
                NotificationSettingsSerializer(),
                type=type_option,
            ),
        )

</source>
<source file="systems/sentry-22.2.0/src/sentry/api/endpoints/team_notification_settings_details.py" startline="18" endline="37" pcid="2969">
    def get(self, request: Request, team: Team) -> Response:
        """
        Get the Notification Settings for a given User.
        ````````````````````````````````
        :pparam string team_slug: The slug of the team to get.
        :qparam string type: If set, filter the NotificationSettings to this type.
        :auth required:
        """

        type_option = validate_type_option(request.GET.get("type"))

        return Response(
            serialize(
                team,
                request.user,
                NotificationSettingsSerializer(),
                type=type_option,
            ),
        )

</source>
</class>

<class classid="12" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/rules/actions/notify_event_service.py" startline="209" endline="223" pcid="3249">
    def get_plugins(self):
        from sentry.plugins.bases.notify import NotificationPlugin

        results = []
        for plugin in plugins.for_project(self.project, version=1):
            if not isinstance(plugin, NotificationPlugin):
                continue
            results.append(PluginService(plugin))

        for plugin in plugins.for_project(self.project, version=2):
            for notifier in safe_execute(plugin.get_notifiers, _with_transaction=False) or ():
                results.append(PluginService(notifier))

        return results

</source>
<source file="systems/sentry-22.2.0/src/sentry/rules/actions/notify_event.py" startline="16" endline="30" pcid="3252">
    def get_plugins(self):
        from sentry.plugins.bases.notify import NotificationPlugin

        results = []
        for plugin in plugins.for_project(self.project, version=1):
            if not isinstance(plugin, NotificationPlugin):
                continue
            results.append(LegacyPluginService(plugin))

        for plugin in plugins.for_project(self.project, version=2):
            for notifier in safe_execute(plugin.get_notifiers, _with_transaction=False) or ():
                results.append(LegacyPluginService(notifier))

        return results

</source>
</class>

<class classid="13" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/web/frontend/debug/debug_mfa_added_email.py" startline="14" endline="28" pcid="3427">
    def get(self, request: Request) -> Response:
        authenticator = Authenticator(id=0, type=3, user=request.user)  # u2f

        email = generate_security_email(
            account=request.user,
            actor=request.user,
            type="mfa-added",
            ip_address=request.META["REMOTE_ADDR"],
            context={"authenticator": authenticator, "device_name": "Home computer"},
            # make this consistent for acceptance tests
            current_datetime=datetime.datetime(2017, 1, 20, 21, 39, 23, 30723),
        )
        return MailPreview(
            html_template=email.html_template, text_template=email.template, context=email.context
        ).render(request)
</source>
<source file="systems/sentry-22.2.0/src/sentry/web/frontend/debug/debug_mfa_removed_email.py" startline="14" endline="28" pcid="3436">
    def get(self, request: Request) -> Response:
        authenticator = Authenticator(id=0, type=3, user=request.user)  # u2f

        email = generate_security_email(
            account=request.user,
            actor=request.user,
            type="mfa-removed",
            ip_address=request.META["REMOTE_ADDR"],
            context={"authenticator": authenticator, "device_name": "Home computer"},
            # make this consistent for acceptance tests
            current_datetime=datetime.datetime(2017, 1, 20, 21, 39, 23, 30723),
        )
        return MailPreview(
            html_template=email.html_template, text_template=email.template, context=email.context
        ).render(request)
</source>
</class>

<class classid="14" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/integrations/bitbucket/integration.py" startline="152" endline="167" pcid="3666">
    def post_install(self, integration, organization, extra=None):
        repo_ids = Repository.objects.filter(
            organization_id=organization.id,
            provider__in=["bitbucket", "integrations:bitbucket"],
            integration_id__isnull=True,
        ).values_list("id", flat=True)

        for repo_id in repo_ids:
            migrate_repo.apply_async(
                kwargs={
                    "repo_id": repo_id,
                    "integration_id": integration.id,
                    "organization_id": organization.id,
                }
            )

</source>
<source file="systems/sentry-22.2.0/src/sentry/integrations/bitbucket_server/integration.py" startline="302" endline="317" pcid="3716">
    def post_install(self, integration, organization, extra=None):
        repo_ids = Repository.objects.filter(
            organization_id=organization.id,
            provider__in=["bitbucket_server", "integrations:bitbucket_server"],
            integration_id__isnull=True,
        ).values_list("id", flat=True)

        for repo_id in repo_ids:
            migrate_repo.apply_async(
                kwargs={
                    "repo_id": repo_id,
                    "integration_id": integration.id,
                    "organization_id": organization.id,
                }
            )

</source>
</class>

<class classid="15" nclones="3" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/integrations/bitbucket_server/integration.py" startline="133" endline="150" pcid="3705">
    def dispatch(self, request: Request, pipeline) -> Response:
        if request.method == "POST":
            form = InstallationForm(request.POST)
            if form.is_valid():
                form_data = form.cleaned_data

                pipeline.bind_state("installation_data", form_data)
                return pipeline.next_step()
        else:
            form = InstallationForm()

        return render_to_response(
            template="sentry/integrations/bitbucket-server-config.html",
            context={"form": form},
            request=request,
        )


</source>
<source file="systems/sentry-22.2.0/src/sentry/integrations/custom_scm/integration.py" startline="109" endline="127" pcid="4020">
    def dispatch(self, request: Request, pipeline) -> Response:
        if request.method == "POST":
            form = InstallationForm(request.POST)
            if form.is_valid():
                form_data = form.cleaned_data

                pipeline.bind_state("installation_data", form_data)

                return pipeline.next_step()
        else:
            form = InstallationForm()

        return render_to_response(
            template="sentry/integrations/custom-scm-config.html",
            context={"form": form},
            request=request,
        )


</source>
<source file="systems/sentry-22.2.0/src/sentry/integrations/jira_server/integration.py" startline="140" endline="157" pcid="3741">
    def dispatch(self, request: Request, pipeline) -> Response:
        if request.method == "POST":
            form = InstallationForm(request.POST)
            if form.is_valid():
                form_data = form.cleaned_data

                pipeline.bind_state("installation_data", form_data)
                return pipeline.next_step()
        else:
            form = InstallationForm()

        return render_to_response(
            template="sentry/integrations/jira-server-config.html",
            context={"form": form},
            request=request,
        )


</source>
</class>

<class classid="16" nclones="2" nlines="21" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/integrations/bitbucket_server/integration.py" startline="158" endline="183" pcid="3706">
    def dispatch(self, request: Request, pipeline) -> Response:
        if "oauth_token" in request.GET:
            return pipeline.next_step()

        config = pipeline.fetch_state("installation_data")
        client = BitbucketServerSetupClient(
            config.get("url"),
            config.get("consumer_key"),
            config.get("private_key"),
            config.get("verify_ssl"),
        )

        try:
            request_token = client.get_request_token()
            pipeline.bind_state("request_token", request_token)
            authorize_url = client.get_authorize_url(request_token)

            return self.redirect(authorize_url)
        except ApiError as error:
            logger.info(
                "identity.bitbucket-server.request-token",
                extra={"url": config.get("url"), "error": error},
            )
            return pipeline.error(f"Could not fetch a request token from Bitbucket. {error}")


</source>
<source file="systems/sentry-22.2.0/src/sentry/integrations/jira_server/integration.py" startline="165" endline="189" pcid="3742">
    def dispatch(self, request: Request, pipeline) -> Response:
        if "oauth_token" in request.GET:
            return pipeline.next_step()

        config = pipeline.fetch_state("installation_data")
        client = JiraServerSetupClient(
            config.get("url"),
            config.get("consumer_key"),
            config.get("private_key"),
            config.get("verify_ssl"),
        )
        try:
            request_token = client.get_request_token()
            pipeline.bind_state("request_token", request_token)
            authorize_url = client.get_authorize_url(request_token)

            return self.redirect(authorize_url)
        except ApiError as error:
            logger.info(
                "identity.jira-server.request-token",
                extra={"url": config.get("url"), "error": error},
            )
            return pipeline.error(f"Could not fetch a request token from Jira. {error}")


</source>
</class>

<class classid="17" nclones="2" nlines="16" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/integrations/bitbucket_server/integration.py" startline="191" endline="212" pcid="3707">
    def dispatch(self, request: Request, pipeline) -> Response:
        config = pipeline.fetch_state("installation_data")
        client = BitbucketServerSetupClient(
            config.get("url"),
            config.get("consumer_key"),
            config.get("private_key"),
            config.get("verify_ssl"),
        )

        try:
            access_token = client.get_access_token(
                pipeline.fetch_state("request_token"), request.GET["oauth_token"]
            )

            pipeline.bind_state("access_token", access_token)

            return pipeline.next_step()
        except ApiError as error:
            logger.info("identity.bitbucket-server.access-token", extra={"error": error})
            return pipeline.error(f"Could not fetch an access token from Bitbucket. {str(error)}")


</source>
<source file="systems/sentry-22.2.0/src/sentry/integrations/jira_server/integration.py" startline="197" endline="217" pcid="3743">
    def dispatch(self, request: Request, pipeline) -> Response:
        config = pipeline.fetch_state("installation_data")
        client = JiraServerSetupClient(
            config.get("url"),
            config.get("consumer_key"),
            config.get("private_key"),
            config.get("verify_ssl"),
        )

        try:
            access_token = client.get_access_token(
                pipeline.fetch_state("request_token"), request.GET["oauth_token"]
            )
            pipeline.bind_state("access_token", access_token)

            return pipeline.next_step()
        except ApiError as error:
            logger.info("identity.jira-server.access-token", extra={"error": error})
            return pipeline.error("Could not fetch an access token from Jira")


</source>
</class>

<class classid="18" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/integrations/bitbucket_server/client.py" startline="59" endline="78" pcid="3722">
    def get_access_token(self, request_token, verifier):
        """
        Step 3 of the oauth flow.
        Use the verifier and request token from step 1 to get an access token.
        """
        if not verifier:
            raise ApiError("Missing OAuth token verifier")
        auth = OAuth1(
            client_key=self.consumer_key,
            resource_owner_key=request_token["oauth_token"],
            resource_owner_secret=request_token["oauth_token_secret"],
            verifier=verifier,
            rsa_key=self.private_key,
            signature_method=SIGNATURE_RSA,
            signature_type="auth_header",
        )
        url = self.access_token_url.format(self.base_url)
        resp = self.post(url, auth=auth, allow_text=True)
        return dict(parse_qsl(resp.text))

</source>
<source file="systems/sentry-22.2.0/src/sentry/integrations/jira_server/client.py" startline="52" endline="71" pcid="3755">
    def get_access_token(self, request_token, verifier):
        """
        Step 3 of the oauth flow.
        Use the verifier and request token from step 1 to get an access token.
        """
        if not verifier:
            raise ApiError("Missing OAuth token verifier")
        auth = OAuth1(
            client_key=self.consumer_key,
            resource_owner_key=request_token["oauth_token"],
            resource_owner_secret=request_token["oauth_token_secret"],
            verifier=verifier,
            rsa_key=self.private_key,
            signature_method=SIGNATURE_RSA,
            signature_type="auth_header",
        )
        url = self.access_token_url.format(self.base_url)
        resp = self.post(url, auth=auth, allow_text=True)
        return dict(parse_qsl(resp.text))

</source>
</class>

<class classid="19" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/metrics/dogstatsd.py" startline="26" endline="36" pcid="4342">
    def timing(self, key, value, instance=None, tags=None, sample_rate=1):
        if tags is None:
            tags = {}
        if self.tags:
            tags.update(self.tags)
        if instance:
            tags["instance"] = instance
        if tags:
            tags = [f"{k}:{v}" for k, v in tags.items()]
        statsd.timing(self._get_key(key), value, sample_rate=sample_rate, tags=tags)

</source>
<source file="systems/sentry-22.2.0/src/sentry/metrics/dogstatsd.py" startline="37" endline="46" pcid="4343">
    def gauge(self, key, value, instance=None, tags=None, sample_rate=1):
        if tags is None:
            tags = {}
        if self.tags:
            tags.update(self.tags)
        if instance:
            tags["instance"] = instance
        if tags:
            tags = [f"{k}:{v}" for k, v in tags.items()]
        statsd.gauge(self._get_key(key), value, sample_rate=sample_rate, tags=tags)
</source>
</class>

<class classid="20" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry/metrics/datadog.py" startline="48" endline="60" pcid="4348">
    def timing(self, key, value, instance=None, tags=None, sample_rate=1):
        if tags is None:
            tags = {}
        if self.tags:
            tags.update(self.tags)
        if instance:
            tags["instance"] = instance
        if tags:
            tags = [f"{k}:{v}" for k, v in tags.items()]
        self.stats.timing(
            self._get_key(key), value, sample_rate=sample_rate, tags=tags, host=self.host
        )

</source>
<source file="systems/sentry-22.2.0/src/sentry/metrics/datadog.py" startline="61" endline="72" pcid="4349">
    def gauge(self, key, value, instance=None, tags=None, sample_rate=1):
        if tags is None:
            tags = {}
        if self.tags:
            tags.update(self.tags)
        if instance:
            tags["instance"] = instance
        if tags:
            tags = [f"{k}:{v}" for k, v in tags.items()]
        self.stats.gauge(
            self._get_key(key), value, sample_rate=sample_rate, tags=tags, host=self.host
        )
</source>
</class>

<class classid="21" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/src/sentry_plugins/anonymizeip.py" startline="87" endline="105" pcid="4703">
def __validate_ipv4_mask(mask_packed):
    # Test that mask only contains valid numbers
    for byte in iter(mask_packed):
        if byte != 0 and byte != 255:
            raise ValueError("ipv4_mask must only contain numbers 0 or 255")

    # Test that IP address does not get anonymized completely
    if mask_packed == b"\x00\x00\x00\x00":
        raise ValueError(
            'ipv4_mask cannot be set to "0.0.0.0" (all ' "anonymized addresses will be 0.0.0.0)"
        )

    # Test that IP address is changed by anonymization
    if mask_packed == b"\xff\xff\xff\xff":
        raise ValueError(
            'ipv4_mask cannot be set to "255.255.255.255" ' "(addresses will not be anonymized)"
        )


</source>
<source file="systems/sentry-22.2.0/src/sentry_plugins/anonymizeip.py" startline="106" endline="126" pcid="4704">
def __validate_ipv6_mask(mask_packed):
    # Test that mask only contains valid numbers
    for byte in iter(mask_packed):
        if byte != 0 and byte != 255:
            raise ValueError("ipv6_mask must only contain numbers 0 or ffff")

    # Test that IP address does not get anonymized completely
    if mask_packed == b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00":
        raise ValueError(
            "ipv6_mask cannot be set to "
            '"0000:0000:0000:0000:0000:0000:0000:0000" (all '
            "anonymized addresses will be 0.0.0.0)"
        )

    # Test that IP address is changed by anonymization
    if mask_packed == b"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff":
        raise ValueError(
            "ipv6_mask cannot be set to "
            '"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" '
            "(addresses will not be anonymized)"
        )
</source>
</class>

<class classid="22" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/discover/test_utils.py" startline="76" endline="91" pcid="5077">
    def test_conversion_of_release_filter_key(self):
        result = transform_aliases_and_query(
            selected_columns=["id", "message"],
            filter_keys={
                "release": [self.create_release(self.project).id],
                "project_id": [self.project.id],
            },
        )
        assert len(result["data"]) == 0

        result = transform_aliases_and_query(
            selected_columns=["id", "message"],
            filter_keys={"release": [self.release.id], "project_id": [self.project.id]},
        )
        assert len(result["data"]) == 1

</source>
<source file="systems/sentry-22.2.0/tests/sentry/discover/test_utils.py" startline="92" endline="106" pcid="5078">
    def test_conversion_of_environment_filter_key(self):
        result = transform_aliases_and_query(
            selected_columns=["id", "message"],
            filter_keys={
                "environment": [self.create_environment(self.project).id],
                "project_id": [self.project.id],
            },
        )
        assert len(result["data"]) == 0

        result = transform_aliases_and_query(
            selected_columns=["id", "message"],
            filter_keys={"environment": [self.environment.id], "project_id": [self.project.id]},
        )
        assert len(result["data"]) == 1
</source>
</class>

<class classid="23" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/discover/test_arithmetic.py" startline="100" endline="112" pcid="5082">
def test_four_terms():
    result, _, _ = parse_arithmetic("1 + 2 / 3 * 4")
    assert result.operator == "plus"
    assert result.lhs == 1.0
    assert isinstance(result.rhs, Operation)
    assert result.rhs.operator == "multiply"
    assert isinstance(result.rhs.lhs, Operation)
    assert result.rhs.lhs.operator == "divide"
    assert result.rhs.lhs.lhs == 2.0
    assert result.rhs.lhs.rhs == 3.0
    assert result.rhs.rhs == 4.0


</source>
<source file="systems/sentry-22.2.0/tests/sentry/discover/test_arithmetic.py" startline="138" endline="150" pcid="5085">
def test_brackets_with_four_inner_terms():
    result, _, _ = parse_arithmetic("(1 + 2 / 3 * 4)")
    assert result.operator == "plus"
    assert result.lhs == 1.0
    assert isinstance(result.rhs, Operation)
    assert result.rhs.operator == "multiply"
    assert isinstance(result.rhs.lhs, Operation)
    assert result.rhs.lhs.operator == "divide"
    assert result.rhs.lhs.lhs == 2.0
    assert result.rhs.lhs.rhs == 3.0
    assert result.rhs.rhs == 4.0


</source>
</class>

<class classid="24" nclones="3" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/mediators/external_requests/test_issue_link_requester.py" startline="11" endline="26" pcid="5222">
    def setUp(self):
        super().setUp()

        self.user = self.create_user(name="foo")
        self.org = self.create_organization(owner=self.user)
        self.project = self.create_project(slug="boop", organization=self.org)
        self.group = self.create_group(project=self.project)

        self.sentry_app = self.create_sentry_app(
            name="foo", organization=self.org, webhook_url="https://example.com", scopes=()
        )

        self.install = self.create_sentry_app_installation(
            slug="foo", organization=self.org, user=self.user
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/mediators/external_issues/test_issue_link_creator.py" startline="10" endline="25" pcid="5264">
    def setUp(self):
        super().setUp()

        self.user = self.create_user(name="foo")
        self.org = self.create_organization(owner=self.user)
        self.project = self.create_project(slug="boop", organization=self.org)
        self.group = self.create_group(project=self.project)

        self.sentry_app = self.create_sentry_app(
            name="foo", organization=self.org, webhook_url="https://example.com", scopes=()
        )

        self.install = self.create_sentry_app_installation(
            slug="foo", organization=self.org, user=self.user
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/mediators/external_issues/test_creator.py" startline="7" endline="22" pcid="5262">
    def setUp(self):
        super().setUp()

        self.user = self.create_user(name="foo")
        self.org = self.create_organization(owner=self.user)
        self.project = self.create_project(slug="boop", organization=self.org)
        self.group = self.create_group(project=self.project)

        self.sentry_app = self.create_sentry_app(
            name="foo", organization=self.org, webhook_url="https://example.com", scopes=()
        )

        self.install = self.create_sentry_app_installation(
            slug="foo", organization=self.org, user=self.user
        )

</source>
</class>

<class classid="25" nclones="2" nlines="26" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py" startline="46" endline="76" pcid="5234">
    def test_task_enqueued(self, safe_urlopen):
        InstallationNotifier.run(install=self.install, user=self.user, action="created")

        data = faux(safe_urlopen).kwargs["data"]

        assert json.loads(data) == {
            "action": "created",
            "installation": {"uuid": self.install.uuid},
            "data": {
                "installation": {
                    "app": {"uuid": self.sentry_app.uuid, "slug": self.sentry_app.slug},
                    "organization": {"slug": self.org.slug},
                    "uuid": self.install.uuid,
                    "code": self.install.api_grant.code,
                    "status": "installed",
                }
            },
            "actor": {"id": self.user.id, "name": self.user.name, "type": "user"},
        }

        assert faux(safe_urlopen).kwarg_equals(
            "headers",
            DictContaining(
                "Content-Type",
                "Request-ID",
                "Sentry-Hook-Resource",
                "Sentry-Hook-Timestamp",
                "Sentry-Hook-Signature",
            ),
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py" startline="78" endline="108" pcid="5235">
    def test_uninstallation_enqueued(self, safe_urlopen):
        InstallationNotifier.run(install=self.install, user=self.user, action="deleted")

        data = faux(safe_urlopen).kwargs["data"]

        assert json.loads(data) == {
            "action": "deleted",
            "installation": {"uuid": self.install.uuid},
            "data": {
                "installation": {
                    "app": {"uuid": self.sentry_app.uuid, "slug": self.sentry_app.slug},
                    "organization": {"slug": self.org.slug},
                    "uuid": self.install.uuid,
                    "code": self.install.api_grant.code,
                    "status": "installed",
                }
            },
            "actor": {"id": self.user.id, "name": self.user.name, "type": "user"},
        }

        assert faux(safe_urlopen).kwarg_equals(
            "headers",
            DictContaining(
                "Content-Type",
                "Request-ID",
                "Sentry-Hook-Resource",
                "Sentry-Hook-Timestamp",
                "Sentry-Hook-Signature",
            ),
        )

</source>
</class>

<class classid="26" nclones="3" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/eventstream/kafka/test_postprocessworker.py" startline="165" endline="190" pcid="5428">
def test_errors_post_process_forwarder_missing_headers(
    dispatch_post_process_group_task, kafka_message_without_transaction_header
):
    """
    Tests that the errors post process forwarder calls dispatch_post_process_group_task
    when the header "transaction_forwarder" is missing.
    """
    forwarder = ErrorsPostProcessForwarderWorker(concurrency=1)
    future = forwarder.process_message(kafka_message_without_transaction_header)
    assert future is not None

    forwarder.flush_batch([future])

    dispatch_post_process_group_task.assert_called_once_with(
        event_id="fe0ee9a2bc3b415497bad68aaf70dc7f",
        project_id=1,
        group_id=43,
        primary_hash="311ee66a5b8e697929804ceb1c456ffe",
        is_new=False,
        is_regression=None,
        is_new_group_environment=False,
    )

    forwarder.shutdown()


</source>
<source file="systems/sentry-22.2.0/tests/sentry/eventstream/kafka/test_postprocessworker.py" startline="265" endline="288" pcid="5433">
def test_transactions_post_process_forwarder_true_headers(
    dispatch_post_process_group_task, kafka_message_with_transaction_header_true
):
    """
    Tests that the transactions post process forwarder calls dispatch_post_process_group_task
    when the header "transaction_forwarder" is set to True.
    """
    forwarder = TransactionsPostProcessForwarderWorker(concurrency=1)
    future = forwarder.process_message(kafka_message_with_transaction_header_true)

    assert future is not None
    forwarder.flush_batch([future])

    dispatch_post_process_group_task.assert_called_with(
        event_id="fe0ee9a2bc3b415497bad68aaf70dc7f",
        project_id=1,
        group_id=43,
        primary_hash="311ee66a5b8e697929804ceb1c456ffe",
        is_new=False,
        is_regression=None,
        is_new_group_environment=False,
    )

    forwarder.shutdown()
</source>
<source file="systems/sentry-22.2.0/tests/sentry/eventstream/kafka/test_postprocessworker.py" startline="193" endline="218" pcid="5429">
def test_errors_post_process_forwarder_false_headers(
    dispatch_post_process_group_task, kafka_message_with_transaction_header_false
):
    """
    Test that the errors post process forwarder calls dispatch_post_process_group_task
    when the header "transaction_forwarder" is set to False.
    """
    forwarder = ErrorsPostProcessForwarderWorker(concurrency=1)
    future = forwarder.process_message(kafka_message_with_transaction_header_false)
    assert future is not None

    forwarder.flush_batch([future])

    dispatch_post_process_group_task.assert_called_once_with(
        event_id="fe0ee9a2bc3b415497bad68aaf70dc7f",
        project_id=1,
        group_id=43,
        primary_hash="311ee66a5b8e697929804ceb1c456ffe",
        is_new=False,
        is_regression=None,
        is_new_group_environment=False,
    )

    forwarder.shutdown()


</source>
</class>

<class classid="27" nclones="4" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/models/test_release.py" startline="744" endline="759" pcid="5600">
    def test_parse_release_into_semver_cols_with_non_int_build_code(self):
        """
        Test that ensures that if the build_code passed as part of the semver version cannot be
        parsed as a 64 bit integer due to non int release then build number is left empty
        """
        version = "org.example.FooApp@1.0rc1+whatever"
        release = Release.objects.create(organization=self.org, version=version)
        assert release.major == 1
        assert release.minor == 0
        assert release.patch == 0
        assert release.revision == 0
        assert release.prerelease == "rc1"
        assert release.build_code == "whatever"
        assert release.build_number is None
        assert release.package == "org.example.FooApp"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_release.py" startline="793" endline="808" pcid="5603">
    def test_parse_release_into_semver_cols_with_no_prerelease(self):
        """
        Test that ensures that prerelease is stores as an empty string if not included
        in the version.
        """
        version = "org.example.FooApp@1.0+whatever"
        release = Release.objects.create(organization=self.org, version=version)
        assert release.major == 1
        assert release.minor == 0
        assert release.patch == 0
        assert release.revision == 0
        assert release.prerelease == ""
        assert release.build_code == "whatever"
        assert release.build_number is None
        assert release.package == "org.example.FooApp"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_release.py" startline="760" endline="775" pcid="5601">
    def test_parse_release_into_semver_cols_with_int_build_code_gt_64_int(self):
        """
        Test that ensures that if the build_code passed as part of the semver version cannot be
        parsed as a 64 bit integer due to bigger than 64 bit integer then build number is left empty
        """
        version = "org.example.FooApp@1.0rc1+202001011005464576758979789794566455464746"
        release = Release.objects.create(organization=self.org, version=version)
        assert release.major == 1
        assert release.minor == 0
        assert release.patch == 0
        assert release.revision == 0
        assert release.prerelease == "rc1"
        assert release.build_code == "202001011005464576758979789794566455464746"
        assert release.build_number is None
        assert release.package == "org.example.FooApp"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_release.py" startline="776" endline="792" pcid="5602">
    def test_parse_release_into_semver_cols_with_negative_build_code(self):
        """
        Test that ensures that if the build_code passed as part of the semver version can be
        parsed as a 64 bit integer but has a negative sign then build number is left
        empty
        """
        version = "org.example.FooApp@1.0rc1+-2020"
        release = Release.objects.create(organization=self.org, version=version)
        assert release.major == 1
        assert release.minor == 0
        assert release.patch == 0
        assert release.revision == 0
        assert release.prerelease == "rc1"
        assert release.build_code == "-2020"
        assert release.build_number is None
        assert release.package == "org.example.FooApp"

</source>
</class>

<class classid="28" nclones="3" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/models/test_release.py" startline="1112" endline="1133" pcid="5628">
    def test_follows_semver_user_stops_using_semver(self):
        """
        Test that ensures that if a user stops using semver and so the last 3 releases in the last
        10 releases are all non-semver releases, then the project does not follow semver anymore
        since 1st condition of at least one semver release in the last 3 has to be a semver
        release is not satisfied
        """
        proj = self.create_project(organization=self.org)

        for i in range(7):
            self.create_release(version=f"{self.fake_package}{proj.id}@1.{i}", project=proj)
        for i in range(3):
            self.create_release(version=f"helloworld {i}", project=proj)

        assert (
            follows_semver_versioning_scheme(
                org_id=self.org.id,
                project_id=proj.id,
            )
            is False
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_release.py" startline="1134" endline="1153" pcid="5629">
    def test_follows_semver_user_accidentally_uses_semver_a_few_times(self):
        """
        Test that ensures that if user accidentally uses semver compliant versions for a few
        times then the project will not be considered to be using semver
        """
        proj = self.create_project(organization=self.org)

        for i in range(8):
            self.create_release(version=f"foo release {i}", project=proj)
        for i in range(2):
            self.create_release(version=f"{self.fake_package}{proj.id}@1.{i}", project=proj)

        assert (
            follows_semver_versioning_scheme(
                org_id=self.org.id,
                project_id=proj.id,
            )
            is False
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_release.py" startline="1154" endline="1173" pcid="5630">
    def test_follows_semver_user_starts_using_semver(self):
        """
        Test that ensures if a user starts using semver by having at least the last 3 releases
        using semver then we consider the project to be using semver
        """
        proj = self.create_project(organization=self.org)

        for i in range(7):
            self.create_release(version=f"foo release {i}", project=proj)
        for i in range(3):
            self.create_release(version=f"{self.fake_package}{proj.id}@1.{i}", project=proj)

        assert (
            follows_semver_versioning_scheme(
                org_id=self.org.id,
                project_id=proj.id,
            )
            is True
        )

</source>
</class>

<class classid="29" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/models/test_groupresolution.py" startline="38" endline="52" pcid="5638">
    def test_for_semver_when_current_release_version_is_set_with_new_semver_release(self):
        # Behaviour should be the same in both `in_release` and `in_next_release` because if
        # `current_release_version` is set then comparison will be > current_release_version
        # should not have a resolution
        for grp_res_type in [GroupResolution.Type.in_release, GroupResolution.Type.in_next_release]:
            grp_resolution = GroupResolution.objects.create(
                release=self.old_semver_release,
                current_release_version=self.old_semver_release.version,
                group=self.group,
                type=grp_res_type,
            )
            assert not GroupResolution.has_resolution(self.group, self.new_semver_release)

            grp_resolution.delete()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_groupresolution.py" startline="76" endline="87" pcid="5641">
    def test_when_current_release_version_is_set_with_new_release(self):
        for grp_res_type in [GroupResolution.Type.in_release, GroupResolution.Type.in_next_release]:
            grp_resolution = GroupResolution.objects.create(
                release=self.old_release,
                current_release_version=self.old_release.version,
                group=self.group,
                type=grp_res_type,
            )
            assert not GroupResolution.has_resolution(self.group, self.new_release)

            grp_resolution.delete()

</source>
</class>

<class classid="30" nclones="4" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/models/test_groupresolution.py" startline="53" endline="64" pcid="5639">
    def test_for_semver_when_current_release_version_is_set_with_same_release(self):
        for grp_res_type in [GroupResolution.Type.in_release, GroupResolution.Type.in_next_release]:
            grp_resolution = GroupResolution.objects.create(
                release=self.old_semver_release,
                current_release_version=self.old_semver_release.version,
                group=self.group,
                type=grp_res_type,
            )
            assert GroupResolution.has_resolution(self.group, self.old_semver_release)

            grp_resolution.delete()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_groupresolution.py" startline="100" endline="111" pcid="5643">
    def test_when_current_release_version_is_set_with_old_release(self):
        for grp_res_type in [GroupResolution.Type.in_release, GroupResolution.Type.in_next_release]:
            grp_resolution = GroupResolution.objects.create(
                release=self.new_release,
                current_release_version=self.new_release.version,
                group=self.group,
                type=grp_res_type,
            )
            assert GroupResolution.has_resolution(self.group, self.old_release)

            grp_resolution.delete()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_groupresolution.py" startline="88" endline="99" pcid="5642">
    def test_when_current_release_version_is_set_with_same_release(self):
        for grp_res_type in [GroupResolution.Type.in_release, GroupResolution.Type.in_next_release]:
            grp_resolution = GroupResolution.objects.create(
                release=self.old_release,
                current_release_version=self.old_release.version,
                group=self.group,
                type=grp_res_type,
            )
            assert GroupResolution.has_resolution(self.group, self.old_release)

            grp_resolution.delete()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/models/test_groupresolution.py" startline="65" endline="75" pcid="5640">
    def test_for_semver_when_current_release_version_is_set_with_old_semver_release(self):
        for grp_res_type in [GroupResolution.Type.in_release, GroupResolution.Type.in_next_release]:
            grp_resolution = GroupResolution.objects.create(
                release=self.new_semver_release,
                current_release_version=self.new_semver_release.version,
                group=self.group,
                type=grp_res_type,
            )
            assert GroupResolution.has_resolution(self.group, self.old_semver_release)
            grp_resolution.delete()

</source>
</class>

<class classid="31" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/receivers/test_onboarding.py" startline="139" endline="150" pcid="5762">
    def test_project_created(self):
        now = timezone.now()
        project = self.create_project(first_event=now)
        project_created.send(project=project, user=self.user, sender=type(project))

        task = OrganizationOnboardingTask.objects.get(
            organization=project.organization,
            task=OnboardingTask.FIRST_PROJECT,
            status=OnboardingTaskStatus.COMPLETE,
        )
        assert task is not None

</source>
<source file="systems/sentry-22.2.0/tests/sentry/receivers/test_onboarding.py" startline="151" endline="162" pcid="5763">
    def test_first_event_pending(self):
        now = timezone.now()
        project = self.create_project(first_event=now)
        first_event_pending.send(project=project, user=self.user, sender=type(project))

        task = OrganizationOnboardingTask.objects.get(
            organization=project.organization,
            task=OnboardingTask.FIRST_EVENT,
            status=OnboardingTaskStatus.PENDING,
        )
        assert task is not None

</source>
</class>

<class classid="32" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/receivers/test_featureadoption.py" startline="539" endline="550" pcid="5844">
    def test_issue_tracker_plugin(self):
        plugin_enabled.send(
            plugin=IssueTrackingPlugin2(),
            project=self.project,
            user=self.owner,
            sender=type(self.project),
        )
        feature_complete = FeatureAdoption.objects.get_by_slug(
            organization=self.organization, slug="issue_tracker_integration"
        )
        assert feature_complete

</source>
<source file="systems/sentry-22.2.0/tests/sentry/receivers/test_featureadoption.py" startline="551" endline="562" pcid="5845">
    def test_notification_plugin(self):
        plugin_enabled.send(
            plugin=NotificationPlugin(),
            project=self.project,
            user=self.owner,
            sender=type(self.project),
        )
        feature_complete = FeatureAdoption.objects.get_by_slug(
            organization=self.organization, slug="notification_integration"
        )
        assert feature_complete

</source>
</class>

<class classid="33" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_assemble.py" startline="239" endline="255" pcid="5911">
    def test_artifacts_invalid_org(self):
        bundle_file = self.create_artifact_bundle(org="invalid")
        blob1 = FileBlob.from_file(ContentFile(bundle_file))
        total_checksum = sha1(bundle_file).hexdigest()

        assemble_artifacts(
            org_id=self.organization.id,
            version=self.release.version,
            checksum=total_checksum,
            chunks=[blob1.checksum],
        )

        status, details = get_assemble_status(
            AssembleTask.ARTIFACTS, self.organization.id, total_checksum
        )
        assert status == ChunkFileState.ERROR

</source>
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_assemble.py" startline="256" endline="272" pcid="5912">
    def test_artifacts_invalid_release(self):
        bundle_file = self.create_artifact_bundle(release="invalid")
        blob1 = FileBlob.from_file(ContentFile(bundle_file))
        total_checksum = sha1(bundle_file).hexdigest()

        assemble_artifacts(
            org_id=self.organization.id,
            version=self.release.version,
            checksum=total_checksum,
            chunks=[blob1.checksum],
        )

        status, details = get_assemble_status(
            AssembleTask.ARTIFACTS, self.organization.id, total_checksum
        )
        assert status == ChunkFileState.ERROR

</source>
</class>

<class classid="34" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_sentry_apps.py" startline="509" endline="526" pcid="5965">
    def test_saves_error_if_webhook_request_fails(self, safe_urlopen):
        data = {"issue": serialize(self.issue)}

        with self.assertRaises(ClientError):
            send_webhooks(
                installation=self.install, event="issue.assigned", data=data, actor=self.user
            )

        requests = self.buffer.get_requests()
        requests_count = len(requests)
        first_request = requests[0]

        assert safe_urlopen.called
        assert requests_count == 1
        assert first_request["response_code"] == 400
        assert first_request["event_type"] == "issue.assigned"
        assert first_request["organization_id"] == self.install.organization.id

</source>
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_sentry_apps.py" startline="543" endline="560" pcid="5967">
    def test_saves_error_for_request_timeout(self, safe_urlopen):
        data = {"issue": serialize(self.issue)}
        # we don't log errors for unpublished and internal apps
        with self.assertRaises(Timeout):
            send_webhooks(
                installation=self.install, event="issue.assigned", data=data, actor=self.user
            )

        requests = self.buffer.get_requests()
        requests_count = len(requests)
        first_request = requests[0]

        assert safe_urlopen.called
        assert requests_count == 1
        assert first_request["response_code"] == 0
        assert first_request["event_type"] == "issue.assigned"
        assert first_request["organization_id"] == self.install.organization.id

</source>
</class>

<class classid="35" nclones="3" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_check_monitors.py" startline="11" endline="27" pcid="5989">
    def test_missing_checkin(self):
        org = self.create_organization()
        project = self.create_project(organization=org)

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *"},
            status=MonitorStatus.OK,
        )

        check_monitors()

        assert Monitor.objects.filter(id=monitor.id, status=MonitorStatus.ERROR).exists()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_check_monitors.py" startline="28" endline="44" pcid="5990">
    def test_missing_checkin_but_disabled(self):
        org = self.create_organization()
        project = self.create_project(organization=org)

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *"},
            status=MonitorStatus.DISABLED,
        )

        check_monitors()

        assert Monitor.objects.filter(id=monitor.id, status=MonitorStatus.DISABLED).exists()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_check_monitors.py" startline="45" endline="61" pcid="5991">
    def test_missing_checkin_but_pending_deletion(self):
        org = self.create_organization()
        project = self.create_project(organization=org)

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *"},
            status=MonitorStatus.PENDING_DELETION,
        )

        check_monitors()

        assert Monitor.objects.filter(id=monitor.id, status=MonitorStatus.PENDING_DELETION).exists()

</source>
</class>

<class classid="36" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_symbolication.py" startline="19" endline="38" pcid="6055">
    def get_event_preprocessors(self, data):
        def remove_extra(data):
            del data["extra"]
            return data

        def put_on_hold(data):
            data["unprocessed"] = True
            return data

        if data.get("platform") == "mattlang":
            return [remove_extra, lambda x: None]

        if data.get("platform") == "noop":
            return [lambda data: None]

        if data.get("platform") == "holdmeclose":
            return [put_on_hold]

        return []

</source>
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_store.py" startline="21" endline="40" pcid="6085">
    def get_event_preprocessors(self, data):
        def remove_extra(data):
            del data["extra"]
            return data

        def put_on_hold(data):
            data["unprocessed"] = True
            return data

        if data.get("platform") == "mattlang":
            return [remove_extra, lambda x: None]

        if data.get("platform") == "noop":
            return [lambda data: None]

        if data.get("platform") == "holdmeclose":
            return [put_on_hold]

        return []

</source>
</class>

<class classid="37" nclones="3" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_symbolication.py" startline="95" endline="113" pcid="6067">
def test_move_to_symbolicate_event(
    default_project, mock_process_event, mock_save_event, mock_symbolicate_event, register_plugin
):
    register_plugin(globals(), BasicPreprocessorPlugin)
    data = {
        "project": default_project.id,
        "platform": "native",
        "logentry": {"formatted": "test"},
        "event_id": EVENT_ID,
        "extra": {"foo": "bar"},
    }

    preprocess_event(cache_key="", data=data)

    assert mock_symbolicate_event.delay.call_count == 1
    assert mock_process_event.delay.call_count == 0
    assert mock_save_event.delay.call_count == 0


</source>
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_store.py" startline="114" endline="132" pcid="6098">
def test_move_to_save_event(
    default_project, mock_process_event, mock_save_event, mock_symbolicate_event, register_plugin
):
    register_plugin(globals(), BasicPreprocessorPlugin)
    data = {
        "project": default_project.id,
        "platform": "NOTMATTLANG",
        "logentry": {"formatted": "test"},
        "event_id": EVENT_ID,
        "extra": {"foo": "bar"},
    }

    preprocess_event(cache_key="", data=data)

    assert mock_symbolicate_event.delay.call_count == 0
    assert mock_process_event.delay.call_count == 0
    assert mock_save_event.delay.call_count == 1


</source>
<source file="systems/sentry-22.2.0/tests/sentry/tasks/test_store.py" startline="94" endline="112" pcid="6097">
def test_move_to_process_event(
    default_project, mock_process_event, mock_save_event, mock_symbolicate_event, register_plugin
):
    register_plugin(globals(), BasicPreprocessorPlugin)
    data = {
        "project": default_project.id,
        "platform": "mattlang",
        "logentry": {"formatted": "test"},
        "event_id": EVENT_ID,
        "extra": {"foo": "bar"},
    }

    preprocess_event(cache_key="", data=data)

    assert mock_symbolicate_event.delay.call_count == 0
    assert mock_process_event.delay.call_count == 1
    assert mock_save_event.delay.call_count == 0


</source>
</class>

<class classid="38" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/data_export/test_tasks.py" startline="143" endline="154" pcid="6153">
    def test_issue_by_tag_missing_project(self, emailer):
        de = ExportedData.objects.create(
            user=self.user,
            organization=self.org,
            query_type=ExportQueryType.ISSUES_BY_TAG,
            query_info={"project": [-1], "group": self.event.group_id, "key": "user"},
        )
        with self.tasks():
            assemble_download(de.id)
        error = emailer.call_args[1]["message"]
        assert error == "Requested project does not exist"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/data_export/test_tasks.py" startline="314" endline="325" pcid="6160">
    def test_discover_missing_project(self, emailer):
        de = ExportedData.objects.create(
            user=self.user,
            organization=self.org,
            query_type=ExportQueryType.DISCOVER,
            query_info={"project": [-1], "group": self.event.group_id, "key": "user"},
        )
        with self.tasks():
            assemble_download(de.id)
        error = emailer.call_args[1]["message"]
        assert error == "Requested project does not exist"

</source>
</class>

<class classid="39" nclones="2" nlines="23" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/data_export/test_tasks.py" startline="329" endline="356" pcid="6161">
    def test_discover_export_file_too_large(self, emailer):
        de = ExportedData.objects.create(
            user=self.user,
            organization=self.org,
            query_type=ExportQueryType.DISCOVER,
            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
        )
        with self.tasks():
            assemble_download(de.id, batch_size=1)
        de = ExportedData.objects.get(id=de.id)
        assert de.date_finished is not None
        assert de.date_expired is not None
        assert de.file_id is not None
        assert isinstance(de._get_file(), File)
        file = de._get_file()
        assert file.headers == {"Content-Type": "text/csv"}
        assert file.size is not None
        assert file.checksum is not None
        # Convert raw csv to list of line-strings
        # capping MAX_FILE_SIZE forces the last batch to be dropped, leaving 2 rows
        header, raw1, raw2 = file.getfile().read().strip().split(b"\r\n")
        assert header == b"title"

        assert raw1.startswith(b"<unlabeled event>")
        assert raw2.startswith(b"<unlabeled event>")

        assert emailer.called

</source>
<source file="systems/sentry-22.2.0/tests/sentry/data_export/test_tasks.py" startline="358" endline="385" pcid="6162">
    def test_discover_export_too_many_rows(self, emailer):
        de = ExportedData.objects.create(
            user=self.user,
            organization=self.org,
            query_type=ExportQueryType.DISCOVER,
            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
        )
        with self.tasks():
            assemble_download(de.id, export_limit=2)
        de = ExportedData.objects.get(id=de.id)
        assert de.date_finished is not None
        assert de.date_expired is not None
        assert de.file_id is not None
        assert isinstance(de._get_file(), File)
        file = de._get_file()
        assert file.headers == {"Content-Type": "text/csv"}
        assert file.size is not None
        assert file.checksum is not None
        # Convert raw csv to list of line-strings
        # capping MAX_FILE_SIZE forces the last batch to be dropped, leaving 2 rows
        header, raw1, raw2 = file.getfile().read().strip().split(b"\r\n")
        assert header == b"title"

        assert raw1.startswith(b"<unlabeled event>")
        assert raw2.startswith(b"<unlabeled event>")

        assert emailer.called

</source>
</class>

<class classid="40" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/data_export/test_tasks.py" startline="388" endline="412" pcid="6163">
    def test_discover_outside_retention(self, emailer, mock_query):
        """
        When a discover query goes outside the retention range, email the user they should
        use a more recent date range.
        """
        de = ExportedData.objects.create(
            user=self.user,
            organization=self.org,
            query_type=ExportQueryType.DISCOVER,
            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
        )

        mock_query.side_effect = QueryOutsideRetentionError("test")
        with self.tasks():
            assemble_download(de.id)
        error = emailer.call_args[1]["message"]
        assert error == "Invalid date range. Please try a more recent date range."

        # unicode
        mock_query.side_effect = QueryOutsideRetentionError("\xfc")
        with self.tasks():
            assemble_download(de.id)
        error = emailer.call_args[1]["message"]
        assert error == "Invalid date range. Please try a more recent date range."

</source>
<source file="systems/sentry-22.2.0/tests/sentry/data_export/test_tasks.py" startline="415" endline="435" pcid="6164">
    def test_discover_invalid_search_query(self, emailer, mock_query):
        de = ExportedData.objects.create(
            user=self.user,
            organization=self.org,
            query_type=ExportQueryType.DISCOVER,
            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
        )

        mock_query.side_effect = InvalidSearchQuery("test")
        with self.tasks():
            assemble_download(de.id)
        error = emailer.call_args[1]["message"]
        assert error == "Invalid query. Please fix the query and try again."

        # unicode
        mock_query.side_effect = InvalidSearchQuery("\xfc")
        with self.tasks():
            assemble_download(de.id)
        error = emailer.call_args[1]["message"]
        assert error == "Invalid query. Please fix the query and try again."

</source>
</class>

<class classid="41" nclones="2" nlines="132" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/utils/test_numbers.py" startline="11" endline="145" pcid="6366">
def test_base36():
    assert [base36_encode(x) for x in range(128)] == [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "1A",
        "1B",
        "1C",
        "1D",
        "1E",
        "1F",
        "1G",
        "1H",
        "1I",
        "1J",
        "1K",
        "1L",
        "1M",
        "1N",
        "1O",
        "1P",
        "1Q",
        "1R",
        "1S",
        "1T",
        "1U",
        "1V",
        "1W",
        "1X",
        "1Y",
        "1Z",
        "20",
        "21",
        "22",
        "23",
        "24",
        "25",
        "26",
        "27",
        "28",
        "29",
        "2A",
        "2B",
        "2C",
        "2D",
        "2E",
        "2F",
        "2G",
        "2H",
        "2I",
        "2J",
        "2K",
        "2L",
        "2M",
        "2N",
        "2O",
        "2P",
        "2Q",
        "2R",
        "2S",
        "2T",
        "2U",
        "2V",
        "2W",
        "2X",
        "2Y",
        "2Z",
        "30",
        "31",
        "32",
        "33",
        "34",
        "35",
        "36",
        "37",
        "38",
        "39",
        "3A",
        "3B",
        "3C",
        "3D",
        "3E",
        "3F",
        "3G",
        "3H",
        "3I",
        "3J",
    ]

    assert [base36_decode(base36_encode(x)) for x in range(128)] == list(range(128))


</source>
<source file="systems/sentry-22.2.0/tests/sentry/utils/test_numbers.py" startline="146" endline="280" pcid="6367">
def test_base32():
    assert [base32_encode(x) for x in range(128)] == [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "J",
        "K",
        "M",
        "N",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "1A",
        "1B",
        "1C",
        "1D",
        "1E",
        "1F",
        "1G",
        "1H",
        "1J",
        "1K",
        "1M",
        "1N",
        "1P",
        "1Q",
        "1R",
        "1S",
        "1T",
        "1V",
        "1W",
        "1X",
        "1Y",
        "1Z",
        "20",
        "21",
        "22",
        "23",
        "24",
        "25",
        "26",
        "27",
        "28",
        "29",
        "2A",
        "2B",
        "2C",
        "2D",
        "2E",
        "2F",
        "2G",
        "2H",
        "2J",
        "2K",
        "2M",
        "2N",
        "2P",
        "2Q",
        "2R",
        "2S",
        "2T",
        "2V",
        "2W",
        "2X",
        "2Y",
        "2Z",
        "30",
        "31",
        "32",
        "33",
        "34",
        "35",
        "36",
        "37",
        "38",
        "39",
        "3A",
        "3B",
        "3C",
        "3D",
        "3E",
        "3F",
        "3G",
        "3H",
        "3J",
        "3K",
        "3M",
        "3N",
        "3P",
        "3Q",
        "3R",
        "3S",
        "3T",
        "3V",
        "3W",
        "3X",
        "3Y",
        "3Z",
    ]

    assert [base32_decode(base32_encode(x)) for x in range(128)] == list(range(128))


</source>
</class>

<class classid="42" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/utils/test_concurrent.py" startline="26" endline="45" pcid="6371">
def test_future_set_callback_success():
    future_set = FutureSet([Future() for i in range(3)])

    callback = mock.Mock()
    future_set.add_done_callback(callback)

    for i, future in enumerate(list(future_set)):
        assert callback.call_count == 0
        future.set_result(True)

    assert callback.call_count == 1
    assert callback.call_args == mock.call(future_set)

    other_callback = mock.Mock()
    future_set.add_done_callback(other_callback)

    assert other_callback.call_count == 1
    assert other_callback.call_args == mock.call(future_set)


</source>
<source file="systems/sentry-22.2.0/tests/sentry/utils/test_concurrent.py" startline="46" endline="65" pcid="6372">
def test_future_set_callback_error():
    future_set = FutureSet([Future() for i in range(3)])

    callback = mock.Mock()
    future_set.add_done_callback(callback)

    for i, future in enumerate(list(future_set)):
        assert callback.call_count == 0
        future.set_exception(Exception)

    assert callback.call_count == 1
    assert callback.call_args == mock.call(future_set)

    other_callback = mock.Mock()
    future_set.add_done_callback(other_callback)

    assert other_callback.call_count == 1
    assert other_callback.call_args == mock.call(future_set)


</source>
</class>

<class classid="43" nclones="3" nlines="19" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/utils/email/test_message_builder.py" startline="14" endline="35" pcid="6450">
    def test_raw_content(self):
        msg = MessageBuilder(
            subject="Test",
            body="hello world",
            html_body="<b>hello world</b>",
            headers={"X-Test": "foo"},
        )
        msg.send(["foo@example.com"])

        assert len(mail.outbox) == 1

        out = mail.outbox[0]
        assert out.to == ["foo@example.com"]
        assert out.subject == "Test"
        assert out.extra_headers["X-Test"] == "foo"
        assert out.body == "hello world"
        assert len(out.alternatives) == 1
        assert out.alternatives[0] == (
            "<!DOCTYPE html>\n<html><body><b>hello world</b></body></html>",
            "text/html",
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/utils/email/test_message_builder.py" startline="58" endline="79" pcid="6452">
    def test_explicit_reply_to(self):
        msg = MessageBuilder(
            subject="Test",
            body="hello world",
            html_body="<b>hello world</b>",
            headers={"X-Sentry-Reply-To": "bar@example.com"},
        )
        msg.send(["foo@example.com"])

        assert len(mail.outbox) == 1

        out = mail.outbox[0]
        assert out.to == ["foo@example.com"]
        assert out.subject == "Test"
        assert out.extra_headers["Reply-To"] == "bar@example.com"
        assert out.body == "hello world"
        assert len(out.alternatives) == 1
        assert out.alternatives[0] == (
            "<!DOCTYPE html>\n<html><body><b>hello world</b></body></html>",
            "text/html",
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/utils/email/test_message_builder.py" startline="36" endline="57" pcid="6451">
    def test_inline_css(self):
        msg = MessageBuilder(
            subject="Test",
            body="hello world",
            html_body="<head><style type='text/css'>h1 { color: red; }</style></head><h1>foobar</h1><h2><b>hello world</b></h2>",
            headers={"X-Test": "foo"},
        )
        msg.send(["foo@example.com"])

        assert len(mail.outbox) == 1

        out = mail.outbox[0]
        assert out.to == ["foo@example.com"]
        assert out.subject == "Test"
        assert out.extra_headers["X-Test"] == "foo"
        assert out.body == "hello world"
        assert len(out.alternatives) == 1
        assert out.alternatives[0] == (
            '<!DOCTYPE html>\n<html><head></head><body><h1 style="color: red">foobar</h1><h2><b>hello world</b></h2></body></html>',
            "text/html",
        )

</source>
</class>

<class classid="44" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/incidents/endpoints/test_organization_incident_comment_index.py" startline="69" endline="80" pcid="6624">
    def test_access(self):
        other_user = self.create_user()
        self.login_as(other_user)
        other_team = self.create_team()
        self.create_member(
            user=self.user, organization=self.organization, role="member", teams=[self.team]
        )
        other_project = self.create_project(teams=[other_team])
        incident = self.create_incident(projects=[other_project])
        with self.feature("organizations:incidents"):
            resp = self.get_response(self.organization.slug, incident.identifier, comment="hi")
            assert resp.status_code == 403
</source>
<source file="systems/sentry-22.2.0/tests/sentry/incidents/endpoints/test_organization_incident_subscription_index.py" startline="23" endline="36" pcid="6664">
    def test_access(self):
        other_user = self.create_user()
        self.login_as(other_user)
        other_team = self.create_team()
        self.create_member(
            user=self.user, organization=self.organization, role="member", teams=[self.team]
        )
        other_project = self.create_project(teams=[other_team])
        incident = self.create_incident(projects=[other_project])
        with self.feature("organizations:incidents"):
            resp = self.get_response(self.organization.slug, incident.identifier, comment="hi")
            assert resp.status_code == 403


</source>
</class>

<class classid="45" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/test_canonical.py" startline="161" endline="173" pcid="6896">
    def test_canonical(self):
        assert (
            CanonicalKeyDict(
                {
                    "release": "asdf",
                    "exception": {"type": "DemoException"},
                    "user": {"id": "DemoUser"},
                },
                legacy=True,
            )
            == self.canonical_data
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/test_canonical.py" startline="174" endline="186" pcid="6897">
    def test_legacy(self):
        assert (
            CanonicalKeyDict(
                {
                    "release": "asdf",
                    "sentry.interfaces.Exception": {"type": "DemoException"},
                    "sentry.interfaces.User": {"id": "DemoUser"},
                },
                legacy=True,
            )
            == self.canonical_data
        )

</source>
</class>

<class classid="46" nclones="3" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/test_canonical.py" startline="215" endline="227" pcid="6900">
    def test_canonical(self):
        view = CanonicalKeyView({"logentry": "foo"})
        assert len(view) == 1
        assert list(view.keys()) == ["logentry"]

        assert "logentry" in view
        assert "sentry.interfaces.Message" in view
        assert "message" in view

        assert view["logentry"] == "foo"
        assert view["sentry.interfaces.Message"] == "foo"
        assert view["message"] == "foo"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/test_canonical.py" startline="228" endline="240" pcid="6901">
    def test_legacy_first(self):
        view = CanonicalKeyView({"sentry.interfaces.Message": "foo"})
        assert len(view) == 1
        assert list(view.keys()) == ["logentry"]

        assert "logentry" in view
        assert "sentry.interfaces.Message" in view
        assert "message" in view

        assert view["logentry"] == "foo"
        assert view["sentry.interfaces.Message"] == "foo"
        assert view["message"] == "foo"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/test_canonical.py" startline="241" endline="253" pcid="6902">
    def test_legacy_second(self):
        view = CanonicalKeyView({"message": "foo"})
        assert len(view) == 1
        assert list(view.keys()) == ["logentry"]

        assert "logentry" in view
        assert "sentry.interfaces.Message" in view
        assert "message" in view

        assert view["logentry"] == "foo"
        assert view["sentry.interfaces.Message"] == "foo"
        assert view["message"] == "foo"

</source>
</class>

<class classid="47" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/test_canonical.py" startline="254" endline="266" pcid="6903">
    def test_override(self):
        view = CanonicalKeyView({"logentry": "foo", "sentry.interfaces.Message": "bar"})
        assert len(view) == 1
        assert list(view.keys()) == ["logentry"]

        assert "logentry" in view
        assert "sentry.interfaces.Message" in view
        assert "message" in view

        assert view["logentry"] == "foo"
        assert view["sentry.interfaces.Message"] == "foo"
        assert view["message"] == "foo"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/test_canonical.py" startline="267" endline="278" pcid="6904">
    def test_two_legacy(self):
        view = CanonicalKeyView({"message": "bar", "sentry.interfaces.Message": "foo"})
        assert len(view) == 1
        assert list(view.keys()) == ["logentry"]

        assert "logentry" in view
        assert "sentry.interfaces.Message" in view
        assert "message" in view

        assert view["logentry"] == "foo"
        assert view["sentry.interfaces.Message"] == "foo"
        assert view["message"] == "foo"
</source>
</class>

<class classid="48" nclones="2" nlines="30" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/snuba/test_entity_subscriptions.py" startline="92" endline="122" pcid="6977">
    def test_get_entity_subscription_for_metrics_dataset_for_users(self) -> None:
        aggregate = "percentage(users_crashed, users) AS _crash_rate_alert_aggregate"
        entity_subscription = get_entity_subscription_for_dataset(
            dataset=QueryDatasets.METRICS,
            aggregate=aggregate,
            time_window=3600,
            extra_fields={"org_id": self.organization.id},
        )
        assert isinstance(entity_subscription, MetricsSetsEntitySubscription)
        assert entity_subscription.aggregate == aggregate
        groupby = [resolve_tag_key("session.status")]
        assert entity_subscription.get_entity_extra_params() == {
            "organization": self.organization.id,
            "groupby": groupby,
            "granularity": 10,
        }
        assert entity_subscription.entity_key == EntityKey.MetricsSets
        assert entity_subscription.time_col == ENTITY_TIME_COLUMNS[EntityKey.MetricsSets]
        assert entity_subscription.dataset == QueryDatasets.METRICS
        session_status = resolve_tag_key("session.status")
        session_status_tag_values = resolve_many_weak(["crashed", "init"])
        snuba_filter = entity_subscription.build_snuba_filter("", None, None)
        assert snuba_filter
        assert snuba_filter.aggregations == [["uniq(value)", None, "value"]]
        assert snuba_filter.conditions == [
            ["metric_id", "=", resolve(SessionMetricKey.USER.value)],
            [session_status, "IN", session_status_tag_values],
        ]
        assert snuba_filter.groupby == groupby
        assert snuba_filter.rollup == entity_subscription.get_granularity()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/snuba/test_entity_subscriptions.py" startline="123" endline="153" pcid="6978">
    def test_get_entity_subscription_for_metrics_dataset_for_sessions(self) -> None:
        aggregate = "percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate"
        entity_subscription = get_entity_subscription_for_dataset(
            dataset=QueryDatasets.METRICS,
            aggregate=aggregate,
            time_window=3600,
            extra_fields={"org_id": self.organization.id},
        )
        assert isinstance(entity_subscription, MetricsCountersEntitySubscription)
        assert entity_subscription.aggregate == aggregate
        groupby = [resolve_tag_key("session.status")]
        assert entity_subscription.get_entity_extra_params() == {
            "organization": self.organization.id,
            "groupby": groupby,
            "granularity": 10,
        }
        assert entity_subscription.entity_key == EntityKey.MetricsCounters
        assert entity_subscription.time_col == ENTITY_TIME_COLUMNS[EntityKey.MetricsCounters]
        assert entity_subscription.dataset == QueryDatasets.METRICS
        session_status = resolve_tag_key("session.status")
        session_status_tag_values = resolve_many_weak(["crashed", "init"])
        snuba_filter = entity_subscription.build_snuba_filter("", None, None)
        assert snuba_filter
        assert snuba_filter.aggregations == [["sum(value)", None, "value"]]
        assert snuba_filter.conditions == [
            ["metric_id", "=", resolve(SessionMetricKey.SESSION.value)],
            [session_status, "IN", session_status_tag_values],
        ]
        assert snuba_filter.groupby == groupby
        assert snuba_filter.rollup == entity_subscription.get_granularity()

</source>
</class>

<class classid="49" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/lang/native/test_symbolicator.py" startline="121" endline="134" pcid="7014">
    def test_location_debug_id(self):
        debug_id = "451a38b5-0679-79d2-0738-22a5ceb24c4b"
        candidates = [
            {
                "source": "sentry:microsoft",
                "location": "http://microsoft.com/prefix/path0",
                "download": {"status": "ok"},
            },
        ]
        response = {"modules": [{"debug_id": debug_id, "candidates": copy.copy(candidates)}]}
        redact_internal_sources(response)
        expected = [{"source": "sentry:microsoft", "download": {"status": "ok"}}]
        assert response["modules"][0]["candidates"] == expected

</source>
<source file="systems/sentry-22.2.0/tests/sentry/lang/native/test_symbolicator.py" startline="225" endline="240" pcid="7019">
    def test_sentry_project_notfound_no_location(self):
        # For sentry:project status=notfound the location needs to be removed
        debug_id = "451a38b5-0679-79d2-0738-22a5ceb24c4b"
        candidates = [
            {
                "source": "sentry:project",
                "location": "Not the locacation you are looking for",
                "download": {"status": "notfound"},
            },
        ]
        response = {"modules": [{"debug_id": debug_id, "candidates": copy.copy(candidates)}]}
        redact_internal_sources(response)
        expected = [{"source": "sentry:project", "download": {"status": "notfound"}}]
        assert response["modules"][0]["candidates"] == expected


</source>
</class>

<class classid="50" nclones="2" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/lang/native/test_symbolicator.py" startline="135" endline="153" pcid="7015">
    def test_notfound_deduplicated(self):
        debug_id = "451a38b5-0679-79d2-0738-22a5ceb24c4b"
        candidates = [
            {
                "source": "sentry:microsoft",
                "location": "http://microsoft.com/prefix/path0",
                "download": {"status": "notfound"},
            },
            {
                "source": "sentry:microsoft",
                "location": "http://microsoft.com/prefix/path1",
                "download": {"status": "notfound"},
            },
        ]
        response = {"modules": [{"debug_id": debug_id, "candidates": copy.copy(candidates)}]}
        redact_internal_sources(response)
        expected = [{"source": "sentry:microsoft", "download": {"status": "notfound"}}]
        assert response["modules"][0]["candidates"] == expected

</source>
<source file="systems/sentry-22.2.0/tests/sentry/lang/native/test_symbolicator.py" startline="154" endline="172" pcid="7016">
    def test_notfound_omitted(self):
        debug_id = "451a38b5-0679-79d2-0738-22a5ceb24c4b"
        candidates = [
            {
                "source": "sentry:microsoft",
                "location": "http://microsoft.com/prefix/path0",
                "download": {"status": "notfound"},
            },
            {
                "source": "sentry:microsoft",
                "location": "http://microsoft.com/prefix/path1",
                "download": {"status": "ok"},
            },
        ]
        response = {"modules": [{"debug_id": debug_id, "candidates": copy.copy(candidates)}]}
        redact_internal_sources(response)
        expected = [{"source": "sentry:microsoft", "download": {"status": "ok"}}]
        assert response["modules"][0]["candidates"] == expected

</source>
</class>

<class classid="51" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/lang/native/test_ignoredsourcesfiltering.py" startline="81" endline="92" pcid="7029">
    def test_sources_ignored_builtin(self, sources):
        with override_options({"symbolicator.ignored_sources": ["sentry:microsoft"]}):
            sources = filter_ignored_sources(sources)

            source_ids = list(map(lambda s: s["id"], sources))
            assert source_ids == [
                "sentry:electron",
                "sentry:ios-source",
                "sentry:tvos-source",
                "custom",
            ]

</source>
<source file="systems/sentry-22.2.0/tests/sentry/lang/native/test_ignoredsourcesfiltering.py" startline="115" endline="126" pcid="7032">
    def test_sources_ignored_custom(self, sources):
        with override_options({"symbolicator.ignored_sources": ["custom"]}):
            sources = filter_ignored_sources(sources)

            source_ids = list(map(lambda s: s["id"], sources))
            assert source_ids == [
                "sentry:microsoft",
                "sentry:electron",
                "sentry:ios-source",
                "sentry:tvos-source",
            ]

</source>
</class>

<class classid="52" nclones="2" nlines="30" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/serializers/test_debugfile.py" startline="6" endline="39" pcid="7110">
    def test_simple(self):
        file = self.create_file(
            name="baz.dSYM",
            size=42,
            headers={"Content-Type": "application/x-mach-binary"},
            checksum="dc1e3f3e411979d336c3057cce64294f3420f93a",
        )

        dif = self.create_dif_file(
            debug_id="dfb8e43a-f242-3d73-a453-aeb6a777ef75",
            code_id="DFB8E43AF2423D73A453AEB6A777EF75",
            object_name="baz.dSYM",
            cpu_name="x86_64",
            file=file,
            data={"features": ["debug"]},
        )

        result = serialize(dif)
        result.pop("id")
        result.pop("dateCreated")

        assert result == {
            "uuid": "dfb8e43a-f242-3d73-a453-aeb6a777ef75",
            "debugId": "dfb8e43a-f242-3d73-a453-aeb6a777ef75",
            "codeId": "DFB8E43AF2423D73A453AEB6A777EF75",
            "cpuName": "x86_64",
            "objectName": "baz.dSYM",
            "symbolType": "macho",
            "size": 42,
            "sha1": "dc1e3f3e411979d336c3057cce64294f3420f93a",
            "headers": {"Content-Type": "application/x-mach-binary"},
            "data": {"features": ["debug"]},
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/serializers/test_debugfile.py" startline="40" endline="72" pcid="7111">
    def test_long_debug_id(self):
        file = self.create_file(
            name="baz.dSYM",
            size=42,
            headers={"Content-Type": "application/x-mach-binary"},
            checksum="dc1e3f3e411979d336c3057cce64294f3420f93a",
        )

        dif = self.create_dif_file(
            debug_id="dfb8e43a-f242-3d73-a453-aeb6a777ef75-feedface",
            code_id="DFB8E43AF2423D73A453AEB6A777EF75feedface",
            object_name="baz.dSYM",
            cpu_name="x86_64",
            file=file,
            data={"features": ["debug"]},
        )

        result = serialize(dif)
        result.pop("id")
        result.pop("dateCreated")

        assert result == {
            "uuid": "dfb8e43a-f242-3d73-a453-aeb6a777ef75",
            "debugId": "dfb8e43a-f242-3d73-a453-aeb6a777ef75-feedface",
            "codeId": "DFB8E43AF2423D73A453AEB6A777EF75feedface",
            "cpuName": "x86_64",
            "objectName": "baz.dSYM",
            "symbolType": "macho",
            "size": 42,
            "sha1": "dc1e3f3e411979d336c3057cce64294f3420f93a",
            "headers": {"Content-Type": "application/x-mach-binary"},
            "data": {"features": ["debug"]},
        }
</source>
</class>

<class classid="53" nclones="3" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/serializers/test_team.py" startline="89" endline="113" pcid="7139">
    def test_admin_access(self):
        user = self.create_user(username="foo")
        organization = self.create_organization()
        self.create_member(user=user, organization=organization, role="admin")
        team = self.create_team(organization=organization)

        result = serialize(team, user)
        result.pop("dateCreated")

        assert result["hasAccess"] is True
        assert result["isMember"] is False

        organization.flags.allow_joinleave = False
        organization.save()
        result = serialize(team, user)
        # after changing to allow_joinleave=False
        assert result["hasAccess"] is False
        assert result["isMember"] is False

        self.create_team_membership(user=user, team=team)
        result = serialize(team, user)
        # after giving them access to team
        assert result["hasAccess"] is True
        assert result["isMember"] is True

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/serializers/test_team.py" startline="139" endline="164" pcid="7141">
    def test_owner_access(self):
        user = self.create_user(username="foo")
        organization = self.create_organization()
        self.create_member(user=user, organization=organization, role="owner")
        team = self.create_team(organization=organization)

        result = serialize(team, user)
        result.pop("dateCreated")

        assert result["hasAccess"] is True
        assert result["isMember"] is False

        organization.flags.allow_joinleave = False
        organization.save()
        result = serialize(team, user)
        # after changing to allow_joinleave=False
        assert result["hasAccess"] is True
        assert result["isMember"] is False

        self.create_team_membership(user=user, team=team)
        result = serialize(team, user)
        # after giving them access to team
        assert result["hasAccess"] is True
        assert result["isMember"] is True


</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/serializers/test_team.py" startline="114" endline="138" pcid="7140">
    def test_manager_access(self):
        user = self.create_user(username="foo")
        organization = self.create_organization()
        self.create_member(user=user, organization=organization, role="manager")
        team = self.create_team(organization=organization)

        result = serialize(team, user)
        result.pop("dateCreated")

        assert result["hasAccess"] is True
        assert result["isMember"] is False

        organization.flags.allow_joinleave = False
        organization.save()
        result = serialize(team, user)
        # after changing to allow_joinleave=False
        assert result["hasAccess"] is True
        assert result["isMember"] is False

        self.create_team_membership(user=user, team=team)
        result = serialize(team, user)
        # after giving them access to team
        assert result["hasAccess"] is True
        assert result["isMember"] is True

</source>
</class>

<class classid="54" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/serializers/test_event.py" startline="80" endline="95" pcid="7215">
    def test_message_interface(self):
        event = self.store_event(
            data={
                "event_id": "a" * 32,
                "timestamp": iso_format(before_now(minutes=1)),
                "logentry": {"formatted": "bar"},
                "_meta": {"logentry": {"formatted": {"": {"err": ["some error"]}}}},
            },
            project_id=self.project.id,
            assert_no_errors=False,
        )

        result = serialize(event)
        assert result["message"] == "bar"
        assert result["_meta"]["message"] == {"": {"err": ["some error"]}}

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/serializers/test_event.py" startline="96" endline="111" pcid="7216">
    def test_message_formatted(self):
        event = self.store_event(
            data={
                "event_id": "a" * 32,
                "timestamp": iso_format(before_now(minutes=1)),
                "logentry": {"formatted": "baz"},
                "_meta": {"logentry": {"formatted": {"": {"err": ["some error"]}}}},
            },
            project_id=self.project.id,
            assert_no_errors=False,
        )

        result = serialize(event)
        assert result["message"] == "baz"
        assert result["_meta"]["message"] == {"": {"err": ["some error"]}}

</source>
</class>

<class classid="55" nclones="2" nlines="19" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/validators/sentry_apps/test_schema.py" startline="127" endline="149" pcid="7266">
    def test_invalid_textarea_default_value(self):
        schema = {
            "elements": [
                {
                    "type": "alert-rule-action",
                    "title": "Mudpuppy",
                    "settings": {
                        "type": "alert-rule-settings",
                        "uri": "/alert-rule-action",
                        "required_fields": [
                            {
                                "label": "Team",
                                "type": "textarea",
                                "name": "teamId",
                                "default": "issue.something",
                            }
                        ],
                    },
                }
            ]
        }
        validate_ui_element_schema(schema, features={"organizations:alert-rule-ui-component": True})

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/validators/sentry_apps/test_schema.py" startline="153" endline="174" pcid="7267">
    def test_invalid_text_default_value(self):
        schema = {
            "elements": [
                {
                    "type": "alert-rule-action",
                    "title": "Tater Tots",
                    "settings": {
                        "type": "alert-rule-settings",
                        "uri": "/alert-rule-action",
                        "optional_fields": [
                            {
                                "label": "Team",
                                "type": "text",
                                "name": "teamId",
                                "default": "issue.someone",
                            }
                        ],
                    },
                }
            ]
        }
        validate_ui_element_schema(schema, features={"organizations:alert-rule-ui-component": True})
</source>
</class>

<class classid="56" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/test_event_search.py" startline="224" endline="244" pcid="7342">
    def test_rel_time_filter(self):
        now = timezone.now()
        with freeze_time(now):
            assert parse_search_query("time:+7d") == [
                SearchFilter(
                    key=SearchKey(name="time"),
                    operator="<=",
                    value=SearchValue(raw_value=now - timedelta(days=7)),
                )
            ]
            assert parse_search_query("time:-2w") == [
                SearchFilter(
                    key=SearchKey(name="time"),
                    operator=">=",
                    value=SearchValue(raw_value=now - timedelta(days=14)),
                )
            ]
            assert parse_search_query("random:-2w") == [
                SearchFilter(key=SearchKey(name="random"), operator="=", value=SearchValue("-2w"))
            ]

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/test_event_search.py" startline="245" endline="265" pcid="7343">
    def test_aggregate_rel_time_filter(self):
        now = timezone.now()
        with freeze_time(now):
            assert parse_search_query("last_seen():+7d") == [
                AggregateFilter(
                    key=AggregateKey(name="last_seen()"),
                    operator="<=",
                    value=SearchValue(raw_value=now - timedelta(days=7)),
                )
            ]
            assert parse_search_query("last_seen():-2w") == [
                AggregateFilter(
                    key=AggregateKey(name="last_seen()"),
                    operator=">=",
                    value=SearchValue(raw_value=now - timedelta(days=14)),
                )
            ]
            assert parse_search_query("random:-2w") == [
                SearchFilter(key=SearchKey(name="random"), operator="=", value=SearchValue("-2w"))
            ]

</source>
</class>

<class classid="57" nclones="4" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_repo_path_parsing.py" startline="92" endline="106" pcid="7497">
    def test_basic(self):
        source_url = "https://github.com/getsentry/sentry/blob/master/src/sentry/api/endpoints/project_stacktrace_link.py"
        stack_path = "sentry/api/endpoints/project_stacktrace_link.py"
        resp = self.make_post(source_url, stack_path)
        assert resp.status_code == 200, resp.content

        assert resp.data == {
            "integrationId": self.integration.id,
            "repositoryId": self.repo.id,
            "provider": "github",
            "stackRoot": "",
            "sourceRoot": "src/",
            "defaultBranch": "master",
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_repo_path_parsing.py" startline="157" endline="170" pcid="7501">
    def test_basic(self):
        source_url = "https://gitlab.com/getsentry/sentry/-/blob/master/src/sentry/api/endpoints/project_stacktrace_link.py"
        stack_path = "sentry/api/endpoints/project_stacktrace_link.py"
        resp = self.make_post(source_url, stack_path)
        assert resp.status_code == 200, resp.content

        assert resp.data == {
            "integrationId": self.integration.id,
            "repositoryId": self.repo.id,
            "provider": "gitlab",
            "stackRoot": "",
            "sourceRoot": "src/",
            "defaultBranch": "master",
        }
</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_repo_path_parsing.py" startline="121" endline="135" pcid="7499">
    def test_long_root(self):
        source_url = "https://github.com/getsentry/sentry/blob/master/src/sentry/api/endpoints/project_stacktrace_link.py"
        stack_path = "stuff/hey/here/sentry/api/endpoints/project_stacktrace_link.py"
        resp = self.make_post(source_url, stack_path)
        assert resp.status_code == 200, resp.content
        assert resp.data == {
            "integrationId": self.integration.id,
            "repositoryId": self.repo.id,
            "provider": "github",
            "stackRoot": "stuff/hey/here",
            "sourceRoot": "src",
            "defaultBranch": "master",
        }


</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_repo_path_parsing.py" startline="107" endline="120" pcid="7498">
    def test_short_path(self):
        source_url = "https://github.com/getsentry/sentry/blob/main/project_stacktrace_link.py"
        stack_path = "sentry/project_stacktrace_link.py"
        resp = self.make_post(source_url, stack_path)
        assert resp.status_code == 200, resp.content
        assert resp.data == {
            "integrationId": self.integration.id,
            "repositoryId": self.repo.id,
            "provider": "github",
            "stackRoot": "sentry/",
            "sourceRoot": "",
            "defaultBranch": "main",
        }

</source>
</class>

<class classid="58" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_repositories.py" startline="169" endline="183" pcid="7641">
    def test_admin_ok(self):
        org = self.create_organization(owner=self.user, name="baz")
        team = self.create_team(name="people", organization=org)

        user = self.create_user(email="admin@example.org")
        self.create_member(organization=org, user=user, teams=[team], role="admin")

        self.login_as(user=user)

        with patch.object(DummyRepositoryProvider, "needs_auth", return_value=False):
            url = reverse("sentry-api-0-organization-repositories", args=[org.slug])
            response = self.client.post(url, data={"provider": "dummy", "name": "getsentry/sentry"})

        assert response.status_code == 201, (response.status_code, response.content)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_repositories.py" startline="184" endline="199" pcid="7642">
    def test_no_access(self):
        org = self.create_organization(owner=self.user, name="baz")
        team = self.create_team(name="people", organization=org)

        user = self.create_user(email="member@example.org")
        self.create_member(organization=org, user=user, teams=[team], role="member")

        self.login_as(user=user)

        with patch.object(DummyRepositoryProvider, "needs_auth", return_value=False):
            url = reverse("sentry-api-0-organization-repositories", args=[org.slug])
            response = self.client.post(url, data={"provider": "dummy", "name": "getsentry/sentry"})

        assert response.status_code == 403, (response.status_code, response.content)


</source>
</class>

<class classid="59" nclones="2" nlines="23" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_scim_user_index.py" startline="69" endline="94" pcid="7688">
    def test_users_get_populated(self):
        member = self.create_member(organization=self.organization, email="test.user@okta.local")
        url = reverse("sentry-api-0-organization-scim-member-index", args=[self.organization.slug])
        response = self.client.get(
            f"{url}?startIndex=1&count=100&filter=userName%20eq%20%22test.user%40okta.local%22"
        )
        correct_get_data = {
            "schemas": ["urn:ietf:params:scim:api:messages:2.0:ListResponse"],
            "totalResults": 1,
            "startIndex": 1,
            "itemsPerPage": 1,
            "Resources": [
                {
                    "schemas": ["urn:ietf:params:scim:schemas:core:2.0:User"],
                    "id": str(member.id),
                    "userName": "test.user@okta.local",
                    "emails": [{"primary": True, "value": "test.user@okta.local", "type": "work"}],
                    "name": {"familyName": "N/A", "givenName": "N/A"},
                    "active": True,
                    "meta": {"resourceType": "User"},
                }
            ],
        }
        assert response.status_code == 200, response.content
        assert response.data == correct_get_data

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_scim_user_index.py" startline="95" endline="120" pcid="7689">
    def test_users_get_filter_case_insensitive(self):
        member = self.create_member(organization=self.organization, email="test.user@okta.local")
        url = reverse("sentry-api-0-organization-scim-member-index", args=[self.organization.slug])
        response = self.client.get(
            f"{url}?startIndex=1&count=100&filter=userName%20eq%20%22TEST.USER%40okta.local%22"
        )
        correct_get_data = {
            "schemas": ["urn:ietf:params:scim:api:messages:2.0:ListResponse"],
            "totalResults": 1,
            "startIndex": 1,
            "itemsPerPage": 1,
            "Resources": [
                {
                    "schemas": ["urn:ietf:params:scim:schemas:core:2.0:User"],
                    "id": str(member.id),
                    "userName": "test.user@okta.local",
                    "emails": [{"primary": True, "value": "test.user@okta.local", "type": "work"}],
                    "name": {"familyName": "N/A", "givenName": "N/A"},
                    "active": True,
                    "meta": {"resourceType": "User"},
                }
            ],
        }
        assert response.status_code == 200, response.content
        assert response.data == correct_get_data

</source>
</class>

<class classid="60" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_team_avatar.py" startline="10" endline="22" pcid="7808">
    def test_get(self):
        team = self.team  # force creation
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-team-avatar",
            kwargs={"organization_slug": team.organization.slug, "team_slug": team.slug},
        )
        response = self.client.get(url)
        assert response.status_code == 200
        assert response.data["id"] == str(team.id)
        assert response.data["avatar"]["avatarType"] == "letter_avatar"
        assert response.data["avatar"]["avatarUuid"] is None

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_avatar.py" startline="10" endline="22" pcid="8009">
    def test_get(self):
        project = self.project  # force creation
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-project-avatar",
            kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
        )
        response = self.client.get(url)
        assert response.status_code == 200
        assert response.data["id"] == str(project.id)
        assert response.data["avatar"]["avatarType"] == "letter_avatar"
        assert response.data["avatar"]["avatarUuid"] is None

</source>
</class>

<class classid="61" nclones="2" nlines="19" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_team_avatar.py" startline="23" endline="43" pcid="7809">
    def test_upload(self):
        team = self.team  # force creation
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-team-avatar",
            kwargs={"organization_slug": team.organization.slug, "team_slug": team.slug},
        )
        response = self.client.put(
            url,
            data={
                "avatar_type": "upload",
                "avatar_photo": b64encode(self.load_fixture("avatar.jpg")),
            },
            format="json",
        )

        avatar = TeamAvatar.objects.get(team=team)
        assert response.status_code == 200, response.content
        assert avatar.get_avatar_type_display() == "upload"
        assert avatar.file_id

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_avatar.py" startline="23" endline="43" pcid="8010">
    def test_upload(self):
        project = self.project  # force creation
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-project-avatar",
            kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
        )
        response = self.client.put(
            url,
            data={
                "avatar_type": "upload",
                "avatar_photo": b64encode(self.load_fixture("avatar.jpg")),
            },
            format="json",
        )

        avatar = ProjectAvatar.objects.get(project=project)
        assert response.status_code == 200, response.content
        assert avatar.get_avatar_type_display() == "upload"
        assert avatar.file_id

</source>
</class>

<class classid="62" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_team_avatar.py" startline="44" endline="61" pcid="7810">
    def test_put_bad(self):
        team = self.team  # force creation
        TeamAvatar.objects.create(team=team)
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-team-avatar",
            kwargs={"organization_slug": team.organization.slug, "team_slug": team.slug},
        )
        response = self.client.put(url, data={"avatar_type": "upload"}, format="json")

        avatar = TeamAvatar.objects.get(team=team)
        assert response.status_code == 400
        assert avatar.get_avatar_type_display() == "letter_avatar"

        response = self.client.put(url, data={"avatar_type": "foo"}, format="json")
        assert response.status_code == 400
        assert avatar.get_avatar_type_display() == "letter_avatar"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_avatar.py" startline="44" endline="61" pcid="8011">
    def test_put_bad(self):
        project = self.project  # force creation
        ProjectAvatar.objects.create(project=project)
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-project-avatar",
            kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
        )
        response = self.client.put(url, data={"avatar_type": "upload"}, format="json")

        avatar = ProjectAvatar.objects.get(project=project)
        assert response.status_code == 400
        assert avatar.get_avatar_type_display() == "letter_avatar"

        response = self.client.put(url, data={"avatar_type": "foo"}, format="json")
        assert response.status_code == 400
        assert avatar.get_avatar_type_display() == "letter_avatar"

</source>
</class>

<class classid="63" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_team_avatar.py" startline="62" endline="74" pcid="7811">
    def test_put_forbidden(self):
        team = self.team  # force creation
        user = self.create_user(email="a@example.com")

        self.login_as(user=user)

        url = reverse(
            "sentry-api-0-team-avatar",
            kwargs={"organization_slug": team.organization.slug, "team_slug": team.slug},
        )
        response = self.client.put(url, data={"avatar_type": "gravatar"}, format="json")

        assert response.status_code == 403
</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_avatar.py" startline="62" endline="74" pcid="8012">
    def test_put_forbidden(self):
        project = self.project  # force creation
        user = self.create_user(email="a@example.com")

        self.login_as(user=user)

        url = reverse(
            "sentry-api-0-project-avatar",
            kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
        )
        response = self.client.put(url, data={"avatar_type": "gravatar"}, format="json")

        assert response.status_code == 403
</source>
</class>

<class classid="64" nclones="2" nlines="31" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_group_events_latest.py" startline="6" endline="39" pcid="7915">
    def setUp(self):
        super().setUp()

        self.login_as(user=self.user)
        project = self.create_project()

        self.event_a = self.store_event(
            data={
                "event_id": "a" * 32,
                "environment": "development",
                "timestamp": iso_format(before_now(days=1)),
                "fingerprint": ["group-1"],
            },
            project_id=project.id,
        )
        self.event_b = self.store_event(
            data={
                "event_id": "b" * 32,
                "environment": "production",
                "timestamp": iso_format(before_now(minutes=5)),
                "fingerprint": ["group-1"],
            },
            project_id=project.id,
        )
        self.event_c = self.store_event(
            data={
                "event_id": "c" * 32,
                "environment": "staging",
                "timestamp": iso_format(before_now(minutes=1)),
                "fingerprint": ["group-1"],
            },
            project_id=project.id,
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_group_events_oldest.py" startline="6" endline="39" pcid="8051">
    def setUp(self):
        super().setUp()

        self.login_as(user=self.user)
        project = self.create_project()

        self.event_a = self.store_event(
            data={
                "event_id": "a" * 32,
                "environment": "development",
                "timestamp": iso_format(before_now(days=1)),
                "fingerprint": ["group-1"],
            },
            project_id=project.id,
        )
        self.event_b = self.store_event(
            data={
                "event_id": "b" * 32,
                "environment": "production",
                "timestamp": iso_format(before_now(minutes=5)),
                "fingerprint": ["group-1"],
            },
            project_id=project.id,
        )
        self.event_c = self.store_event(
            data={
                "event_id": "c" * 32,
                "environment": "staging",
                "timestamp": iso_format(before_now(minutes=1)),
                "fingerprint": ["group-1"],
            },
            project_id=project.id,
        )

</source>
</class>

<class classid="65" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_user_details.py" startline="123" endline="135" pcid="7928">
    def test_superuser_can_change_is_active(self):
        superuser = self.create_user(email="b@example.com", is_superuser=True)
        self.login_as(user=superuser, superuser=True)

        resp = self.get_valid_response(
            self.user.id,
            isActive="false",
        )
        assert resp.data["id"] == str(self.user.id)

        user = User.objects.get(id=self.user.id)
        assert not user.is_active

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_user_details.py" startline="150" endline="162" pcid="7930">
    def test_superuser_cannot_add_superuser(self):
        superuser = self.create_user(email="b@example.com", is_superuser=True)
        self.login_as(user=superuser, superuser=True)

        resp = self.get_valid_response(
            self.user.id,
            isSuperuser="true",
        )
        assert resp.data["id"] == str(self.user.id)

        user = User.objects.get(id=self.user.id)
        assert not user.is_superuser

</source>
</class>

<class classid="66" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_user_details.py" startline="177" endline="190" pcid="7932">
    def test_superuser_with_permission_can_add_superuser(self):
        superuser = self.create_user(email="b@example.com", is_superuser=True)
        UserPermission.objects.create(user=superuser, permission="users.admin")
        self.login_as(user=superuser, superuser=True)

        resp = self.get_valid_response(
            self.user.id,
            isSuperuser="true",
        )
        assert resp.data["id"] == str(self.user.id)

        user = User.objects.get(id=self.user.id)
        assert user.is_superuser

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_user_details.py" startline="191" endline="205" pcid="7933">
    def test_superuser_with_permission_can_add_staff(self):
        superuser = self.create_user(email="b@example.com", is_superuser=True)
        UserPermission.objects.create(user=superuser, permission="users.admin")
        self.login_as(user=superuser, superuser=True)

        resp = self.get_valid_response(
            self.user.id,
            isStaff="true",
        )
        assert resp.data["id"] == str(self.user.id)

        user = User.objects.get(id=self.user.id)
        assert user.is_staff


</source>
</class>

<class classid="67" nclones="2" nlines="23" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_monitor_checkins.py" startline="14" endline="43" pcid="8150">
    def test_passing(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        team = self.create_team(organization=org, members=[user])
        project = self.create_project(teams=[team])

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *"},
        )

        self.login_as(user=user)
        with self.feature({"organizations:monitors": True}):
            resp = self.client.post(
                f"/api/0/monitors/{monitor.guid}/checkins/", data={"status": "ok"}
            )

        assert resp.status_code == 201, resp.content

        checkin = MonitorCheckIn.objects.get(guid=resp.data["id"])
        assert checkin.status == CheckInStatus.OK

        monitor = Monitor.objects.get(id=monitor.id)
        assert monitor.status == MonitorStatus.OK
        assert monitor.last_checkin == checkin.date_added
        assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_monitor_checkins.py" startline="44" endline="73" pcid="8151">
    def test_failing(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        team = self.create_team(organization=org, members=[user])
        project = self.create_project(teams=[team])

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *"},
        )

        self.login_as(user=user)
        with self.feature({"organizations:monitors": True}):
            resp = self.client.post(
                f"/api/0/monitors/{monitor.guid}/checkins/", data={"status": "error"}
            )

        assert resp.status_code == 201, resp.content

        checkin = MonitorCheckIn.objects.get(guid=resp.data["id"])
        assert checkin.status == CheckInStatus.ERROR

        monitor = Monitor.objects.get(id=monitor.id)
        assert monitor.status == MonitorStatus.ERROR
        assert monitor.last_checkin == checkin.date_added
        assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)

</source>
</class>

<class classid="68" nclones="2" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_monitor_checkins.py" startline="105" endline="127" pcid="8153">
    def test_pending_deletion(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        team = self.create_team(organization=org, members=[user])
        project = self.create_project(teams=[team])

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            status=MonitorStatus.PENDING_DELETION,
            config={"schedule": "* * * * *"},
        )

        self.login_as(user=user)
        with self.feature({"organizations:monitors": True}):
            resp = self.client.post(
                f"/api/0/monitors/{monitor.guid}/checkins/", data={"status": "error"}
            )

        assert resp.status_code == 404, resp.content

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_monitor_checkins.py" startline="128" endline="150" pcid="8154">
    def test_deletion_in_progress(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        team = self.create_team(organization=org, members=[user])
        project = self.create_project(teams=[team])

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            status=MonitorStatus.DELETION_IN_PROGRESS,
            config={"schedule": "* * * * *"},
        )

        self.login_as(user=user)
        with self.feature({"organizations:monitors": True}):
            resp = self.client.post(
                f"/api/0/monitors/{monitor.guid}/checkins/", data={"status": "error"}
            )

        assert resp.status_code == 404, resp.content

</source>
</class>

<class classid="69" nclones="2" nlines="28" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_monitor_checkin_details.py" startline="10" endline="44" pcid="8182">
    def test_passing(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        team = self.create_team(organization=org, members=[user])
        project = self.create_project(teams=[team])

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *"},
            date_added=timezone.now() - timedelta(minutes=1),
        )
        checkin = MonitorCheckIn.objects.create(
            monitor=monitor, project_id=project.id, date_added=monitor.date_added
        )

        self.login_as(user=user)
        with self.feature({"organizations:monitors": True}):
            resp = self.client.put(
                f"/api/0/monitors/{monitor.guid}/checkins/{checkin.guid}/",
                data={"status": "ok"},
            )

        assert resp.status_code == 200, resp.content

        checkin = MonitorCheckIn.objects.get(id=checkin.id)
        assert checkin.status == CheckInStatus.OK

        monitor = Monitor.objects.get(id=monitor.id)
        assert monitor.next_checkin > checkin.date_added
        assert monitor.status == MonitorStatus.OK
        assert monitor.last_checkin > checkin.date_added

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_monitor_checkin_details.py" startline="45" endline="78" pcid="8183">
    def test_failing(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        team = self.create_team(organization=org, members=[user])
        project = self.create_project(teams=[team])

        monitor = Monitor.objects.create(
            organization_id=org.id,
            project_id=project.id,
            next_checkin=timezone.now() - timedelta(minutes=1),
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *"},
            date_added=timezone.now() - timedelta(minutes=1),
        )
        checkin = MonitorCheckIn.objects.create(
            monitor=monitor, project_id=project.id, date_added=monitor.date_added
        )

        self.login_as(user=user)
        with self.feature({"organizations:monitors": True}):
            resp = self.client.put(
                f"/api/0/monitors/{monitor.guid}/checkins/{checkin.guid}/",
                data={"status": "error"},
            )

        assert resp.status_code == 200, resp.content

        checkin = MonitorCheckIn.objects.get(id=checkin.id)
        assert checkin.status == CheckInStatus.ERROR

        monitor = Monitor.objects.get(id=monitor.id)
        assert monitor.next_checkin > checkin.date_added
        assert monitor.status == MonitorStatus.ERROR
        assert monitor.last_checkin > checkin.date_added
</source>
</class>

<class classid="70" nclones="2" nlines="22" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_prompts_activity.py" startline="73" endline="97" pcid="8351">
    def test_dismiss(self):
        data = {
            "organization_id": self.org.id,
            "project_id": self.project.id,
            "feature": "releases",
        }
        resp = self.client.get(self.path, data)
        assert resp.status_code == 200
        assert resp.data.get("data", None) is None

        self.client.put(
            self.path,
            {
                "organization_id": self.org.id,
                "project_id": self.project.id,
                "feature": "releases",
                "status": "dismissed",
            },
        )

        resp = self.client.get(self.path, data)
        assert resp.status_code == 200
        assert "data" in resp.data
        assert "dismissed_ts" in resp.data["data"]

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_prompts_activity.py" startline="98" endline="123" pcid="8352">
    def test_snooze(self):
        data = {
            "organization_id": self.org.id,
            "project_id": self.project.id,
            "feature": "releases",
        }
        resp = self.client.get(self.path, data)
        assert resp.status_code == 200
        assert resp.data.get("data", None) is None

        self.client.put(
            self.path,
            {
                "organization_id": self.org.id,
                "project_id": self.project.id,
                "feature": "releases",
                "status": "snoozed",
            },
        )

        resp = self.client.get(self.path, data)

        assert resp.status_code == 200
        assert "data" in resp.data
        assert "snoozed_ts" in resp.data["data"]

</source>
</class>

<class classid="71" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_member_details.py" startline="50" endline="65" pcid="8395">
    def test_cannot_get_unapproved_invite(self):
        join_request = self.create_member(
            organization=self.organization,
            email="test@gmail.com",
            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
        )

        invite_request = self.create_member(
            organization=self.organization,
            email="test2@gmail.com",
            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
        )

        self.get_error_response(self.organization.slug, join_request.id, status_code=404)
        self.get_error_response(self.organization.slug, invite_request.id, status_code=404)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_member_details.py" startline="428" endline="444" pcid="8424">
    def test_cannot_delete_unapproved_invite(self):
        join_request = self.create_member(
            organization=self.organization,
            email="test@gmail.com",
            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
        )

        invite_request = self.create_member(
            organization=self.organization,
            email="test2@gmail.com",
            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
        )

        self.get_error_response(self.organization.slug, join_request.id, status_code=404)
        self.get_error_response(self.organization.slug, invite_request.id, status_code=404)


</source>
</class>

<class classid="72" nclones="3" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_user_password.py" startline="39" endline="49" pcid="8451">
    def test_password_too_short(self):
        self.get_valid_response(
            "me",
            status_code=400,
            **{
                "password": "helloworld!",
                "passwordNew": "hi",
                "passwordVerify": "hi",
            },
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_user_password.py" startline="65" endline="75" pcid="8454">
    def test_verifies_mismatch_password(self):
        self.get_valid_response(
            "me",
            status_code=400,
            **{
                "password": "helloworld!",
                "passwordNew": "testpassword",
                "passwordVerify": "passworddoesntmatch",
            },
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_user_password.py" startline="54" endline="64" pcid="8453">
    def test_require_current_password(self):
        self.get_valid_response(
            "me",
            status_code=400,
            **{
                "password": "wrongpassword",
                "passwordNew": "testpassword",
                "passwordVerify": "passworddoesntmatch",
            },
        )

</source>
</class>

<class classid="73" nclones="2" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_group_details.py" startline="310" endline="343" pcid="8491">
    def test_assign_username(self):
        self.login_as(user=self.user)

        group = self.create_group()

        url = f"/api/0/issues/{group.id}/"

        response = self.client.put(url, data={"assignedTo": self.user.username}, format="json")

        assert response.status_code == 200, response.content

        assert GroupAssignee.objects.filter(group=group, user=self.user).exists()

        assert (
            Activity.objects.filter(group=group, user=self.user, type=Activity.ASSIGNED).count()
            == 1
        )

        response = self.client.put(url, format="json")

        assert response.status_code == 200, response.content

        assert GroupAssignee.objects.filter(group=group, user=self.user).exists()

        assert GroupSubscription.objects.filter(
            user=self.user, group=group, is_active=True
        ).exists()

        response = self.client.put(url, data={"assignedTo": ""}, format="json")

        assert response.status_code == 200, response.content

        assert not GroupAssignee.objects.filter(group=group, user=self.user).exists()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_group_details.py" startline="344" endline="377" pcid="8492">
    def test_assign_id(self):
        self.login_as(user=self.user)

        group = self.create_group()

        url = f"/api/0/issues/{group.id}/"

        response = self.client.put(url, data={"assignedTo": self.user.id}, format="json")

        assert response.status_code == 200, response.content

        assert GroupAssignee.objects.filter(group=group, user=self.user).exists()

        assert (
            Activity.objects.filter(group=group, user=self.user, type=Activity.ASSIGNED).count()
            == 1
        )

        response = self.client.put(url, format="json")

        assert response.status_code == 200, response.content

        assert GroupAssignee.objects.filter(group=group, user=self.user).exists()

        assert GroupSubscription.objects.filter(
            user=self.user, group=group, is_active=True
        ).exists()

        response = self.client.put(url, data={"assignedTo": ""}, format="json")

        assert response.status_code == 200, response.content

        assert not GroupAssignee.objects.filter(group=group, user=self.user).exists()

</source>
</class>

<class classid="74" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_sentry_app_interaction.py" startline="126" endline="139" pcid="8567">
    def test_allows_logged_in_user_who_doesnt_own_app(self):
        self.login_as(self.user)
        body = {"tsdbField": "sentry_app_component_interacted", "componentType": "issue-link"}
        response = self.client.post(
            self.unowned_url, body, headers={"Content-Type": "application/json"}
        )
        assert response.status_code == 201

        body = {"tsdbField": "sentry_app_viewed"}
        response = self.client.post(
            self.unowned_url, body, headers={"Content-Type": "application/json"}
        )
        assert response.status_code == 201

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_sentry_app_interaction.py" startline="140" endline="152" pcid="8568">
    def test_allows_logged_in_user_who_does_own_app(self):
        self.login_as(self.user)
        body = {"tsdbField": "sentry_app_component_interacted", "componentType": "issue-link"}
        response = self.client.post(
            self.owned_url, body, headers={"Content-Type": "application/json"}
        )
        assert response.status_code == 201

        body = {"tsdbField": "sentry_app_viewed"}
        response = self.client.post(
            self.owned_url, body, headers={"Content-Type": "application/json"}
        )
        assert response.status_code == 201
</source>
</class>

<class classid="75" nclones="2" nlines="19" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_scim_team_index.py" startline="134" endline="155" pcid="8678">
    def test_team_filter_with_space(self):
        url = reverse("sentry-api-0-organization-scim-team-index", args=[self.organization.slug])
        team = self.create_team(organization=self.organization, name="Name WithASpace")
        response = self.client.get(
            f"{url}?startIndex=1&count=100&filter=displayName eq %22{team.name}%22"
        )
        assert response.data == {
            "schemas": ["urn:ietf:params:scim:api:messages:2.0:ListResponse"],
            "totalResults": 1,
            "startIndex": 1,
            "itemsPerPage": 1,
            "Resources": [
                {
                    "schemas": ["urn:ietf:params:scim:schemas:core:2.0:Group"],
                    "id": str(team.id),
                    "displayName": team.name,
                    "members": [],
                    "meta": {"resourceType": "Group"},
                }
            ],
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_scim_team_index.py" startline="156" endline="177" pcid="8679">
    def test_team_filter_case_insensitive(self):
        url = reverse("sentry-api-0-organization-scim-team-index", args=[self.organization.slug])
        team = self.create_team(organization=self.organization, name="Name WithASpace")
        response = self.client.get(
            f"{url}?startIndex=1&count=100&filter=displayName eq %22{team.name.upper()}%22"
        )
        assert response.data == {
            "schemas": ["urn:ietf:params:scim:api:messages:2.0:ListResponse"],
            "totalResults": 1,
            "startIndex": 1,
            "itemsPerPage": 1,
            "Resources": [
                {
                    "schemas": ["urn:ietf:params:scim:schemas:core:2.0:Group"],
                    "id": str(team.id),
                    "displayName": team.name,
                    "members": [],
                    "meta": {"resourceType": "Group"},
                }
            ],
        }

</source>
</class>

<class classid="76" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_plugins_configs.py" startline="63" endline="77" pcid="8766">
    def test_configured_not_enabled(self):
        plugins.get("trello").disable(self.projectA)
        plugins.get("trello").set_option("key", "some_value", self.projectA)
        response = self.client.get(self.url)
        assert list(filter(lambda x: x["slug"] == "trello", response.data))[0]["projectList"] == [
            {
                "projectId": self.projectA.id,
                "projectSlug": self.projectA.slug,
                "projectName": self.projectA.name,
                "enabled": False,
                "configured": True,
                "projectPlatform": None,
            }
        ]

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_plugins_configs.py" startline="78" endline="92" pcid="8767">
    def test_configured_and_enabled(self):
        plugins.get("trello").enable(self.projectA)
        plugins.get("trello").set_option("key", "some_value", self.projectA)
        response = self.client.get(self.url)
        assert list(filter(lambda x: x["slug"] == "trello", response.data))[0]["projectList"] == [
            {
                "projectId": self.projectA.id,
                "projectSlug": self.projectA.slug,
                "projectName": self.projectA.name,
                "enabled": True,
                "configured": True,
                "projectPlatform": None,
            }
        ]

</source>
</class>

<class classid="77" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_member_team_details.py" startline="333" endline="351" pcid="8816">
    def test_team_admin_can_remove_members(self):
        self.login_as(self.team_admin.user)

        # member
        resp = self.get_response(self.org.slug, self.team_member.id, self.team.slug)
        assert resp.status_code == 200

        assert not OrganizationMemberTeam.objects.filter(
            team=self.team, organizationmember=self.team_member
        ).exists()

        # manager
        resp = self.get_response(self.org.slug, self.team_manager.id, self.team.slug)
        assert resp.status_code == 200

        assert not OrganizationMemberTeam.objects.filter(
            team=self.team, organizationmember=self.team_manager
        ).exists()

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_member_team_details.py" startline="352" endline="370" pcid="8817">
    def test_manager_can_remove_members(self):
        self.login_as(self.team_manager.user)

        # member
        resp = self.get_response(self.org.slug, self.team_member.id, self.team.slug)
        assert resp.status_code == 200

        assert not OrganizationMemberTeam.objects.filter(
            team=self.team, organizationmember=self.team_member
        ).exists()

        # owner
        resp = self.get_response(self.org.slug, self.team_owner.id, self.team.slug)
        assert resp.status_code == 200

        assert not OrganizationMemberTeam.objects.filter(
            team=self.team, organizationmember=self.team_owner
        ).exists()

</source>
</class>

<class classid="78" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_releases.py" startline="315" endline="333" pcid="8830">
    def test_minimal(self):
        self.login_as(user=self.user)

        project = self.create_project(name="foo")

        url = reverse(
            "sentry-api-0-project-releases",
            kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
        )
        response = self.client.post(url, data={"version": "1.2.1"})

        assert response.status_code == 201, response.content
        assert response.data["version"]

        release = Release.objects.get(version=response.data["version"])
        assert not release.owner
        assert release.organization == project.organization
        assert release.projects.first() == project

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_releases.py" startline="334" endline="352" pcid="8831">
    def test_ios_release(self):
        self.login_as(user=self.user)

        project = self.create_project(name="foo")

        url = reverse(
            "sentry-api-0-project-releases",
            kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
        )
        response = self.client.post(url, data={"version": "1.2.1 (123)"})

        assert response.status_code == 201, response.content
        assert response.data["version"]

        release = Release.objects.get(version=response.data["version"])
        assert not release.owner
        assert release.organization == project.organization
        assert release.projects.first() == project

</source>
</class>

<class classid="79" nclones="2" nlines="24" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_rule_details.py" startline="605" endline="633" pcid="8870">
    def test_invalid_rule_node_type(self):
        self.login_as(user=self.user)

        project = self.create_project()

        rule = Rule.objects.create(project=project, label="foo")

        url = reverse(
            "sentry-api-0-project-rule-details",
            kwargs={
                "organization_slug": project.organization.slug,
                "project_slug": project.slug,
                "rule_id": rule.id,
            },
        )
        response = self.client.put(
            url,
            data={
                "name": "hello world",
                "actionMatch": "any",
                "filterMatch": "any",
                "conditions": [{"id": "sentry.rules.actions.notify_event.NotifyEventAction"}],
                "actions": [],
            },
            format="json",
        )

        assert response.status_code == 400, response.content

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_project_rule_details.py" startline="663" endline="691" pcid="8872">
    def test_rule_form_not_valid(self):
        self.login_as(user=self.user)

        project = self.create_project()

        rule = Rule.objects.create(project=project, label="foo")

        url = reverse(
            "sentry-api-0-project-rule-details",
            kwargs={
                "organization_slug": project.organization.slug,
                "project_slug": project.slug,
                "rule_id": rule.id,
            },
        )
        response = self.client.put(
            url,
            data={
                "name": "hello world",
                "actionMatch": "any",
                "filterMatch": "any",
                "conditions": [{"id": "sentry.rules.conditions.tagged_event.TaggedEventCondition"}],
                "actions": [],
            },
            format="json",
        )

        assert response.status_code == 400, response.content

</source>
</class>

<class classid="80" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py" startline="33" endline="49" pcid="8977">
    def test_invalid_query_conditions(self):
        data = {
            "title": "Invalid query",
            "displayType": "line",
            "queries": [
                {"name": "errors", "conditions": "event.type: tag:foo", "fields": ["count()"]}
            ],
        }
        response = self.do_request(
            "post",
            self.url(),
            data=data,
        )
        assert response.status_code == 400, response.data
        assert "queries" in response.data, response.data
        assert response.data["queries"][0]["conditions"], response.data

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py" startline="54" endline="70" pcid="8979">
    def test_invalid_query_fields(self):
        data = {
            "title": "Invalid query",
            "displayType": "line",
            "queries": [
                {"name": "errors", "conditions": "event.type:error", "fields": ["p95(user)"]}
            ],
        }
        response = self.do_request(
            "post",
            self.url(),
            data=data,
        )
        assert response.status_code == 400, response.data
        assert "queries" in response.data, response.data
        assert response.data["queries"][0]["fields"], response.data

</source>
</class>

<class classid="81" nclones="2" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py" startline="87" endline="106" pcid="8981">
    def test_invalid_equation(self):
        data = {
            "title": "Invalid query",
            "displayType": "line",
            "queries": [
                {
                    "name": "errors",
                    "conditions": "event.type:error",
                    "fields": ["equation|count()"],
                }
            ],
        }
        response = self.do_request(
            "post",
            self.url(),
            data=data,
        )
        assert response.status_code == 400, response.data
        assert "queries" in response.data, response.data

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py" startline="126" endline="145" pcid="8983">
    def test_invalid_equation_table_widget(self):
        data = {
            "title": "Invalid query",
            "displayType": "table",
            "queries": [
                {
                    "name": "errors",
                    "conditions": "event.type:error",
                    "fields": ["equation|count() * 2"],
                }
            ],
        }
        response = self.do_request(
            "post",
            self.url(),
            data=data,
        )
        assert response.status_code == 400, response.data
        assert "queries" in response.data, response.data

</source>
</class>

<class classid="82" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py" startline="238" endline="253" pcid="8988">
    def test_invalid_issue_query_conditions(self):
        data = {
            "title": "Unresolved Issues",
            "displayType": "table",
            "widgetType": "issue",
            "queries": [{"name": "unresolved", "conditions": "is:())", "fields": []}],
        }
        response = self.do_request(
            "post",
            self.url(),
            data=data,
        )
        assert response.status_code == 400, response.data
        assert "queries" in response.data, response.data
        assert response.data["queries"][0]["conditions"], response.data

</source>
<source file="systems/sentry-22.2.0/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py" startline="254" endline="268" pcid="8989">
    def test_invalid_issue_query_conditions_in_discover_widget(self):
        data = {
            "title": "Unresolved Issues",
            "displayType": "table",
            "widgetType": "discover",
            "queries": [{"name": "unresolved", "conditions": "is:unresolved", "fields": []}],
        }
        response = self.do_request(
            "post",
            self.url(),
            data=data,
        )
        assert response.status_code == 400, response.data
        assert "queries" in response.data, response.data
        assert response.data["queries"][0]["conditions"], response.data
</source>
</class>

<class classid="83" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/rules/filters/test_age_comparison.py" startline="15" endline="29" pcid="9101">
    def test_older_applies_correctly(self, now):
        now.return_value = datetime(2020, 8, 1, 0, 0, 0, 0, tzinfo=pytz.utc)

        event = self.get_event()
        value = 10
        data = {"comparison_type": "older", "value": str(value), "time": "hour"}

        rule = self.get_rule(data=data)

        event.group.first_seen = timezone.now() - timedelta(hours=3)
        self.assertDoesNotPass(rule, event)

        event.group.first_seen = timezone.now() - timedelta(hours=11)
        self.assertPasses(rule, event)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/rules/filters/test_age_comparison.py" startline="31" endline="45" pcid="9102">
    def test_newer_applies_correctly(self, now):
        now.return_value = datetime(2020, 8, 1, 0, 0, 0, 0, tzinfo=pytz.utc)

        event = self.get_event()
        value = 10
        data = {"comparison_type": "newer", "value": str(value), "time": "hour"}

        rule = self.get_rule(data=data)

        event.group.first_seen = timezone.now() - timedelta(hours=3)
        self.assertPasses(rule, event)

        event.group.first_seen = timezone.now() - timedelta(hours=11)
        self.assertDoesNotPass(rule, event)

</source>
</class>

<class classid="84" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/rules/filters/test_latest_release.py" startline="12" endline="31" pcid="9114">
    def test_latest_release(self):
        event = self.get_event()
        oldRelease = Release.objects.create(
            organization_id=self.organization.id,
            version="1",
            date_added=datetime(2020, 9, 1, 3, 8, 24, 880386),
        )
        oldRelease.add_project(self.project)

        newRelease = Release.objects.create(
            organization_id=self.organization.id,
            version="2",
            date_added=datetime(2020, 9, 2, 3, 8, 24, 880386),
        )
        newRelease.add_project(self.project)

        event.data["tags"] = (("release", newRelease.version),)
        rule = self.get_rule()
        self.assertPasses(rule, event)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/rules/filters/test_latest_release.py" startline="32" endline="51" pcid="9115">
    def test_latest_release_no_match(self):
        event = self.get_event()
        oldRelease = Release.objects.create(
            organization_id=self.organization.id,
            version="1",
            date_added=datetime(2020, 9, 1, 3, 8, 24, 880386),
        )
        oldRelease.add_project(self.project)

        newRelease = Release.objects.create(
            organization_id=self.organization.id,
            version="2",
            date_added=datetime(2020, 9, 2, 3, 8, 24, 880386),
        )
        newRelease.add_project(self.project)

        event.data["tags"] = (("release", oldRelease.version),)
        rule = self.get_rule()
        self.assertDoesNotPass(rule, event)

</source>
</class>

<class classid="85" nclones="2" nlines="21" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/rules/conditions/test_event_attribute.py" startline="318" endline="351" pcid="9158">
    def test_stacktrace_filename(self):
        """Stacktrace.filename should match frames anywhere in the stack."""

        event = self.get_event(
            exception={
                "values": [
                    {
                        "type": "SyntaxError",
                        "value": "hello world",
                        "stacktrace": {
                            "frames": [
                                {"filename": "example.php", "module": "example"},
                                {"filename": "somecode.php", "module": "somecode"},
                                {"filename": "othercode.php", "module": "othercode"},
                            ]
                        },
                    }
                ]
            }
        )

        # correctly matching filenames, at various locations in the stacktrace
        for value in ["example.php", "somecode.php", "othercode.php"]:
            rule = self.get_rule(
                data={"match": MatchType.EQUAL, "attribute": "stacktrace.filename", "value": value}
            )
            self.assertPasses(rule, event)

        # non-matching filename
        rule = self.get_rule(
            data={"match": MatchType.EQUAL, "attribute": "stacktrace.filename", "value": "foo.php"}
        )
        self.assertDoesNotPass(rule, event)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/rules/conditions/test_event_attribute.py" startline="352" endline="385" pcid="9159">
    def test_stacktrace_module(self):
        """Stacktrace.module should match frames anywhere in the stack."""

        event = self.get_event(
            exception={
                "values": [
                    {
                        "type": "SyntaxError",
                        "value": "hello world",
                        "stacktrace": {
                            "frames": [
                                {"filename": "example.php", "module": "example"},
                                {"filename": "somecode.php", "module": "somecode"},
                                {"filename": "othercode.php", "module": "othercode"},
                            ]
                        },
                    }
                ]
            }
        )

        # correctly matching modules, at various locations in the stacktrace
        for value in ["example", "somecode", "othercode"]:
            rule = self.get_rule(
                data={"match": MatchType.EQUAL, "attribute": "stacktrace.module", "value": value}
            )
            self.assertPasses(rule, event)

        # non-matching module
        rule = self.get_rule(
            data={"match": MatchType.EQUAL, "attribute": "stacktrace.module", "value": "foo"}
        )
        self.assertDoesNotPass(rule, event)

</source>
</class>

<class classid="86" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/web/frontend/test_oauth_token.py" startline="52" endline="66" pcid="9209">
    def test_missing_client_id(self):
        self.login_as(self.user)

        resp = self.client.post(
            self.path,
            {
                "grant_type": "authorization_code",
                "redirect_uri": self.application.get_default_redirect_uri(),
                "code": self.grant.code,
            },
        )

        assert resp.status_code == 400
        assert json.loads(resp.content) == {"error": "invalid_client"}

</source>
<source file="systems/sentry-22.2.0/tests/sentry/web/frontend/test_oauth_token.py" startline="83" endline="97" pcid="9211">
    def test_missing_code(self):
        self.login_as(self.user)

        resp = self.client.post(
            self.path,
            {
                "grant_type": "authorization_code",
                "redirect_uri": self.application.get_default_redirect_uri(),
                "client_id": self.application.client_id,
            },
        )

        assert resp.status_code == 400
        assert json.loads(resp.content) == {"error": "invalid_grant"}

</source>
</class>

<class classid="87" nclones="3" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/web/frontend/test_team_avatar.py" startline="11" endline="21" pcid="9310">
    def test_headers(self):
        team = self.create_team()
        photo = File.objects.create(name="test.png", type="avatar.file")
        photo.putfile(BytesIO(b"test"))
        avatar = TeamAvatar.objects.create(team=team, file_id=photo.id)
        url = reverse("sentry-team-avatar-url", kwargs={"avatar_id": avatar.ident})
        response = self.client.get(url)
        assert response.status_code == 200
        assert response["Cache-Control"] == FOREVER_CACHE
        assert response.get("Vary") is None
        assert response.get("Set-Cookie") is None
</source>
<source file="systems/sentry-22.2.0/tests/sentry/web/frontend/test_organization_avatar.py" startline="11" endline="21" pcid="9333">
    def test_headers(self):
        org = self.create_organization()
        photo = File.objects.create(name="test.png", type="avatar.file")
        photo.putfile(BytesIO(b"test"))
        avatar = OrganizationAvatar.objects.create(organization=org, file_id=photo.id)
        url = reverse("sentry-organization-avatar-url", kwargs={"avatar_id": avatar.ident})
        response = self.client.get(url)
        assert response.status_code == 200
        assert response["Cache-Control"] == FOREVER_CACHE
        assert response.get("Vary") is None
        assert response.get("Set-Cookie") is None
</source>
<source file="systems/sentry-22.2.0/tests/sentry/web/frontend/test_project_avatar.py" startline="11" endline="21" pcid="9332">
    def test_headers(self):
        project = self.create_project()
        photo = File.objects.create(name="test.png", type="avatar.file")
        photo.putfile(BytesIO(b"test"))
        avatar = ProjectAvatar.objects.create(project=project, file_id=photo.id)
        url = reverse("sentry-project-avatar-url", kwargs={"avatar_id": avatar.ident})
        response = self.client.get(url)
        assert response.status_code == 200
        assert response["Cache-Control"] == FOREVER_CACHE
        assert response.get("Vary") is None
        assert response.get("Set-Cookie") is None
</source>
</class>

<class classid="88" nclones="2" nlines="23" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/event_manager/test_event_manager.py" startline="1915" endline="1940" pcid="9634">
    def test_different_groups(self):
        event1 = self.make_release_event(
            release_version=self.release.version,
            environment_name=self.environment1.name,
            project_id=self.project.id,
            checksum="a" * 32,
            timestamp=self.timestamp,
        )
        self.assert_release_project_environment(
            event=event1, new_issues_count=1, last_seen=self.timestamp, first_seen=self.timestamp
        )

        event2 = self.make_release_event(
            release_version=self.release.version,
            environment_name=self.environment1.name,
            project_id=self.project.id,
            checksum="b" * 32,
            timestamp=self.timestamp + 100,
        )
        self.assert_release_project_environment(
            event=event2,
            new_issues_count=2,
            last_seen=self.timestamp + 100,
            first_seen=self.timestamp,
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/event_manager/test_event_manager.py" startline="1941" endline="1965" pcid="9635">
    def test_same_group(self):
        event1 = self.make_release_event(
            release_version=self.release.version,
            environment_name=self.environment1.name,
            project_id=self.project.id,
            checksum="a" * 32,
            timestamp=self.timestamp,
        )
        self.assert_release_project_environment(
            event=event1, new_issues_count=1, last_seen=self.timestamp, first_seen=self.timestamp
        )
        event2 = self.make_release_event(
            release_version=self.release.version,
            environment_name=self.environment1.name,
            project_id=self.project.id,
            checksum="a" * 32,
            timestamp=self.timestamp + 100,
        )
        self.assert_release_project_environment(
            event=event2,
            new_issues_count=1,
            last_seen=self.timestamp + 100,
            first_seen=self.timestamp,
        )

</source>
</class>

<class classid="89" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/event_manager/interfaces/test_exception.py" startline="10" endline="29" pcid="9672">
def make_exception_snapshot(insta_snapshot):
    def inner(data):
        mgr = EventManager(data={"exception": data})
        mgr.normalize()
        evt = eventstore.create_event(data=mgr.get_data())

        interface = evt.interfaces.get("exception")

        insta_snapshot(
            {
                "errors": evt.data.get("errors"),
                "to_json": interface and interface.to_json(),
                "get_api_context": interface and interface.get_api_context(),
                "to_string": interface and interface.to_string(evt),
            }
        )

    return inner


</source>
<source file="systems/sentry-22.2.0/tests/sentry/event_manager/interfaces/test_template.py" startline="8" endline="26" pcid="9749">
def make_template_snapshot(insta_snapshot):
    def inner(data):
        mgr = EventManager(data={"template": data})
        mgr.normalize()
        evt = eventstore.create_event(data=mgr.get_data())

        interface = evt.interfaces.get("template")
        insta_snapshot(
            {
                "errors": evt.data.get("errors"),
                "to_json": interface and interface.to_json(),
                "api_context": interface and interface.get_api_context(),
                "to_string": interface and interface.to_string(evt),
            }
        )

    return inner


</source>
</class>

<class classid="90" nclones="3" nlines="19" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/event_manager/interfaces/test_exception.py" startline="30" endline="54" pcid="9674">
def test_basic(make_exception_snapshot):
    make_exception_snapshot(
        dict(
            values=[
                {
                    "type": "ValueError",
                    "value": "hello world",
                    "module": "foo.bar",
                    "stacktrace": {
                        "frames": [{"filename": "foo/baz.py", "lineno": 1, "in_app": True}]
                    },
                },
                {
                    "type": "ValueError",
                    "value": "hello world",
                    "module": "foo.bar",
                    "stacktrace": {
                        "frames": [{"filename": "foo/baz.py", "lineno": 1, "in_app": True}]
                    },
                },
            ]
        )
    )


</source>
<source file="systems/sentry-22.2.0/tests/sentry/event_manager/interfaces/test_exception.py" startline="119" endline="143" pcid="9680">
def test_context_with_only_system_frames(make_exception_snapshot):
    make_exception_snapshot(
        dict(
            values=[
                {
                    "type": "ValueError",
                    "value": "hello world",
                    "module": "foo.bar",
                    "stacktrace": {
                        "frames": [{"filename": "foo/baz.py", "lineno": 1, "in_app": False}]
                    },
                },
                {
                    "type": "ValueError",
                    "value": "hello world",
                    "module": "foo.bar",
                    "stacktrace": {
                        "frames": [{"filename": "foo/baz.py", "lineno": 1, "in_app": False}]
                    },
                },
            ]
        )
    )


</source>
<source file="systems/sentry-22.2.0/tests/sentry/event_manager/interfaces/test_exception.py" startline="69" endline="93" pcid="9678">
def test_context_with_mixed_frames(make_exception_snapshot):
    make_exception_snapshot(
        dict(
            values=[
                {
                    "type": "ValueError",
                    "value": "hello world",
                    "module": "foo.bar",
                    "stacktrace": {
                        "frames": [{"filename": "foo/baz.py", "lineno": 1, "in_app": True}]
                    },
                },
                {
                    "type": "ValueError",
                    "value": "hello world",
                    "module": "foo.bar",
                    "stacktrace": {
                        "frames": [{"filename": "foo/baz.py", "lineno": 1, "in_app": False}]
                    },
                },
            ]
        )
    )


</source>
</class>

<class classid="91" nclones="2" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket/test_integration.py" startline="11" endline="30" pcid="9852">
    def setUp(self):
        self.base_url = "https://api.bitbucket.org"
        self.shared_secret = "234567890"
        self.subject = "connect:1234567"
        self.integration = Integration.objects.create(
            provider="bitbucket",
            external_id=self.subject,
            name="sentryuser",
            metadata={
                "base_url": self.base_url,
                "shared_secret": self.shared_secret,
                "subject": self.subject,
            },
        )
        self.login_as(self.user)
        self.integration.add_organization(self.organization, self.user)
        self.path = reverse(
            "sentry-extensions-bitbucket-search", args=[self.organization.slug, self.integration.id]
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket/test_search.py" startline="9" endline="29" pcid="9856">
    def setUp(self):
        self.base_url = "https://api.bitbucket.org"
        self.shared_secret = "234567890"
        self.subject = "connect:1234567"
        self.integration = Integration.objects.create(
            provider="bitbucket",
            external_id=self.subject,
            name="meredithanya",
            metadata={
                "base_url": self.base_url,
                "shared_secret": self.shared_secret,
                "subject": self.subject,
            },
        )

        self.login_as(self.user)
        self.integration.add_organization(self.organization, self.user)
        self.path = reverse(
            "sentry-extensions-bitbucket-search", args=[self.organization.slug, self.integration.id]
        )

</source>
</class>

<class classid="92" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="24" endline="38" pcid="9897">
    def test_validate_url(self):
        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "bitbucket.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Enter a valid URL")

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="26" endline="40" pcid="9923">
    def test_validate_url(self):
        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "jira.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Enter a valid URL")

</source>
</class>

<class classid="93" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="40" endline="62" pcid="9898">
    def test_validate_private_key(self):
        responses.add(
            responses.POST,
            "https://bitbucket.example.com/plugins/servlet/oauth/request-token",
            status=503,
        )

        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "https://bitbucket.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": "hot-garbage",
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(
            resp, "Private key must be a valid SSH private key encoded in a PEM format."
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="42" endline="64" pcid="9924">
    def test_validate_private_key(self):
        responses.add(
            responses.POST,
            "https://jira.example.com/plugins/servlet/oauth/request-token",
            status=503,
        )

        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "https://jira.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": "hot-garbage",
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(
            resp, "Private key must be a valid SSH private key encoded in a PEM format."
        )

</source>
</class>

<class classid="94" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="64" endline="78" pcid="9899">
    def test_validate_consumer_key_length(self):
        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "bitbucket.example.com/",
            "verify_ssl": False,
            "consumer_key": "x" * 201,
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Consumer key is limited to 200")

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="66" endline="80" pcid="9925">
    def test_validate_consumer_key_length(self):
        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "jira.example.com/",
            "verify_ssl": False,
            "consumer_key": "x" * 201,
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Consumer key is limited to 200")

</source>
</class>

<class classid="95" nclones="2" nlines="19" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="80" endline="103" pcid="9900">
    def test_authentication_request_token_timeout(self):
        timeout = ReadTimeout("Read timed out. (read timeout=30)")
        responses.add(
            responses.POST,
            "https://bitbucket.example.com/plugins/servlet/oauth/request-token",
            body=timeout,
        )

        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "https://bitbucket.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "request token from Bitbucket")
        self.assertContains(resp, "Timed out")

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="82" endline="105" pcid="9926">
    def test_authentication_request_token_timeout(self):
        timeout = ReadTimeout("Read timed out. (read timeout=30)")
        responses.add(
            responses.POST,
            "https://jira.example.com/plugins/servlet/oauth/request-token",
            body=timeout,
        )

        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "https://jira.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "request token from Jira")
        self.assertContains(resp, "Timed out")

</source>
</class>

<class classid="96" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="105" endline="126" pcid="9901">
    def test_authentication_request_token_fails(self):
        responses.add(
            responses.POST,
            "https://bitbucket.example.com/plugins/servlet/oauth/request-token",
            status=503,
        )

        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "https://bitbucket.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "request token from Bitbucket")

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="107" endline="128" pcid="9927">
    def test_authentication_request_token_fails(self):
        responses.add(
            responses.POST,
            "https://jira.example.com/plugins/servlet/oauth/request-token",
            status=503,
        )

        # Start pipeline and go to setup page.
        self.client.get(self.setup_path)

        # Submit credentials
        data = {
            "url": "https://jira.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 200
        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "request token from Jira")

</source>
</class>

<class classid="97" nclones="2" nlines="30" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="155" endline="190" pcid="9903">
    def test_authentication_access_token_failure(self):
        responses.add(
            responses.POST,
            "https://bitbucket.example.com/plugins/servlet/oauth/request-token",
            status=200,
            content_type="text/plain",
            body="oauth_token=abc123&oauth_token_secret=def456",
        )
        responses.add(
            responses.POST,
            "https://bitbucket.example.com/plugins/servlet/oauth/access-token",
            status=500,
            content_type="text/plain",
            body="<html>it broke</html>",
        )

        # Get config page
        resp = self.client.get(self.init_path)
        assert resp.status_code == 200

        # Submit credentials
        data = {
            "url": "https://bitbucket.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 302
        assert resp["Location"]

        resp = self.client.get(self.setup_path + "?oauth_token=xyz789")
        assert resp.status_code == 200
        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "access token from Bitbucket")

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="155" endline="190" pcid="9929">
    def test_authentication_access_token_failure(self):
        responses.add(
            responses.POST,
            "https://jira.example.com/plugins/servlet/oauth/request-token",
            status=200,
            content_type="text/plain",
            body="oauth_token=abc123&oauth_token_secret=def456",
        )
        responses.add(
            responses.POST,
            "https://jira.example.com/plugins/servlet/oauth/access-token",
            status=500,
            content_type="text/plain",
            body="<html>it broke</html>",
        )

        # Get config page
        resp = self.client.get(self.init_path)
        assert resp.status_code == 200

        # Submit credentials
        data = {
            "url": "https://jira.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 302
        assert resp["Location"]

        resp = self.client.get(self.setup_path + "?oauth_token=xyz789")
        assert resp.status_code == 200
        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "access token from Jira")

</source>
</class>

<class classid="98" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="191" endline="211" pcid="9904">
    def install_integration(self):
        # Get config page
        resp = self.client.get(self.setup_path)
        assert resp.status_code == 200

        # Submit credentials
        data = {
            "url": "https://bitbucket.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 302
        assert resp["Location"]

        resp = self.client.get(self.setup_path + "?oauth_token=xyz789")
        assert resp.status_code == 200

        return resp

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="191" endline="211" pcid="9930">
    def install_integration(self):
        # Get config page
        resp = self.client.get(self.setup_path)
        assert resp.status_code == 200

        # Submit credentials
        data = {
            "url": "https://jira.example.com/",
            "verify_ssl": False,
            "consumer_key": "sentry-bot",
            "private_key": EXAMPLE_PRIVATE_KEY,
        }
        resp = self.client.post(self.setup_path, data=data)
        assert resp.status_code == 302
        assert resp["Location"]

        resp = self.client.get(self.setup_path + "?oauth_token=xyz789")
        assert resp.status_code == 200

        return resp

</source>
</class>

<class classid="99" nclones="2" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/bitbucket_server/test_integration.py" startline="213" endline="235" pcid="9905">
    def test_authentication_verifier_expired(self):
        responses.add(
            responses.POST,
            "https://bitbucket.example.com/plugins/servlet/oauth/request-token",
            status=200,
            content_type="text/plain",
            body="oauth_token=abc123&oauth_token_secret=def456",
        )
        responses.add(
            responses.POST,
            "https://bitbucket.example.com/plugins/servlet/oauth/access-token",
            status=404,
            content_type="text/plain",
            body="oauth_error=token+expired",
        )

        # Try getting the token but it has expired for some reason,
        # perhaps a stale reload/history navigate.
        resp = self.install_integration()

        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "access token from Bitbucket")

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_integration.py" startline="213" endline="235" pcid="9931">
    def test_authentication_verifier_expired(self):
        responses.add(
            responses.POST,
            "https://jira.example.com/plugins/servlet/oauth/request-token",
            status=200,
            content_type="text/plain",
            body="oauth_token=abc123&oauth_token_secret=def456",
        )
        responses.add(
            responses.POST,
            "https://jira.example.com/plugins/servlet/oauth/access-token",
            status=404,
            content_type="text/plain",
            body="oauth_error=token+expired",
        )

        # Try getting the token but it has expired for some reason,
        # perhaps a stale reload/history navigate.
        resp = self.install_integration()

        self.assertContains(resp, "Setup Error")
        self.assertContains(resp, "access token from Jira")

</source>
</class>

<class classid="100" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_search.py" startline="18" endline="34" pcid="9950">
    def test_get_success_text_search(self):
        org = self.organization
        integration = self.integration
        responses.add(
            responses.GET,
            'https://jira.example.org/rest/api/2/search/?jql=text ~ "test"',
            body=EXAMPLE_ISSUE_SEARCH,
            content_type="json",
        )

        self.login_as(self.user)
        path = reverse("sentry-extensions-jiraserver-search", args=[org.slug, integration.id])
        resp = self.client.get(f"{path}?field=externalIssue&query=test")

        assert resp.status_code == 200
        assert resp.data == [{"label": "(HSP-1) this is a test issue summary", "value": "HSP-1"}]

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_search.py" startline="36" endline="52" pcid="9951">
    def test_get_success_id_search(self):
        org = self.organization
        integration = self.integration
        responses.add(
            responses.GET,
            'https://jira.example.org/rest/api/2/search/?jql=id="HSP-1"',
            body=EXAMPLE_ISSUE_SEARCH,
            content_type="json",
        )

        self.login_as(self.user)
        path = reverse("sentry-extensions-jiraserver-search", args=[org.slug, integration.id])
        resp = self.client.get(f"{path}?field=externalIssue&query=HSP-1")

        assert resp.status_code == 200
        assert resp.data == [{"label": "(HSP-1) this is a test issue summary", "value": "HSP-1"}]

</source>
</class>

<class classid="101" nclones="2" nlines="19" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira_server/test_search.py" startline="111" endline="131" pcid="9956">
    def test_assignee_search_error(self):
        responses.add(
            responses.GET,
            "https://jira.example.org/rest/api/2/project",
            json=[{"key": "HSP", "id": "10000"}],
            match_querystring=False,
        )
        responses.add(
            responses.GET,
            "https://jira.example.org/rest/api/2/user/assignable/search",
            status=500,
            body="Bad things",
            match_querystring=False,
        )
        org = self.organization
        self.login_as(self.user)

        path = reverse("sentry-extensions-jiraserver-search", args=[org.slug, self.integration.id])

        resp = self.client.get(f"{path}?project=10000&field=assignee&query=bob")
        assert resp.status_code == 400
</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_search_endpoint.py" startline="127" endline="148" pcid="10259">
    def test_assignee_search_error(self):
        responses.add(
            responses.GET,
            "https://example.atlassian.net/rest/api/2/project",
            json=[{"key": "HSP", "id": "10000"}],
            match_querystring=False,
        )
        responses.add(
            responses.GET,
            "https://example.atlassian.net/rest/api/2/user/assignable/search",
            status=500,
            body="Bad things",
            match_querystring=False,
        )
        org = self.organization
        self.login_as(self.user)

        path = reverse("sentry-extensions-jira-search", args=[org.slug, self.integration.id])

        resp = self.client.get(f"{path}?project=10000&field=assignee&query=bob")
        assert resp.status_code == 400

</source>
</class>

<class classid="102" nclones="2" nlines="28" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/vsts/test_integration.py" startline="177" endline="208" pcid="9972">
    def test_create_subscription_forbidden(self, mock_get_scopes):
        responses.replace(
            responses.POST,
            f"https://{self.vsts_account_name.lower()}.visualstudio.com/_apis/hooks/subscriptions",
            status=403,
            json={
                "$id": 1,
                "message": "The user bob is does not have permission to access this resource",
                "typeKey": "UnauthorizedRequestException",
                "errorCode": 0,
                "eventId": 3000,
            },
        )
        state = {
            "account": {"accountName": self.vsts_account_name, "accountId": self.vsts_account_id},
            "base_url": self.vsts_base_url,
            "identity": {
                "data": {
                    "access_token": self.access_token,
                    "expires_in": "3600",
                    "refresh_token": self.refresh_token,
                    "token_type": "jwt-bearer",
                }
            },
        }

        integration = VstsIntegrationProvider()

        with pytest.raises(IntegrationProviderError) as err:
            integration.build_integration(state)
        assert "sufficient account access to create webhooks" in str(err)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/vsts/test_integration.py" startline="210" endline="242" pcid="9973">
    def test_create_subscription_unauthorized(self, mock_get_scopes):
        responses.replace(
            responses.POST,
            f"https://{self.vsts_account_name.lower()}.visualstudio.com/_apis/hooks/subscriptions",
            status=401,
            json={
                "$id": 1,
                "message": "The user bob is not authorized to access this resource",
                "typeKey": "UnauthorizedRequestException",
                "errorCode": 0,
                "eventId": 3000,
            },
        )
        state = {
            "account": {"accountName": self.vsts_account_name, "accountId": self.vsts_account_id},
            "base_url": self.vsts_base_url,
            "identity": {
                "data": {
                    "access_token": self.access_token,
                    "expires_in": "3600",
                    "refresh_token": self.refresh_token,
                    "token_type": "jwt-bearer",
                }
            },
        }

        integration = VstsIntegrationProvider()

        with pytest.raises(IntegrationProviderError) as err:
            integration.build_integration(state)
        assert "sufficient account access to create webhooks" in str(err)


</source>
</class>

<class classid="103" nclones="2" nlines="20" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github/test_issues.py" startline="31" endline="55" pcid="10134">
    def test_get_allowed_assignees(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://api.github.com/app/installations/github_external_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.GET,
            "https://api.github.com/repos/getsentry/sentry/assignees",
            json=[{"login": "MeredithAnya"}],
        )

        repo = "getsentry/sentry"
        assert self.integration.get_allowed_assignees(repo) == (
            ("", "Unassigned"),
            ("MeredithAnya", "MeredithAnya"),
        )

        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github_enterprise/test_issues.py" startline="36" endline="60" pcid="10293">
    def test_get_allowed_assignees(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://35.232.149.196/api/v3/app/installations/installation_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.GET,
            "https://35.232.149.196/api/v3/repos/getsentry/sentry/assignees",
            json=[{"login": "MeredithAnya"}],
        )

        repo = "getsentry/sentry"
        assert self.integration.get_allowed_assignees(repo) == (
            ("", "Unassigned"),
            ("MeredithAnya", "MeredithAnya"),
        )

        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"

</source>
</class>

<class classid="104" nclones="2" nlines="34" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github/test_issues.py" startline="58" endline="96" pcid="10135">
    def test_create_issue(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://api.github.com/app/installations/github_external_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.POST,
            "https://api.github.com/repos/getsentry/sentry/issues",
            json={
                "number": 321,
                "title": "hello",
                "body": "This is the description",
                "html_url": "https://github.com/getsentry/sentry/issues/231",
            },
        )

        form_data = {
            "repo": "getsentry/sentry",
            "title": "hello",
            "description": "This is the description",
        }

        assert self.integration.create_issue(form_data) == {
            "key": 321,
            "description": "This is the description",
            "title": "hello",
            "url": "https://github.com/getsentry/sentry/issues/231",
            "repo": "getsentry/sentry",
        }
        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"
        payload = json.loads(request.body)
        assert payload == {"body": "This is the description", "assignee": None, "title": "hello"}

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github_enterprise/test_issues.py" startline="63" endline="101" pcid="10294">
    def test_create_issue(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://35.232.149.196/api/v3/app/installations/installation_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.POST,
            "https://35.232.149.196/api/v3/repos/getsentry/sentry/issues",
            json={
                "number": 321,
                "title": "hello",
                "body": "This is the description",
                "html_url": "https://35.232.149.196/getsentry/sentry/issues/231",
            },
        )

        form_data = {
            "repo": "getsentry/sentry",
            "title": "hello",
            "description": "This is the description",
        }

        assert self.integration.create_issue(form_data) == {
            "key": 321,
            "description": "This is the description",
            "title": "hello",
            "url": "https://35.232.149.196/getsentry/sentry/issues/231",
            "repo": "getsentry/sentry",
        }
        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"
        payload = json.loads(request.body)
        assert payload == {"body": "This is the description", "assignee": None, "title": "hello"}

</source>
</class>

<class classid="105" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github/test_issues.py" startline="99" endline="119" pcid="10136">
    def test_get_repo_issues(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://api.github.com/app/installations/github_external_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.GET,
            "https://api.github.com/repos/getsentry/sentry/issues",
            json=[{"number": 321, "title": "hello", "body": "This is the description"}],
        )
        repo = "getsentry/sentry"
        assert self.integration.get_repo_issues(repo) == ((321, "#321 hello"),)

        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github_enterprise/test_issues.py" startline="104" endline="124" pcid="10295">
    def test_get_repo_issues(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://35.232.149.196/api/v3/app/installations/installation_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.GET,
            "https://35.232.149.196/api/v3/repos/getsentry/sentry/issues",
            json=[{"number": 321, "title": "hello", "body": "This is the description"}],
        )
        repo = "getsentry/sentry"
        assert self.integration.get_repo_issues(repo) == ((321, "#321 hello"),)

        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"

</source>
</class>

<class classid="106" nclones="2" nlines="29" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github/test_issues.py" startline="122" endline="155" pcid="10137">
    def test_link_issue(self, mock_get_jwt):
        issue_id = 321
        responses.add(
            responses.POST,
            "https://api.github.com/app/installations/github_external_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.GET,
            "https://api.github.com/repos/getsentry/sentry/issues/321",
            json={
                "number": issue_id,
                "title": "hello",
                "body": "This is the description",
                "html_url": "https://github.com/getsentry/sentry/issues/231",
            },
        )

        data = {"repo": "getsentry/sentry", "externalIssue": issue_id, "comment": "hello"}

        assert self.integration.get_issue(issue_id, data=data) == {
            "key": issue_id,
            "description": "This is the description",
            "title": "hello",
            "url": "https://github.com/getsentry/sentry/issues/231",
            "repo": "getsentry/sentry",
        }
        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github_enterprise/test_issues.py" startline="127" endline="160" pcid="10296">
    def test_link_issue(self, mock_get_jwt):
        issue_id = 321
        responses.add(
            responses.POST,
            "https://35.232.149.196/api/v3/app/installations/installation_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.GET,
            "https://35.232.149.196/api/v3/repos/getsentry/sentry/issues/321",
            json={
                "number": issue_id,
                "title": "hello",
                "body": "This is the description",
                "html_url": "https://35.232.149.196/getsentry/sentry/issues/231",
            },
        )

        data = {"repo": "getsentry/sentry", "externalIssue": issue_id, "comment": "hello"}

        assert self.integration.get_issue(issue_id, data=data) == {
            "key": issue_id,
            "description": "This is the description",
            "title": "hello",
            "url": "https://35.232.149.196/getsentry/sentry/issues/231",
            "repo": "getsentry/sentry",
        }
        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"

</source>
</class>

<class classid="107" nclones="2" nlines="21" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github/test_issues.py" startline="212" endline="239" pcid="10139">
    def after_link_issue(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://api.github.com/app/installations/github_external_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.POST,
            "https://api.github.com/repos/getsentry/sentry/issues/321/comments",
            json={"body": "hello"},
        )

        data = {"comment": "hello"}
        external_issue = ExternalIssue.objects.create(
            organization_id=self.organization.id, integration_id=self.model.id, key="hello#321"
        )

        self.integration.after_link_issue(external_issue, data=data)

        request = responses.calls[0].request
        assert request.headers["Authorization"] == b"Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"
        payload = json.loads(request.body)
        assert payload == {"body": "hello"}

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/github_enterprise/test_issues.py" startline="163" endline="189" pcid="10297">
    def after_link_issue(self, mock_get_jwt):
        responses.add(
            responses.POST,
            "https://35.232.149.196/api/v3/installations/installation_id/access_tokens",
            json={"token": "token_1", "expires_at": "2018-10-11T22:14:10Z"},
        )

        responses.add(
            responses.POST,
            "https://35.232.149.196/api/v3/repos/getsentry/sentry/issues/321/comments",
            json={"body": "hello"},
        )

        data = {"comment": "hello"}
        external_issue = ExternalIssue.objects.create(
            organization_id=self.organization.id, integration_id=self.model.id, key="hello#321"
        )

        self.integration.after_link_issue(external_issue, data=data)

        request = responses.calls[0].request
        assert request.headers["Authorization"] == "Bearer jwt_token_1"

        request = responses.calls[1].request
        assert request.headers["Authorization"] == "token token_1"
        payload = json.loads(request.body)
        assert payload == {"body": "hello"}
</source>
</class>

<class classid="108" nclones="2" nlines="22" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/vercel/test_uninstall.py" startline="119" endline="152" pcid="10174">
    def test_uninstall_primary_configuration(self):
        """
        Test uninstalling the configuration whose credentials
            * access_token
            * webhook_id
            * installation_id
        are used in the primary metadata for the integration.
        """

        assert len(OrganizationIntegration.objects.all()) == 2
        response = self.client.delete(
            path=self.url,
            data=PRIMARY_UNINSTALL_RESPONSE,
            content_type="application/json",
        )

        assert response.status_code == 204
        assert len(OrganizationIntegration.objects.all()) == 1

        integration = Integration.objects.get(id=self.integration.id)
        assert integration.metadata == {
            "access_token": "my_access_token2",
            "installation_id": "my_config_id2",
            "installation_type": "team",
            "webhook_id": "my_webhook_id2",
            "configurations": {
                "my_config_id2": {
                    "access_token": "my_access_token2",
                    "webhook_id": "my_webhook_id2",
                    "organization_id": self.second_org.id,
                }
            },
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/vercel/test_uninstall.py" startline="153" endline="184" pcid="10175">
    def test_uninstall_non_primary_configuration(self):
        """
        Test uninstalling a configuration that is only stored
        in the "configurations" metadata.
        """

        assert len(OrganizationIntegration.objects.all()) == 2

        response = self.client.delete(
            path=self.url,
            data=NONPRIMARY_UNINSTALL_RESPONSE,
            content_type="application/json",
        )

        assert response.status_code == 204
        assert len(OrganizationIntegration.objects.all()) == 1

        integration = Integration.objects.get(id=self.integration.id)
        assert integration.metadata == {
            "access_token": "my_access_token",
            "installation_id": "my_config_id",
            "installation_type": "team",
            "webhook_id": "my_webhook_id",
            "configurations": {
                "my_config_id": {
                    "access_token": "my_access_token",
                    "webhook_id": "my_webhook_id",
                    "organization_id": self.organization.id,
                }
            },
        }

</source>
</class>

<class classid="109" nclones="3" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/vercel/test_webhook.py" startline="155" endline="169" pcid="10186">
    def test_no_integration(self):
        responses.add(
            responses.POST,
            absolute_uri("/api/0/organizations/%s/releases/" % self.organization.slug),
            json={},
        )
        self.integration.delete()

        with override_options({"vercel.client-secret": SECRET}):
            response = self._get_response(EXAMPLE_DEPLOYMENT_WEBHOOK_RESPONSE, SIGNATURE)

            assert len(responses.calls) == 0
            assert response.status_code == 404
            assert response.data["detail"] == "Integration not found"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/vercel/test_webhook.py" startline="187" endline="201" pcid="10188">
    def test_no_installation(self):
        responses.add(
            responses.POST,
            absolute_uri("/api/0/organizations/%s/releases/" % self.organization.slug),
            json={},
        )
        self.installation_for_provider.delete()

        with override_options({"vercel.client-secret": SECRET}):
            response = self._get_response(EXAMPLE_DEPLOYMENT_WEBHOOK_RESPONSE, SIGNATURE)

            assert len(responses.calls) == 0
            assert response.status_code == 404
            assert response.data["detail"] == "Installation not found"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/vercel/test_webhook.py" startline="171" endline="185" pcid="10187">
    def test_no_project(self):
        responses.add(
            responses.POST,
            absolute_uri("/api/0/organizations/%s/releases/" % self.organization.slug),
            json={},
        )
        self.project.delete()

        with override_options({"vercel.client-secret": SECRET}):
            response = self._get_response(EXAMPLE_DEPLOYMENT_WEBHOOK_RESPONSE, SIGNATURE)

            assert len(responses.calls) == 0
            assert response.status_code == 404
            assert response.data["detail"] == "Project not found"

</source>
</class>

<class classid="110" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_integration.py" startline="34" endline="47" pcid="10216">
    def integration(self):
        integration = Integration.objects.create(
            provider="jira",
            name="Jira Cloud",
            metadata={
                "oauth_client_id": "oauth-client-id",
                "shared_secret": "a-super-secret-key-from-atlassian",
                "base_url": "https://example.atlassian.net",
                "domain_name": "example.atlassian.net",
            },
        )
        integration.add_organization(self.organization, self.user)
        return integration

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_search_endpoint.py" startline="14" endline="27" pcid="10252">
    def integration(self):
        integration = Integration.objects.create(
            provider="jira",
            name="Jira Cloud",
            metadata={
                "oauth_client_id": "oauth-client-id",
                "shared_secret": "a-super-secret-key-from-atlassian",
                "base_url": "https://example.atlassian.net",
                "domain_name": "example.atlassian.net",
            },
        )
        integration.add_organization(self.organization, self.user)
        return integration

</source>
</class>

<class classid="111" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_webhooks.py" startline="77" endline="88" pcid="10247">
    def test_simple_deassign(self, mock_sync_group_assignee_inbound):
        with patch(
            "sentry.integrations.jira.webhooks.get_integration_from_jwt",
            return_value=self.integration,
        ):
            data = StubService.get_stub_data("jira", "edit_issue_no_assignee_payload.json")
            resp = self.client.post(self.path, data=data, HTTP_AUTHORIZATION="JWT anexampletoken")
            assert resp.status_code == 200
            mock_sync_group_assignee_inbound.assert_called_with(
                self.integration, None, "APP-123", assign=False
            )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_webhooks.py" startline="90" endline="101" pcid="10248">
    def test_simple_deassign_assignee_missing(self, mock_sync_group_assignee_inbound):
        with patch(
            "sentry.integrations.jira.webhooks.get_integration_from_jwt",
            return_value=self.integration,
        ):
            data = StubService.get_stub_data("jira", "edit_issue_assignee_missing_payload.json")
            resp = self.client.post(self.path, data=data, HTTP_AUTHORIZATION="JWT anexampletoken")
            assert resp.status_code == 200
            mock_sync_group_assignee_inbound.assert_called_with(
                self.integration, None, "APP-123", assign=False
            )

</source>
</class>

<class classid="112" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_uninstalled.py" startline="18" endline="30" pcid="10264">
    def jwt_token_secret(self):
        jira_signing_algorithm = "HS256"
        return jwt.encode(
            {
                "iss": self.external_id,
                "aud": absolute_uri(),
                "qsh": get_query_hash(self.path, method="POST", query_params={}),
            },
            self.shared_secret,
            algorithm=jira_signing_algorithm,
            headers={"alg": jira_signing_algorithm},
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_installed.py" startline="18" endline="30" pcid="10275">
    def jwt_token_secret(self):
        jira_signing_algorithm = "HS256"
        return jwt.encode(
            {
                "iss": self.external_id,
                "aud": absolute_uri(),
                "qsh": get_query_hash(self.path, method="POST", query_params={}),
            },
            self.shared_secret,
            algorithm=jira_signing_algorithm,
            headers={"alg": jira_signing_algorithm},
        )

</source>
</class>

<class classid="113" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_uninstalled.py" startline="31" endline="43" pcid="10265">
    def jwt_token_cdn(self):
        jira_signing_algorithm = "RS256"
        return jwt.encode(
            {
                "iss": self.external_id,
                "aud": absolute_uri(),
                "qsh": get_query_hash(self.path, method="POST", query_params={}),
            },
            RS256_KEY,
            algorithm=jira_signing_algorithm,
            headers={"kid": self.kid, "alg": jira_signing_algorithm},
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_installed.py" startline="31" endline="43" pcid="10276">
    def jwt_token_cdn(self):
        jira_signing_algorithm = "RS256"
        return jwt.encode(
            {
                "iss": self.external_id,
                "aud": absolute_uri(),
                "qsh": get_query_hash(self.path, method="POST", query_params={}),
            },
            RS256_KEY,
            algorithm=jira_signing_algorithm,
            headers={"kid": self.kid, "alg": jira_signing_algorithm},
        )

</source>
</class>

<class classid="114" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_client.py" startline="36" endline="48" pcid="10273">
    def test_get_field_autocomplete_for_non_customfield(self):
        body = {"results": [{"value": "ISSUE-1", "displayName": "My Issue (ISSUE-1)"}]}
        responses.add(
            method=responses.GET,
            url="https://example.atlassian.net/rest/api/2/jql/autocompletedata/suggestions?fieldName=my_field&fieldValue=abc&jwt=my-jwt-token",
            body=json.dumps(body),
            status=200,
            content_type="application/json",
            match_querystring=True,
        )
        res = self.client.get_field_autocomplete("my_field", "abc")
        assert res == body

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/jira/test_client.py" startline="50" endline="61" pcid="10274">
    def test_get_field_autocomplete_for_customfield(self):
        body = {"results": [{"value": "ISSUE-1", "displayName": "My Issue (ISSUE-1)"}]}
        responses.add(
            method=responses.GET,
            url="https://example.atlassian.net/rest/api/2/jql/autocompletedata/suggestions?fieldName=cf[0123]&fieldValue=abc&jwt=my-jwt-token",
            body=json.dumps(body),
            status=200,
            content_type="application/json",
            match_querystring=True,
        )
        res = self.client.get_field_autocomplete("customfield_0123", "abc")
        assert res == body
</source>
</class>

<class classid="115" nclones="2" nlines="45" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/aws_lambda/test_integration.py" startline="401" endline="459" pcid="10309">
    def test_lambda_setup_layer_too_many_requests_exception(
        self, mock_react_view, mock_gen_aws_client, mock_get_supported_functions
    ):
        class MockException(Exception):
            pass

        too_many_requests_err = (
            "An error occurred (TooManyRequestsException) when calling the "
            "UpdateFunctionConfiguration operation (reached max retries: 4): "
            "Rate exceeded"
        )
        mock_client = Mock()
        mock_gen_aws_client.return_value = mock_client
        mock_client.update_function_configuration = MagicMock(
            side_effect=Exception(too_many_requests_err)
        )
        mock_client.describe_account = MagicMock(return_value={"Account": {"Name": "my_name"}})
        mock_client.exceptions = MagicMock()
        mock_client.exceptions.ResourceConflictException = MockException

        mock_get_supported_functions.return_value = [
            {
                "FunctionName": "lambdaB",
                "Runtime": "nodejs10.x",
                "FunctionArn": "arn:aws:lambda:us-east-2:599817902985:function:lambdaB",
            },
        ]

        aws_external_id = "12-323"
        self.pipeline.state.step_index = 2
        self.pipeline.state.data = {
            "region": region,
            "account_number": account_number,
            "aws_external_id": aws_external_id,
            "project_id": self.projectA.id,
        }

        resp = self.client.post(
            self.setup_path,
            {"lambdaB": "true"},
            format="json",
            HTTP_ACCEPT="application/json",
            headers={"Content-Type": "application/json", "Accept": "application/json"},
        )

        assert resp.status_code == 200
        assert not Integration.objects.filter(provider=self.provider.key).exists()

        failures = [
            {
                "name": "lambdaB",
                "error": "Something went wrong! Please enable function manually after installation",
            }
        ]

        mock_react_view.assert_called_with(
            ANY, "awsLambdaFailureDetails", {"lambdaFunctionFailures": failures, "successCount": 0}
        )

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/aws_lambda/test_integration.py" startline="463" endline="522" pcid="10310">
    def test_lambda_setup_layer_env_vars_limit_exceeded_exception(
        self, mock_react_view, mock_gen_aws_client, mock_get_supported_functions
    ):
        class MockException(Exception):
            pass

        env_vars_size_limit_err = (
            "An error occurred (InvalidParameterValueException) when calling the "
            "UpdateFunctionConfiguration operation: Lambda was unable to configure "
            "your environment variables because the environment variables you have "
            "provided exceeded the 4KB limit. String measured: {'MESSAGE':'This is production "
            "environment','TARGET_ENV' :'pre-production','IS_SERVERLESS':'true','STAGE':'pre-prod'"
        )
        mock_client = Mock()
        mock_gen_aws_client.return_value = mock_client
        mock_client.update_function_configuration = MagicMock(
            side_effect=Exception(env_vars_size_limit_err)
        )
        mock_client.describe_account = MagicMock(return_value={"Account": {"Name": "my_name"}})
        mock_client.exceptions = MagicMock()
        mock_client.exceptions.ResourceConflictException = MockException

        mock_get_supported_functions.return_value = [
            {
                "FunctionName": "lambdaB",
                "Runtime": "nodejs10.x",
                "FunctionArn": "arn:aws:lambda:us-east-2:599817902985:function:lambdaB",
            },
        ]

        aws_external_id = "12-323"
        self.pipeline.state.step_index = 2
        self.pipeline.state.data = {
            "region": region,
            "account_number": account_number,
            "aws_external_id": aws_external_id,
            "project_id": self.projectA.id,
        }

        resp = self.client.post(
            self.setup_path,
            {"lambdaB": "true"},
            format="json",
            HTTP_ACCEPT="application/json",
            headers={"Content-Type": "application/json", "Accept": "application/json"},
        )

        assert resp.status_code == 200
        assert not Integration.objects.filter(provider=self.provider.key).exists()

        failures = [
            {
                "name": "lambdaB",
                "error": "Environment variables size limit of 4KB was exceeded",
            }
        ]

        mock_react_view.assert_called_with(
            ANY, "awsLambdaFailureDetails", {"lambdaFunctionFailures": failures, "successCount": 0}
        )
</source>
</class>

<class classid="116" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/gitlab/test_search.py" startline="122" endline="134" pcid="10348">
    def test_finds_no_external_issues_results(self):
        responses.add(
            responses.GET,
            "https://example.gitlab.com/api/v4/projects/5/issues?scope=all&search=XYZ",
            json=[],
        )
        resp = self.client.get(
            self.url, data={"field": "externalIssue", "query": "XYZ", "project": "5"}
        )

        assert resp.status_code == 200
        assert resp.data == []

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/gitlab/test_search.py" startline="136" endline="148" pcid="10349">
    def test_finds_no_external_issues_results_iid(self):
        responses.add(
            responses.GET,
            "https://example.gitlab.com/api/v4/projects/5/issues?scope=all&iids=11",
            json=[],
        )
        resp = self.client.get(
            self.url, data={"field": "externalIssue", "query": "11", "project": "5"}
        )

        assert resp.status_code == 200
        assert resp.data == []

</source>
</class>

<class classid="117" nclones="2" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/gitlab/test_webhook.py" startline="280" endline="302" pcid="10377">
    def test_update_repo_name(self):
        repo_out_of_date_name = self.create_repo(
            name="Uncool Group / Sentry",  # name out of date
            url="http://example.com/cool-group/sentry",
        )
        repo_out_of_date_name.update(
            config=dict(repo_out_of_date_name.config, path="cool-group/sentry")
        )

        response = self.client.post(
            self.url,
            data=PUSH_EVENT,
            content_type="application/json",
            HTTP_X_GITLAB_TOKEN=WEBHOOK_TOKEN,
            HTTP_X_GITLAB_EVENT="Push Hook",
        )

        assert response.status_code == 204

        # name has been updated
        repo_out_of_date_name.refresh_from_db()
        assert repo_out_of_date_name.name == "Cool Group / Sentry"

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/gitlab/test_webhook.py" startline="329" endline="350" pcid="10379">
    def test_update_repo_url(self):
        repo_out_of_date_url = self.create_repo(
            name="Cool Group / Sentry",
            url="http://example.com/uncool-group/sentry",  # url out of date
        )
        repo_out_of_date_url.update(
            config=dict(repo_out_of_date_url.config, path="cool-group/sentry")
        )

        response = self.client.post(
            self.url,
            data=PUSH_EVENT,
            content_type="application/json",
            HTTP_X_GITLAB_TOKEN=WEBHOOK_TOKEN,
            HTTP_X_GITLAB_EVENT="Push Hook",
        )

        assert response.status_code == 204

        # url has been updated
        repo_out_of_date_url.refresh_from_db()
        assert repo_out_of_date_url.url == "http://example.com/cool-group/sentry"
</source>
</class>

<class classid="118" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/gitlab/test_repository.py" startline="192" endline="204" pcid="10407">
    def test_on_delete_repository_remove_webhook(self):
        response = self.create_repository(self.default_repository_config, self.integration.id)
        responses.reset()

        responses.add(
            responses.DELETE,
            "https://example.gitlab.com/api/v4/projects/%s/hooks/99" % self.gitlab_id,
            status=204,
        )
        repo = Repository.objects.get(pk=response.data["id"])
        self.provider.on_delete_repository(repo)
        assert len(responses.calls) == 1

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/gitlab/test_repository.py" startline="206" endline="218" pcid="10408">
    def test_on_delete_repository_remove_webhook_missing_hook(self):
        response = self.create_repository(self.default_repository_config, self.integration.id)
        responses.reset()

        responses.add(
            responses.DELETE,
            "https://example.gitlab.com/api/v4/projects/%s/hooks/99" % self.gitlab_id,
            status=404,
        )
        repo = Repository.objects.get(pk=response.data["id"])
        self.provider.on_delete_repository(repo)
        assert len(responses.calls) == 1

</source>
</class>

<class classid="119" nclones="2" nlines="20" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/test_metric_alerts.py" startline="121" endline="142" pcid="10463">
    def create_incident_and_related_objects(self, field="sessions"):
        self.alert_rule = self.create_alert_rule(
            query="",
            aggregate=f"percentage({field}_crashed, {field}) AS _crash_rate_alert_aggregate",
            dataset=QueryDatasets.SESSIONS,
            time_window=60,
        )
        self.incident = self.create_incident(
            self.organization,
            title="Incident #1",
            projects=[self.project],
            alert_rule=self.alert_rule,
            status=IncidentStatus.CLOSED.value,
            date_started=self.now - timedelta(minutes=120),
        )
        trigger = self.create_alert_rule_trigger(self.alert_rule, CRITICAL_TRIGGER_LABEL, 95)
        self.action = self.create_alert_rule_trigger_action(
            alert_rule_trigger=trigger, triggered_for_incident=self.incident
        )
        for _ in range(2):
            self.store_session(self.build_session(status="exited", started=self._5_min_ago))

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/test_metric_alerts.py" startline="222" endline="242" pcid="10469">
    def create_incident_and_related_objects(self, field="sessions"):
        self.alert_rule = self.create_alert_rule(
            query="",
            aggregate=f"percentage({field}_crashed, {field}) AS _crash_rate_alert_aggregate",
            dataset=QueryDatasets.METRICS,
            time_window=60,
        )
        self.incident = self.create_incident(
            self.organization,
            title="Incident #1",
            projects=[self.project],
            alert_rule=self.alert_rule,
            status=IncidentStatus.CLOSED.value,
            date_started=self.now - timedelta(minutes=120),
        )
        trigger = self.create_alert_rule_trigger(self.alert_rule, CRITICAL_TRIGGER_LABEL, 95)
        self.action = self.create_alert_rule_trigger_action(
            alert_rule_trigger=trigger, triggered_for_incident=self.incident
        )
        for _ in range(2):
            self.store_session(self.build_session(status="exited", started=self._5_min_ago))
</source>
</class>

<class classid="120" nclones="2" nlines="23" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/slack/test_unfurl.py" startline="100" endline="132" pcid="10511">
    def test_unfurl_discover(self, mock_generate_chart):
        min_ago = iso_format(before_now(minutes=1))
        self.store_event(
            data={"fingerprint": ["group2"], "timestamp": min_ago}, project_id=self.project.id
        )
        self.store_event(
            data={"fingerprint": ["group2"], "timestamp": min_ago}, project_id=self.project.id
        )

        url = f"https://sentry.io/organizations/{self.organization.slug}/discover/results/?field=title&field=event.type&field=project&field=user.display&field=timestamp&name=All+Events&project={self.project.id}&query=&sort=-timestamp&statsPeriod=24h"
        link_type, args = match_link(url)

        if not args or not link_type:
            raise Exception("Missing link_type/args")

        links = [
            UnfurlableUrl(url=url, args=args),
        ]

        with self.feature(["organizations:discover-basic"]):
            unfurls = link_handlers[link_type].fn(self.request, self.integration, links, self.user)

        assert (
            unfurls[url]
            == SlackDiscoverMessageBuilder(
                title=args["query"].get("name"), chart_url="chart-url"
            ).build()
        )
        assert len(mock_generate_chart.mock_calls) == 1
        chart_data = mock_generate_chart.call_args[0][1]
        assert chart_data["seriesName"] == "count()"
        assert len(chart_data["stats"]["data"]) == 288

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/slack/test_unfurl.py" startline="204" endline="236" pcid="10514">
    def test_unfurl_discover_html_escaped(self, mock_generate_chart):
        min_ago = iso_format(before_now(minutes=1))
        self.store_event(
            data={"fingerprint": ["group2"], "timestamp": min_ago}, project_id=self.project.id
        )
        self.store_event(
            data={"fingerprint": ["group2"], "timestamp": min_ago}, project_id=self.project.id
        )

        url = f"https://sentry.io/organizations/{self.organization.slug}/discover/results/?field=title&amp;field=event.type&amp;field=project&amp;field=user.display&amp;field=timestamp&amp;name=All+Events&amp;project={self.project.id}&amp;query=&amp;sort=-timestamp&amp;statsPeriod=24h"
        link_type, args = match_link(url)

        if not args or not link_type:
            raise Exception("Missing link_type/args")

        links = [
            UnfurlableUrl(url=url, args=args),
        ]

        with self.feature(["organizations:discover-basic"]):
            unfurls = link_handlers[link_type].fn(self.request, self.integration, links, self.user)

        assert (
            unfurls[url]
            == SlackDiscoverMessageBuilder(
                title=args["query"].get("name"), chart_url="chart-url"
            ).build()
        )
        assert len(mock_generate_chart.mock_calls) == 1
        chart_data = mock_generate_chart.call_args[0][1]
        assert chart_data["seriesName"] == "count()"
        assert len(chart_data["stats"]["data"]) == 288

</source>
</class>

<class classid="121" nclones="2" nlines="34" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/slack/test_unfurl.py" startline="362" endline="405" pcid="10517">
    def test_top_events_url_param(self, mock_generate_chart):
        min_ago = iso_format(before_now(minutes=1))
        self.store_event(
            data={"message": "first", "fingerprint": ["group1"], "timestamp": min_ago},
            project_id=self.project.id,
        )
        self.store_event(
            data={"message": "second", "fingerprint": ["group2"], "timestamp": min_ago},
            project_id=self.project.id,
        )

        url = f"https://sentry.io/organizations/{self.organization.slug}/discover/results/?field=message&field=event.type&field=count()&name=All+Events&query=message:[first,second]&sort=-count&statsPeriod=24h&display=top5&topEvents=2"
        link_type, args = match_link(url)

        if not args or not link_type:
            raise Exception("Missing link_type/args")

        links = [
            UnfurlableUrl(url=url, args=args),
        ]

        with self.feature(
            [
                "organizations:discover",
                "organizations:discover-basic",
            ]
        ):
            unfurls = link_handlers[link_type].fn(self.request, self.integration, links, self.user)

        assert (
            unfurls[url]
            == SlackDiscoverMessageBuilder(
                title=args["query"].get("name"), chart_url="chart-url"
            ).build()
        )
        assert len(mock_generate_chart.mock_calls) == 1

        assert mock_generate_chart.call_args[0][0] == ChartType.SLACK_DISCOVER_TOP5_PERIOD
        chart_data = mock_generate_chart.call_args[0][1]
        assert chart_data["seriesName"] == "count()"
        assert len(chart_data["stats"].keys()) == 2
        first_key = list(chart_data["stats"].keys())[0]
        assert len(chart_data["stats"][first_key]["data"]) == 288

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/slack/test_unfurl.py" startline="407" endline="451" pcid="10518">
    def test_top_daily_events_renders_bar_chart(self, mock_generate_chart):
        min_ago = iso_format(before_now(minutes=1))
        self.store_event(
            data={"message": "first", "fingerprint": ["group1"], "timestamp": min_ago},
            project_id=self.project.id,
        )
        self.store_event(
            data={"message": "second", "fingerprint": ["group2"], "timestamp": min_ago},
            project_id=self.project.id,
        )

        url = f"https://sentry.io/organizations/{self.organization.slug}/discover/results/?field=message&field=event.type&field=count()&name=All+Events&query=message:[first,second]&sort=-count&statsPeriod=24h&display=dailytop5&topEvents=2"
        link_type, args = match_link(url)

        if not args or not link_type:
            raise Exception("Missing link_type/args")

        links = [
            UnfurlableUrl(url=url, args=args),
        ]

        with self.feature(
            [
                "organizations:discover",
                "organizations:discover-basic",
            ]
        ):
            unfurls = link_handlers[link_type].fn(self.request, self.integration, links, self.user)

        assert (
            unfurls[url]
            == SlackDiscoverMessageBuilder(
                title=args["query"].get("name"), chart_url="chart-url"
            ).build()
        )
        assert len(mock_generate_chart.mock_calls) == 1

        assert mock_generate_chart.call_args[0][0] == ChartType.SLACK_DISCOVER_TOP5_DAILY
        chart_data = mock_generate_chart.call_args[0][1]
        assert chart_data["seriesName"] == "count()"
        assert len(chart_data["stats"].keys()) == 2
        first_key = list(chart_data["stats"].keys())[0]
        # Two buckets
        assert len(chart_data["stats"][first_key]["data"]) == 2

</source>
</class>

<class classid="122" nclones="2" nlines="13" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/slack/test_tasks.py" startline="265" endline="281" pcid="10529">
    def test_task_failed_id_lookup(self, mock_get_channel_id, mock_set_value):
        alert_rule_data = self.metric_alert_data

        data = {
            "data": alert_rule_data,
            "uuid": self.uuid,
            "organization_id": self.organization.id,
        }

        with self.tasks():
            with self.feature(["organizations:incidents"]):
                find_channel_id_for_alert_rule(**data)

        assert not AlertRule.objects.filter(name="New Rule").exists()
        mock_set_value.assert_called_with("failed")
        mock_get_channel_id.assert_called_with(self.integration, "my-channel", 180)

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/slack/test_tasks.py" startline="287" endline="303" pcid="10530">
    def test_task_timeout_id_lookup(self, mock_get_channel_id, mock_set_value):
        alert_rule_data = self.metric_alert_data

        data = {
            "data": alert_rule_data,
            "uuid": self.uuid,
            "organization_id": self.organization.id,
        }

        with self.tasks():
            with self.feature(["organizations:incidents"]):
                find_channel_id_for_alert_rule(**data)

        assert not AlertRule.objects.filter(name="New Rule").exists()
        mock_set_value.assert_called_with("failed")
        mock_get_channel_id.assert_called_with(self.integration, "my-channel", 180)

</source>
</class>

<class classid="123" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/integrations/msteams/test_webhook.py" startline="97" endline="109" pcid="10687">
    def test_iss_does_not_match(self, mock_decode):
        bad_token = DECODED_TOKEN.copy()
        bad_token["iss"] = "bad"
        mock_decode.return_value = bad_token
        resp = self.client.post(
            path=webhook_url,
            data=EXAMPLE_TEAM_MEMBER_ADDED,
            format="json",
            HTTP_AUTHORIZATION=f"Bearer {TOKEN}",
        )
        assert resp.data["detail"] == "The field iss does not match"
        assert resp.status_code == 403

</source>
<source file="systems/sentry-22.2.0/tests/sentry/integrations/msteams/test_webhook.py" startline="112" endline="124" pcid="10688">
    def test_service_url_does_not_match(self, mock_decode):
        bad_token = DECODED_TOKEN.copy()
        bad_token["serviceurl"] = "bad"
        mock_decode.return_value = bad_token
        resp = self.client.post(
            path=webhook_url,
            data=EXAMPLE_TEAM_MEMBER_ADDED,
            format="json",
            HTTP_AUTHORIZATION=f"Bearer {TOKEN}",
        )
        assert resp.data["detail"] == "The field serviceUrl does not match"
        assert resp.status_code == 403

</source>
</class>

<class classid="124" nclones="5" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/notifications/utils/test_get_setting_mapping_from_mapping.py" startline="17" endline="34" pcid="10869">
    def test_get_setting_mapping_from_mapping_issue_alerts(self):
        notification_settings = {
            self.user: {
                NotificationScopeType.USER: {
                    ExternalProviders.EMAIL: NotificationSettingOptionValues.ALWAYS
                }
            }
        }
        mapping = _get_setting_mapping_from_mapping(
            notification_settings,
            self.user,
            NotificationSettingTypes.ISSUE_ALERTS,
        )
        assert mapping == {
            ExternalProviders.EMAIL: NotificationSettingOptionValues.ALWAYS,
            ExternalProviders.SLACK: NotificationSettingOptionValues.NEVER,
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/notifications/utils/test_get_setting_mapping_from_mapping.py" startline="99" endline="117" pcid="10874">
    def test_get_setting_mapping_from_mapping_slack_always(self):
        notification_settings = {
            self.user: {
                NotificationScopeType.USER: {
                    ExternalProviders.SLACK: NotificationSettingOptionValues.ALWAYS
                }
            }
        }

        mapping = _get_setting_mapping_from_mapping(
            notification_settings,
            self.user,
            NotificationSettingTypes.ISSUE_ALERTS,
        )
        assert mapping == {
            ExternalProviders.EMAIL: NotificationSettingOptionValues.ALWAYS,
            ExternalProviders.SLACK: NotificationSettingOptionValues.ALWAYS,
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/notifications/utils/test_get_setting_mapping_from_mapping.py" startline="80" endline="98" pcid="10873">
    def test_get_setting_mapping_from_mapping_slack_never(self):
        notification_settings = {
            self.user: {
                NotificationScopeType.USER: {
                    ExternalProviders.SLACK: NotificationSettingOptionValues.NEVER
                }
            }
        }

        mapping = _get_setting_mapping_from_mapping(
            notification_settings,
            self.user,
            NotificationSettingTypes.ISSUE_ALERTS,
        )
        assert mapping == {
            ExternalProviders.EMAIL: NotificationSettingOptionValues.ALWAYS,
            ExternalProviders.SLACK: NotificationSettingOptionValues.NEVER,
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/notifications/utils/test_get_setting_mapping_from_mapping.py" startline="53" endline="70" pcid="10871">
    def test_get_setting_mapping_from_mapping_workflow(self):
        notification_settings = {
            self.user: {
                NotificationScopeType.USER: {
                    ExternalProviders.EMAIL: NotificationSettingOptionValues.SUBSCRIBE_ONLY
                }
            }
        }
        mapping = _get_setting_mapping_from_mapping(
            notification_settings,
            self.user,
            NotificationSettingTypes.WORKFLOW,
        )
        assert mapping == {
            ExternalProviders.EMAIL: NotificationSettingOptionValues.SUBSCRIBE_ONLY,
            ExternalProviders.SLACK: NotificationSettingOptionValues.NEVER,
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/notifications/utils/test_get_setting_mapping_from_mapping.py" startline="35" endline="52" pcid="10870">
    def test_get_setting_mapping_from_mapping_deploy(self):
        notification_settings = {
            self.user: {
                NotificationScopeType.USER: {
                    ExternalProviders.EMAIL: NotificationSettingOptionValues.COMMITTED_ONLY
                }
            }
        }
        mapping = _get_setting_mapping_from_mapping(
            notification_settings,
            self.user,
            NotificationSettingTypes.DEPLOY,
        )
        assert mapping == {
            ExternalProviders.EMAIL: NotificationSettingOptionValues.COMMITTED_ONLY,
            ExternalProviders.SLACK: NotificationSettingOptionValues.NEVER,
        }

</source>
</class>

<class classid="125" nclones="4" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry/search/test_utils.py" startline="246" endline="256" pcid="10953">
    def test_greater_than_comparator(self):
        result = self.parse_query("timesSeen:>10 event.timestamp:>2016-01-02")
        assert result == {
            "tags": {},
            "query": "",
            "times_seen_lower": 10,
            "times_seen_lower_inclusive": False,
            "date_from": datetime(2016, 1, 2, tzinfo=timezone.utc),
            "date_from_inclusive": False,
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/search/test_utils.py" startline="281" endline="291" pcid="10956">
    def test_less_than_equal_comparator(self):
        result = self.parse_query("event.timestamp:<=2016-01-02 timesSeen:<=10")
        assert result == {
            "tags": {},
            "query": "",
            "times_seen_upper": 10,
            "times_seen_upper_inclusive": True,
            "date_to": datetime(2016, 1, 2, tzinfo=timezone.utc),
            "date_to_inclusive": True,
        }

</source>
<source file="systems/sentry-22.2.0/tests/sentry/search/test_utils.py" startline="268" endline="279" pcid="10955">
    def test_less_than_comparator(self):
        result = self.parse_query("event.timestamp:<2016-01-02 timesSeen:<10")
        assert result == {
            "tags": {},
            "query": "",
            "times_seen_upper": 10,
            "times_seen_upper_inclusive": False,
            "date_to": datetime(2016, 1, 2, tzinfo=timezone.utc),
            "date_to_inclusive": False,
        }

    # TODO: query parser for '<=' timestamp should set inclusive to True.
</source>
<source file="systems/sentry-22.2.0/tests/sentry/search/test_utils.py" startline="257" endline="267" pcid="10954">
    def test_greater_than_equal_comparator(self):
        result = self.parse_query("timesSeen:>=10 event.timestamp:>=2016-01-02")
        assert result == {
            "tags": {},
            "query": "",
            "times_seen_lower": 10,
            "times_seen_lower_inclusive": True,
            "date_from": datetime(2016, 1, 2, tzinfo=timezone.utc),
            "date_from_inclusive": True,
        }

</source>
</class>

<class classid="126" nclones="3" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/acceptance/test_performance_vital_detail.py" startline="35" endline="50" pcid="11180">
    def test_with_data(self, mock_now):

        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)

        event = load_data("transaction", timestamp=before_now(minutes=1))
        self.store_event(data=event, project_id=self.project.id)
        self.project.update(flags=F("flags").bitor(Project.flags.has_transactions))

        with self.feature(FEATURE_NAMES):
            self.browser.get(self.path)
            self.page.wait_until_loaded()

            self.browser.wait_until_not(
                '[data-test-id="grid-editable"] [data-test-id="empty-state"]', timeout=2
            )
            self.browser.snapshot("performance vital detail - with data")
</source>
<source file="systems/sentry-22.2.0/tests/acceptance/test_performance_overview.py" startline="43" endline="59" pcid="11324">
    def test_with_data(self, mock_now):
        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)

        event = load_data("transaction", timestamp=before_now(minutes=1))
        self.store_event(data=event, project_id=self.project.id)
        self.project.update(flags=F("flags").bitor(Project.flags.has_transactions))

        with self.feature(FEATURE_NAMES):
            self.browser.get(self.path)
            self.page.wait_until_loaded()

            # This test is flakey in that we sometimes load this page before the event is processed
            # depend on pytest-retry to reload the page
            self.browser.wait_until_not(
                '[data-test-id="grid-editable"] [data-test-id="empty-state"]', timeout=2
            )
            self.browser.snapshot("performance overview - with data")
</source>
<source file="systems/sentry-22.2.0/tests/acceptance/test_performance_landing.py" startline="34" endline="50" pcid="11186">
    def test_with_data(self, mock_now):
        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)

        event = load_data("transaction", timestamp=before_now(minutes=1))
        self.store_event(data=event, project_id=self.project.id)
        self.project.update(flags=F("flags").bitor(Project.flags.has_transactions))

        with self.feature(FEATURE_NAMES):
            self.browser.get(self.path)
            self.page.wait_until_loaded()

            # This test is flakey in that we sometimes load this page before the event is processed
            # depend on pytest-retry to reload the page
            self.browser.wait_until_not(
                '[data-test-id="grid-editable"] [data-test-id="empty-state"]', timeout=2
            )
            self.browser.snapshot("performance landing - with data")
</source>
</class>

<class classid="127" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/acceptance/test_performance_landing.py" startline="20" endline="32" pcid="11185">
    def setUp(self):
        super().setUp()
        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
        self.team = self.create_team(
            organization=self.org, name="Mariachi Band", members=[self.user]
        )
        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
        self.group = self.create_group(project=self.project)
        self.login_as(self.user)
        self.path = f"/organizations/{self.org.slug}/performance/"

        self.page = BasePage(self.browser)

</source>
<source file="systems/sentry-22.2.0/tests/acceptance/test_performance_overview.py" startline="20" endline="32" pcid="11322">
    def setUp(self):
        super().setUp()
        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
        self.team = self.create_team(
            organization=self.org, name="Mariachi Band", members=[self.user]
        )
        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
        self.group = self.create_group(project=self.project)
        self.login_as(self.user)
        self.path = f"/organizations/{self.org.slug}/performance/"

        self.page = BasePage(self.browser)

</source>
</class>

<class classid="128" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/acceptance/test_organization_user_feedback.py" startline="7" endline="18" pcid="11298">
    def setUp(self):
        super().setUp()
        self.user = self.create_user("foo@example.com")
        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
        self.team = self.create_team(
            organization=self.org, name="Mariachi Band", members=[self.user]
        )
        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
        self.login_as(self.user)
        self.path = f"/organizations/{self.org.slug}/user-feedback/"
        self.project.update(first_event=timezone.now())

</source>
<source file="systems/sentry-22.2.0/tests/acceptance/test_project_user_feedback.py" startline="7" endline="18" pcid="11438">
    def setUp(self):
        super().setUp()
        self.user = self.create_user("foo@example.com")
        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
        self.team = self.create_team(
            organization=self.org, name="Mariachi Band", members=[self.user]
        )
        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
        self.login_as(self.user)
        self.path = f"/{self.org.slug}/{self.project.slug}/user-feedback/"
        self.project.update(first_event=timezone.now())

</source>
</class>

<class classid="129" nclones="2" nlines="18" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry_plugins/pivotal/test_pivotal_plugin.py" startline="34" endline="51" pcid="11514">
    def test_no_secrets(self):
        self.user = self.create_user("foo@example.com")
        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
        self.team = self.create_team(organization=self.org, name="Mariachi Band")
        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
        self.login_as(self.user)
        self.plugin.set_option("token", "abcdef", self.project)
        url = reverse(
            "sentry-api-0-project-plugin-details",
            args=[self.org.slug, self.project.slug, "pivotal"],
        )
        res = self.client.get(url)
        config = json.loads(res.content)["config"]
        token_config = [item for item in config if item["name"] == "token"][0]
        assert token_config.get("type") == "secret"
        assert token_config.get("value") is None
        assert token_config.get("hasSavedValue") is True
        assert token_config.get("prefix") == "abcd"
</source>
<source file="systems/sentry-22.2.0/tests/sentry_plugins/pagerduty/test_plugin.py" startline="98" endline="115" pcid="11560">
    def test_no_secrets(self):
        self.user = self.create_user("foo@example.com")
        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
        self.team = self.create_team(organization=self.org, name="Mariachi Band")
        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
        self.login_as(self.user)
        self.plugin.set_option("service_key", "abcdef", self.project)
        url = reverse(
            "sentry-api-0-project-plugin-details",
            args=[self.org.slug, self.project.slug, "pagerduty"],
        )
        res = self.client.get(url)
        config = json.loads(res.content)["config"]
        key_config = [item for item in config if item["name"] == "service_key"][0]
        assert key_config.get("type") == "secret"
        assert key_config.get("value") is None
        assert key_config.get("hasSavedValue") is True
        assert key_config.get("prefix") == "abcd"
</source>
</class>

<class classid="130" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/sentry_plugins/github/endpoints/test_webhooks.py" startline="36" endline="56" pcid="11627">
    def test_unregistered_event(self):
        project = self.project  # force creation
        url = f"/plugins/github/organizations/{project.organization.id}/webhook/"

        secret = "b3002c3e321d4b7880360d397db2ccfd"

        OrganizationOption.objects.set_value(
            organization=project.organization, key="github:webhook_secret", value=secret
        )

        response = self.client.post(
            path=url,
            data=PUSH_EVENT_EXAMPLE,
            content_type="application/json",
            HTTP_X_GITHUB_EVENT="UnregisteredEvent",
            HTTP_X_HUB_SIGNATURE="sha1=98196e70369945ffa6b248cf70f7dc5e46dff241",
            HTTP_X_GITHUB_DELIVERY=str(uuid4()),
        )

        assert response.status_code == 204

</source>
<source file="systems/sentry-22.2.0/tests/sentry_plugins/github/endpoints/test_webhooks.py" startline="57" endline="79" pcid="11628">
    def test_invalid_signature_event(self):
        project = self.project  # force creation

        url = f"/plugins/github/organizations/{project.organization.id}/webhook/"

        secret = "2d7565c3537847b789d6995dca8d9f84"

        OrganizationOption.objects.set_value(
            organization=project.organization, key="github:webhook_secret", value=secret
        )

        response = self.client.post(
            path=url,
            data=PUSH_EVENT_EXAMPLE,
            content_type="application/json",
            HTTP_X_GITHUB_EVENT="push",
            HTTP_X_HUB_SIGNATURE="sha1=33521abeaaf9a57c2abf486e0ccd54d23cf36fec",
            HTTP_X_GITHUB_DELIVERY=str(uuid4()),
        )

        assert response.status_code == 401


</source>
</class>

<class classid="131" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_discover_query.py" startline="203" endline="219" pcid="11738">
    def test_invalid_range_value(self):
        with self.feature("organizations:discover"):
            url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
            response = self.client.post(
                url,
                {
                    "projects": [self.project.id],
                    "fields": ["message", "platform"],
                    "range": "1x",
                    "orderby": "-timestamp",
                    "start": None,
                    "end": None,
                },
            )

        assert response.status_code == 400, response.content

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_discover_query.py" startline="498" endline="514" pcid="11753">
    def test_invalid_project(self):
        with self.feature("organizations:discover"):
            url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
            response = self.client.post(
                url,
                {
                    "projects": [self.other_project.id],
                    "fields": ["message", "platform"],
                    "range": "14d",
                    "orderby": "-timestamp",
                    "start": None,
                    "end": None,
                },
            )

        assert response.status_code == 403, response.content

</source>
</class>

<class classid="132" nclones="3" nlines="17" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_discover_query.py" startline="296" endline="313" pcid="11743">
    def test_array_condition_equals(self):
        with self.feature("organizations:discover"):
            url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
            response = self.client.post(
                url,
                {
                    "projects": [self.project.id],
                    "conditions": [["error.type", "=", "ValidationError"]],
                    "fields": ["message"],
                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
                    "orderby": "-timestamp",
                    "range": None,
                },
            )
        assert response.status_code == 200, response.content
        assert len(response.data["data"]) == 1

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_discover_query.py" startline="314" endline="332" pcid="11744">
    def test_array_condition_not_equals(self):
        with self.feature("organizations:discover"):
            url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
            response = self.client.post(
                url,
                {
                    "projects": [self.project.id],
                    "conditions": [["error.type", "!=", "ValidationError"]],
                    "fields": ["message"],
                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
                    "orderby": "-timestamp",
                    "range": None,
                },
            )

        assert response.status_code == 200, response.content
        assert len(response.data["data"]) == 0

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_discover_query.py" startline="333" endline="351" pcid="11745">
    def test_array_condition_custom_tag(self):
        with self.feature("organizations:discover"):
            url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
            response = self.client.post(
                url,
                {
                    "projects": [self.project.id],
                    "conditions": [["error.custom", "!=", "custom"]],
                    "fields": ["message"],
                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
                    "orderby": "-timestamp",
                    "range": None,
                },
            )

        assert response.status_code == 200, response.content
        assert len(response.data["data"]) == 0

</source>
</class>

<class classid="133" nclones="2" nlines="25" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_group_events_latest.py" startline="7" endline="36" pcid="11851">
    def setUp(self):
        super().setUp()
        self.login_as(user=self.user)

        project = self.create_project()
        min_ago = iso_format(before_now(minutes=1))
        two_min_ago = iso_format(before_now(minutes=2))

        self.event1 = self.store_event(
            data={
                "event_id": "a" * 32,
                "environment": "staging",
                "fingerprint": ["group_1"],
                "timestamp": two_min_ago,
            },
            project_id=project.id,
        )

        self.event2 = self.store_event(
            data={
                "event_id": "b" * 32,
                "environment": "production",
                "fingerprint": ["group_1"],
                "timestamp": min_ago,
            },
            project_id=project.id,
        )

        self.group = Group.objects.first()

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_group_events_oldest.py" startline="7" endline="35" pcid="11918">
    def setUp(self):
        super().setUp()
        self.login_as(user=self.user)

        project = self.create_project()
        min_ago = iso_format(before_now(minutes=1))
        two_min_ago = iso_format(before_now(minutes=2))

        self.event1 = self.store_event(
            data={
                "event_id": "a" * 32,
                "environment": "staging",
                "fingerprint": ["group_1"],
                "timestamp": two_min_ago,
            },
            project_id=project.id,
        )
        self.event2 = self.store_event(
            data={
                "event_id": "b" * 32,
                "environment": "production",
                "fingerprint": ["group_1"],
                "timestamp": min_ago,
            },
            project_id=project.id,
        )

        self.group = Group.objects.first()

</source>
</class>

<class classid="134" nclones="2" nlines="42" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_spans_performance.py" startline="57" endline="110" pcid="11857">
    def create_event(self, **kwargs):
        if "span_id" not in kwargs:
            kwargs["span_id"] = "a" * 16

        if "start_timestamp" not in kwargs:
            kwargs["start_timestamp"] = self.min_ago

        if "timestamp" not in kwargs:
            kwargs["timestamp"] = self.min_ago + timedelta(seconds=8)

        if "trace_context" not in kwargs:
            # should appear for all of the pXX metrics
            kwargs["trace_context"] = {
                "op": "http.server",
                "hash": "ab" * 8,
                "exclusive_time": 4.0,
            }

        if "spans" not in kwargs:
            kwargs["spans"] = [
                # should appear for the sum metric
                {
                    "same_process_as_parent": True,
                    "parent_span_id": "a" * 16,
                    "span_id": x * 16,
                    "start_timestamp": iso_format(self.min_ago + timedelta(seconds=1)),
                    "timestamp": iso_format(self.min_ago + timedelta(seconds=4)),
                    "op": "django.middleware",
                    "description": "middleware span",
                    "hash": "cd" * 8,
                    "exclusive_time": 3.0,
                }
                for x in ["b", "c"]
            ] + [
                # should appear for the count metric
                {
                    "same_process_as_parent": True,
                    "parent_span_id": "a" * 16,
                    "span_id": x * 16,
                    "start_timestamp": iso_format(self.min_ago + timedelta(seconds=4)),
                    "timestamp": iso_format(self.min_ago + timedelta(seconds=5)),
                    "op": "django.view",
                    "description": "view span",
                    "hash": "ef" * 8,
                    "exclusive_time": 1.0,
                }
                for x in ["d", "e", "f"]
            ]

        data = load_data("transaction", **kwargs)
        data["transaction"] = "root transaction"

        return self.store_event(data, project_id=self.project.id)

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_span_ops.py" startline="25" endline="78" pcid="12105">
    def create_event(self, **kwargs):
        if "span_id" not in kwargs:
            kwargs["span_id"] = "a" * 16

        if "start_timestamp" not in kwargs:
            kwargs["start_timestamp"] = self.min_ago

        if "timestamp" not in kwargs:
            kwargs["timestamp"] = self.min_ago + timedelta(seconds=8)

        if "trace_context" not in kwargs:
            # should appear for all of the pXX metrics
            kwargs["trace_context"] = {
                "op": "http.server",
                "hash": "ab" * 8,
                "exclusive_time": 4.0,
            }

        if "spans" not in kwargs:
            kwargs["spans"] = [
                # should appear for the sum metric
                {
                    "same_process_as_parent": True,
                    "parent_span_id": "a" * 16,
                    "span_id": x * 16,
                    "start_timestamp": iso_format(self.min_ago + timedelta(seconds=1)),
                    "timestamp": iso_format(self.min_ago + timedelta(seconds=4)),
                    "op": "django.middleware",
                    "description": "middleware span",
                    "hash": "cd" * 8,
                    "exclusive_time": 3.0,
                }
                for x in ["b", "c"]
            ] + [
                # should appear for the count metric
                {
                    "same_process_as_parent": True,
                    "parent_span_id": "a" * 16,
                    "span_id": x * 16,
                    "start_timestamp": iso_format(self.min_ago + timedelta(seconds=4)),
                    "timestamp": iso_format(self.min_ago + timedelta(seconds=5)),
                    "op": "django.view",
                    "description": "view span",
                    "hash": "ef" * 8,
                    "exclusive_time": 1.0,
                }
                for x in ["d", "e", "f"]
            ]

        data = load_data("transaction", **kwargs)
        data["transaction"] = "root transaction"

        return self.store_event(data, project_id=self.project.id)

</source>
</class>

<class classid="135" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_spans_performance.py" startline="415" endline="428" pcid="11866">
    def test_no_projects(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        self.login_as(user=user)

        url = reverse(
            self.URL,
            kwargs={"organization_slug": org.slug},
        )

        with self.feature(self.FEATURES):
            response = self.client.get(url, format="json")
        assert response.status_code == 404, response.content

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_spans_performance.py" startline="976" endline="989" pcid="11882">
    def test_no_projects(self):
        user = self.create_user()
        org = self.create_organization(owner=user)
        self.login_as(user=user)

        url = reverse(
            self.URL,
            kwargs={"organization_slug": org.slug},
        )

        with self.feature(self.FEATURES):
            response = self.client.get(url, format="json")
        assert response.status_code == 404, response.content

</source>
</class>

<class classid="136" nclones="2" nlines="27" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_spans_performance.py" startline="1001" endline="1035" pcid="11884">
    def test_bad_span_param(self):
        with self.feature(self.FEATURES):
            response = self.client.get(
                self.url,
                data={"project": self.project.id, "span": ["http.server"]},
                format="json",
            )

        assert response.status_code == 400, response.content
        assert response.data == {
            "span": [
                ErrorDetail(
                    "span must consist of of a span op and a valid 16 character hex delimited by a colon (:)",
                    code="invalid",
                )
            ]
        }

        with self.feature(self.FEATURES):
            response = self.client.get(
                self.url,
                data={"project": self.project.id, "span": ["http.server:ab"]},
                format="json",
            )

        assert response.status_code == 400, response.content
        assert response.data == {
            "span": [
                ErrorDetail(
                    "spanGroup must be a valid 16 character hex (containing only digits, or a-f characters)",
                    code="invalid",
                )
            ]
        }

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_spans_performance.py" startline="1109" endline="1143" pcid="11889">
    def test_bad_span_param(self):
        with self.feature(self.FEATURES):
            response = self.client.get(
                self.url,
                data={"project": self.project.id, "span": ["http.server"]},
                format="json",
            )

        assert response.status_code == 400, response.content
        assert response.data == {
            "span": [
                ErrorDetail(
                    "span must consist of of a span op and a valid 16 character hex delimited by a colon (:)",
                    code="invalid",
                )
            ]
        }

        with self.feature(self.FEATURES):
            response = self.client.get(
                self.url,
                data={"project": self.project.id, "span": ["http.server:ab"]},
                format="json",
            )

        assert response.status_code == 400, response.content
        assert response.data == {
            "span": [
                ErrorDetail(
                    "spanGroup must be a valid 16 character hex (containing only digits, or a-f characters)",
                    code="invalid",
                )
            ]
        }

</source>
</class>

<class classid="137" nclones="2" nlines="12" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_has_measurements.py" startline="126" endline="143" pcid="11913">
    def test_has_event_and_no_recent_web_measurements(self):
        # make sure the event is older than 7 days
        transaction_data = load_data("transaction", timestamp=before_now(days=8))
        # make sure the transaction has some web measurements
        transaction_data["measurements"] = {"lcp": {"value": 100}}
        self.store_event(transaction_data, self.project.id)

        response = self.do_request(
            {
                "project": [self.project.id],
                "transaction": self.transaction_data["transaction"],
                "type": "web",
            }
        )

        assert response.status_code == 200, response.content
        assert response.data == {"measurements": False}

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_has_measurements.py" startline="160" endline="177" pcid="11915">
    def test_has_event_and_no_recent_mobile_measurements(self):
        # make sure the event is older than 7 days
        transaction_data = load_data("transaction", timestamp=before_now(days=8))
        # make sure the transaction has some web measurements
        transaction_data["measurements"] = {"app_start_cold": {"value": 100}}
        self.store_event(transaction_data, self.project.id)

        response = self.do_request(
            {
                "project": [self.project.id],
                "transaction": self.transaction_data["transaction"],
                "type": "mobile",
            }
        )

        assert response.status_code == 200, response.content
        assert response.data == {"measurements": False}

</source>
</class>

<class classid="138" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_has_measurements.py" startline="144" endline="159" pcid="11914">
    def test_has_event_and_web_measurements(self):
        # make sure the transaction has some web measurements
        self.transaction_data["measurements"] = {"lcp": {"value": 100}}
        self.store_event(self.transaction_data, self.project.id)

        response = self.do_request(
            {
                "project": [self.project.id],
                "transaction": self.transaction_data["transaction"],
                "type": "web",
            }
        )

        assert response.status_code == 200, response.content
        assert response.data == {"measurements": True}

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_has_measurements.py" startline="178" endline="194" pcid="11916">
    def test_has_event_and_mobile_measurements(self):
        # make sure the transaction has some mobile measurements
        self.transaction_data["measurements"] = {"app_start_cold": {"value": 100}}
        self.store_event(self.transaction_data, self.project.id)

        response = self.do_request(
            {
                "project": [self.project.id],
                "transaction": self.transaction_data["transaction"],
                "type": "mobile",
            }
        )

        assert response.status_code == 200, response.content
        assert response.data == {"measurements": True}


</source>
</class>

<class classid="139" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_tags.py" startline="68" endline="86" pcid="11925">
    def test_tag_caching(self, mock_snuba_query):
        user = self.create_user()
        org = self.create_organization()
        team = self.create_team(organization=org)
        self.create_member(organization=org, user=user, teams=[team])
        self.create_project(organization=org, teams=[team])
        self.login_as(user=user)

        with self.options({"snuba.tagstore.cache-tagkeys-rate": 1.0}):
            url = reverse("sentry-api-0-organization-tags", kwargs={"organization_slug": org.slug})
            response = self.client.get(url, {"use_cache": "1", "statsPeriod": "14d"}, format="json")
            assert response.status_code == 200, response.content
            assert mock_snuba_query.call_count == 1

            response = self.client.get(url, {"use_cache": "1", "statsPeriod": "14d"}, format="json")
            assert response.status_code == 200, response.content
            # Cause we're caching, we shouldn't call snuba again
            assert mock_snuba_query.call_count == 1

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_tags.py" startline="88" endline="107" pcid="11926">
    def test_different_statsperiod_caching(self, mock_snuba_query):
        user = self.create_user()
        org = self.create_organization()
        team = self.create_team(organization=org)
        self.create_member(organization=org, user=user, teams=[team])
        self.create_project(organization=org, teams=[team])
        self.login_as(user=user)

        with self.options({"snuba.tagstore.cache-tagkeys-rate": 1.0}):
            url = reverse("sentry-api-0-organization-tags", kwargs={"organization_slug": org.slug})
            response = self.client.get(url, {"use_cache": "1", "statsPeriod": "14d"}, format="json")
            assert response.status_code == 200, response.content
            # Empty cache, we should query snuba
            assert mock_snuba_query.call_count == 1

            response = self.client.get(url, {"use_cache": "1", "statsPeriod": "30d"}, format="json")
            assert response.status_code == 200, response.content
            # With a different statsPeriod, we shouldn't use cache and still query snuba
            assert mock_snuba_query.call_count == 2

</source>
</class>

<class classid="140" nclones="3" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_stats.py" startline="167" endline="179" pcid="11936">
    def test_with_event_count_flag(self):
        response = self.do_request(
            data={
                "start": iso_format(self.day_ago),
                "end": iso_format(self.day_ago + timedelta(hours=2)),
                "interval": "1h",
                "yAxis": "event_count",
            },
        )

        assert response.status_code == 200, response.content
        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 1}], [{"count": 2}]]

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_stats.py" startline="283" endline="294" pcid="11939">
    def test_aggregate_function_count(self):
        response = self.do_request(
            data={
                "start": iso_format(self.day_ago),
                "end": iso_format(self.day_ago + timedelta(hours=2)),
                "interval": "1h",
                "yAxis": "count()",
            },
        )
        assert response.status_code == 200, response.content
        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 1}], [{"count": 2}]]

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_stats.py" startline="306" endline="317" pcid="11941">
    def test_aggregate_function_user_count(self):
        response = self.do_request(
            data={
                "start": iso_format(self.day_ago),
                "end": iso_format(self.day_ago + timedelta(hours=2)),
                "interval": "1h",
                "yAxis": "count_unique(user)",
            },
        )
        assert response.status_code == 200, response.content
        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 1}], [{"count": 1}]]

</source>
</class>

<class classid="141" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_stats.py" startline="295" endline="305" pcid="11940">
    def test_invalid_aggregate(self):
        response = self.do_request(
            data={
                "start": iso_format(self.day_ago),
                "end": iso_format(self.day_ago + timedelta(hours=2)),
                "interval": "1h",
                "yAxis": "rubbish",
            },
        )
        assert response.status_code == 400, response.content

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_stats.py" startline="318" endline="328" pcid="11942">
    def test_aggregate_invalid(self):
        response = self.do_request(
            data={
                "start": iso_format(self.day_ago),
                "end": iso_format(self.day_ago + timedelta(hours=2)),
                "interval": "1h",
                "yAxis": "nope(lol)",
            },
        )
        assert response.status_code == 400, response.content

</source>
</class>

<class classid="142" nclones="2" nlines="20" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_stats.py" startline="555" endline="576" pcid="11951">
    def test_simple_multiple_yaxis(self):
        response = self.do_request(
            data={
                "start": iso_format(self.day_ago),
                "end": iso_format(self.day_ago + timedelta(hours=2)),
                "interval": "1h",
                "yAxis": ["user_count", "event_count"],
            },
        )

        assert response.status_code == 200, response.content
        assert response.data["user_count"]["order"] == 0
        assert [attrs for time, attrs in response.data["user_count"]["data"]] == [
            [{"count": 1}],
            [{"count": 1}],
        ]
        assert response.data["event_count"]["order"] == 1
        assert [attrs for time, attrs in response.data["event_count"]["data"]] == [
            [{"count": 1}],
            [{"count": 2}],
        ]

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_stats.py" startline="594" endline="615" pcid="11953">
    def test_equation_mixed_multi_yaxis(self):
        response = self.do_request(
            data={
                "start": iso_format(self.day_ago),
                "end": iso_format(self.day_ago + timedelta(hours=2)),
                "interval": "1h",
                "yAxis": ["count()", "equation|count() * 100"],
            },
        )

        assert response.status_code == 200, response.content
        assert response.data["count()"]["order"] == 0
        assert [attrs for time, attrs in response.data["count()"]["data"]] == [
            [{"count": 1}],
            [{"count": 2}],
        ]
        assert response.data["equation|count() * 100"]["order"] == 1
        assert [attrs for time, attrs in response.data["equation|count() * 100"]["data"]] == [
            [{"count": 100}],
            [{"count": 200}],
        ]

</source>
</class>

<class classid="143" nclones="4" nlines="25" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="60" endline="89" pcid="12007">
    def test_simple(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendType": "regression",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 2000,
                "count_percentage": 3.0,
                "trend_difference": 0.0,
                "trend_percentage": 1.0,
            }
        )
        self.assert_event(events["data"][0])

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="152" endline="181" pcid="12010">
    def test_p95(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "p95()",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 9200,
                "count_percentage": 3.0,
                "trend_difference": 7200.0,
                "trend_percentage": 4.6,
            }
        )
        self.assert_event(events["data"][0])

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="182" endline="211" pcid="12011">
    def test_p99(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "p99()",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 9840,
                "count_percentage": 3.0,
                "trend_difference": 7840.0,
                "trend_percentage": 4.92,
            }
        )
        self.assert_event(events["data"][0])

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="122" endline="151" pcid="12009">
    def test_p75(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "p75()",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 6000,
                "count_percentage": 3.0,
                "trend_difference": 4000.0,
                "trend_percentage": 3.0,
            }
        )
        self.assert_event(events["data"][0])

</source>
</class>

<class classid="144" nclones="2" nlines="24" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="212" endline="240" pcid="12012">
    def test_trend_percentage_query_alias(self):
        queries = [
            ("trend_percentage():>0%", "regression", 1),
            ("trend_percentage():392%", "regression", 1),
            ("trend_percentage():>0%", "improved", 0),
            ("trend_percentage():392%", "improved", 0),
        ]
        for query_data in queries:
            with self.feature(self.features):
                response = self.client.get(
                    self.url,
                    format="json",
                    data={
                        "end": iso_format(self.day_ago + timedelta(hours=2)),
                        "start": iso_format(self.day_ago),
                        "field": ["project", "transaction"],
                        "query": f"event.type:transaction {query_data[0]}",
                        "trendType": query_data[1],
                        # Use p99 since it has the most significant change
                        "trendFunction": "p99()",
                    },
                )

            assert response.status_code == 200, response.content

            events = response.data

            assert len(events["data"]) == query_data[2], query_data

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="263" endline="291" pcid="12014">
    def test_trend_difference_query_alias(self):
        queries = [
            ("trend_difference():>7s", "regression", 1),
            ("trend_difference():7.84s", "regression", 1),
            ("trend_difference():>7s", "improved", 0),
            ("trend_difference():7.84s", "improved", 0),
        ]
        for query_data in queries:
            with self.feature(self.features):
                response = self.client.get(
                    self.url,
                    format="json",
                    data={
                        "end": iso_format(self.day_ago + timedelta(hours=2)),
                        "start": iso_format(self.day_ago),
                        "field": ["project", "transaction"],
                        "query": f"event.type:transaction {query_data[0]}",
                        "trendType": query_data[1],
                        # Use p99 since it has the most significant change
                        "trendFunction": "p99()",
                    },
                )

            assert response.status_code == 200, response.content

            events = response.data

            assert len(events["data"]) == query_data[2], query_data

</source>
</class>

<class classid="145" nclones="2" nlines="15" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="322" endline="337" pcid="12016">
    def test_invalid_trend_function(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "apdex(450)",
                    "project": [self.project.id],
                },
            )
            assert response.status_code == 400

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="774" endline="789" pcid="12029">
    def test_invalid_trend_function(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "apdex(450)",
                    "project": [self.project.id],
                },
            )
            assert response.status_code == 400

</source>
</class>

<class classid="146" nclones="2" nlines="27" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="338" endline="369" pcid="12017">
    def test_divide_by_zero(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    # Set the timeframe to where the second range has no transactions so all the counts/percentile are 0
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago - timedelta(hours=2)),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "project": [self.project.id],
                },
            )
        assert response.status_code == 200, response.content

        events = response.data

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "count_range_2": 4,
                "count_range_1": 0,
                "aggregate_range_1": 0,
                "aggregate_range_2": 2000.0,
                "count_percentage": None,
                "trend_difference": 0,
                "trend_percentage": None,
            }
        )
        self.assert_event(events["data"][0])

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="370" endline="403" pcid="12018">
    def test_auto_aggregation(self):
        # absolute_correlation is automatically added, and not a part of data otherwise
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    # Set the timeframe to where the second range has no transactions so all the counts/percentile are 0
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago - timedelta(hours=2)),
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction absolute_correlation():>0.2",
                    "project": [self.project.id],
                },
            )
        assert response.status_code == 200, response.content

        events = response.data

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "count_range_2": 4,
                "count_range_1": 0,
                "aggregate_range_1": 0,
                "aggregate_range_2": 2000.0,
                "count_percentage": None,
                "trend_difference": 0,
                "trend_percentage": None,
            }
        )
        self.assert_event(events["data"][0])


</source>
</class>

<class classid="147" nclones="4" nlines="32" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="450" endline="487" pcid="12021">
    def test_web_vital(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "interval": "1h",
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "p50(measurements.lcp)",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data["events"]
        result_stats = response.data["stats"]

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 2000,
                "count_percentage": 3.0,
                "trend_difference": 0.0,
                "trend_percentage": 1.0,
            }
        )
        self.assert_event(events["data"][0])

        stats = result_stats[f"{self.project.slug},{self.prototype['transaction']}"]
        assert [attrs for time, attrs in stats["data"]] == [
            [{"count": 2000}],
            [{"count": 2000}],
        ]

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="488" endline="525" pcid="12022">
    def test_p75(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "interval": "1h",
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "p75()",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data["events"]
        result_stats = response.data["stats"]

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 6000,
                "count_percentage": 3.0,
                "trend_difference": 4000.0,
                "trend_percentage": 3.0,
            }
        )
        self.assert_event(events["data"][0])

        stats = result_stats[f"{self.project.slug},{self.prototype['transaction']}"]
        assert [attrs for time, attrs in stats["data"]] == [
            [{"count": 2000}],
            [{"count": 6000}],
        ]

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="526" endline="563" pcid="12023">
    def test_p95(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "interval": "1h",
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "p95()",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data["events"]
        result_stats = response.data["stats"]

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 9200,
                "count_percentage": 3.0,
                "trend_difference": 7200.0,
                "trend_percentage": 4.6,
            }
        )
        self.assert_event(events["data"][0])

        stats = result_stats[f"{self.project.slug},{self.prototype['transaction']}"]
        assert [attrs for time, attrs in stats["data"]] == [
            [{"count": 2000}],
            [{"count": 9200}],
        ]

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_trends.py" startline="564" endline="601" pcid="12024">
    def test_p99(self):
        with self.feature(self.features):
            response = self.client.get(
                self.url,
                format="json",
                data={
                    "end": iso_format(self.day_ago + timedelta(hours=2)),
                    "start": iso_format(self.day_ago),
                    "interval": "1h",
                    "field": ["project", "transaction"],
                    "query": "event.type:transaction",
                    "trendFunction": "p99()",
                },
            )

        assert response.status_code == 200, response.content

        events = response.data["events"]
        result_stats = response.data["stats"]

        assert len(events["data"]) == 1
        self.expected_data.update(
            {
                "aggregate_range_1": 2000,
                "aggregate_range_2": 9840,
                "count_percentage": 3.0,
                "trend_difference": 7840.0,
                "trend_percentage": 4.92,
            }
        )
        self.assert_event(events["data"][0])

        stats = result_stats[f"{self.project.slug},{self.prototype['transaction']}"]
        assert [attrs for time, attrs in stats["data"]] == [
            [{"count": 2000}],
            [{"count": 9840}],
        ]

</source>
</class>

<class classid="148" nclones="2" nlines="11" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="61" endline="72" pcid="12063">
    def do_request(self, query, features=None):
        if features is None:
            features = {"organizations:performance-view": True}
        features.update(self.features)
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-organization-events-histogram",
            kwargs={"organization_slug": self.organization.slug},
        )
        with self.feature(features):
            return self.client.get(url, query, format="json")

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_geo.py" startline="13" endline="24" pcid="12126">
    def do_request(self, query, features=None):
        if features is None:
            features = {"organizations:dashboards-basic": True}
        features.update(self.features)
        self.login_as(user=self.user)
        url = reverse(
            "sentry-api-0-organization-events-geo",
            kwargs={"organization_slug": self.organization.slug},
        )
        with self.feature(features):
            return self.client.get(url, query, format="json")

</source>
</class>

<class classid="149" nclones="3" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="261" endline="276" pcid="12077">
    def test_bad_params_invalid_min(self):
        for array_column in ARRAY_COLUMNS:
            alias = get_array_column_alias(array_column)
            query = {
                "project": [self.project.id],
                "field": [f"{alias}.foo", f"{alias}.bar"],
                "numBuckets": 10,
                "min": "qux",
            }

            response = self.do_request(query)
            assert response.status_code == 400, f"failing for {array_column}"
            assert response.data == {
                "min": ["A valid number is required."],
            }, f"failing for {array_column}"

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="277" endline="292" pcid="12078">
    def test_bad_params_invalid_max(self):
        for array_column in ARRAY_COLUMNS:
            alias = get_array_column_alias(array_column)
            query = {
                "project": [self.project.id],
                "field": [f"{alias}.foo", f"{alias}.bar"],
                "numBuckets": 10,
                "max": "qux",
            }

            response = self.do_request(query)
            assert response.status_code == 400, f"failing for {array_column}"
            assert response.data == {
                "max": ["A valid number is required."],
            }, f"failing for {array_column}"

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="852" endline="867" pcid="12096">
    def test_bad_params_invalid_data_filter(self):
        for array_column in ARRAY_COLUMNS:
            alias = get_array_column_alias(array_column)
            query = {
                "project": [self.project.id],
                "field": [f"{alias}.foo", f"{alias}.bar"],
                "numBuckets": 10,
                "dataFilter": "invalid",
            }

            response = self.do_request(query)
            assert response.status_code == 400, f"failing for {array_column}"
            assert response.data == {
                "dataFilter": ['"invalid" is not a valid choice.'],
            }, f"failing for {array_column}"

</source>
</class>

<class classid="150" nclones="2" nlines="25" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="307" endline="335" pcid="12080">
    def test_histogram_simple(self):
        # range is [0, 5), so it is divided into 5 buckets of width 1
        specs = [
            (0, 1, [("foo", 1)]),
            (1, 2, [("foo", 1)]),
            (2, 3, [("foo", 1)]),
            (4, 5, [("foo", 1)]),
        ]
        self.populate_events(specs)

        for array_column in ARRAY_COLUMNS:
            alias = get_array_column_alias(array_column)
            query = {
                "project": [self.project.id],
                "field": [f"{alias}.foo"],
                "numBuckets": 5,
            }

            response = self.do_request(query)
            assert response.status_code == 200, f"failing for {array_column}"
            expected = [
                (0, 1, [(f"{alias}.foo", 1)]),
                (1, 2, [(f"{alias}.foo", 1)]),
                (2, 3, [(f"{alias}.foo", 1)]),
                (3, 4, [(f"{alias}.foo", 0)]),
                (4, 5, [(f"{alias}.foo", 1)]),
            ]
            assert response.data == self.as_response_data(expected), f"failing for {array_column}"

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="449" endline="477" pcid="12085">
    def test_histogram_non_zero_offset(self):
        # range is [10, 15), so it is divided into 5 buckets of width 1
        specs = [
            (10, 11, [("foo", 1)]),
            (12, 13, [("foo", 1)]),
            (13, 14, [("foo", 1)]),
            (14, 15, [("foo", 1)]),
        ]
        self.populate_events(specs)

        for array_column in ARRAY_COLUMNS:
            alias = get_array_column_alias(array_column)
            query = {
                "project": [self.project.id],
                "field": [f"{alias}.foo"],
                "numBuckets": 5,
            }

            response = self.do_request(query)
            assert response.status_code == 200, f"failing for {array_column}"
            expected = [
                (10, 11, [(f"{alias}.foo", 1)]),
                (11, 12, [(f"{alias}.foo", 0)]),
                (12, 13, [(f"{alias}.foo", 1)]),
                (13, 14, [(f"{alias}.foo", 1)]),
                (14, 15, [(f"{alias}.foo", 1)]),
            ]
            assert response.data == self.as_response_data(expected), f"failing for {array_column}"

</source>
</class>

<class classid="151" nclones="2" nlines="22" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="367" endline="393" pcid="12082">
    def test_histogram_simple_using_given_min_above_queried_max(self):
        # All these events are out of range of the query parameters,
        # and should not appear in the results.
        specs = [
            (0, 1, [("foo", 1)]),
            (1, 2, [("foo", 1)]),
            (2, 3, [("foo", 1)]),
            (4, 5, [("foo", 1)]),
        ]
        self.populate_events(specs)

        for array_column in ARRAY_COLUMNS:
            alias = get_array_column_alias(array_column)
            query = {
                "project": [self.project.id],
                "field": [f"{alias}.foo"],
                "numBuckets": 5,
                "min": 6,
            }

            response = self.do_request(query)
            assert response.status_code == 200, f"failing for {array_column}"
            expected = [
                (6, 7, [(f"{alias}.foo", 0)]),
            ]
            assert response.data == self.as_response_data(expected), f"failing for {array_column}"

</source>
<source file="systems/sentry-22.2.0/tests/snuba/api/endpoints/test_organization_events_histogram.py" startline="394" endline="420" pcid="12083">
    def test_histogram_simple_using_given_max_below_queried_min(self):
        # All these events are out of range of the query parameters,
        # and should not appear in the results.
        specs = [
            (6, 7, [("foo", 1)]),
            (8, 9, [("foo", 1)]),
            (10, 11, [("foo", 1)]),
            (12, 13, [("foo", 1)]),
        ]
        self.populate_events(specs)

        for array_column in ARRAY_COLUMNS:
            alias = get_array_column_alias(array_column)
            query = {
                "project": [self.project.id],
                "field": [f"{alias}.foo"],
                "numBuckets": 5,
                "max": 6,
            }

            response = self.do_request(query)
            assert response.status_code == 200, f"failing for {array_column}"
            expected = [
                (5, 6, [(f"{alias}.foo", 0)]),
            ]
            assert response.data == self.as_response_data(expected), f"failing for {array_column}"

</source>
</class>

<class classid="152" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/rules/conditions/test_event_frequency.py" startline="211" endline="227" pcid="12181">
    def increment(self, event, count, environment=None, timestamp=None):
        data = {
            "fingerprint": event.data["fingerprint"],
            "timestamp": iso_format(timestamp) if timestamp else iso_format(before_now(minutes=1)),
        }
        if environment:
            data["environment"] = environment

        for _ in range(count):
            event_data = deepcopy(data)
            event_data["user"] = {"id": uuid4().hex}
            self.store_event(
                data=event_data,
                project_id=self.project.id,
            )


</source>
<source file="systems/sentry-22.2.0/tests/snuba/rules/conditions/test_event_frequency.py" startline="289" endline="304" pcid="12185">
    def increment(self, event, count, environment=None, timestamp=None):
        data = {
            "fingerprint": event.data["fingerprint"],
            "timestamp": iso_format(timestamp) if timestamp else iso_format(before_now(minutes=1)),
        }
        if environment:
            data["environment"] = environment

        for _ in range(count):
            event_data = deepcopy(data)
            event_data["user"] = {"id": uuid4().hex}
            self.store_event(
                data=event_data,
                project_id=self.project.id,
            )

</source>
</class>

<class classid="153" nclones="2" nlines="10" similarity="100">
<source file="systems/sentry-22.2.0/tests/snuba/tsdb/test_tsdb_backend.py" startline="169" endline="181" pcid="12199">
    def test_range_releases(self):
        dts = [self.now + timedelta(hours=i) for i in range(4)]
        assert self.db.get_range(
            TSDBModel.release, [self.release1.id], dts[0], dts[-1], rollup=3600
        ) == {
            self.release1.id: [
                (timestamp(dts[0]), 0),
                (timestamp(dts[1]), 6),
                (timestamp(dts[2]), 0),
                (timestamp(dts[3]), 0),
            ]
        }

</source>
<source file="systems/sentry-22.2.0/tests/snuba/tsdb/test_tsdb_backend.py" startline="182" endline="194" pcid="12200">
    def test_range_project(self):
        dts = [self.now + timedelta(hours=i) for i in range(4)]
        assert self.db.get_range(
            TSDBModel.project, [self.proj1.id], dts[0], dts[-1], rollup=3600
        ) == {
            self.proj1.id: [
                (timestamp(dts[0]), 6),
                (timestamp(dts[1]), 6),
                (timestamp(dts[2]), 6),
                (timestamp(dts[3]), 6),
            ]
        }

</source>
</class>

<class classid="154" nclones="2" nlines="14" similarity="100">
<source file="systems/sentry-22.2.0/tests/apidocs/endpoints/releases/test_project_release_files.py" startline="41" endline="56" pcid="12274">
    def test_post(self):
        data = {
            "name": "http://example.com/application.js",
            "header": "X-SourceMap: http://example.com",
            "file": SimpleUploadedFile(
                "application.js", b"function() { }", content_type="application/javascript"
            ),
        }
        response = self.client.post(
            self.url,
            data,
            format="multipart",
        )
        request = RequestFactory().post(self.url, data=data, content_type="multipart/form-data")

        self.validate_schema(request, response)
</source>
<source file="systems/sentry-22.2.0/tests/apidocs/endpoints/releases/test_organization_release_files.py" startline="36" endline="51" pcid="12282">
    def test_post(self):
        data = {
            "name": "http://example.com/application.js",
            "header": "X-SourceMap: http://example.com",
            "file": SimpleUploadedFile(
                "application.js", b"function() { }", content_type="application/javascript"
            ),
        }
        response = self.client.post(
            self.url,
            data,
            format="multipart",
        )
        request = RequestFactory().post(self.url, data=data, content_type="multipart/form-data")

        self.validate_schema(request, response)
</source>
</class>

</clones>
