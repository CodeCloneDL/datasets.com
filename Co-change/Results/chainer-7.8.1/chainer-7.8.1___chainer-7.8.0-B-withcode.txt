<clonepair1>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="479" endline="505" pcid="9680"></source>
    def generate_inputs(self):
        h_shape = (self.n_layers, self.batches[0], self.hidden_size)
        dtype = self.in_dtypes[0]

        h = array_utils.uniform(h_shape, dtype)

        in_size = self.input_size
        out_size = self.hidden_size
        xs = [array_utils.uniform((self.batches[b], in_size), dtype)
              for b in range(len(self.batches))]

        def w_in(i, j):
            return in_size if i == 0 and j < 1 else out_size

        inputs = []
        inputs.append(h)
        for i in range(len(self.batches)):
            inputs.append(xs[i])

        for n in range(self.n_layers):
            for i in range(2):
                inputs.append(array_utils.uniform(
                    (out_size, w_in(n, i)), dtype))
            for i in range(2):
                inputs.append(array_utils.uniform((out_size,), dtype))
        return tuple(inputs)

</clonepair1>

<clonepair1>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_rnn.py" startline="75" endline="98" pcid="6628"></source>
    def generate_inputs(self):
        h_shape = (self.n_layers, self.batches[0], self.hidden_size)
        dtype = self.dtype

        h = array(h_shape, dtype)
        in_size = self.input_size
        out_size = self.hidden_size
        xs = [array((self.batches[b], in_size), dtype)
              for b in range(len(self.batches))]

        def w_in(i, j):
            return in_size if i == 0 and j < 1 else out_size

        inputs = []
        inputs.append(h)
        for i in range(len(self.batches)):
            inputs.append(xs[i])
        for n in range(self.n_layers):
            for i in range(2):
                inputs.append(array((out_size, w_in(n, i)), dtype))
            for i in range(2):
                inputs.append(array((out_size,), dtype))
        return tuple(inputs)

</clonepair1>
<clonepair2>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="479" endline="505" pcid="9680"></source>
    def generate_inputs(self):
        h_shape = (self.n_layers, self.batches[0], self.hidden_size)
        dtype = self.in_dtypes[0]

        h = array_utils.uniform(h_shape, dtype)

        in_size = self.input_size
        out_size = self.hidden_size
        xs = [array_utils.uniform((self.batches[b], in_size), dtype)
              for b in range(len(self.batches))]

        def w_in(i, j):
            return in_size if i == 0 and j < 1 else out_size

        inputs = []
        inputs.append(h)
        for i in range(len(self.batches)):
            inputs.append(xs[i])

        for n in range(self.n_layers):
            for i in range(2):
                inputs.append(array_utils.uniform(
                    (out_size, w_in(n, i)), dtype))
            for i in range(2):
                inputs.append(array_utils.uniform((out_size,), dtype))
        return tuple(inputs)

</clonepair2>

<clonepair2>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_gru.py" startline="62" endline="85" pcid="6596"></source>
    def generate_inputs(self):
        h_shape = (self.n_layers, self.batches[0], self.hidden_size)
        dtype = numpy.float32

        h = array(h_shape, dtype)
        in_size = self.input_size
        out_size = self.hidden_size
        xs = [array((self.batches[b], in_size), dtype)
              for b in range(len(self.batches))]

        def w_in(i, j):
            return in_size if i == 0 and j < 3 else out_size

        inputs = []
        inputs.append(h)
        for i in range(len(self.batches)):
            inputs.append(xs[i])
        for n in range(self.n_layers):
            for i in range(6):
                inputs.append(array((out_size, w_in(n, i)), dtype))
            for i in range(6):
                inputs.append(array((out_size,), dtype))
        return tuple(inputs)

</clonepair2>
<clonepair3>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="506" endline="517" pcid="9682"></source>
    def process_input(self, inputs):
        h = inputs[0]
        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4
        return h, ws, bs, xs

</clonepair3>

<clonepair3>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_lstm.py" startline="141" endline="153" pcid="6581"></source>
    def process_inputs(self, inputs):
        h = inputs[0]
        c = inputs[1]
        xs = inputs[2: 2 + len(self.batches)]
        ws = []
        bs = []
        index = 2 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 8])
            bs.append(inputs[index + 8: index + 16])
            index += 16
        return h, c, ws, bs, xs
</clonepair3>
<clonepair4>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="506" endline="517" pcid="9682"></source>
    def process_input(self, inputs):
        h = inputs[0]
        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4
        return h, ws, bs, xs

</clonepair4>

<clonepair4>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_lstm.py" startline="141" endline="153" pcid="6581"></source>
    def process_inputs(self, inputs):
        h = inputs[0]
        c = inputs[1]
        xs = inputs[2: 2 + len(self.batches)]
        ws = []
        bs = []
        index = 2 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 8])
            bs.append(inputs[index + 8: index + 16])
            index += 16
        return h, c, ws, bs, xs
</clonepair4>
<clonepair5>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="506" endline="517" pcid="9682"></source>
    def process_input(self, inputs):
        h = inputs[0]
        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4
        return h, ws, bs, xs

</clonepair5>

<clonepair5>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_gru.py" startline="86" endline="99" pcid="6598"></source>
    def process_inputs(self, inputs):
        h = inputs[0]

        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 6])
            bs.append(inputs[index + 6: index + 12])
            index += 12

        return h, ws, bs, xs

</clonepair5>
<clonepair6>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="506" endline="517" pcid="9682"></source>
    def process_input(self, inputs):
        h = inputs[0]
        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4
        return h, ws, bs, xs

</clonepair6>

<clonepair6>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_gru.py" startline="86" endline="99" pcid="6598"></source>
    def process_inputs(self, inputs):
        h = inputs[0]

        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 6])
            bs.append(inputs[index + 6: index + 12])
            index += 12

        return h, ws, bs, xs

</clonepair6>
<clonepair7>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="506" endline="517" pcid="9682"></source>
    def process_input(self, inputs):
        h = inputs[0]
        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4
        return h, ws, bs, xs

</clonepair7>

<clonepair7>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_rnn.py" startline="99" endline="112" pcid="6630"></source>
    def process_inputs(self, inputs):
        h = inputs[0]

        xs = inputs[1: 1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4

        return h, ws, bs, xs

</clonepair7>
<clonepair8>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_rnn.py" startline="506" endline="517" pcid="9682"></source>
    def process_input(self, inputs):
        h = inputs[0]
        xs = inputs[1:1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4
        return h, ws, bs, xs

</clonepair8>

<clonepair8>
<source file="systems/chainer-7.8.0/tests/chainer_tests/functions_tests/rnn_tests/test_function_n_step_rnn.py" startline="99" endline="112" pcid="6630"></source>
    def process_inputs(self, inputs):
        h = inputs[0]

        xs = inputs[1: 1 + len(self.batches)]
        ws = []
        bs = []
        index = 1 + len(self.batches)
        for n in range(self.n_layers):
            ws.append(inputs[index: index + 2])
            bs.append(inputs[index + 2: index + 4])
            index += 4

        return h, ws, bs, xs

</clonepair8>
<clonepair9>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_binary.py" startline="591" endline="603" pcid="9634"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a ^ scalar
            else:
                return scalar ^ a
        else:
            if self.is_scalar_rhs:
                return xp.bitwise_xor(a, scalar)
            else:
                return xp.bitwise_xor(scalar, a)


</clonepair9>

<clonepair9>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_arithmetic.py" startline="719" endline="731" pcid="9708"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a * scalar
            else:
                return scalar * a
        else:
            if self.is_scalar_rhs:
                return xp.multiply(a, scalar)
            else:
                return xp.multiply(scalar, a)


</clonepair9>
<clonepair10>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_binary.py" startline="591" endline="603" pcid="9634"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a ^ scalar
            else:
                return scalar ^ a
        else:
            if self.is_scalar_rhs:
                return xp.bitwise_xor(a, scalar)
            else:
                return xp.bitwise_xor(scalar, a)


</clonepair10>

<clonepair10>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_arithmetic.py" startline="1626" endline="1638" pcid="9743"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a % scalar
            else:
                return scalar % a
        else:
            if self.is_scalar_rhs:
                return xp.remainder(a, scalar)
            else:
                return xp.remainder(scalar, a)


</clonepair10>
<clonepair11>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_binary.py" startline="591" endline="603" pcid="9634"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a ^ scalar
            else:
                return scalar ^ a
        else:
            if self.is_scalar_rhs:
                return xp.bitwise_xor(a, scalar)
            else:
                return xp.bitwise_xor(scalar, a)


</clonepair11>

<clonepair11>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_arithmetic.py" startline="1626" endline="1638" pcid="9743"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a % scalar
            else:
                return scalar % a
        else:
            if self.is_scalar_rhs:
                return xp.remainder(a, scalar)
            else:
                return xp.remainder(scalar, a)


</clonepair11>
<clonepair12>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_binary.py" startline="591" endline="603" pcid="9634"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a ^ scalar
            else:
                return scalar ^ a
        else:
            if self.is_scalar_rhs:
                return xp.bitwise_xor(a, scalar)
            else:
                return xp.bitwise_xor(scalar, a)


</clonepair12>

<clonepair12>
<source file="systems/chainer-7.8.0/tests/chainerx_tests/unit_tests/routines_tests/test_arithmetic.py" startline="1626" endline="1638" pcid="9743"></source>
    def func_scalar(self, xp, a, scalar):
        if self.is_module:
            if self.is_scalar_rhs:
                return a % scalar
            else:
                return scalar % a
        else:
            if self.is_scalar_rhs:
                return xp.remainder(a, scalar)
            else:
                return xp.remainder(scalar, a)


</clonepair12>
<clonepair13>
<source file="systems/chainer-7.8.0/tests/chainer_tests/link_hooks_tests/test_weight_standardization.py" startline="135" endline="146" pcid="8901"></source>
    def setUp(self):
        self.in_channels, self.out_channels = 3, 10
        in_channels = None if self.lazy_init else self.in_channels
        conv_init_args = {'ksize': 3, 'stride': 1, 'pad': 1}
        self.layer = self.link(
            in_channels, self.out_channels, **conv_init_args)
        self.x = numpy.random.normal(
            size=(5, self.in_channels, 4)).astype(numpy.float32)
        self.hook = WeightStandardization()
        self.out_size = self.out_channels  # For compatibility


</clonepair13>

<clonepair13>
<source file="systems/chainer-7.8.0/tests/chainer_tests/link_hooks_tests/test_spectral_normalization.py" startline="325" endline="336" pcid="8928"></source>
    def setUp(self):
        self.in_channels, self.out_channels = 3, 10
        in_channels = None if self.lazy_init else self.in_channels
        conv_init_args = {'ksize': 3, 'stride': 1, 'pad': 1}
        self.layer = self.link(
            in_channels, self.out_channels, **conv_init_args)
        self.x = numpy.random.normal(
            size=(5, self.in_channels, 4)).astype(numpy.float32)
        self.hook = SpectralNormalization(use_gamma=self.use_gamma)
        self.out_size = self.out_channels  # For compatibility


</clonepair13>
<clonepair14>
<source file="systems/chainer-7.8.0/tests/chainer_tests/link_hooks_tests/test_weight_standardization.py" startline="135" endline="146" pcid="8901"></source>
    def setUp(self):
        self.in_channels, self.out_channels = 3, 10
        in_channels = None if self.lazy_init else self.in_channels
        conv_init_args = {'ksize': 3, 'stride': 1, 'pad': 1}
        self.layer = self.link(
            in_channels, self.out_channels, **conv_init_args)
        self.x = numpy.random.normal(
            size=(5, self.in_channels, 4)).astype(numpy.float32)
        self.hook = WeightStandardization()
        self.out_size = self.out_channels  # For compatibility


</clonepair14>

<clonepair14>
<source file="systems/chainer-7.8.0/tests/chainer_tests/link_hooks_tests/test_spectral_normalization.py" startline="325" endline="336" pcid="8928"></source>
    def setUp(self):
        self.in_channels, self.out_channels = 3, 10
        in_channels = None if self.lazy_init else self.in_channels
        conv_init_args = {'ksize': 3, 'stride': 1, 'pad': 1}
        self.layer = self.link(
            in_channels, self.out_channels, **conv_init_args)
        self.x = numpy.random.normal(
            size=(5, self.in_channels, 4)).astype(numpy.float32)
        self.hook = SpectralNormalization(use_gamma=self.use_gamma)
        self.out_size = self.out_channels  # For compatibility


</clonepair14>
<clonepair15>
<source file="systems/chainer-7.8.0/tests/chainer_tests/link_hooks_tests/test_weight_standardization.py" startline="135" endline="146" pcid="8901"></source>
    def setUp(self):
        self.in_channels, self.out_channels = 3, 10
        in_channels = None if self.lazy_init else self.in_channels
        conv_init_args = {'ksize': 3, 'stride': 1, 'pad': 1}
        self.layer = self.link(
            in_channels, self.out_channels, **conv_init_args)
        self.x = numpy.random.normal(
            size=(5, self.in_channels, 4)).astype(numpy.float32)
        self.hook = WeightStandardization()
        self.out_size = self.out_channels  # For compatibility


</clonepair15>

<clonepair15>
<source file="systems/chainer-7.8.0/tests/chainer_tests/link_hooks_tests/test_spectral_normalization.py" startline="325" endline="336" pcid="8928"></source>
    def setUp(self):
        self.in_channels, self.out_channels = 3, 10
        in_channels = None if self.lazy_init else self.in_channels
        conv_init_args = {'ksize': 3, 'stride': 1, 'pad': 1}
        self.layer = self.link(
            in_channels, self.out_channels, **conv_init_args)
        self.x = numpy.random.normal(
            size=(5, self.in_channels, 4)).astype(numpy.float32)
        self.hook = SpectralNormalization(use_gamma=self.use_gamma)
        self.out_size = self.out_channels  # For compatibility


</clonepair15>
